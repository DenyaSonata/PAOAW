//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.83;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.83] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x4258d1=_0x30a3;(function(_0x3cd156,_0x3dc1ce){const _0xd1ce4c=_0x30a3,_0x1a8d42=_0x3cd156();while(!![]){try{const _0x2ad213=-parseInt(_0xd1ce4c(0xcb0))/(0x5*-0x427+-0x1ada+0x2f9e*0x1)+-parseInt(_0xd1ce4c(0x732))/(-0x1*-0xcfc+-0x1bd4+-0xeda*-0x1)+parseInt(_0xd1ce4c(0xf17))/(0x213*0x4+-0x95*0x31+0x143c)*(-parseInt(_0xd1ce4c(0x928))/(0x1*0xbfc+0x3*-0x763+0xa31))+-parseInt(_0xd1ce4c(0x797))/(0x1634+0xb*0x1f4+-0x2bab*0x1)*(parseInt(_0xd1ce4c(0x11b5))/(-0x1*0x1d82+-0x6f1*0x1+0x2479*0x1))+parseInt(_0xd1ce4c(0xcf2))/(-0x1f70*-0x1+-0x5d*0x26+-0x119b)*(-parseInt(_0xd1ce4c(0x9ae))/(-0x925*-0x4+0xb*0xb3+-0x2c3d))+-parseInt(_0xd1ce4c(0x144b))/(0x926+-0x15c4+0xca7)+parseInt(_0xd1ce4c(0x169b))/(-0x105*-0x7+-0x2*-0xa88+-0x1c29);if(_0x2ad213===_0x3dc1ce)break;else _0x1a8d42['push'](_0x1a8d42['shift']());}catch(_0xadd41e){_0x1a8d42['push'](_0x1a8d42['shift']());}}}(_0x498c,-0x897*-0x12d+0x6d77f+-0xadbe8));var label=_0x4258d1(0x337),tier=tier||-0x962*0x2+0x2*0xc5f+-0x5fa,dependencies=[],pluginData=$plugins[_0x4258d1(0x7de)](function(_0x3d008b){const _0x1e13b0=_0x4258d1,_0x632929={'OhUZJ':function(_0x4f2732,_0x166801){return _0x4f2732+_0x166801;}};return _0x3d008b[_0x1e13b0(0x138d)]&&_0x3d008b[_0x1e13b0(0xf0c)+'n'][_0x1e13b0(0x163f)](_0x632929['OhUZJ'](_0x632929[_0x1e13b0(0x7af)]('[',label),']'));})[-0x265*0xc+-0xac*0x1+0x1d68];VisuMZ[label]['Settings']=VisuMZ[label]['Settings']||{},VisuMZ['ConvertPar'+_0x4258d1(0xc0b)]=function(_0x38392d,_0x2ef1a2){const _0x41f329=_0x4258d1,_0xa1f515={'gYuad':function(_0x2fb373,_0x51c712){return _0x2fb373(_0x51c712);},'HsOGH':function(_0x56491f,_0x29bd2b){return _0x56491f(_0x29bd2b);},'UBRDO':_0x41f329(0x32b),'Lnglt':function(_0x5abc86,_0x22ea26){return _0x5abc86!==_0x22ea26;},'tcMqK':function(_0x6341f2,_0x144eec){return _0x6341f2(_0x144eec);},'NiRmW':'ARRAYNUM','aOHSR':function(_0x285c14,_0x42cab3){return _0x285c14!==_0x42cab3;},'AmPNn':_0x41f329(0x1254),'LlKGE':function(_0x4b34f4,_0x3fd295){return _0x4b34f4!==_0x3fd295;},'zysUE':_0x41f329(0xf9e),'Rpljv':_0x41f329(0x1536),'hJWla':function(_0x305411,_0x1e4439){return _0x305411!==_0x1e4439;},'JllmH':_0x41f329(0x8db),'nicWv':'FUNC','GrYyC':_0x41f329(0x8f0),'ADnpu':_0x41f329(0x324),'xTfeI':function(_0x3e5ae2,_0x5f31f0){return _0x3e5ae2!==_0x5f31f0;},'SZTwC':_0x41f329(0x1e9),'OnUQl':function(_0x95a368,_0x559e77){return _0x95a368(_0x559e77);},'JUggw':_0x41f329(0x1187),'GjUKX':function(_0x27324e,_0x2feddd){return _0x27324e!==_0x2feddd;},'pVSSl':'STRUCT','nMSJv':'ARRAYSTRUC'+'T'};for(const _0x5e8a7b in _0x2ef1a2){if(_0x5e8a7b[_0x41f329(0x79c)](/(.*):(.*)/i)){const _0x32cb48=_0xa1f515[_0x41f329(0xd48)](String,RegExp['$1']),_0x230124=_0xa1f515[_0x41f329(0xa39)](String,RegExp['$2'])['toUpperCas'+'e']()[_0x41f329(0xbb6)]();let _0x2537cf,_0x14a14e,_0x361001;switch(_0x230124){case _0xa1f515['UBRDO']:_0x2537cf=_0xa1f515['Lnglt'](_0x2ef1a2[_0x5e8a7b],'')?_0xa1f515[_0x41f329(0xf32)](Number,_0x2ef1a2[_0x5e8a7b]):-0x9ad+0xc96+-0x2e9;break;case _0xa1f515[_0x41f329(0xd8e)]:_0x14a14e=_0xa1f515[_0x41f329(0xa48)](_0x2ef1a2[_0x5e8a7b],'')?JSON['parse'](_0x2ef1a2[_0x5e8a7b]):[],_0x2537cf=_0x14a14e[_0x41f329(0x15f9)](_0x51fc3f=>Number(_0x51fc3f));break;case _0xa1f515[_0x41f329(0xca4)]:_0x2537cf=_0xa1f515[_0x41f329(0x86a)](_0x2ef1a2[_0x5e8a7b],'')?_0xa1f515[_0x41f329(0xa39)](eval,_0x2ef1a2[_0x5e8a7b]):null;break;case _0xa1f515[_0x41f329(0x9d5)]:_0x14a14e=_0xa1f515[_0x41f329(0x86a)](_0x2ef1a2[_0x5e8a7b],'')?JSON['parse'](_0x2ef1a2[_0x5e8a7b]):[],_0x2537cf=_0x14a14e['map'](_0x4cdfb3=>eval(_0x4cdfb3));break;case _0xa1f515[_0x41f329(0x54c)]:_0x2537cf=_0xa1f515[_0x41f329(0x1589)](_0x2ef1a2[_0x5e8a7b],'')?JSON['parse'](_0x2ef1a2[_0x5e8a7b]):'';break;case _0xa1f515[_0x41f329(0xff1)]:_0x14a14e=_0xa1f515[_0x41f329(0xa48)](_0x2ef1a2[_0x5e8a7b],'')?JSON['parse'](_0x2ef1a2[_0x5e8a7b]):[],_0x2537cf=_0x14a14e[_0x41f329(0x15f9)](_0x3de7b9=>JSON['parse'](_0x3de7b9));break;case _0xa1f515['nicWv']:_0x2537cf=_0xa1f515['hJWla'](_0x2ef1a2[_0x5e8a7b],'')?new Function(JSON[_0x41f329(0x5ae)](_0x2ef1a2[_0x5e8a7b])):new Function(_0xa1f515[_0x41f329(0xabd)]);break;case _0xa1f515[_0x41f329(0x1492)]:_0x14a14e=_0xa1f515[_0x41f329(0x8b2)](_0x2ef1a2[_0x5e8a7b],'')?JSON[_0x41f329(0x5ae)](_0x2ef1a2[_0x5e8a7b]):[],_0x2537cf=_0x14a14e['map'](_0x259671=>new Function(JSON[_0x41f329(0x5ae)](_0x259671)));break;case _0xa1f515[_0x41f329(0x482)]:_0x2537cf=_0xa1f515[_0x41f329(0x1589)](_0x2ef1a2[_0x5e8a7b],'')?_0xa1f515[_0x41f329(0xf4d)](String,_0x2ef1a2[_0x5e8a7b]):'';break;case _0xa1f515['JUggw']:_0x14a14e=_0xa1f515['GjUKX'](_0x2ef1a2[_0x5e8a7b],'')?JSON[_0x41f329(0x5ae)](_0x2ef1a2[_0x5e8a7b]):[],_0x2537cf=_0x14a14e[_0x41f329(0x15f9)](_0x19d619=>String(_0x19d619));break;case _0xa1f515[_0x41f329(0xb4f)]:_0x361001=_0xa1f515[_0x41f329(0x86a)](_0x2ef1a2[_0x5e8a7b],'')?JSON[_0x41f329(0x5ae)](_0x2ef1a2[_0x5e8a7b]):{},_0x38392d[_0x32cb48]={},VisuMZ[_0x41f329(0xd5c)+_0x41f329(0xc0b)](_0x38392d[_0x32cb48],_0x361001);continue;case _0xa1f515[_0x41f329(0xb21)]:_0x14a14e=_0xa1f515[_0x41f329(0xb50)](_0x2ef1a2[_0x5e8a7b],'')?JSON[_0x41f329(0x5ae)](_0x2ef1a2[_0x5e8a7b]):[],_0x2537cf=_0x14a14e['map'](_0x34937a=>VisuMZ['ConvertPar'+_0x41f329(0xc0b)]({},JSON[_0x41f329(0x5ae)](_0x34937a)));break;default:continue;}_0x38392d[_0x32cb48]=_0x2537cf;}}return _0x38392d;},(_0x191424=>{const _0x1e5a8d=_0x4258d1,_0x175ff7={'MKjUg':function(_0x5005bc,_0x351787){return _0x5005bc(_0x351787);},'IlkPA':_0x1e5a8d(0xb29)+_0x1e5a8d(0x8f8)+_0x1e5a8d(0xc9c)+_0x1e5a8d(0x39b)+_0x1e5a8d(0xa86)+_0x1e5a8d(0x9aa)+'Plugin\x20Man'+_0x1e5a8d(0x10ee),'kitYH':function(_0xd8625e,_0x346d49){return _0xd8625e!==_0x346d49;},'KAlzE':'%1\x27s\x20versi'+_0x1e5a8d(0x5cb)+'t\x20match\x20pl'+_0x1e5a8d(0xa4a)+'ease\x20updat'+'e\x20it\x20in\x20th'+'e\x20Plugin\x20M'+_0x1e5a8d(0x1041),'JNzve':function(_0x3339ba,_0x20d397){return _0x3339ba(_0x20d397);},'weyat':function(_0x40187e,_0x27c380){return _0x40187e<_0x27c380;},'OkQNE':_0x1e5a8d(0xb68)+'rrectly\x20pl'+_0x1e5a8d(0x4a0)+_0x1e5a8d(0xbfd)+_0x1e5a8d(0xbf4)+_0x1e5a8d(0xdbb)+_0x1e5a8d(0x1496)+_0x1e5a8d(0x15d8)+'other\x20Tier'+'\x20%3\x20plugin'+_0x1e5a8d(0x1360)+_0x1e5a8d(0x34f)+_0x1e5a8d(0xbfd)+_0x1e5a8d(0x1232)+_0x1e5a8d(0xf06)+'\x20largest\x20t'+_0x1e5a8d(0x1552)+'s.'},_0x831c6e=_0x191424['name'];for(const _0x3db52e of dependencies){if(!Imported[_0x3db52e]){_0x175ff7['MKjUg'](alert,_0x175ff7['IlkPA'][_0x1e5a8d(0xf22)](_0x831c6e,_0x3db52e)),SceneManager[_0x1e5a8d(0xfb6)]();break;}}const _0x2f8b9e=_0x191424[_0x1e5a8d(0xf0c)+'n'];if(_0x2f8b9e[_0x1e5a8d(0x79c)](/\[Version[ ](.*?)\]/i)){const _0x13bf56=_0x175ff7[_0x1e5a8d(0x1343)](Number,RegExp['$1']);_0x175ff7[_0x1e5a8d(0x943)](_0x13bf56,VisuMZ[label][_0x1e5a8d(0x389)])&&(_0x175ff7['MKjUg'](alert,_0x175ff7['KAlzE']['format'](_0x831c6e,_0x13bf56)),SceneManager[_0x1e5a8d(0xfb6)]());}if(_0x2f8b9e[_0x1e5a8d(0x79c)](/\[Tier[ ](\d+)\]/i)){const _0x215c61=_0x175ff7[_0x1e5a8d(0xacd)](Number,RegExp['$1']);_0x175ff7[_0x1e5a8d(0xd5a)](_0x215c61,tier)?(_0x175ff7[_0x1e5a8d(0xacd)](alert,_0x175ff7[_0x1e5a8d(0x15c0)][_0x1e5a8d(0xf22)](_0x831c6e,_0x215c61,tier)),SceneManager[_0x1e5a8d(0xfb6)]()):tier=Math[_0x1e5a8d(0x503)](_0x215c61,tier);}VisuMZ[_0x1e5a8d(0xd5c)+_0x1e5a8d(0xc0b)](VisuMZ[label][_0x1e5a8d(0x424)],_0x191424[_0x1e5a8d(0x1267)]);})(pluginData),VisuMZ[_0x4258d1(0x8ec)+_0x4258d1(0xad7)+_0x4258d1(0xb00)]=function(_0x13a03d){const _0x525b14=_0x4258d1;let _0x4f8d52=[];for(const _0x28bbaa of _0x13a03d){_0x4f8d52=_0x4f8d52[_0x525b14(0x121f)](VisuMZ['ConvertAct'+_0x525b14(0x28f)+_0x525b14(0x1432)](_0x28bbaa));}return _0x4f8d52[_0x525b14(0x7de)](_0x3cdafc=>_0x3cdafc);},VisuMZ[_0x4258d1(0xe26)+_0x4258d1(0x28f)+'eTarget']=function(_0x508a1d){const _0x5bdd18=_0x4258d1,_0x591155={'KVERT':function(_0x790067,_0x2ebc67){return _0x790067===_0x2ebc67;},'tYfuy':_0x5bdd18(0x165c),'TZuKD':_0x5bdd18(0x4ea)+_0x5bdd18(0x3a3),'nzywx':_0x5bdd18(0x13dd)+'t','XXuXZ':function(_0x24dd68,_0x2fb5be){return _0x24dd68>=_0x2fb5be;},'YFcZB':function(_0x5b99a3,_0x54c2df){return _0x5b99a3-_0x54c2df;},'uVPaN':_0x5bdd18(0x106c)+'t','yDHEs':function(_0x4681a9,_0x229fc8){return _0x4681a9+_0x229fc8;},'QqXXi':function(_0x3a7a96,_0x1e43de){return _0x3a7a96===_0x1e43de;},'MHWFq':'all\x20target'+'s','LCJmi':function(_0x16871c,_0x273dae){return _0x16871c===_0x273dae;},'hEQel':_0x5bdd18(0xdde),'xUChk':_0x5bdd18(0xab1),'ICzdA':'special','czsSM':function(_0x3b10a0,_0x396016){return _0x3b10a0(_0x396016);},'rvevq':function(_0x400f46,_0x4cdb4e){return _0x400f46===_0x4cdb4e;},'WbetP':'alive\x20frie'+_0x5bdd18(0xe76),'FafRQ':_0x5bdd18(0xe0b)+_0x5bdd18(0x765)+'er','RYWKZ':function(_0x11946d,_0x3e7249){return _0x11946d===_0x3e7249;},'eSkth':_0x5bdd18(0xe0b)+_0x5bdd18(0x734)+_0x5bdd18(0x3a3),'stQsd':_0x5bdd18(0xc73)+'ds','Phabh':function(_0x5b1529,_0x1ba25f){return _0x5b1529===_0x1ba25f;},'xdUUZ':_0x5bdd18(0x44b)+_0x5bdd18(0xe40),'gqjiB':_0x5bdd18(0x44b)+_0x5bdd18(0x271)+_0x5bdd18(0x15a6),'VaMfv':_0x5bdd18(0x167d)+_0x5bdd18(0xe18),'SuBlq':_0x5bdd18(0x12f7)+'rs','IcbDI':function(_0x4851a1,_0x1b3578){return _0x4851a1===_0x1b3578;},'yjagt':_0x5bdd18(0x12f7)+'rs\x20not\x20use'+'r','jnyQM':_0x5bdd18(0x12f7)+_0x5bdd18(0x2c7)+'get','Bxzpu':_0x5bdd18(0x754)+'s','jCHkZ':function(_0x2bf874,_0x76fd80){return _0x2bf874(_0x76fd80);},'VolAS':function(_0x35a405,_0x45221a){return _0x35a405(_0x45221a);},'BTQDr':function(_0x3b2205,_0x35d108){return _0x3b2205===_0x35d108;},'BIhRp':_0x5bdd18(0x1672)+_0x5bdd18(0x3b1),'dNxTz':function(_0x1fb917,_0x33a7ca){return _0x1fb917===_0x33a7ca;},'ZZYpN':_0x5bdd18(0x1672)+'ies\x20not\x20us'+'er','fWIKM':_0x5bdd18(0x1672)+_0x5bdd18(0xba7)+_0x5bdd18(0x3a3),'nkFGH':_0x5bdd18(0x68d)+'es','kpITe':function(_0x429963,_0x100d3b){return _0x429963(_0x100d3b);},'ypKib':function(_0x149f6b,_0x38a15f){return _0x149f6b(_0x38a15f);},'koBWA':_0x5bdd18(0xa44)+'lers','sufev':function(_0x7e0005,_0x527714){return _0x7e0005===_0x527714;},'eJrlw':'alive\x20batt'+_0x5bdd18(0x115e)+_0x5bdd18(0x167f),'FkRWY':'alive\x20batt'+_0x5bdd18(0x1477)+_0x5bdd18(0x49d),'vPvaW':_0x5bdd18(0x1305)+_0x5bdd18(0x1514)},_0x641852=BattleManager[_0x5bdd18(0xd9f)+_0x5bdd18(0xf63)]()[_0x5bdd18(0x7de)](_0x408979=>_0x408979&&_0x408979[_0x5bdd18(0x12d0)]()),_0x3e2728=BattleManager[_0x5bdd18(0xa47)],_0x3cb6cb=BattleManager['_target'],_0x491a60=BattleManager[_0x5bdd18(0x1e3)+'s']?BattleManager[_0x5bdd18(0x1e3)+'s'][_0x5bdd18(0xb58)](0x1e7*-0x1+-0x81c+-0xb*-0xe9):_0x641852;_0x508a1d=_0x508a1d['toLowerCas'+'e']()['trim']();if(_0x591155[_0x5bdd18(0xe37)](_0x508a1d,_0x591155[_0x5bdd18(0x746)]))return[_0x3e2728];else{if(_0x591155[_0x5bdd18(0xe37)](_0x508a1d,_0x591155[_0x5bdd18(0x2a7)]))return[_0x3cb6cb];else{if(_0x591155['KVERT'](_0x508a1d,_0x591155[_0x5bdd18(0xc28)])){if(_0x3cb6cb){const _0x353940=_0x491a60[_0x5bdd18(0xfd7)](_0x3cb6cb);return _0x591155['XXuXZ'](_0x353940,-0x2*0x1eb+-0x13*0x2+0x6*0xaa)?[_0x491a60[_0x591155[_0x5bdd18(0xdb7)](_0x353940,0x1a18+0x97c+-0x2393)]||_0x3cb6cb]:[_0x3cb6cb];}}else{if(_0x591155[_0x5bdd18(0xe37)](_0x508a1d,_0x591155[_0x5bdd18(0xcbd)])){if(_0x3cb6cb){const _0x128e59=_0x491a60[_0x5bdd18(0xfd7)](_0x3cb6cb);return _0x591155['XXuXZ'](_0x128e59,-0x576+-0x9da+0xf50)?[_0x491a60[_0x591155['yDHEs'](_0x128e59,0x1*0xa7b+-0x1752+-0x336*-0x4)]||_0x3cb6cb]:[_0x3cb6cb];}}else{if(_0x591155['QqXXi'](_0x508a1d,_0x591155[_0x5bdd18(0xa28)]))return _0x491a60;else{if(_0x591155[_0x5bdd18(0x1020)](_0x508a1d,_0x591155[_0x5bdd18(0x67a)]))return[_0x3e2728][_0x5bdd18(0x121f)](_0x491a60);else{if(_0x591155[_0x5bdd18(0x1020)](_0x508a1d,_0x591155[_0x5bdd18(0x706)]))return _0x641852[_0x5bdd18(0x7de)](_0x5913fd=>_0x5913fd!==_0x3e2728&&!_0x491a60[_0x5bdd18(0x163f)](_0x5913fd)&&_0x5913fd[_0x5bdd18(0x14f6)+_0x5bdd18(0x11ba)]());else{if(_0x591155['LCJmi'](_0x508a1d,_0x591155[_0x5bdd18(0x4ad)]))return[VisuMZ[_0x5bdd18(0x488)+_0x5bdd18(0x167a)+_0x5bdd18(0x745)]()];else{if(_0x508a1d['match'](/SPECIAL (.*)>/i)){const _0x3babf0=_0x591155[_0x5bdd18(0x9db)](String,RegExp['$1'])[_0x5bdd18(0xba9)](',')[_0x5bdd18(0x15f9)](_0x4c74c8=>_0x4c74c8['trim']());return[VisuMZ[_0x5bdd18(0x488)+'equenceSpe'+_0x5bdd18(0x745)+'WithFlags'](_0x3babf0)];}}}}}}}}}if(_0x3e2728){if(_0x591155[_0x5bdd18(0xa2c)](_0x508a1d,_0x591155['WbetP']))return _0x3e2728[_0x5bdd18(0xf99)+'t']()[_0x5bdd18(0xe7e)+'rs']();else{if(_0x591155[_0x5bdd18(0xe37)](_0x508a1d,_0x591155[_0x5bdd18(0x78c)]))return _0x3e2728['friendsUni'+'t']()[_0x5bdd18(0xe7e)+'rs']()[_0x5bdd18(0x7de)](_0x19b72d=>_0x19b72d!==_0x3e2728);else{if(_0x591155['RYWKZ'](_0x508a1d,_0x591155[_0x5bdd18(0x110a)]))return _0x3e2728[_0x5bdd18(0xf99)+'t']()[_0x5bdd18(0xe7e)+'rs']()[_0x5bdd18(0x7de)](_0x2ab26b=>_0x2ab26b!==_0x3cb6cb);else{if(_0x591155[_0x5bdd18(0xa2c)](_0x508a1d,_0x591155[_0x5bdd18(0x1368)]))return _0x3e2728[_0x5bdd18(0xf99)+'t']()[_0x5bdd18(0x1160)+'s']();else{if(_0x508a1d[_0x5bdd18(0x79c)](/FRIEND INDEX (\d+)/i)){const _0x171662=_0x591155['czsSM'](Number,RegExp['$1']);return[_0x3e2728[_0x5bdd18(0xf99)+'t']()[_0x5bdd18(0xdb2)]()[_0x171662]];}}}}}if(_0x591155[_0x5bdd18(0x1669)](_0x508a1d,_0x591155[_0x5bdd18(0x8bc)]))return _0x3e2728[_0x5bdd18(0xe85)+'nit']()[_0x5bdd18(0xe7e)+'rs']();else{if(_0x591155[_0x5bdd18(0xa2c)](_0x508a1d,_0x591155[_0x5bdd18(0x86b)]))return _0x3e2728[_0x5bdd18(0xe85)+_0x5bdd18(0x3c8)]()[_0x5bdd18(0xe7e)+'rs']()[_0x5bdd18(0x7de)](_0x56abf8=>_0x56abf8!==_0x3cb6cb);else{if(_0x591155[_0x5bdd18(0xa2c)](_0x508a1d,_0x591155['VaMfv']))return _0x3e2728[_0x5bdd18(0xe85)+'nit']()[_0x5bdd18(0x1160)+'s']();else{if(_0x508a1d[_0x5bdd18(0x79c)](/OPPONENT INDEX (\d+)/i)){const _0x4577e6=_0x591155['czsSM'](Number,RegExp['$1']);return[_0x3e2728['opponentsU'+_0x5bdd18(0x3c8)]()[_0x5bdd18(0xdb2)]()[_0x4577e6]];}}}}}if(_0x591155['KVERT'](_0x508a1d,_0x591155['SuBlq']))return $gameParty[_0x5bdd18(0xe7e)+'rs']();else{if(_0x591155[_0x5bdd18(0x6f4)](_0x508a1d,_0x591155[_0x5bdd18(0x160b)]))return $gameParty[_0x5bdd18(0xe7e)+'rs']()[_0x5bdd18(0x7de)](_0x3b8795=>_0x3b8795!==_0x3e2728);else{if(_0x591155['Phabh'](_0x508a1d,_0x591155['jnyQM']))return $gameParty['aliveMembe'+'rs']()[_0x5bdd18(0x7de)](_0x363eb7=>_0x363eb7!==_0x3cb6cb);else{if(_0x591155[_0x5bdd18(0x1020)](_0x508a1d,_0x591155['Bxzpu']))return $gameParty[_0x5bdd18(0x1160)+'s']();else{if(_0x508a1d[_0x5bdd18(0x79c)](/ACTOR INDEX (\d+)/i)){const _0x122a3e=_0x591155[_0x5bdd18(0xbde)](Number,RegExp['$1']);return[$gameParty[_0x5bdd18(0xdb2)]()[_0x122a3e]];}else{if(_0x508a1d[_0x5bdd18(0x79c)](/ACTOR ID (\d+)/i)){const _0x4e1f30=_0x591155[_0x5bdd18(0x1375)](Number,RegExp['$1']);return[$gameActors[_0x5bdd18(0xd12)](_0x4e1f30)];}}}}}}if(_0x591155['BTQDr'](_0x508a1d,_0x591155['BIhRp']))return $gameTroop['aliveMembe'+'rs']();else{if(_0x591155[_0x5bdd18(0x1037)](_0x508a1d,_0x591155[_0x5bdd18(0x6b1)]))return $gameTroop[_0x5bdd18(0xe7e)+'rs']()[_0x5bdd18(0x7de)](_0x49ef1a=>_0x49ef1a!==_0x3e2728);else{if(_0x591155[_0x5bdd18(0xe37)](_0x508a1d,_0x591155[_0x5bdd18(0x15b7)]))return $gameTroop[_0x5bdd18(0xe7e)+'rs']()[_0x5bdd18(0x7de)](_0x1be5f5=>_0x1be5f5!==_0x3cb6cb);else{if(_0x591155[_0x5bdd18(0x6f4)](_0x508a1d,_0x591155[_0x5bdd18(0x1558)]))return $gameTroop[_0x5bdd18(0x1160)+'s']();else{if(_0x508a1d['match'](/ENEMY INDEX (\d+)/i)){const _0x8e4cd8=_0x591155['kpITe'](Number,RegExp['$1']);return[$gameTroop[_0x5bdd18(0xdb2)]()[_0x8e4cd8]];}else{if(_0x508a1d[_0x5bdd18(0x79c)](/ENEMY ID (\d+)/i)){const _0x24eb44=_0x591155[_0x5bdd18(0x23f)](Number,RegExp['$1']);return $gameTroop[_0x5bdd18(0xe7e)+'rs']()[_0x5bdd18(0x7de)](_0x46b286=>_0x46b286[_0x5bdd18(0x990)]()===_0x24eb44);}}}}}}if(_0x591155[_0x5bdd18(0x1037)](_0x508a1d,_0x591155[_0x5bdd18(0x24a)]))return _0x641852[_0x5bdd18(0x7de)](_0x52e36d=>_0x52e36d[_0x5bdd18(0x266)]());else{if(_0x591155[_0x5bdd18(0x8b0)](_0x508a1d,_0x591155[_0x5bdd18(0xb89)]))return _0x641852[_0x5bdd18(0x7de)](_0x436d17=>_0x436d17[_0x5bdd18(0x266)]()&&_0x436d17!==_0x3e2728);else{if(_0x591155[_0x5bdd18(0x1669)](_0x508a1d,_0x591155[_0x5bdd18(0x11c4)]))return _0x641852[_0x5bdd18(0x7de)](_0x577eae=>_0x577eae[_0x5bdd18(0x266)]()&&_0x577eae!==_0x3cb6cb);else{if(_0x591155[_0x5bdd18(0xe37)](_0x508a1d,_0x591155[_0x5bdd18(0x16c0)]))return _0x641852[_0x5bdd18(0x7de)](_0x2f42a6=>_0x2f42a6[_0x5bdd18(0xfce)]());}}}return[];},VisuMZ[_0x4258d1(0x488)+_0x4258d1(0x167a)+_0x4258d1(0x745)]=function(){return BattleManager['_target'];},VisuMZ['GetActionS'+_0x4258d1(0x167a)+_0x4258d1(0x745)+'WithFlags']=function(_0x59c550){return BattleManager['_target'];},PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x476)+_0x4258d1(0x417)+'on',_0x5e43e7=>{const _0x3286d6=_0x4258d1,_0x47e682={'RmtGS':function(_0xc45adc,_0x5eb7d0){return _0xc45adc||_0x5eb7d0;},'rUYIB':'applyImmor'+_0x3286d6(0x4e4),'gpiNh':_0x3286d6(0xe11)+_0x3286d6(0xb4d),'BuDNU':_0x3286d6(0x1328)+'ement','sjELV':_0x3286d6(0x73c)+_0x3286d6(0x12ad),'lrgVj':_0x3286d6(0x1480)+_0x3286d6(0x741),'QXrLY':_0x3286d6(0xc11)};if(!SceneManager[_0x3286d6(0x614)+'tle']())return;VisuMZ[_0x3286d6(0xd5c)+_0x3286d6(0xc0b)](_0x5e43e7,_0x5e43e7);const _0x4e4257=$gameTemp[_0x3286d6(0xb0b)+_0x3286d6(0xf36)+'Interprete'+'r'](),_0x48f237=BattleManager[_0x3286d6(0x15a2)],_0x57b236=BattleManager[_0x3286d6(0xa47)],_0x582a81=BattleManager[_0x3286d6(0x1e3)+'s']?BattleManager[_0x3286d6(0x1e3)+'s'][_0x3286d6(0xb58)](0x256b*0x1+0x1*0xd95+-0x3300):[],_0x287ca9=BattleManager['_logWindow'];if(_0x47e682[_0x3286d6(0xe7f)](!_0x4e4257,!_0x48f237)||!_0x57b236)return;if(!_0x48f237[_0x3286d6(0x780)]())return;if(_0x5e43e7[_0x3286d6(0x611)+'ion'])_0x287ca9[_0x3286d6(0xd27)+_0x3286d6(0x1485)](_0x57b236,_0x48f237[_0x3286d6(0x780)]());_0x5e43e7['ApplyImmor'+_0x3286d6(0x4e4)]&&_0x287ca9[_0x3286d6(0x88f)](_0x47e682[_0x3286d6(0x141e)],_0x57b236,_0x582a81,!![]);if(_0x5e43e7[_0x3286d6(0x839)+'t'])_0x287ca9[_0x3286d6(0x88f)](_0x47e682[_0x3286d6(0x162a)],_0x57b236,_0x48f237);if(_0x5e43e7['WaitForMov'+'ement'])_0x287ca9[_0x3286d6(0x88f)](_0x47e682[_0x3286d6(0x809)]);if(_0x5e43e7[_0x3286d6(0x463)+_0x3286d6(0x1485)])_0x287ca9[_0x3286d6(0x88f)](_0x47e682[_0x3286d6(0x137d)],_0x57b236,_0x48f237);if(_0x5e43e7[_0x3286d6(0x1058)+_0x3286d6(0x741)])_0x287ca9[_0x3286d6(0x88f)](_0x47e682['lrgVj']);_0x4e4257[_0x3286d6(0xf48)+'e'](_0x47e682[_0x3286d6(0x4db)]);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x476)+_0x4258d1(0x11fe)+'onSet',_0x33da5a=>{const _0x3b8afb=_0x4258d1,_0x2f528e={'wqHcg':function(_0x2df164,_0x403293){return _0x2df164||_0x403293;},'leszU':function(_0x48ff61,_0x4a7d5b){return _0x48ff61<_0x4a7d5b;},'ORhwl':'setActiveW'+_0x3b8afb(0xc58),'bhlwt':_0x3b8afb(0xe11)+_0x3b8afb(0x1485),'XCttC':function(_0x2927e6,_0x2b4481){return _0x2927e6>_0x2b4481;},'SEowX':_0x3b8afb(0x1634),'PLZCq':'showAnimat'+'ion','iaTre':_0x3b8afb(0x1480)+_0x3b8afb(0x741),'vuHFT':_0x3b8afb(0xaf6)+'ct','MxTyW':'clearActiv'+_0x3b8afb(0x5ad),'fCtVT':'applyImmor'+_0x3b8afb(0x4e4),'ldwDU':_0x3b8afb(0xc11)};if(!SceneManager['isSceneBat'+_0x3b8afb(0x6e5)]())return;VisuMZ[_0x3b8afb(0xd5c)+_0x3b8afb(0xc0b)](_0x33da5a,_0x33da5a);const _0x2929cc=$gameTemp[_0x3b8afb(0xb0b)+'ginCommand'+_0x3b8afb(0x1456)+'r'](),_0x134fe5=BattleManager[_0x3b8afb(0x15a2)],_0x49d267=BattleManager['_subject'],_0x2c95e3=BattleManager[_0x3b8afb(0x1e3)+'s']?BattleManager[_0x3b8afb(0x1e3)+'s'][_0x3b8afb(0xb58)](0x1bb*-0x5+-0x2303*-0x1+0xf1*-0x1c):[],_0x4888aa=BattleManager['_logWindow'],_0x28f52b=_0x33da5a[_0x3b8afb(0x167b)]??![];if(_0x2f528e['wqHcg'](!_0x2929cc,!_0x134fe5)||!_0x49d267)return;if(!_0x134fe5[_0x3b8afb(0x780)]())return;let _0x1ab93f=_0x28f52b?_0x4888aa[_0x3b8afb(0x150a)+_0x3b8afb(0x92b)](_0x49d267):0x2*0xe21+0x11*0x22f+-0x4160;for(let _0x22fc20=-0x19b2+0x551+0x1461*0x1;_0x2f528e[_0x3b8afb(0xcc9)](_0x22fc20,_0x1ab93f);_0x22fc20++){_0x28f52b&&_0x49d267[_0x3b8afb(0x1580)]()&&_0x4888aa['push'](_0x2f528e[_0x3b8afb(0x12d6)],_0x49d267,_0x22fc20);if(_0x33da5a[_0x3b8afb(0xbd4)+_0x3b8afb(0x1485)])_0x4888aa[_0x3b8afb(0x88f)](_0x2f528e['bhlwt'],_0x49d267,_0x134fe5);if(_0x2f528e['XCttC'](_0x33da5a[_0x3b8afb(0x758)],-0x1*0x4f4+-0x1283+0x1777))_0x4888aa['push'](_0x2f528e[_0x3b8afb(0xefb)],_0x33da5a['WaitCount']);if(_0x33da5a[_0x3b8afb(0x15d2)+_0x3b8afb(0xf2b)])_0x4888aa[_0x3b8afb(0x88f)](_0x2f528e[_0x3b8afb(0xe00)],_0x49d267,_0x2c95e3,_0x134fe5[_0x3b8afb(0x780)]()['animationI'+'d']);if(_0x33da5a[_0x3b8afb(0x1058)+_0x3b8afb(0x741)])_0x4888aa[_0x3b8afb(0x88f)](_0x2f528e[_0x3b8afb(0xc87)]);for(const _0x4df7a4 of _0x2c95e3){if(!_0x4df7a4)continue;if(_0x33da5a[_0x3b8afb(0x72c)+'ct'])_0x4888aa[_0x3b8afb(0x88f)](_0x2f528e['vuHFT'],_0x49d267,_0x4df7a4);}}_0x28f52b&&_0x49d267[_0x3b8afb(0x1580)]()&&_0x4888aa[_0x3b8afb(0x88f)](_0x2f528e[_0x3b8afb(0x881)],_0x49d267);if(_0x33da5a[_0x3b8afb(0x873)+_0x3b8afb(0x4e4)])_0x4888aa[_0x3b8afb(0x88f)](_0x2f528e[_0x3b8afb(0x1117)],_0x49d267,_0x2c95e3,![]);_0x2929cc[_0x3b8afb(0xf48)+'e'](_0x2f528e[_0x3b8afb(0x628)]);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x476)+'_TargetAct'+'ionSet',_0x19865f=>{const _0x23f3e9=_0x4258d1,_0x376958={'JxHTh':function(_0x3d942d,_0x35cacc){return _0x3d942d||_0x35cacc;},'FwHBe':function(_0x398af8,_0x5af01c){return _0x398af8<_0x5af01c;},'VQoFs':_0x23f3e9(0xe78)+'eaponSet','ynTmA':'performAct'+'ion','XJazV':function(_0x690d00,_0x325f72){return _0x690d00>_0x325f72;},'IxcAU':_0x23f3e9(0x1634),'uPHtg':_0x23f3e9(0x46c)+_0x23f3e9(0x1485),'iTsxW':function(_0x3522e6,_0x935318){return _0x3522e6>_0x935318;},'CcjqL':_0x23f3e9(0xaf6)+'ct','HbnUg':'clearActiv'+_0x23f3e9(0x5ad),'nzvVn':_0x23f3e9(0xb45)+_0x23f3e9(0x4e4),'dMKAh':_0x23f3e9(0xc11)};if(!SceneManager[_0x23f3e9(0x614)+'tle']())return;VisuMZ[_0x23f3e9(0xd5c)+_0x23f3e9(0xc0b)](_0x19865f,_0x19865f);const _0x158e92=$gameTemp[_0x23f3e9(0xb0b)+_0x23f3e9(0xf36)+_0x23f3e9(0x1456)+'r'](),_0x1a2f23=BattleManager[_0x23f3e9(0x15a2)],_0x571ef8=BattleManager[_0x23f3e9(0xa47)],_0x231a5f=BattleManager['_allTarget'+'s']?BattleManager[_0x23f3e9(0x1e3)+'s'][_0x23f3e9(0xb58)](0x2d7+-0x1241*0x1+0xf6a):[],_0x498fe5=BattleManager['_logWindow'],_0x1f388c=_0x19865f['DualWield']??![];if(_0x376958[_0x23f3e9(0x10e3)](!_0x158e92,!_0x1a2f23)||!_0x571ef8)return;if(!_0x1a2f23[_0x23f3e9(0x780)]())return;let _0x2e0fd9=_0x1f388c?_0x498fe5[_0x23f3e9(0x150a)+_0x23f3e9(0x92b)](_0x571ef8):0x1*0xe19+-0x1ccc+0xeb4;for(let _0x4766a2=0x9*0x25a+0x2216+-0x1ba*0x20;_0x376958[_0x23f3e9(0x383)](_0x4766a2,_0x2e0fd9);_0x4766a2++){for(const _0x59154e of _0x231a5f){if(!_0x59154e)continue;_0x1f388c&&_0x571ef8[_0x23f3e9(0x1580)]()&&_0x498fe5[_0x23f3e9(0x88f)](_0x376958[_0x23f3e9(0x24f)],_0x571ef8,_0x4766a2);if(_0x19865f[_0x23f3e9(0xbd4)+'ion'])_0x498fe5[_0x23f3e9(0x88f)](_0x376958[_0x23f3e9(0x52f)],_0x571ef8,_0x1a2f23);if(_0x376958[_0x23f3e9(0x597)](_0x19865f[_0x23f3e9(0x590)],-0x160c+0x2e*-0x3a+-0x2078*-0x1))_0x498fe5['push'](_0x376958[_0x23f3e9(0x411)],_0x19865f['WaitCount1']);if(_0x19865f[_0x23f3e9(0x15d2)+'ation'])_0x498fe5[_0x23f3e9(0x88f)](_0x376958[_0x23f3e9(0xb51)],_0x571ef8,[_0x59154e],_0x1a2f23[_0x23f3e9(0x780)]()[_0x23f3e9(0x12b1)+'d']);if(_0x376958[_0x23f3e9(0x91f)](_0x19865f['WaitCount2'],-0x193a+0x6*-0x3fa+0x3116))_0x498fe5['push'](_0x376958[_0x23f3e9(0x411)],_0x19865f['WaitCount2']);if(_0x19865f[_0x23f3e9(0x72c)+'ct'])_0x498fe5[_0x23f3e9(0x88f)](_0x376958['CcjqL'],_0x571ef8,_0x59154e);}}_0x1f388c&&_0x571ef8[_0x23f3e9(0x1580)]()&&_0x498fe5[_0x23f3e9(0x88f)](_0x376958[_0x23f3e9(0x1482)],_0x571ef8);if(_0x19865f[_0x23f3e9(0x873)+'tal'])_0x498fe5[_0x23f3e9(0x88f)](_0x376958[_0x23f3e9(0x10c2)],_0x571ef8,_0x231a5f,![]);_0x158e92[_0x23f3e9(0xf48)+'e'](_0x376958['dMKAh']);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x476)+_0x4258d1(0x22e)+_0x4258d1(0x1485),_0x40fd4d=>{const _0x36a836=_0x4258d1,_0x4eb4e6={'IxAjV':function(_0x457ebf,_0x381d90){return _0x457ebf||_0x381d90;},'uNLNt':'applyImmor'+_0x36a836(0x4e4),'IfvDS':_0x36a836(0x147d)+_0x36a836(0xd42),'bLHaM':_0x36a836(0x1387)+'ect','hiJpM':_0x36a836(0x11c1),'SoGtM':_0x36a836(0xe11)+_0x36a836(0xb12),'wmxvu':_0x36a836(0x1328)+_0x36a836(0xe17),'yZnrH':_0x36a836(0xc11)};if(!SceneManager[_0x36a836(0x614)+_0x36a836(0x6e5)]())return;VisuMZ[_0x36a836(0xd5c)+_0x36a836(0xc0b)](_0x40fd4d,_0x40fd4d);const _0x111895=$gameTemp[_0x36a836(0xb0b)+_0x36a836(0xf36)+_0x36a836(0x1456)+'r'](),_0x104c40=BattleManager['_action'],_0x46f93a=BattleManager[_0x36a836(0xa47)],_0xd53af1=BattleManager['_allTarget'+'s']?BattleManager[_0x36a836(0x1e3)+'s']['slice'](0x80a*-0x1+0x1*0x1a56+0x124c*-0x1):[],_0x2660cc=BattleManager[_0x36a836(0x579)];if(_0x4eb4e6[_0x36a836(0x1415)](!_0x111895,!_0x104c40)||!_0x46f93a)return;if(!_0x104c40[_0x36a836(0x780)]())return;if(_0x40fd4d[_0x36a836(0x873)+'tal'])_0x2660cc[_0x36a836(0x88f)](_0x4eb4e6['uNLNt'],_0x46f93a,_0xd53af1,![]);if(_0x40fd4d[_0x36a836(0x652)+_0x36a836(0xd42)])_0x2660cc['push'](_0x4eb4e6[_0x36a836(0xf72)]);if(_0x40fd4d[_0x36a836(0x390)+'ect'])_0x2660cc[_0x36a836(0x88f)](_0x4eb4e6[_0x36a836(0x13a0)]);if(_0x40fd4d[_0x36a836(0xd96)+'eLog'])_0x2660cc[_0x36a836(0x88f)](_0x4eb4e6[_0x36a836(0x1483)]);if(_0x40fd4d[_0x36a836(0xb61)])_0x2660cc[_0x36a836(0x88f)](_0x4eb4e6[_0x36a836(0x67b)],_0x46f93a);if(_0x40fd4d['WaitForMov'+_0x36a836(0xe17)])_0x2660cc[_0x36a836(0x88f)](_0x4eb4e6[_0x36a836(0x1377)]);_0x111895[_0x36a836(0xf48)+'e'](_0x4eb4e6['yZnrH']);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Cha'+_0x4258d1(0xb72),_0x26e8ee=>{const _0x58af4f=_0x4258d1,_0x2eba95={'FfWTZ':_0x58af4f(0xf46)+'e'};if(!SceneManager['isSceneBat'+'tle']())return;if(!Imported[_0x58af4f(0x1403)+'ctSeqCamer'+'a'])return;VisuMZ[_0x58af4f(0xd5c)+'ams'](_0x26e8ee,_0x26e8ee);const _0x1d7a0a=$gameTemp['getLastPlu'+'ginCommand'+_0x58af4f(0x1456)+'r'](),_0x49e1f8=_0x26e8ee[_0x58af4f(0x687)+'le'];if(!_0x1d7a0a)return;$gameScreen[_0x58af4f(0xdaf)+'ngle'](_0x26e8ee['Angle'],_0x26e8ee['Duration'],_0x26e8ee[_0x58af4f(0xab5)]);if(_0x49e1f8)_0x1d7a0a['setWaitMod'+'e'](_0x2eba95[_0x58af4f(0x147e)]);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x13ac)+_0x4258d1(0x11f9),_0x5889c7=>{const _0x5e525b=_0x4258d1,_0x30235b={'tFgGs':_0x5e525b(0xf46)+'e'};if(!SceneManager[_0x5e525b(0x614)+'tle']())return;if(!Imported['VisuMZ_3_A'+_0x5e525b(0x90e)+'a'])return;VisuMZ[_0x5e525b(0xd5c)+_0x5e525b(0xc0b)](_0x5889c7,_0x5889c7);const _0x1d0c4b=$gameTemp[_0x5e525b(0xb0b)+_0x5e525b(0xf36)+_0x5e525b(0x1456)+'r'](),_0x3c8502=_0x5889c7[_0x5e525b(0x687)+'le'];if(!_0x1d0c4b)return;$gameScreen['setBattleA'+_0x5e525b(0xf02)](0x1d*-0x1f+0x2577*-0x1+0x28fa,_0x5889c7[_0x5e525b(0x3c1)],_0x5889c7[_0x5e525b(0xab5)]);if(_0x3c8502)_0x1d0c4b['setWaitMod'+'e'](_0x30235b[_0x5e525b(0xf01)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x13ac)+_0x4258d1(0x54b)+'Angle',_0x27afbe=>{const _0x5ac547=_0x4258d1,_0x381735={'HHvph':'battleAngl'+'e'};if(!SceneManager['isSceneBat'+_0x5ac547(0x6e5)]())return;if(!Imported['VisuMZ_3_A'+_0x5ac547(0x90e)+'a'])return;const _0x26f062=$gameTemp['getLastPlu'+_0x5ac547(0xf36)+_0x5ac547(0x1456)+'r']();if(!_0x26f062)return;_0x26f062[_0x5ac547(0xf48)+'e'](_0x381735['HHvph']);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xf80)+_0x4258d1(0x350)+_0x4258d1(0x14e2)+'on',_0x5e01a6=>{const _0x18e222=_0x4258d1,_0x41dcbb={'HPWhz':function(_0x57eca8,_0x5115e5){return _0x57eca8||_0x5115e5;},'joQVc':function(_0x57c864,_0x35df78){return _0x57c864<_0x35df78;},'VvhKW':_0x18e222(0xedc)+_0x18e222(0xf2b)};if(!SceneManager[_0x18e222(0x614)+_0x18e222(0x6e5)]())return;VisuMZ[_0x18e222(0xd5c)+_0x18e222(0xc0b)](_0x5e01a6,_0x5e01a6);const _0x375580=$gameTemp['getLastPlu'+_0x18e222(0xf36)+_0x18e222(0x1456)+'r'](),_0x43c7f6=BattleManager[_0x18e222(0x15a2)],_0x12a1b7=BattleManager[_0x18e222(0xa47)],_0x3e0238=VisuMZ['CreateActi'+_0x18e222(0xad7)+_0x18e222(0xb00)](_0x5e01a6['Targets']),_0x153b40=_0x5e01a6[_0x18e222(0x11d9)],_0x491c43=BattleManager[_0x18e222(0x579)];if(_0x41dcbb[_0x18e222(0xe80)](!_0x375580,!_0x43c7f6)||!_0x12a1b7)return;if(!_0x43c7f6[_0x18e222(0x780)]())return;let _0x234250=_0x43c7f6['item']()[_0x18e222(0x12b1)+'d'];if(_0x41dcbb[_0x18e222(0xf23)](_0x234250,-0x9*0x189+0x226e+-0x1*0x149d))_0x234250=_0x12a1b7['attackAnim'+'ationId1']();$gameTemp['requestAni'+'mation'](_0x3e0238,_0x234250,_0x153b40),_0x5e01a6[_0x18e222(0x1058)+'mation']&&_0x375580[_0x18e222(0xf48)+'e'](_0x41dcbb['VvhKW']);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData['name'],'ActSeq_Ani'+_0x4258d1(0x1629)+_0x4258d1(0x14e8)+'on',_0x51f62d=>{const _0x343093=_0x4258d1,_0x4cbd27={'HsyGb':function(_0xc9c44a,_0x4a932f){return _0xc9c44a||_0x4a932f;},'ESQId':'battleAnim'+_0x343093(0xf2b)};if(!SceneManager[_0x343093(0x614)+_0x343093(0x6e5)]())return;VisuMZ[_0x343093(0xd5c)+'ams'](_0x51f62d,_0x51f62d);const _0x5a7cb1=$gameTemp['getLastPlu'+_0x343093(0xf36)+'Interprete'+'r'](),_0x450ca4=BattleManager[_0x343093(0xa47)],_0x5e5f26=VisuMZ[_0x343093(0x8ec)+_0x343093(0xad7)+_0x343093(0xb00)](_0x51f62d['Targets']),_0x1ab592=_0x51f62d[_0x343093(0x11d9)],_0x38ef02=BattleManager[_0x343093(0x579)];if(_0x4cbd27['HsyGb'](!_0x5a7cb1,!_0x450ca4))return;const _0x3f4f5a=_0x450ca4[_0x343093(0x149a)+_0x343093(0x617)]();$gameTemp['requestAni'+'mation'](_0x5e5f26,_0x3f4f5a,_0x1ab592),_0x51f62d[_0x343093(0x1058)+_0x343093(0x741)]&&_0x5a7cb1[_0x343093(0xf48)+'e'](_0x4cbd27[_0x343093(0x13cd)]);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],'ActSeq_Ani'+'mation_Att'+_0x4258d1(0x14e8)+_0x4258d1(0x37d),_0x27f061=>{const _0x3ccf06=_0x4258d1,_0x4c3b5d={'QNxLJ':function(_0x4e0d0b,_0x36e2b1){return _0x4e0d0b<=_0x36e2b1;},'dFRHu':function(_0x3bd404,_0x4d6056){return _0x3bd404||_0x4d6056;},'uHWHL':_0x3ccf06(0xedc)+'ation'};if(!SceneManager[_0x3ccf06(0x614)+_0x3ccf06(0x6e5)]())return;VisuMZ[_0x3ccf06(0xd5c)+_0x3ccf06(0xc0b)](_0x27f061,_0x27f061);const _0x20678a=_0x131fdf['attackAnim'+_0x3ccf06(0x9ce)+'t'](_0x27f061['Slot']);if(_0x4c3b5d['QNxLJ'](_0x20678a,-0x21*-0xe8+-0x240f*0x1+-0x13b*-0x5))return;const _0x12e326=$gameTemp[_0x3ccf06(0xb0b)+_0x3ccf06(0xf36)+_0x3ccf06(0x1456)+'r'](),_0x131fdf=BattleManager[_0x3ccf06(0xa47)],_0x8a0f0b=VisuMZ['CreateActi'+_0x3ccf06(0xad7)+_0x3ccf06(0xb00)](_0x27f061[_0x3ccf06(0xb00)]),_0xc31a76=_0x27f061[_0x3ccf06(0x11d9)],_0x3f2a25=BattleManager[_0x3ccf06(0x579)];if(_0x4c3b5d[_0x3ccf06(0x40c)](!_0x12e326,!_0x131fdf))return;$gameTemp[_0x3ccf06(0xffe)+_0x3ccf06(0x741)](_0x8a0f0b,_0x20678a,_0xc31a76),_0x27f061[_0x3ccf06(0x1058)+_0x3ccf06(0x741)]&&_0x12e326[_0x3ccf06(0xf48)+'e'](_0x4c3b5d[_0x3ccf06(0x8b1)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0xf80)+_0x4258d1(0x157c)+_0x4258d1(0x366)+_0x4258d1(0x1485),_0x4947e2=>{const _0x4a744a=_0x4258d1,_0x123fb7={'FWnUI':_0x4a744a(0xea6)+'N','iAohO':_0x4a744a(0x7ef),'lJcOd':_0x4a744a(0x664),'OeisG':_0x4a744a(0x1612),'drCBo':_0x4a744a(0x36b),'LxJVR':'MUSIC-NOTE','QAeYz':'MUSICNOTE','UyuGK':_0x4a744a(0x1627),'RLvib':_0x4a744a(0x7cd),'ltYmq':'ANGLE','ZkwAK':'ANGER','obWZM':_0x4a744a(0x11ee),'IWEOe':_0x4a744a(0x15bb),'ywjsi':'ANNOYED','oobmT':_0x4a744a(0x1671)+'N','sUHrU':_0x4a744a(0x1059),'jlwsa':_0x4a744a(0x2b9),'kxxrF':_0x4a744a(0xb9a),'hlSrP':_0x4a744a(0x3f6),'oumiE':'LIGHT\x20BULB','NEzVG':_0x4a744a(0xade),'cTUyC':_0x4a744a(0x136b),'HHQSC':_0x4a744a(0x186),'MKFTa':'SLEEP','gSDmo':'USER-DEFIN'+_0x4a744a(0x9e1),'nEydd':'USER-DEFIN'+_0x4a744a(0x3fe),'wURMm':'USER-DEFIN'+_0x4a744a(0x14e7),'igKmq':'USER-DEFIN'+_0x4a744a(0x714),'VCCfn':'USER-DEFIN'+_0x4a744a(0x156e),'wrrBk':'battleBall'+_0x4a744a(0x907)};if(!SceneManager['isSceneBat'+_0x4a744a(0x6e5)]())return;VisuMZ[_0x4a744a(0xd5c)+'ams'](_0x4947e2,_0x4947e2);const _0x25bae6=$gameTemp[_0x4a744a(0xb0b)+'ginCommand'+_0x4a744a(0x1456)+'r'](),_0x565c5b=VisuMZ[_0x4a744a(0x8ec)+_0x4a744a(0xad7)+'Targets'](_0x4947e2[_0x4a744a(0xb00)]),_0x40270a=_0x4947e2[_0x4a744a(0x13ba)];let _0x4a2b96=-0xa34+-0x38*0x9f+0x2cfc;switch(_0x40270a['toUpperCas'+'e']()[_0x4a744a(0xbb6)]()){case'!':case _0x123fb7['FWnUI']:_0x4a2b96=0x2*-0xd7e+-0x1e*0x8a+-0x1*-0x2b29;break;case'?':case _0x123fb7[_0x4a744a(0x9bd)]:_0x4a2b96=-0x61*-0x4f+0xc57+-0x874*0x5;break;case _0x123fb7[_0x4a744a(0xc9b)]:case _0x123fb7[_0x4a744a(0x9b8)]:case _0x123fb7['drCBo']:case _0x123fb7['LxJVR']:case _0x123fb7[_0x4a744a(0x1663)]:_0x4a2b96=0x1cf+0x1*0x1c3f+-0x1e0b;break;case _0x123fb7[_0x4a744a(0xd55)]:case _0x123fb7[_0x4a744a(0xcbb)]:_0x4a2b96=0x1*-0x1dea+0x2495*0x1+0x6a7*-0x1;break;case _0x123fb7[_0x4a744a(0xf70)]:case _0x123fb7['ZkwAK']:_0x4a2b96=-0x1*-0x26b3+0x21b*0x7+0x356b*-0x1;break;case _0x123fb7['obWZM']:_0x4a2b96=-0x1796+-0xb99+0x2335*0x1;break;case _0x123fb7[_0x4a744a(0xdc6)]:case _0x123fb7[_0x4a744a(0xbb0)]:case _0x123fb7[_0x4a744a(0x1278)]:_0x4a2b96=0x12d5*-0x2+-0x16af*-0x1+0xf02;break;case _0x123fb7[_0x4a744a(0x34e)]:case _0x123fb7[_0x4a744a(0x61e)]:_0x4a2b96=-0x17b9+0x243b+0x63d*-0x2;break;case _0x123fb7['kxxrF']:case _0x123fb7[_0x4a744a(0xf6d)]:case _0x123fb7[_0x4a744a(0x528)]:case _0x123fb7[_0x4a744a(0x1f5)]:case _0x123fb7['cTUyC']:_0x4a2b96=0x195b+0x1ed6+0x1c14*-0x2;break;case'Z':case'ZZ':case _0x123fb7[_0x4a744a(0x100e)]:case _0x123fb7[_0x4a744a(0x847)]:_0x4a2b96=0x10dd*-0x1+-0x1*0x146f+-0x213*-0x12;break;case _0x123fb7['gSDmo']:_0x4a2b96=-0x25fe+-0x51*0x1c+0x2ee5;break;case _0x123fb7['nEydd']:_0x4a2b96=-0xd*-0x34+-0x1*-0x2f5+-0x58d;break;case _0x123fb7[_0x4a744a(0x13c7)]:_0x4a2b96=0x1072+-0x20ef+-0x2*-0x845;break;case _0x123fb7[_0x4a744a(0x74d)]:_0x4a2b96=-0x13*-0xf+0x1b*-0x13a+0x200f;break;case _0x123fb7['VCCfn']:_0x4a2b96=-0x271*0x1+-0x2620+0x28a0;break;}for(const _0x35dfda of _0x565c5b){if(!_0x35dfda)continue;$gameTemp[_0x4a744a(0x3d2)+'tleBalloon'](_0x35dfda,_0x4a2b96);}_0x4947e2[_0x4a744a(0x5cd)+'te']&&_0x25bae6&&(_0x25bae6[_0x4a744a(0x58e)](-0x1e76+-0x322*0xb+-0xb*-0x5e7),_0x25bae6[_0x4a744a(0xf48)+'e'](_0x123fb7['wrrBk']));}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData['name'],_0x4258d1(0xf80)+_0x4258d1(0x157c)+_0x4258d1(0x1438),_0xf937d6=>{const _0x43d397=_0x4258d1,_0x1e4ae5={'EJdQK':_0x43d397(0x106d)+_0x43d397(0x907)};if(!SceneManager['isSceneBat'+_0x43d397(0x6e5)]())return;if(!Imported['VisuMZ_4_I'+'conBalloon'+'s'])return;VisuMZ[_0x43d397(0xd5c)+_0x43d397(0xc0b)](_0xf937d6,_0xf937d6);const _0x2b84e5=$gameTemp[_0x43d397(0xb0b)+'ginCommand'+'Interprete'+'r'](),_0x543f77=VisuMZ[_0x43d397(0x8ec)+_0x43d397(0xad7)+_0x43d397(0xb00)](_0xf937d6[_0x43d397(0xb00)]),_0x5a44d2=_0xf937d6[_0x43d397(0xa2f)];for(const _0x12d7de of _0x543f77){if(!_0x12d7de)continue;$gameTemp['requestBat'+_0x43d397(0x493)](_0x12d7de,[_0x5a44d2]);}_0xf937d6[_0x43d397(0x5cd)+'te']&&_0x2b84e5&&(_0x2b84e5[_0x43d397(0x58e)](-0x1d82+-0x1828+0x35ab),_0x2b84e5[_0x43d397(0xf48)+'e'](_0x1e4ae5[_0x43d397(0x137b)]));}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xf80)+_0x4258d1(0x157c)+_0x4258d1(0x1079)+_0x4258d1(0x11af),_0xa73995=>{const _0x237ccc=_0x4258d1,_0x32587c={'fklBm':function(_0x32803a,_0x7fa641){return _0x32803a(_0x7fa641);},'MeZNq':function(_0x2d9758,_0x360dc6){return _0x2d9758(_0x360dc6);},'NxTfG':function(_0x45510a,_0x5592ad){return _0x45510a<=_0x5592ad;},'mOIFd':_0x237ccc(0x106d)+_0x237ccc(0x907)};if(!SceneManager[_0x237ccc(0x614)+_0x237ccc(0x6e5)]())return;if(!Imported[_0x237ccc(0xe12)+_0x237ccc(0xf1f)+'s'])return;VisuMZ[_0x237ccc(0xd5c)+_0x237ccc(0xc0b)](_0xa73995,_0xa73995);const _0x2f3d22=$gameTemp[_0x237ccc(0xb0b)+_0x237ccc(0xf36)+_0x237ccc(0x1456)+'r'](),_0x24321e=VisuMZ['CreateActi'+'onSequence'+_0x237ccc(0xb00)](_0xa73995[_0x237ccc(0xb00)]),_0x4edf62=Math[_0x237ccc(0xd3a)](_0x32587c['fklBm'](Number,_0xa73995[_0x237ccc(0xf1d)]||-0xbc1+0x25d3+0x5e*-0x47),_0x32587c[_0x237ccc(0xff2)](Number,_0xa73995[_0x237ccc(0x863)]||0x17*-0xe3+0x1*-0x107b+0x24e0)),_0x5b6e21=Math['max'](_0x32587c[_0x237ccc(0xff2)](Number,_0xa73995[_0x237ccc(0xf1d)]||0xc68+-0x1763+0x3a9*0x3),_0x32587c[_0x237ccc(0xff2)](Number,_0xa73995[_0x237ccc(0x863)]||-0x2202+0x120c+0xff6)),_0x30153e=[];for(let _0x8389aa=_0x4edf62;_0x32587c[_0x237ccc(0x95d)](_0x8389aa,_0x5b6e21);_0x8389aa++){_0x30153e[_0x237ccc(0x88f)](_0x8389aa);}for(const _0x12285c of _0x24321e){if(!_0x12285c)continue;$gameTemp[_0x237ccc(0x3d2)+'tleBalloon'](_0x12285c,_0x30153e);}_0xa73995[_0x237ccc(0x5cd)+'te']&&_0x2f3d22&&(_0x2f3d22[_0x237ccc(0x58e)](-0x2d*0x6+-0x13f+0x24e),_0x2f3d22[_0x237ccc(0xf48)+'e'](_0x32587c['mOIFd']));}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xf80)+'mation_Bal'+_0x4258d1(0xd1d)+_0x4258d1(0xd76),_0xcd044b=>{const _0x447a05=_0x4258d1,_0x2b1957={'IoNNS':'battleBall'+_0x447a05(0x907)};if(!SceneManager[_0x447a05(0x614)+'tle']())return;if(!Imported[_0x447a05(0xe12)+'conBalloon'+'s'])return;VisuMZ[_0x447a05(0xd5c)+_0x447a05(0xc0b)](_0xcd044b,_0xcd044b);const _0x529c51=$gameTemp[_0x447a05(0xb0b)+_0x447a05(0xf36)+_0x447a05(0x1456)+'r'](),_0x5a5c82=VisuMZ[_0x447a05(0x8ec)+_0x447a05(0xad7)+_0x447a05(0xb00)](_0xcd044b[_0x447a05(0xb00)]),_0x4296f1=_0xcd044b['icons'];for(const _0x3d26f7 of _0x5a5c82){if(!_0x3d26f7)continue;$gameTemp[_0x447a05(0x3d2)+_0x447a05(0x493)](_0x3d26f7,_0x4296f1);}_0xcd044b[_0x447a05(0x5cd)+'te']&&_0x529c51&&(_0x529c51[_0x447a05(0x58e)](0x7*-0x2e3+0x46*0x62+-0x696),_0x529c51[_0x447a05(0xf48)+'e'](_0x2b1957[_0x447a05(0x134d)]));}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xf80)+_0x4258d1(0x5f3)+_0x4258d1(0x12ad),_0x3cf665=>{const _0x2552e5=_0x4258d1,_0x57fa28={'sembJ':function(_0x56e631,_0x22c05a){return _0x56e631||_0x22c05a;},'TiUVh':'battleAnim'+_0x2552e5(0xf2b)};if(!SceneManager['isSceneBat'+_0x2552e5(0x6e5)]())return;VisuMZ[_0x2552e5(0xd5c)+'ams'](_0x3cf665,_0x3cf665);const _0x4115df=$gameTemp[_0x2552e5(0xb0b)+_0x2552e5(0xf36)+_0x2552e5(0x1456)+'r'](),_0x47c622=BattleManager[_0x2552e5(0x15a2)],_0x29f014=_0x3cf665[_0x2552e5(0x11d9)],_0x3e7bd0=VisuMZ[_0x2552e5(0x8ec)+'onSequence'+_0x2552e5(0xb00)](_0x3cf665[_0x2552e5(0xb00)]);if(_0x57fa28[_0x2552e5(0x1bd)](!_0x4115df,!_0x47c622))return;if(!_0x47c622[_0x2552e5(0x780)]())return;for(const _0x5f1b65 of _0x3e7bd0){if(!_0x5f1b65)continue;_0x5f1b65[_0x2552e5(0x73c)+'tAnimation'](_0x47c622,_0x29f014);}if(_0x3cf665[_0x2552e5(0x1058)+'mation'])_0x4115df[_0x2552e5(0xf48)+'e'](_0x57fa28['TiUVh']);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData['name'],'ActSeq_Ani'+_0x4258d1(0x118c)+_0x4258d1(0x10e7)+_0x4258d1(0x1340),_0x26e739=>{const _0x23ec9b=_0x4258d1;VisuMZ[_0x23ec9b(0xd5c)+_0x23ec9b(0xc0b)](_0x26e739,_0x26e739);const _0x10de3c=$gameTemp['getLastPlu'+_0x23ec9b(0xf36)+'Interprete'+'r'](),_0x50ef5c=VisuMZ['CreateActi'+_0x23ec9b(0xad7)+_0x23ec9b(0xb00)](_0x26e739['Targets']),_0x343d30=_0x26e739[_0x23ec9b(0x965)];if(!_0x343d30)return;for(const _0x54e472 of _0x50ef5c){if(!_0x54e472)continue;if(!_0x54e472[_0x23ec9b(0x1580)]())continue;_0x54e472['setBattleP'+_0x23ec9b(0x1340)](_0x343d30);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xf80)+_0x4258d1(0x1033)+_0x4258d1(0x1211)+'n',_0x4f2457=>{const _0x2714fb=_0x4258d1,_0x460b34={'MVdvk':function(_0x37806b,_0x412a28){return _0x37806b||_0x412a28;},'qhEyx':'battleAnim'+'ation'};if(!SceneManager[_0x2714fb(0x614)+_0x2714fb(0x6e5)]())return;VisuMZ['ConvertPar'+'ams'](_0x4f2457,_0x4f2457);const _0x40aae6=$gameTemp[_0x2714fb(0xb0b)+_0x2714fb(0xf36)+_0x2714fb(0x1456)+'r'](),_0x142973=BattleManager[_0x2714fb(0xa47)],_0xdb4017=VisuMZ['CreateActi'+_0x2714fb(0xad7)+'Targets'](_0x4f2457[_0x2714fb(0xb00)]),_0x54ab8a=_0x4f2457['Mirror'];if(_0x460b34[_0x2714fb(0x239)](!_0x40aae6,!_0x142973))return;const _0x4bf602=$dataSkilles[_0x142973['guardSkill'+'Id']()],_0x498147=_0x4bf602[_0x2714fb(0x12b1)+'d'];$gameTemp['requestAni'+'mation'](_0xdb4017,_0x498147,_0x54ab8a),_0x4f2457[_0x2714fb(0x1058)+'mation']&&_0x40aae6[_0x2714fb(0xf48)+'e'](_0x460b34[_0x2714fb(0xdf1)]);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData['name'],'ActSeq_Ani'+_0x4258d1(0x3ff)+'mAnimation',_0x5d5409=>{const _0x209a33=_0x4258d1,_0x1e044d={'vUneK':function(_0x17d477,_0x3e5b3f){return _0x17d477(_0x3e5b3f);},'JlSrI':'battleAnim'+_0x209a33(0xf2b)};if(!SceneManager[_0x209a33(0x614)+_0x209a33(0x6e5)]())return;VisuMZ[_0x209a33(0xd5c)+_0x209a33(0xc0b)](_0x5d5409,_0x5d5409);const _0x360e0e=$gameTemp[_0x209a33(0xb0b)+_0x209a33(0xf36)+_0x209a33(0x1456)+'r'](),_0x12f651=VisuMZ[_0x209a33(0x8ec)+_0x209a33(0xad7)+_0x209a33(0xb00)](_0x5d5409['Targets']),_0x375daf=_0x1e044d[_0x209a33(0x1440)](Number,_0x5d5409[_0x209a33(0xb65)]||-0x2201+-0x193f+0x3b41),_0x4b71c8=$dataItems[_0x375daf],_0x38e049=_0x5d5409['Mirror'];if(!_0x360e0e)return;if(!_0x4b71c8)return;let _0x57ed64=_0x4b71c8[_0x209a33(0x12b1)+'d'];$gameTemp[_0x209a33(0xffe)+_0x209a33(0x741)](_0x12f651,_0x57ed64,_0x38e049),_0x5d5409['WaitForAni'+_0x209a33(0x741)]&&_0x360e0e[_0x209a33(0xf48)+'e'](_0x1e044d[_0x209a33(0x135a)]);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData['name'],'ActSeq_Ani'+_0x4258d1(0x69d)+_0x4258d1(0x1659)+_0x4258d1(0x3cb),_0x41584d=>{const _0x318f62=_0x4258d1,_0x229766={'XhGQb':_0x318f62(0xedc)+_0x318f62(0xf2b)};if(!SceneManager['_scene'])return;if(!SceneManager[_0x318f62(0x14b3)][_0x318f62(0x1b3)])return;if(!Imported['VisuMZ_0_C'+_0x318f62(0x138e)])return;VisuMZ[_0x318f62(0xd5c)+_0x318f62(0xc0b)](_0x41584d,_0x41584d);const _0x13caad=$gameTemp[_0x318f62(0xb0b)+_0x318f62(0xf36)+_0x318f62(0x1456)+'r'](),_0x374d79=Math['round'](_0x41584d[_0x318f62(0xbba)]),_0x5b99e7=Math[_0x318f62(0xdea)](_0x41584d['pointY']);$gameTemp['requestPoi'+_0x318f62(0x1429)+'n'](_0x374d79,_0x5b99e7,_0x41584d[_0x318f62(0xb31)+'D'],_0x41584d[_0x318f62(0x11d9)],_0x41584d[_0x318f62(0x354)]),_0x41584d[_0x318f62(0x5cd)+'te']&&_0x13caad&&(SceneManager[_0x318f62(0x14b3)][_0x318f62(0x1b3)][_0x318f62(0x13c6)+'tAnimation'+'s'](),_0x13caad['setWaitMod'+'e'](_0x229766['XhGQb']));}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xf80)+_0x4258d1(0x853)+_0x4258d1(0x124d),_0x263876=>{const _0x2a6f12=_0x4258d1,_0x352cb9={'yqKKZ':_0x2a6f12(0xedc)+'ation'};if(!SceneManager['isSceneBat'+_0x2a6f12(0x6e5)]())return;VisuMZ['ConvertPar'+_0x2a6f12(0xc0b)](_0x263876,_0x263876);const _0x60a3d1=$gameTemp[_0x2a6f12(0xb0b)+_0x2a6f12(0xf36)+_0x2a6f12(0x1456)+'r'](),_0x5d34b2=VisuMZ[_0x2a6f12(0x8ec)+_0x2a6f12(0xad7)+_0x2a6f12(0xb00)](_0x263876[_0x2a6f12(0xb00)]),_0x5c2f98=_0x263876['AnimationI'+'D'],_0x5b6f49=_0x263876[_0x2a6f12(0x11d9)];if(!_0x60a3d1)return;$gameTemp[_0x2a6f12(0xffe)+_0x2a6f12(0x741)](_0x5d34b2,_0x5c2f98,_0x5b6f49);if(_0x263876[_0x2a6f12(0x1058)+_0x2a6f12(0x741)])_0x60a3d1['setWaitMod'+'e'](_0x352cb9[_0x2a6f12(0x8c3)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Ani'+'mation_Sho'+_0x4258d1(0x124d)+'JS',_0x2219c4=>{const _0x19a6b9=_0x4258d1,_0x281c5a={'cWzmi':function(_0x380741,_0x518bba){return _0x380741(_0x518bba);},'tzziS':_0x19a6b9(0xedc)+_0x19a6b9(0xf2b)};if(!SceneManager[_0x19a6b9(0x614)+_0x19a6b9(0x6e5)]())return;VisuMZ['ConvertPar'+'ams'](_0x2219c4,_0x2219c4);const _0x593a26=$gameTemp[_0x19a6b9(0xb0b)+_0x19a6b9(0xf36)+_0x19a6b9(0x1456)+'r'](),_0x760317=VisuMZ[_0x19a6b9(0x8ec)+'onSequence'+_0x19a6b9(0xb00)](_0x2219c4[_0x19a6b9(0xb00)]),_0xca833=_0x281c5a[_0x19a6b9(0x1269)](Number,_0x2219c4[_0x19a6b9(0xb31)+'D'])||-0x6*0x46b+-0x1ebe+0x3941,_0x1b8790=_0x2219c4[_0x19a6b9(0x11d9)];if(!_0x593a26)return;$gameTemp[_0x19a6b9(0xffe)+'mation'](_0x760317,_0xca833,_0x1b8790);if(_0x2219c4[_0x19a6b9(0x1058)+'mation'])_0x593a26[_0x19a6b9(0xf48)+'e'](_0x281c5a[_0x19a6b9(0x65d)]);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xf80)+_0x4258d1(0xd1a)+_0x4258d1(0x1123)+'n',_0x4dd16a=>{const _0x257523=_0x4258d1,_0x5e3bf0={'vyrVP':function(_0x401622,_0x47aefd){return _0x401622(_0x47aefd);},'iMqEx':_0x257523(0xedc)+_0x257523(0xf2b)};if(!SceneManager[_0x257523(0x614)+'tle']())return;VisuMZ[_0x257523(0xd5c)+'ams'](_0x4dd16a,_0x4dd16a);const _0x21fe1d=$gameTemp[_0x257523(0xb0b)+_0x257523(0xf36)+_0x257523(0x1456)+'r'](),_0x1a71bd=VisuMZ[_0x257523(0x8ec)+_0x257523(0xad7)+'Targets'](_0x4dd16a['Targets']),_0x71467a=_0x5e3bf0['vyrVP'](Number,_0x4dd16a[_0x257523(0xd45)]||0x1*0x7cb+-0x88+-0x742*0x1),_0x2d9c77=$dataSkills[_0x71467a],_0x3b5f42=_0x4dd16a[_0x257523(0x11d9)];if(!_0x21fe1d)return;if(!_0x2d9c77)return;let _0x1eb13b=_0x2d9c77[_0x257523(0x12b1)+'d'];$gameTemp[_0x257523(0xffe)+_0x257523(0x741)](_0x1a71bd,_0x1eb13b,_0x3b5f42),_0x4dd16a[_0x257523(0x1058)+'mation']&&_0x21fe1d[_0x257523(0xf48)+'e'](_0x5e3bf0['iMqEx']);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],'ActSeq_Ani'+_0x4258d1(0xd3b)+_0x4258d1(0xc76)+'ion',_0xa900bc=>{const _0x3ecca5=_0x4258d1,_0x2af8d1={'RktSq':_0x3ecca5(0xedc)+'ation'};if(!SceneManager[_0x3ecca5(0x614)+_0x3ecca5(0x6e5)]())return;const _0x236bbc=$gameTemp[_0x3ecca5(0xb0b)+_0x3ecca5(0xf36)+'Interprete'+'r']();if(!_0x236bbc)return;_0x236bbc[_0x3ecca5(0xf48)+'e'](_0x2af8d1['RktSq']);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x132b)+'tleLog_Add'+_0x4258d1(0x1271),_0x5b1cc2=>{const _0x49d798=_0x4258d1;if(!SceneManager[_0x49d798(0x614)+_0x49d798(0x6e5)]())return;VisuMZ['ConvertPar'+_0x49d798(0xc0b)](_0x5b1cc2,_0x5b1cc2);const _0x2eb0d2=BattleManager[_0x49d798(0x579)],_0xc0fb8c=_0x5b1cc2[_0x49d798(0x914)+'Log']&&Imported['VisuMZ_4_C'+_0x49d798(0x3f7)];_0x2eb0d2[_0x49d798(0xe3c)](_0x5b1cc2[_0x49d798(0x1271)]),_0xc0fb8c&&Imported['VisuMZ_4_C'+_0x49d798(0x3f7)]&&$gameSystem[_0x49d798(0x12c2)+_0x49d798(0x3f7)](_0x5b1cc2[_0x49d798(0x1271)]||'',_0x5b1cc2['CombatLogI'+_0x49d798(0x1091)]||0x1052*-0x1+0x339*-0xb+-0x1d*-0x1c9);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x132b)+_0x4258d1(0x11b9)+'ar',_0x229a32=>{const _0x2cc797=_0x4258d1;if(!SceneManager['isSceneBat'+'tle']())return;const _0x296079=BattleManager[_0x2cc797(0x579)];_0x296079[_0x2cc797(0x11c1)]();}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x132b)+_0x4258d1(0x10e4)+_0x4258d1(0xe56),_0x3da1b3=>{const _0x40bbcb=_0x4258d1,_0x2a4a91={'OJzGJ':function(_0x1d963d,_0x272031){return _0x1d963d||_0x272031;},'mvWQC':_0x40bbcb(0xc11)};if(!SceneManager[_0x40bbcb(0x614)+_0x40bbcb(0x6e5)]())return;const _0x2ce447=$gameTemp[_0x40bbcb(0xb0b)+_0x40bbcb(0xf36)+_0x40bbcb(0x1456)+'r'](),_0x4751eb=BattleManager['_action'],_0x39f3db=BattleManager['_subject'],_0x46001c=BattleManager['_logWindow'];if(_0x2a4a91[_0x40bbcb(0x210)](!_0x2ce447,!_0x4751eb)||!_0x39f3db)return;if(!_0x4751eb[_0x40bbcb(0x780)]())return;_0x46001c['displayAct'+_0x40bbcb(0x1485)](_0x39f3db,_0x4751eb[_0x40bbcb(0x780)]()),_0x2ce447['setWaitMod'+'e'](_0x2a4a91['mvWQC']);}),PluginManager['registerCo'+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x132b)+_0x4258d1(0x1604)+_0x4258d1(0x90a),_0x3076e9=>{const _0x738a2d=_0x4258d1;if(!SceneManager[_0x738a2d(0x614)+_0x738a2d(0x6e5)]())return;const _0x5747da=BattleManager[_0x738a2d(0x579)];_0x5747da[_0x738a2d(0xaa8)+'e']();}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x132b)+'tleLog_Pus'+_0x4258d1(0x956),_0x45bd6f=>{const _0x5a3fae=_0x4258d1;if(!SceneManager['isSceneBat'+'tle']())return;const _0x3831a6=BattleManager['_logWindow'];_0x3831a6[_0x5a3fae(0x165e)+'ne']();}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x132b)+'tleLog_Ref'+_0x4258d1(0x16bc),_0x12ab66=>{const _0x1f2b4d=_0x4258d1;if(!SceneManager[_0x1f2b4d(0x614)+'tle']())return;const _0x462feb=BattleManager[_0x1f2b4d(0x579)];_0x462feb[_0x1f2b4d(0x164d)]();}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],'ActSeq_Bat'+_0x4258d1(0x1662),_0xabfde2=>{const _0x5e9def=_0x4258d1;if(!SceneManager['isSceneBat'+_0x5e9def(0x6e5)]())return;VisuMZ[_0x5e9def(0xd5c)+_0x5e9def(0xc0b)](_0xabfde2,_0xabfde2),SceneManager['_scene'][_0x5e9def(0x500)+'UI'](_0xabfde2[_0x5e9def(0x1391)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x132b)+_0x4258d1(0x145f)+_0x4258d1(0xa9c)+'Log',_0x552e55=>{const _0x459823=_0x4258d1,_0x1a824f={'SfniK':'battlelog'};if(!SceneManager[_0x459823(0x614)+'tle']())return;const _0x42e2db=$gameTemp[_0x459823(0xb0b)+_0x459823(0xf36)+_0x459823(0x1456)+'r']();_0x42e2db[_0x459823(0xf48)+'e'](_0x1a824f[_0x459823(0xe1c)]);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x132b)+'tleLog_Wai'+_0x4258d1(0x80f)+'e',_0x31c221=>{const _0xb449d3=_0x4258d1,_0x1db03e={'GxoWm':_0xb449d3(0xc11)};if(!SceneManager['isSceneBat'+_0xb449d3(0x6e5)]())return;const _0x2b6dba=$gameTemp[_0xb449d3(0xb0b)+_0xb449d3(0xf36)+_0xb449d3(0x1456)+'r'](),_0x4ab4b2=BattleManager[_0xb449d3(0x579)];_0x4ab4b2[_0xb449d3(0x147d)+'Line'](),_0x2b6dba[_0xb449d3(0xf48)+'e'](_0x1db03e[_0xb449d3(0x259)]);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xe93)+'era_Clamp',_0x3c49a4=>{const _0x515083=_0x4258d1;if(!SceneManager[_0x515083(0x614)+_0x515083(0x6e5)]())return;if(!Imported[_0x515083(0x1403)+_0x515083(0x90e)+'a'])return;VisuMZ[_0x515083(0xd5c)+_0x515083(0xc0b)](_0x3c49a4,_0x3c49a4);const _0x49b450=$gameScreen[_0x515083(0x911)+_0x515083(0x452)]();_0x49b450[_0x515083(0x1145)+'p']=_0x3c49a4[_0x515083(0x12ce)];}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xe93)+_0x4258d1(0x4aa)+_0x4258d1(0x194),_0x201f6a=>{const _0x38a71d=_0x4258d1,_0x23f2b5={'JAGnX':_0x38a71d(0x911)+'ra'};if(!SceneManager[_0x38a71d(0x614)+'tle']())return;if(!Imported[_0x38a71d(0x1403)+_0x38a71d(0x90e)+'a'])return;VisuMZ['ConvertPar'+_0x38a71d(0xc0b)](_0x201f6a,_0x201f6a);const _0x26084e=$gameTemp[_0x38a71d(0xb0b)+_0x38a71d(0xf36)+_0x38a71d(0x1456)+'r'](),_0x311043=_0x201f6a[_0x38a71d(0x598)+'era'];$gameScreen['setBattleC'+_0x38a71d(0x133b)](_0x201f6a[_0x38a71d(0x1350)],_0x201f6a['FocusY'],_0x201f6a[_0x38a71d(0x3c1)],_0x201f6a[_0x38a71d(0xab5)]);if(_0x311043)_0x26084e[_0x38a71d(0xf48)+'e'](_0x23f2b5['JAGnX']);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData['name'],'ActSeq_Cam'+_0x4258d1(0x161b)+_0x4258d1(0x49d),_0x42850e=>{const _0x56f5ed=_0x4258d1,_0x30e81f={'CLils':_0x56f5ed(0x911)+'ra'};if(!SceneManager['isSceneBat'+_0x56f5ed(0x6e5)]())return;if(!Imported['VisuMZ_3_A'+_0x56f5ed(0x90e)+'a'])return;VisuMZ[_0x56f5ed(0xd5c)+_0x56f5ed(0xc0b)](_0x42850e,_0x42850e);const _0x25e3ea=$gameTemp['getLastPlu'+_0x56f5ed(0xf36)+_0x56f5ed(0x1456)+'r'](),_0x1e019d=VisuMZ[_0x56f5ed(0x8ec)+_0x56f5ed(0xad7)+_0x56f5ed(0xb00)](_0x42850e[_0x56f5ed(0xb00)]),_0x1e7045=_0x42850e[_0x56f5ed(0x598)+_0x56f5ed(0x3ab)];$gameScreen['setBattleC'+_0x56f5ed(0xde3)+'ts'](_0x1e019d,_0x42850e[_0x56f5ed(0x3c1)],_0x42850e[_0x56f5ed(0xab5)]);if(_0x1e7045)_0x25e3ea['setWaitMod'+'e'](_0x30e81f[_0x56f5ed(0x7bc)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xe93)+_0x4258d1(0x226),_0x1ae356=>{const _0x364da0=_0x4258d1,_0x40351c={'DktWY':_0x364da0(0x911)+'ra'};if(!SceneManager['isSceneBat'+_0x364da0(0x6e5)]())return;if(!Imported['VisuMZ_3_A'+'ctSeqCamer'+'a'])return;VisuMZ[_0x364da0(0xd5c)+_0x364da0(0xc0b)](_0x1ae356,_0x1ae356);const _0x28a471=$gameTemp['getLastPlu'+_0x364da0(0xf36)+_0x364da0(0x1456)+'r'](),_0x353b6e=_0x1ae356['WaitForCam'+'era'];$gameScreen[_0x364da0(0x702)+_0x364da0(0x1b4)+'t'](_0x1ae356[_0x364da0(0x1521)],_0x1ae356[_0x364da0(0x114e)],_0x1ae356[_0x364da0(0x3c1)],_0x1ae356[_0x364da0(0xab5)]);if(_0x353b6e)_0x28a471[_0x364da0(0xf48)+'e'](_0x40351c[_0x364da0(0x3f4)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Cam'+_0x4258d1(0xdd6),_0x37678e=>{const _0x55942b=_0x4258d1,_0x2ff5e2={'NwjXf':function(_0x5c70f6,_0x3ce005){return _0x5c70f6/_0x3ce005;},'qISOK':'battleCame'+'ra'};if(!SceneManager[_0x55942b(0x614)+_0x55942b(0x6e5)]())return;if(!Imported[_0x55942b(0x1403)+_0x55942b(0x90e)+'a'])return;VisuMZ[_0x55942b(0xd5c)+_0x55942b(0xc0b)](_0x37678e,_0x37678e);const _0x12b746=$gameTemp[_0x55942b(0xb0b)+'ginCommand'+'Interprete'+'r'](),_0x891ad4=_0x37678e[_0x55942b(0xfa2)],_0x1de56b=_0x37678e['ResetOffse'+'t'],_0x1fd7b2=_0x37678e[_0x55942b(0x598)+_0x55942b(0x3ab)];if(_0x891ad4){const _0x11c677=Math[_0x55942b(0xdea)](_0x2ff5e2['NwjXf'](Graphics['width'],0x1326+-0x1e16*-0x1+0x1*-0x313a)),_0x3c1fd4=Math[_0x55942b(0xdea)](_0x2ff5e2[_0x55942b(0xfbd)](Graphics[_0x55942b(0x1594)],-0x1e5d+-0xe8+-0x3*-0xa6d));$gameScreen[_0x55942b(0x702)+_0x55942b(0x133b)](_0x11c677,_0x3c1fd4,_0x37678e[_0x55942b(0x3c1)],_0x37678e['EasingType']);}_0x1de56b&&$gameScreen[_0x55942b(0x702)+_0x55942b(0x1b4)+'t'](-0x1879+-0x89a+-0x2113*-0x1,0x190b+0x3f*0x67+-0x3264,_0x37678e[_0x55942b(0x3c1)],_0x37678e[_0x55942b(0xab5)]);if(_0x1fd7b2)_0x12b746[_0x55942b(0xf48)+'e'](_0x2ff5e2[_0x55942b(0x10c5)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xe93)+_0x4258d1(0xa69)+'rCamera',_0x10da30=>{const _0x44aa82=_0x4258d1,_0x16b3e2={'LNNrH':'battleCame'+'ra'};if(!SceneManager['isSceneBat'+'tle']())return;if(!Imported[_0x44aa82(0x1403)+_0x44aa82(0x90e)+'a'])return;const _0x267ef5=$gameTemp['getLastPlu'+'ginCommand'+'Interprete'+'r']();if(!_0x267ef5)return;_0x267ef5[_0x44aa82(0xf48)+'e'](_0x16b3e2[_0x44aa82(0x126d)]);}),VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x121e)+_0x4258d1(0x152f)]=function(_0x456789){const _0x4281ae=_0x4258d1,_0x241b0d={'mVTiX':'5|2|0|4|1|'+'3','AUmcu':function(_0xe21ed4,_0x29cd16){return _0xe21ed4===_0x29cd16;},'iacbN':_0x4281ae(0x10fe)};_0x456789['portraitFi'+_0x4281ae(0x1ea)]='';const _0x2ee374=VisuMZ[_0x4281ae(0xfc4)+_0x4281ae(0xaef)][_0x4281ae(0x121e)+_0x4281ae(0x152f)](_0x456789),_0x1ad29b=VisuMZ[_0x4281ae(0x8ec)+_0x4281ae(0xad7)+_0x4281ae(0xb00)](_0x456789[_0x4281ae(0xb00)])[0x75+0x26f1+-0x2766]||null;if(_0x1ad29b){_0x2ee374[_0x4281ae(0x436)+'lename']=_0x1ad29b[_0x4281ae(0x116d)+_0x4281ae(0x199)+_0x4281ae(0xc4b)](),_0x2ee374[_0x4281ae(0x22d)+'dex']=_0x1ad29b[_0x4281ae(0x116d)+_0x4281ae(0x368)+_0x4281ae(0x9a9)](),_0x2ee374['portraitHu'+'e']=_0x1ad29b['visualCuti'+_0x4281ae(0x314)+'ue'](),_0x2ee374[_0x4281ae(0xbb5)+'pe']=_0x1ad29b[_0x4281ae(0x116d)+_0x4281ae(0x15a0)+_0x4281ae(0x715)]();if(_0x1ad29b[_0x4281ae(0xaf5)]()){const _0x2acd9d=_0x241b0d['mVTiX'][_0x4281ae(0xba9)]('|');let _0x1ff254=-0x43*-0xb+-0x1e2f+0x1b4e;while(!![]){switch(_0x2acd9d[_0x1ff254++]){case'0':_0x241b0d[_0x4281ae(0xc08)](_0x2ee374[_0x4281ae(0xbb5)+'pe'],_0x241b0d[_0x4281ae(0x6e4)])&&(_0x2ee374[_0x4281ae(0x29e)+_0x4281ae(0x16a4)]=!_0x2ee374['portraitFl'+_0x4281ae(0x16a4)]);continue;case'1':_0x456789[_0x4281ae(0x899)+'ngs'][_0x4281ae(0x552)+_0x4281ae(0x1318)+_0x4281ae(0x1270)]&&(_0x2ee374[_0x4281ae(0x552)+_0x4281ae(0xd02)]*=-(0x207+0x19fc+-0x1c02));continue;case'2':_0x1ad29b[_0x4281ae(0xeef)+'CutinVert']()&&(_0x2ee374['portraitFl'+_0x4281ae(0x15dd)]=!_0x2ee374[_0x4281ae(0x29e)+'ipVert']);continue;case'3':_0x2ee374[_0x4281ae(0x123e)+'e']+=_0x456789[_0x4281ae(0x899)+_0x4281ae(0x846)]['parallaxHu'+_0x4281ae(0x22a)+_0x4281ae(0x1323)]??-0x4*0x6f2+0x1*-0x1bb7+-0x377f*-0x1;continue;case'4':_0x456789['ExtraSetti'+_0x4281ae(0x846)][_0x4281ae(0x552)+_0x4281ae(0x12eb)+_0x4281ae(0x1270)]&&(_0x2ee374[_0x4281ae(0x552)+_0x4281ae(0xf13)]*=-(-0x46*0x16+0x19*0x122+-0x164d));continue;case'5':_0x1ad29b[_0x4281ae(0xeef)+_0x4281ae(0x490)]()&&(_0x2ee374[_0x4281ae(0x29e)+_0x4281ae(0x16a4)]=!_0x2ee374[_0x4281ae(0x29e)+'ipHorz']);continue;}break;}}}return _0x2ee374;},PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x12d7)+_0x4258d1(0x1f4)+_0x4258d1(0x60c)+_0x4258d1(0x72f),_0x4c0ca3=>{const _0x308783=_0x4258d1,_0x398ee6={'BxJBI':'cutinEnter'};if(!SceneManager['isSceneBat'+'tle']())return;if(!Imported[_0x308783(0xc20)+_0x308783(0x11ed)+_0x308783(0x1370)])return;VisuMZ[_0x308783(0xd5c)+_0x308783(0xc0b)](_0x4c0ca3,_0x4c0ca3);const _0x94637c=VisuMZ[_0x308783(0x337)]['CreateCuti'+'nSettings'](_0x4c0ca3);SceneManager['_scene'][_0x308783(0xe01)+_0x308783(0x67e)](_0x94637c);const _0x441a17=$gameTemp[_0x308783(0xb0b)+_0x308783(0xf36)+_0x308783(0x1456)+'r']();_0x441a17&&_0x4c0ca3[_0x308783(0x125f)+_0x308783(0x3a6)]&&_0x441a17[_0x308783(0xf48)+'e'](_0x398ee6['BxJBI']);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x12d7)+_0x4258d1(0xc15)+_0x4258d1(0x60c)+_0x4258d1(0x260),_0x10683a=>{const _0x35ac08=_0x4258d1,_0x7cb3de={'UXeiT':_0x35ac08(0x7e6)};if(!SceneManager['isSceneBat'+_0x35ac08(0x6e5)]())return;if(!Imported[_0x35ac08(0xc20)+'isualCutin'+_0x35ac08(0x1370)])return;VisuMZ['ConvertPar'+_0x35ac08(0xc0b)](_0x10683a,_0x10683a),SceneManager[_0x35ac08(0x14b3)][_0x35ac08(0xcf8)+'sualCutins']();const _0x251a1d=$gameTemp[_0x35ac08(0xb0b)+_0x35ac08(0xf36)+_0x35ac08(0x1456)+'r']();_0x251a1d&&_0x10683a[_0x35ac08(0x854)+'t']&&_0x251a1d[_0x35ac08(0xf48)+'e'](_0x7cb3de[_0x35ac08(0x168c)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x12d7)+_0x4258d1(0xc15)+'alCutinEff'+'ectType',_0x20b194=>{const _0x52069a=_0x4258d1,_0x2f2c5a={'IrYPn':_0x52069a(0x7e6)};if(!SceneManager[_0x52069a(0x614)+_0x52069a(0x6e5)]())return;if(!Imported[_0x52069a(0xc20)+_0x52069a(0x11ed)+_0x52069a(0x1370)])return;VisuMZ[_0x52069a(0xd5c)+_0x52069a(0xc0b)](_0x20b194,_0x20b194);const _0x307e42=_0x20b194[_0x52069a(0x1064)][_0x52069a(0x1bc)+'e']()[_0x52069a(0xbb6)]();SceneManager[_0x52069a(0x14b3)][_0x52069a(0x2ca)+_0x52069a(0x14b1)](_0x307e42);const _0x59f42d=$gameTemp['getLastPlu'+_0x52069a(0xf36)+_0x52069a(0x1456)+'r']();_0x59f42d&&_0x20b194[_0x52069a(0x854)+'t']&&_0x59f42d[_0x52069a(0xf48)+'e'](_0x2f2c5a['IrYPn']);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x12d7)+_0x4258d1(0x11dc)+'Entrance',_0x197d89=>{const _0x5b4c16=_0x4258d1,_0xfb943e={'RKIoD':'cutinEnter'};if(!SceneManager[_0x5b4c16(0x614)+_0x5b4c16(0x6e5)]())return;if(!Imported[_0x5b4c16(0xc20)+_0x5b4c16(0x11ed)+_0x5b4c16(0x1370)])return;const _0x1dcc54=$gameTemp[_0x5b4c16(0xb0b)+_0x5b4c16(0xf36)+'Interprete'+'r']();_0x1dcc54[_0x5b4c16(0xf48)+'e'](_0xfb943e[_0x5b4c16(0xbc5)]);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x12d7)+_0x4258d1(0x11dc)+'Exit',_0x5320eb=>{const _0x22d00e=_0x4258d1,_0x190a1c={'uSPcJ':_0x22d00e(0x7e6)};if(!SceneManager[_0x22d00e(0x614)+'tle']())return;if(!Imported[_0x22d00e(0xc20)+_0x22d00e(0x11ed)+_0x22d00e(0x1370)])return;const _0x33537d=$gameTemp[_0x22d00e(0xb0b)+'ginCommand'+_0x22d00e(0x1456)+'r']();_0x33537d['setWaitMod'+'e'](_0x190a1c[_0x22d00e(0x165d)]);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData['name'],_0x4258d1(0x94e)+_0x4258d1(0x2c9)+_0x4258d1(0x10dd),_0x1b8938=>{const _0x182353=_0x4258d1;if(!SceneManager[_0x182353(0x614)+'tle']())return;if(!Imported[_0x182353(0xda3)+_0x182353(0x166b)+'Union'])return;VisuMZ[_0x182353(0xd5c)+_0x182353(0xc0b)](_0x1b8938,_0x1b8938);const _0x3ab55c=VisuMZ[_0x182353(0x8ec)+'onSequence'+_0x182353(0xb00)](_0x1b8938[_0x182353(0xb00)]),_0x41ec4=_0x1b8938['MotionAni'][_0x182353(0x1bc)+'e']()[_0x182353(0xbb6)]();for(const _0x500d15 of _0x3ab55c){if(!_0x500d15)continue;_0x500d15['requestDra'+_0x182353(0xc6c)+_0x182353(0x39c)](_0x41ec4);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x94e)+_0x4258d1(0x2c9)+'sTimeScale',_0x3779e2=>{const _0x158cc8=_0x4258d1;if(!SceneManager[_0x158cc8(0x614)+_0x158cc8(0x6e5)]())return;if(!Imported[_0x158cc8(0xda3)+_0x158cc8(0x166b)+_0x158cc8(0xfc5)])return;VisuMZ[_0x158cc8(0xd5c)+_0x158cc8(0xc0b)](_0x3779e2,_0x3779e2);const _0x3c29f9=VisuMZ['CreateActi'+_0x158cc8(0xad7)+_0x158cc8(0xb00)](_0x3779e2[_0x158cc8(0xb00)]),_0x3325bb=_0x3779e2['TimeScale'];for(const _0x357d67 of _0x3c29f9){if(!_0x357d67)continue;_0x357d67[_0x158cc8(0xbdb)+'sData']()['timeScale']=_0x3325bb;}}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Ele'+_0x4258d1(0x71d)+_0x4258d1(0x1356),_0x5ead6e=>{const _0x169621=_0x4258d1;if(!SceneManager[_0x169621(0x614)+_0x169621(0x6e5)]())return;if(!Imported['VisuMZ_1_E'+'lementStat'+_0x169621(0xd4c)])return;VisuMZ[_0x169621(0xd5c)+_0x169621(0xc0b)](_0x5ead6e,_0x5ead6e);const _0x4f1b1d=BattleManager[_0x169621(0x15a2)],_0x3abffc=_0x5ead6e[_0x169621(0x10eb)];if(!_0x4f1b1d)return;_0x4f1b1d[_0x169621(0x3bc)+'eAddedElem'+_0x169621(0xe18)]=_0x3abffc;}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xa25)+_0x4258d1(0x128c),_0x21694d=>{const _0x6f6ac3=_0x4258d1;if(!SceneManager['isSceneBat'+'tle']())return;if(!Imported['VisuMZ_1_E'+'lementStat'+_0x6f6ac3(0xd4c)])return;const _0x28c0a4=BattleManager[_0x6f6ac3(0x15a2)];if(!_0x28c0a4)return;_0x28c0a4[_0x6f6ac3(0xc5d)+'ntChanges']();}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData['name'],_0x4258d1(0xa25)+_0x4258d1(0xcc7)+'Elements',_0xf98af2=>{const _0x3d69f5=_0x4258d1;if(!SceneManager['isSceneBat'+_0x3d69f5(0x6e5)]())return;if(!Imported[_0x3d69f5(0x59b)+_0x3d69f5(0x14fa)+_0x3d69f5(0xd4c)])return;VisuMZ[_0x3d69f5(0xd5c)+_0x3d69f5(0xc0b)](_0xf98af2,_0xf98af2);const _0x23c5bd=BattleManager['_action'],_0x27dcac=_0xf98af2[_0x3d69f5(0x10eb)];if(!_0x23c5bd)return;_0x23c5bd[_0x3d69f5(0x3bc)+_0x3d69f5(0xa31)+_0x3d69f5(0x14a9)]=_0x27dcac;}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],'ActSeq_Ele'+'ment_NullE'+_0x4258d1(0xd83),_0x1b8bbe=>{const _0x4eb1e0=_0x4258d1;if(!SceneManager[_0x4eb1e0(0x614)+_0x4eb1e0(0x6e5)]())return;if(!Imported[_0x4eb1e0(0x59b)+_0x4eb1e0(0x14fa)+_0x4eb1e0(0xd4c)])return;const _0xc9d41b=BattleManager[_0x4eb1e0(0x15a2)];if(!_0xc9d41b)return;_0xc9d41b['_battleCor'+_0x4eb1e0(0x521)]=!![];}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x819)+_0x4258d1(0x656)+_0x4258d1(0xd8c)+'ode',_0x27cb25=>{const _0x47da98=_0x4258d1;VisuMZ[_0x47da98(0x84e)+_0x47da98(0x12c5)]['ActSeq_Gri'+_0x47da98(0x656)+'imationAtN'+_0x47da98(0x148e)](_0x27cb25);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x819)+'d_AddPassi'+_0x4258d1(0x15e7)+'Node',_0x14fd0f=>{const _0x528e49=_0x4258d1;VisuMZ[_0x528e49(0x84e)+_0x528e49(0x12c5)][_0x528e49(0x819)+_0x528e49(0x70b)+_0x528e49(0x15e7)+_0x528e49(0xa80)](_0x14fd0f);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x819)+_0x4258d1(0x1056)+_0x4258d1(0x11f5),_0x166c03=>{const _0x3ca900=_0x4258d1;VisuMZ[_0x3ca900(0x84e)+_0x3ca900(0x12c5)][_0x3ca900(0x819)+'d_AddTrigg'+'erToNode'](_0x166c03);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Gri'+_0x4258d1(0x1056)+'erToNodeJS',_0x563887=>{const _0x465f9a=_0x4258d1;VisuMZ[_0x465f9a(0x84e)+'System'][_0x465f9a(0x819)+_0x465f9a(0x1056)+_0x465f9a(0x11f5)](_0x563887);}),PluginManager['registerCo'+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x819)+_0x4258d1(0x371)+'nIDAtNode',_0x31f332=>{const _0x4c468e=_0x4258d1;VisuMZ[_0x4c468e(0x84e)+'System'][_0x4c468e(0x819)+_0x4c468e(0x371)+_0x4c468e(0x12b6)](_0x31f332);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x819)+_0x4258d1(0x371)+_0x4258d1(0xa24),_0x3b0825=>{const _0x1b9003=_0x4258d1;VisuMZ[_0x1b9003(0x84e)+'System']['ActSeq_Gri'+_0x1b9003(0x371)+_0x1b9003(0xa24)](_0x3b0825);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x819)+'d_Animatio'+'nTypeAtNod'+'e',_0x28203a=>{const _0x3e2a21=_0x4258d1;VisuMZ['BattleGrid'+_0x3e2a21(0x12c5)][_0x3e2a21(0x819)+_0x3e2a21(0x371)+_0x3e2a21(0x15ce)+'e'](_0x28203a);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Gri'+_0x4258d1(0x143e)+_0x4258d1(0x3d7)+_0x4258d1(0xad2),_0x15fe51=>{const _0x5e269a=_0x4258d1;VisuMZ['BattleGrid'+'System'][_0x5e269a(0x819)+'d_ClearPas'+_0x5e269a(0x3d7)+'FromNode'](_0x15fe51);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x819)+_0x4258d1(0xccd)+_0x4258d1(0xfed)+_0x4258d1(0x940),_0xf71ea2=>{const _0x18bbe1=_0x4258d1;VisuMZ[_0x18bbe1(0x84e)+_0x18bbe1(0x12c5)][_0x18bbe1(0x819)+_0x18bbe1(0xccd)+'etsInDirec'+'tion'](_0xf71ea2);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x819)+_0x4258d1(0xcd6)+_0x4258d1(0xfe7),_0x2ddf18=>{const _0x2f0ac5=_0x4258d1;VisuMZ[_0x2f0ac5(0x84e)+_0x2f0ac5(0x12c5)][_0x2f0ac5(0x819)+'d_PullToTa'+'rgetNode'](_0x2ddf18);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Gri'+_0x4258d1(0x895)+_0x4258d1(0xf52),_0x2ad25e=>{const _0x3f9e85=_0x4258d1;VisuMZ[_0x3f9e85(0x84e)+'System'][_0x3f9e85(0x819)+_0x3f9e85(0x895)+_0x3f9e85(0xf52)](_0x2ad25e);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x819)+_0x4258d1(0x90f)+_0x4258d1(0x7c7)+'sFromNode',_0x22e9e8=>{const _0x4e62a9=_0x4258d1;VisuMZ['BattleGrid'+'System'][_0x4e62a9(0x819)+_0x4e62a9(0x90f)+_0x4e62a9(0x7c7)+'sFromNode'](_0x22e9e8);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x819)+_0x4258d1(0xecb)+_0x4258d1(0x7c1)+_0x4258d1(0x148e),_0x3f437c=>{const _0x1ba902=_0x4258d1;VisuMZ[_0x1ba902(0x84e)+_0x1ba902(0x12c5)][_0x1ba902(0x819)+'d_RemoveTr'+'iggerFromN'+_0x1ba902(0x148e)](_0x3f437c);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x819)+_0x4258d1(0xbd5)+'ToNode',_0x126eac=>{const _0x375bd8=_0x4258d1;VisuMZ['BattleGrid'+'System']['ActSeq_Gri'+'d_Teleport'+_0x375bd8(0xe31)](_0x126eac);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x819)+'d_Traverse'+_0x4258d1(0xe31),_0x30d2b6=>{const _0x531ffd=_0x4258d1;VisuMZ['BattleGrid'+_0x531ffd(0x12c5)][_0x531ffd(0x819)+_0x531ffd(0xc49)+_0x531ffd(0xe31)](_0x30d2b6);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x2c6)+_0x4258d1(0x4a8),_0x234ca9=>{const _0x249cba=_0x4258d1,_0x5c6ccf={'ZINnq':_0x249cba(0x79f),'fwOnf':_0x249cba(0x15c3)};if(!Imported[_0x249cba(0x13b5)+_0x249cba(0x1136)+'ts'])return;if(!SceneManager[_0x249cba(0x614)+_0x249cba(0x6e5)]())return;VisuMZ['ConvertPar'+_0x249cba(0xc0b)](_0x234ca9,_0x234ca9);const _0x40e3f9=VisuMZ[_0x249cba(0x8ec)+_0x249cba(0xad7)+_0x249cba(0xb00)](_0x234ca9[_0x249cba(0xb00)]);for(const _0x2a5c3d of _0x40e3f9){if(!_0x2a5c3d)continue;_0x2a5c3d[_0x249cba(0xc4c)+_0x249cba(0x79d)](_0x5c6ccf[_0x249cba(0x2f8)]),_0x2a5c3d['removeHorr'+'orEffect'](_0x5c6ccf[_0x249cba(0x5aa)]),_0x2a5c3d[_0x249cba(0xc4c)+'orEffect']('tv'),_0x2a5c3d[_0x249cba(0x5f1)+_0x249cba(0x1071)]();}$gamePlayer[_0x249cba(0x164d)]();}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x2c6)+'ror_Glitch'+'Create',_0x1909d8=>{const _0x4d19e6=_0x4258d1,_0x27232c={'yFnwF':_0x4d19e6(0x15c3),'zRDTd':function(_0x252e48,_0x199ce2){return _0x252e48/_0x199ce2;}};if(!Imported[_0x4d19e6(0x13b5)+_0x4d19e6(0x1136)+'ts'])return;if(!SceneManager[_0x4d19e6(0x614)+'tle']())return;VisuMZ['ConvertPar'+_0x4d19e6(0xc0b)](_0x1909d8,_0x1909d8);const _0x43ccef=VisuMZ[_0x4d19e6(0x8ec)+_0x4d19e6(0xad7)+_0x4d19e6(0xb00)](_0x1909d8[_0x4d19e6(0xb00)]),_0x5d2446=_0x27232c['yFnwF'];_0x1909d8[_0x4d19e6(0xfd3)]=Math[_0x4d19e6(0x438)](_0x27232c[_0x4d19e6(0x3e1)](_0x1909d8['slices'],-0x1*-0x49f+-0x1a00+0x1*0x1563)),_0x1909d8[_0x4d19e6(0xdfd)]=_0x1909d8['slices'],_0x1909d8[_0x4d19e6(0x268)+_0x4d19e6(0x47b)]=!![];for(const _0x430482 of _0x43ccef){if(!_0x430482)continue;_0x430482['setHorrorE'+_0x4d19e6(0xf44)+_0x4d19e6(0x846)](_0x5d2446,_0x1909d8);}$gamePlayer[_0x4d19e6(0x164d)]();}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Hor'+_0x4258d1(0xff9)+_0x4258d1(0x4c9),_0x3cf9af=>{const _0x36147f=_0x4258d1,_0x3bd99b={'rnxVg':_0x36147f(0x15c3)};if(!Imported[_0x36147f(0x13b5)+_0x36147f(0x1136)+'ts'])return;if(!SceneManager[_0x36147f(0x614)+_0x36147f(0x6e5)]())return;VisuMZ[_0x36147f(0xd5c)+'ams'](_0x3cf9af,_0x3cf9af);const _0x291d09=VisuMZ[_0x36147f(0x8ec)+_0x36147f(0xad7)+'Targets'](_0x3cf9af[_0x36147f(0xb00)]);for(const _0x52f1d5 of _0x291d09){if(!_0x52f1d5)continue;_0x52f1d5[_0x36147f(0xc4c)+_0x36147f(0x79d)](_0x3bd99b[_0x36147f(0xf7e)]);}$gamePlayer[_0x36147f(0x164d)]();}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x2c6)+_0x4258d1(0xa9f)+_0x4258d1(0x6b9),_0x3cb3f8=>{const _0x1504ab=_0x4258d1,_0x23b8f4={'BwYBb':'noise'};if(!Imported['VisuMZ_2_H'+_0x1504ab(0x1136)+'ts'])return;if(!SceneManager[_0x1504ab(0x614)+_0x1504ab(0x6e5)]())return;VisuMZ['ConvertPar'+_0x1504ab(0xc0b)](_0x3cb3f8,_0x3cb3f8);const _0x1778d6=VisuMZ[_0x1504ab(0x8ec)+_0x1504ab(0xad7)+'Targets'](_0x3cb3f8['Targets']),_0x14aed6=_0x23b8f4[_0x1504ab(0x2e8)];for(const _0x37b728 of _0x1778d6){if(!_0x37b728)continue;_0x37b728[_0x1504ab(0x148d)+'ffectSetti'+_0x1504ab(0x846)](_0x14aed6,_0x3cb3f8);}$gamePlayer[_0x1504ab(0x164d)]();}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x2c6)+_0x4258d1(0x1191)+'emove',_0x20e704=>{const _0xaf4389=_0x4258d1,_0x5c4dc7={'mGHzT':'noise'};if(!Imported['VisuMZ_2_H'+_0xaf4389(0x1136)+'ts'])return;if(!SceneManager[_0xaf4389(0x614)+_0xaf4389(0x6e5)]())return;VisuMZ[_0xaf4389(0xd5c)+_0xaf4389(0xc0b)](_0x20e704,_0x20e704);const _0xa801dc=VisuMZ[_0xaf4389(0x8ec)+_0xaf4389(0xad7)+_0xaf4389(0xb00)](_0x20e704[_0xaf4389(0xb00)]);for(const _0x5c6e99 of _0xa801dc){if(!_0x5c6e99)continue;_0x5c6e99[_0xaf4389(0xc4c)+_0xaf4389(0x79d)](_0x5c4dc7[_0xaf4389(0x695)]);}$gamePlayer[_0xaf4389(0x164d)]();}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Hor'+_0x4258d1(0x1a8)+'te',_0x513bad=>{const _0x28eaa3=_0x4258d1;if(!Imported[_0x28eaa3(0x13b5)+'orrorEffec'+'ts'])return;if(!SceneManager[_0x28eaa3(0x614)+_0x28eaa3(0x6e5)]())return;VisuMZ['ConvertPar'+_0x28eaa3(0xc0b)](_0x513bad,_0x513bad);const _0xf5229=VisuMZ[_0x28eaa3(0x8ec)+_0x28eaa3(0xad7)+'Targets'](_0x513bad[_0x28eaa3(0xb00)]),_0x33bcc0='tv';for(const _0xfa8bd2 of _0xf5229){if(!_0xfa8bd2)continue;_0xfa8bd2[_0x28eaa3(0x148d)+_0x28eaa3(0xf44)+_0x28eaa3(0x846)](_0x33bcc0,_0x513bad);}$gamePlayer['refresh']();}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x2c6)+_0x4258d1(0xa9b)+'ve',_0x42e162=>{const _0x3b00eb=_0x4258d1;if(!Imported[_0x3b00eb(0x13b5)+_0x3b00eb(0x1136)+'ts'])return;if(!SceneManager[_0x3b00eb(0x614)+_0x3b00eb(0x6e5)]())return;VisuMZ[_0x3b00eb(0xd5c)+_0x3b00eb(0xc0b)](_0x42e162,_0x42e162);const _0x1e6d54=VisuMZ[_0x3b00eb(0x8ec)+_0x3b00eb(0xad7)+_0x3b00eb(0xb00)](_0x42e162['Targets']);for(const _0x161ad3 of _0x1e6d54){if(!_0x161ad3)continue;_0x161ad3['removeHorr'+'orEffect']('tv');}$gamePlayer[_0x3b00eb(0x164d)]();}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0xd70)+'act_BlueRe'+'dInvert',_0x1b4614=>{const _0xa38923=_0x4258d1,_0x13a230={'iwPZz':function(_0x84d1ec,_0x33123d){return _0x84d1ec<=_0x33123d;},'EAceB':function(_0x579a61,_0x155060){return _0x579a61(_0x155060);},'vpkFl':_0xa38923(0xe0c)+_0xa38923(0x140c)+'ct\x20needs\x20a'+'n\x20update!'};if(!Imported['VisuMZ_3_A'+_0xa38923(0x60f)+'t'])return;const _0x5bc9eb=SceneManager[_0xa38923(0x14b3)][_0xa38923(0x1b3)];if(!_0x5bc9eb)return;if(_0x13a230[_0xa38923(0x149f)](VisuMZ[_0xa38923(0x31d)+'ct'][_0xa38923(0x389)],-0xdbd+0x5*0x1f5+0x3f5+0.040000000000000036)){_0x13a230[_0xa38923(0x107e)](alert,_0x13a230['vpkFl']),SceneManager[_0xa38923(0xfb6)]();return;}VisuMZ['ConvertPar'+_0xa38923(0xc0b)](_0x1b4614,_0x1b4614);const _0x56dba2=_0x1b4614[_0xa38923(0xa04)];_0x5bc9eb[_0xa38923(0x93e)+'edInvertIm'+_0xa38923(0xd87)](_0x56dba2);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xd70)+_0x4258d1(0x8fc)+'reak',_0x40103f=>{const _0x4498c0=_0x4258d1,_0x554299={'MRtip':_0x4498c0(0x12b7)};if(!SceneManager[_0x4498c0(0x614)+'tle']())return;if(!Imported[_0x4498c0(0x1403)+'ctSeqImpac'+'t'])return;const _0x5eafe7=SceneManager['_scene']['_spriteset'];if(!_0x5eafe7)return;VisuMZ[_0x4498c0(0xd5c)+_0x4498c0(0xc0b)](_0x40103f,_0x40103f);const _0x5d344e=_0x40103f['Intensity']||-0x13d*-0x19+0x2148+-0x100f*0x4,_0x3490b6=_0x40103f[_0x4498c0(0x3c1)]||0x2479+0x4e8+0x52c*-0x8,_0x34a1e1=_0x40103f[_0x4498c0(0xab5)]||_0x554299['MRtip'];_0x5eafe7[_0x4498c0(0x6b3)+_0x4498c0(0xa5c)+_0x4498c0(0xe66)](_0x5d344e,_0x3490b6,_0x34a1e1);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0xd70)+_0x4258d1(0x8ef)+_0x4258d1(0xfd2),_0xfbe3eb=>{const _0x455012=_0x4258d1,_0x27234d={'OFXeD':function(_0x1d8ad7,_0x3299a5){return _0x1d8ad7<=_0x3299a5;},'Rtevv':function(_0x4934a1,_0x392716){return _0x4934a1(_0x392716);},'aXBzr':_0x455012(0xe0c)+_0x455012(0x140c)+_0x455012(0xd98)+_0x455012(0x29a)};if(!Imported[_0x455012(0x1403)+_0x455012(0x60f)+'t'])return;const _0x11bcdf=SceneManager['_scene'][_0x455012(0x1b3)];if(!_0x11bcdf)return;if(_0x27234d['OFXeD'](VisuMZ[_0x455012(0x31d)+'ct']['version'],-0x8*0x32e+0x1*-0xa9f+-0x2*-0x1208+0.040000000000000036)){_0x27234d[_0x455012(0x28b)](alert,_0x27234d[_0x455012(0xb3b)]),SceneManager['exit']();return;}VisuMZ[_0x455012(0xd5c)+'ams'](_0xfbe3eb,_0xfbe3eb);const _0xdcd677=_0xfbe3eb['Enable'];_0x11bcdf[_0x455012(0xac4)+_0x455012(0x1307)+'tFilter'](_0xdcd677);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xd70)+_0x4258d1(0xfee)+_0x4258d1(0x15eb),_0x3be3c3=>{const _0x276bbd=_0x4258d1,_0x287923={'KgSOD':function(_0x216b3a,_0x559211){return _0x216b3a(_0x559211);},'iPkwe':function(_0x4589c5,_0x41a7f7){return _0x4589c5(_0x41a7f7);},'euvec':_0x276bbd(0x12b7)};if(!SceneManager[_0x276bbd(0x614)+_0x276bbd(0x6e5)]())return;if(!Imported[_0x276bbd(0x1403)+_0x276bbd(0x60f)+'t'])return;const _0x54f90a=SceneManager['_scene'][_0x276bbd(0x1b3)];if(!_0x54f90a)return;VisuMZ[_0x276bbd(0xd5c)+'ams'](_0x3be3c3,_0x3be3c3);const _0x1da054=_0x287923[_0x276bbd(0x5c0)](Number,_0x3be3c3[_0x276bbd(0x1314)])||0x1ac4+0x1feb+-0x3aaf,_0x4e61c1=_0x287923[_0x276bbd(0x1504)](Number,_0x3be3c3['Rate']),_0x9ed0d9=_0x3be3c3[_0x276bbd(0x3c1)]||-0x8*0x189+0x1db3+0x8b5*-0x2,_0x349344=_0x3be3c3[_0x276bbd(0xab5)]||_0x287923[_0x276bbd(0x336)];_0x54f90a[_0x276bbd(0x123d)+'nBlurImpac'+'tFilter'](_0x1da054,_0x4e61c1,_0x9ed0d9,_0x349344);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xd70)+_0x4258d1(0xfee)+'BlurTarget',_0x4c886e=>{const _0xc07b8f=_0x4258d1,_0x3554c9={'jCkGY':function(_0x4aeca6,_0x2707d2){return _0x4aeca6(_0x2707d2);},'xbeRO':_0xc07b8f(0x12b7)};if(!SceneManager[_0xc07b8f(0x614)+'tle']())return;if(!Imported[_0xc07b8f(0x1403)+'ctSeqImpac'+'t'])return;const _0x2ba575=SceneManager['_scene'][_0xc07b8f(0x1b3)];if(!_0x2ba575)return;VisuMZ[_0xc07b8f(0xd5c)+_0xc07b8f(0xc0b)](_0x4c886e,_0x4c886e);const _0x5eca58=_0x3554c9[_0xc07b8f(0x1212)](Number,_0x4c886e['Angle'])||0x62*0x49+-0x5e4+0x3*-0x75a,_0x4bce8b=_0x3554c9[_0xc07b8f(0x1212)](Number,_0x4c886e[_0xc07b8f(0x1394)]),_0x538e0c=_0x4c886e[_0xc07b8f(0x3c1)]||0x21*-0x10c+0x14b3*-0x1+0x340*0x11,_0x1b7879=_0x4c886e['EasingType']||_0x3554c9[_0xc07b8f(0x167e)],_0x200088=VisuMZ[_0xc07b8f(0x8ec)+_0xc07b8f(0xad7)+'Targets'](_0x4c886e[_0xc07b8f(0xb00)]);for(const _0x1e7b27 of _0x200088){if(!_0x1e7b27)continue;if(!_0x1e7b27[_0xc07b8f(0xc06)]())continue;_0x1e7b27[_0xc07b8f(0xc06)]()['setupMotio'+'nBlurImpac'+_0xc07b8f(0xb7f)](_0x5eca58,_0x4bce8b,_0x538e0c,_0x1b7879);}}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xd70)+_0x4258d1(0xfee)+'TrailCreat'+'e',_0x6ad9e9=>{const _0x1f160a=_0x4258d1;if(!SceneManager[_0x1f160a(0x614)+'tle']())return;if(!Imported['VisuMZ_3_A'+_0x1f160a(0x60f)+'t'])return;VisuMZ[_0x1f160a(0xd5c)+_0x1f160a(0xc0b)](_0x6ad9e9,_0x6ad9e9);const _0x2ab9cf={'delay':_0x6ad9e9[_0x1f160a(0xfc2)],'duration':_0x6ad9e9[_0x1f160a(0x1361)],'hue':_0x6ad9e9['hue'],'opacityStart':_0x6ad9e9[_0x1f160a(0x42c)+'rt'],'tone':_0x6ad9e9[_0x1f160a(0x13cf)],'visible':!![]},_0x30e615=VisuMZ['CreateActi'+_0x1f160a(0xad7)+_0x1f160a(0xb00)](_0x6ad9e9[_0x1f160a(0xb00)]);for(const _0x5a8815 of _0x30e615){if(!_0x5a8815)continue;_0x5a8815[_0x1f160a(0xae9)+_0x1f160a(0x7f2)+'lData'](_0x2ab9cf);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xd70)+_0x4258d1(0xfee)+_0x4258d1(0x807)+'e',_0x2e0164=>{const _0x3e14eb=_0x4258d1;if(!SceneManager[_0x3e14eb(0x614)+_0x3e14eb(0x6e5)]())return;if(!Imported['VisuMZ_3_A'+_0x3e14eb(0x60f)+'t'])return;VisuMZ[_0x3e14eb(0xd5c)+'ams'](_0x2e0164,_0x2e0164);const _0x4c8351=VisuMZ[_0x3e14eb(0x8ec)+'onSequence'+_0x3e14eb(0xb00)](_0x2e0164[_0x3e14eb(0xb00)]);for(const _0x5a8b8a of _0x4c8351){if(!_0x5a8b8a)continue;_0x5a8b8a[_0x3e14eb(0xe5d)+_0x3e14eb(0x119b)+_0x3e14eb(0x14b9)]();}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0xd70)+'act_Negati'+'ve',_0x3e13ec=>{const _0x566c36=_0x4258d1,_0x46d174={'Fhjet':function(_0x276e4d,_0x18d7d5){return _0x276e4d<=_0x18d7d5;},'jcpLp':function(_0x48072f,_0x3440dc){return _0x48072f(_0x3440dc);},'PbZCE':'Action\x20Seq'+'uence\x20Impa'+'ct\x20needs\x20a'+'n\x20update!'};if(!Imported[_0x566c36(0x1403)+_0x566c36(0x60f)+'t'])return;const _0x381cc5=SceneManager[_0x566c36(0x14b3)][_0x566c36(0x1b3)];if(!_0x381cc5)return;if(_0x46d174[_0x566c36(0x341)](VisuMZ[_0x566c36(0x31d)+'ct'][_0x566c36(0x389)],-0xe8d*0x1+-0x1f5f+0x2ded+0.040000000000000036)){_0x46d174[_0x566c36(0xcc5)](alert,_0x46d174[_0x566c36(0xbbb)]),SceneManager[_0x566c36(0xfb6)]();return;}VisuMZ[_0x566c36(0xd5c)+_0x566c36(0xc0b)](_0x3e13ec,_0x3e13ec);const _0x7390c7=_0x3e13ec[_0x566c36(0xa04)];_0x381cc5[_0x566c36(0xc27)+'iveImpactF'+_0x566c36(0xe66)](_0x7390c7);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xd70)+_0x4258d1(0xed4)+_0x4258d1(0xf21),_0x81d33a=>{const _0x153d85=_0x4258d1,_0x41567a={'kXMzq':function(_0x10b0fa,_0x3fc7ae){return _0x10b0fa<=_0x3fc7ae;},'bRSec':function(_0x4065b5,_0x5b5bb6){return _0x4065b5(_0x5b5bb6);},'WaBzk':_0x153d85(0xe0c)+_0x153d85(0x140c)+_0x153d85(0xd98)+_0x153d85(0x29a)};if(!Imported[_0x153d85(0x1403)+_0x153d85(0x60f)+'t'])return;const _0x7f843d=SceneManager[_0x153d85(0x14b3)][_0x153d85(0x1b3)];if(!_0x7f843d)return;if(_0x41567a[_0x153d85(0x264)](VisuMZ[_0x153d85(0x31d)+'ct'][_0x153d85(0x389)],0x2144*-0x1+0xa59*0x2+0xc93+0.040000000000000036)){_0x41567a[_0x153d85(0xa0c)](alert,_0x41567a['WaBzk']),SceneManager['exit']();return;}VisuMZ[_0x153d85(0xd5c)+'ams'](_0x81d33a,_0x81d33a);const _0x17d097=_0x81d33a[_0x153d85(0xa04)];_0x7f843d['setupOvers'+'aturateImp'+_0x153d85(0x5a4)](_0x17d097);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData['name'],_0x4258d1(0xd70)+'act_Shockw'+_0x4258d1(0xd66),_0x5018ed=>{const _0x154de4=_0x4258d1;if(!Imported[_0x154de4(0x1403)+'ctSeqImpac'+'t'])return;const _0x1c460d=SceneManager[_0x154de4(0x14b3)][_0x154de4(0x1b3)];if(!_0x1c460d)return;VisuMZ[_0x154de4(0xd5c)+_0x154de4(0xc0b)](_0x5018ed,_0x5018ed);const _0x4c9106=_0x5018ed['X']||0x189d+0x1*0x18+-0x18b5,_0x550c98=_0x5018ed['Y']||-0x16e4+0x123b*0x1+-0x4a9*-0x1,_0x2854a8=_0x5018ed['Amp']||0xbb*-0x34+0xeff+-0x16fd*-0x1,_0x44dda1=_0x5018ed[_0x154de4(0x117e)]||-0x1*-0x138b+0x20*-0x102+0xcb5,_0x3519cf=_0x5018ed['Duration']||-0x1*-0xedb+-0x2399*-0x1+-0x3273;_0x1c460d[_0x154de4(0xb5a)+'waveImpact'+_0x154de4(0x6cc)](_0x4c9106,_0x550c98,_0x2854a8,_0x44dda1,_0x3519cf);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0xd70)+_0x4258d1(0x1175)+'aveEachTar'+_0x4258d1(0x9c0),_0x1bb27c=>{const _0x3873ac=_0x4258d1,_0x25d149={'pgRbG':function(_0x55b750,_0x2083ca){return _0x55b750/_0x2083ca;},'mPZla':function(_0x599739,_0x3c7363){return _0x599739-_0x3c7363;},'jIYNA':function(_0x244703,_0x123d82){return _0x244703/_0x123d82;},'VtFSk':function(_0x459107,_0x54eb5c){return _0x459107*_0x54eb5c;},'ixlBI':function(_0x204333,_0x900bd1){return _0x204333*_0x900bd1;},'CiRpt':function(_0x428e14,_0x505a39){return _0x428e14/_0x505a39;}};if(!SceneManager['isSceneBat'+_0x3873ac(0x6e5)]())return;if(!Imported['VisuMZ_3_A'+_0x3873ac(0x60f)+'t'])return;const _0x18d9b5=SceneManager['_scene'][_0x3873ac(0x1b3)];if(!_0x18d9b5)return;VisuMZ[_0x3873ac(0xd5c)+_0x3873ac(0xc0b)](_0x1bb27c,_0x1bb27c);const _0x129137=VisuMZ[_0x3873ac(0x8ec)+_0x3873ac(0xad7)+_0x3873ac(0xb00)](_0x1bb27c[_0x3873ac(0xb00)]),_0x5c278d=_0x1bb27c[_0x3873ac(0x681)+'tion'],_0x451f6b=_0x1bb27c[_0x3873ac(0x1521)]||0x2cf+0x962*-0x4+0x22b9,_0x14505d=_0x1bb27c[_0x3873ac(0x114e)]||-0x6*-0x47d+-0x25e7+0xaf9,_0x1699e2=_0x1bb27c[_0x3873ac(0x375)]||0x1*-0xde6+0x1*0x13+-0x1*-0xdd3,_0x410745=_0x1bb27c[_0x3873ac(0x117e)]||0x21d9+-0x215a*0x1+-0x1*0x7f,_0x343efc=_0x1bb27c[_0x3873ac(0x3c1)]||0x17a5+-0x14*-0x199+-0x4*0xde6;for(const _0x1cdeb5 of _0x129137){if(!_0x1cdeb5)continue;if(!_0x1cdeb5[_0x3873ac(0xc06)]())continue;const _0xf27a19=_0x1cdeb5[_0x3873ac(0xc06)]();let _0x5b0874=_0xf27a19[_0x3873ac(0x921)],_0x3ad1b9=_0xf27a19[_0x3873ac(0x1085)];_0x5b0874+=_0x25d149[_0x3873ac(0x619)](_0x25d149['mPZla'](Graphics['width'],Graphics[_0x3873ac(0x1309)]),-0x1d2*0x6+0x1*-0xe67+0x1*0x1955),_0x3ad1b9+=_0x25d149['jIYNA'](_0x25d149[_0x3873ac(0x136f)](Graphics[_0x3873ac(0x1594)],Graphics['boxHeight']),0x95f*-0x1+-0x1f*0xc+0x2f*0x3b);if(_0x5c278d[_0x3873ac(0x79c)](/front/i))_0x5b0874+=_0x25d149[_0x3873ac(0x619)](_0x25d149[_0x3873ac(0x1190)](_0x1cdeb5[_0x3873ac(0xaf5)]()?-0xced+-0x19f*-0x1+0xb4f:-(-0x141e+0x2ee+0x1131),_0xf27a19[_0x3873ac(0x10f3)+_0x3873ac(0x22c)]()),-0xc1d+-0x2*0x973+0x1*0x1f05);else _0x5c278d[_0x3873ac(0x79c)](/back/i)&&(_0x5b0874+=_0x25d149[_0x3873ac(0x619)](_0x25d149[_0x3873ac(0x6f2)](_0x1cdeb5[_0x3873ac(0xaf5)]()?-(-0x2687+0x1ce6+0x3*0x336):0x2567+-0xb*0x2ab+-0x80d,_0xf27a19[_0x3873ac(0x10f3)+_0x3873ac(0x22c)]()),-0x87e+0xccc+-0x44c));if(_0x5c278d['match'](/head/i))_0x3ad1b9-=_0xf27a19[_0x3873ac(0x10f3)+_0x3873ac(0x156a)]();else _0x5c278d['match'](/center/i)&&(_0x3ad1b9-=_0x25d149[_0x3873ac(0x1484)](_0xf27a19[_0x3873ac(0x10f3)+_0x3873ac(0x156a)](),0x70d+-0x2202*0x1+-0x75*-0x3b));_0x5b0874+=_0x451f6b,_0x3ad1b9+=_0x14505d,_0x18d9b5[_0x3873ac(0xb5a)+'waveImpact'+_0x3873ac(0x6cc)](_0x5b0874,_0x3ad1b9,_0x1699e2,_0x410745,_0x343efc);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xd70)+_0x4258d1(0x1175)+_0x4258d1(0xab2)+_0x4258d1(0x89c),_0x56e89a=>{const _0x4b2ccb=_0x4258d1,_0x5b2f58={'fbCPe':function(_0x4364dd,_0x421b45){return _0x4364dd>=_0x421b45;},'cUKzG':function(_0x4b8a6d,_0x50a4b8){return _0x4b8a6d/_0x50a4b8;},'bgiHb':function(_0x2cb64f,_0x166767){return _0x2cb64f+_0x166767;},'leJKf':function(_0x53b4ed,_0x1331a0){return _0x53b4ed+_0x1331a0;},'RTKgd':function(_0x270fac,_0x1f410b){return _0x270fac-_0x1f410b;},'LJRta':function(_0x11b0d9,_0x55e444){return _0x11b0d9-_0x55e444;}};if(!SceneManager[_0x4b2ccb(0x614)+'tle']())return;if(!Imported[_0x4b2ccb(0x1403)+_0x4b2ccb(0x60f)+'t'])return;const _0x4e041e=SceneManager[_0x4b2ccb(0x14b3)][_0x4b2ccb(0x1b3)];if(!_0x4e041e)return;VisuMZ[_0x4b2ccb(0xd5c)+_0x4b2ccb(0xc0b)](_0x56e89a,_0x56e89a);const _0x44b5c4=VisuMZ[_0x4b2ccb(0x8ec)+_0x4b2ccb(0xad7)+_0x4b2ccb(0xb00)](_0x56e89a[_0x4b2ccb(0xb00)]),_0x49de52=_0x56e89a[_0x4b2ccb(0x681)+_0x4b2ccb(0x940)],_0x47a808=_0x56e89a[_0x4b2ccb(0x1521)]||0x1bad*0x1+-0x25bf+0xa12,_0x37bfe6=_0x56e89a['OffsetY']||0x22*-0xa3+-0x14c+-0x59*-0x42,_0x58be8b=_0x56e89a[_0x4b2ccb(0x375)]||-0x201f+0x2408+-0x3e9,_0xe9bdb4=_0x56e89a[_0x4b2ccb(0x117e)]||0x73+0x199c+-0x1*0x1a0f,_0x2ca85a=_0x56e89a[_0x4b2ccb(0x3c1)]||-0x27b+-0x1218+0xa4a*0x2,_0xd37de1=Math[_0x4b2ccb(0xd3a)](..._0x44b5c4['map'](_0x2836c5=>_0x2836c5[_0x4b2ccb(0xc06)]()[_0x4b2ccb(0x921)]-_0x2836c5[_0x4b2ccb(0xc06)]()[_0x4b2ccb(0x10f3)+_0x4b2ccb(0x22c)]()/(0x108e+0xa97+-0x1b23))),_0x3d7b6f=Math[_0x4b2ccb(0x503)](..._0x44b5c4['map'](_0x16ada7=>_0x16ada7[_0x4b2ccb(0xc06)]()[_0x4b2ccb(0x921)]+_0x16ada7[_0x4b2ccb(0xc06)]()[_0x4b2ccb(0x10f3)+'Width']()/(0x10ba*0x2+-0x2*-0xdde+0x1*-0x3d2e))),_0x143a34=Math[_0x4b2ccb(0xd3a)](..._0x44b5c4[_0x4b2ccb(0x15f9)](_0x528ec6=>_0x528ec6['battler']()[_0x4b2ccb(0x1085)]-_0x528ec6['battler']()[_0x4b2ccb(0x10f3)+_0x4b2ccb(0x156a)]())),_0x1f89e5=Math[_0x4b2ccb(0x503)](..._0x44b5c4[_0x4b2ccb(0x15f9)](_0xe2598f=>_0xe2598f[_0x4b2ccb(0xc06)]()[_0x4b2ccb(0x1085)])),_0x14879e=_0x44b5c4[_0x4b2ccb(0x7de)](_0x399508=>_0x399508[_0x4b2ccb(0x1580)]())[_0x4b2ccb(0x1645)],_0x1db7ef=_0x44b5c4[_0x4b2ccb(0x7de)](_0x30fa8e=>_0x30fa8e[_0x4b2ccb(0xaf5)]())['length'];let _0x477985=-0x20a1+-0x46b+0x250c,_0xe148de=-0xdf6+-0x1561+-0x6d*-0x53;if(_0x49de52[_0x4b2ccb(0x79c)](/front/i))_0x477985=_0x5b2f58[_0x4b2ccb(0x1353)](_0x14879e,_0x1db7ef)?_0xd37de1:_0x3d7b6f;else{if(_0x49de52[_0x4b2ccb(0x79c)](/middle/i))_0x477985=_0x5b2f58[_0x4b2ccb(0xb4c)](_0x5b2f58['bgiHb'](_0xd37de1,_0x3d7b6f),-0x1a+0x239*-0x11+0x1*0x25e5),melee=-(0x145b+0x3*-0xfa+-0x116c);else _0x49de52['match'](/back/i)&&(_0x477985=_0x5b2f58[_0x4b2ccb(0x1353)](_0x14879e,_0x1db7ef)?_0x3d7b6f:_0xd37de1);}if(_0x49de52[_0x4b2ccb(0x79c)](/head/i))_0xe148de=_0x143a34;else{if(_0x49de52[_0x4b2ccb(0x79c)](/center/i))_0xe148de=_0x5b2f58[_0x4b2ccb(0xb4c)](_0x5b2f58[_0x4b2ccb(0xf1c)](_0x143a34,_0x1f89e5),0x176+0x3fd*-0x2+0x686);else _0x49de52[_0x4b2ccb(0x79c)](/base/i)&&(_0xe148de=_0x1f89e5);}_0x477985+=_0x5b2f58['cUKzG'](_0x5b2f58[_0x4b2ccb(0x137c)](Graphics[_0x4b2ccb(0xc2a)],Graphics['boxWidth']),-0x1b*0x135+0x1c31+-0x5e*-0xc),_0xe148de+=_0x5b2f58[_0x4b2ccb(0xb4c)](_0x5b2f58[_0x4b2ccb(0xc75)](Graphics['height'],Graphics[_0x4b2ccb(0x744)]),-0x1f*-0x2+0x12b+-0x1*0x167),_0x477985+=_0x47a808,_0xe148de+=_0x37bfe6,_0x4e041e[_0x4b2ccb(0xb5a)+_0x4b2ccb(0x671)+_0x4b2ccb(0x6cc)](_0x477985,_0xe148de,_0x58be8b,_0xe9bdb4,_0x2ca85a);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0xd70)+_0x4258d1(0xcd8)+'ale',_0x4201be=>{const _0xcc4de2=_0x4258d1,_0x43be6c={'FbyuH':function(_0x9c5ec5,_0x5f0a16){return _0x9c5ec5<=_0x5f0a16;},'YNDkC':function(_0x3341fe,_0x426e22){return _0x3341fe(_0x426e22);},'xoKWS':'Action\x20Seq'+_0xcc4de2(0x140c)+_0xcc4de2(0xd98)+_0xcc4de2(0x29a)};if(!Imported[_0xcc4de2(0x1403)+'ctSeqImpac'+'t'])return;const _0x3c78f8=SceneManager['_scene'][_0xcc4de2(0x1b3)];if(!_0x3c78f8)return;if(_0x43be6c[_0xcc4de2(0xabe)](VisuMZ['ActSeqImpa'+'ct']['version'],-0x1b0d+-0x135d*0x2+0x41c8+0.040000000000000036)){_0x43be6c[_0xcc4de2(0x12f0)](alert,_0x43be6c[_0xcc4de2(0x13b6)]),SceneManager[_0xcc4de2(0xfb6)]();return;}VisuMZ[_0xcc4de2(0xd5c)+_0xcc4de2(0xc0b)](_0x4201be,_0x4201be);const _0x357891=$gameTemp[_0xcc4de2(0xb0b)+'ginCommand'+'Interprete'+'r'](),_0x5ef43a=Math[_0xcc4de2(0x503)](-0x11dc+0x1da1+-0xbc5+0.01,_0x4201be[_0xcc4de2(0xa59)]);$gameTemp[_0xcc4de2(0xb99)+_0xcc4de2(0xaa5)+_0xcc4de2(0xfb8)](_0x5ef43a,_0x357891);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xd70)+'act_TimeSt'+'op',_0x163d41=>{const _0x344bf2=_0x4258d1,_0x28aaf0={'VLjfW':function(_0x37034b,_0x1aac80){return _0x37034b<=_0x1aac80;},'lRPnX':function(_0x520c42,_0x18317d){return _0x520c42(_0x18317d);},'uNXBV':_0x344bf2(0xe0c)+_0x344bf2(0x140c)+_0x344bf2(0xd98)+_0x344bf2(0x29a)};if(!Imported[_0x344bf2(0x1403)+'ctSeqImpac'+'t'])return;const _0x4b9103=SceneManager[_0x344bf2(0x14b3)][_0x344bf2(0x1b3)];if(!_0x4b9103)return;if(_0x28aaf0['VLjfW'](VisuMZ[_0x344bf2(0x31d)+'ct'][_0x344bf2(0x389)],0xe8d+0xb*-0x1ee+-0x26*-0x2d+0.040000000000000036)){_0x28aaf0[_0x344bf2(0x457)](alert,_0x28aaf0[_0x344bf2(0x10b4)]),SceneManager['exit']();return;}VisuMZ[_0x344bf2(0xd5c)+_0x344bf2(0xc0b)](_0x163d41,_0x163d41);const _0x390f69=$gameTemp['getLastPlu'+_0x344bf2(0xf36)+'Interprete'+'r'](),_0xd94cb9=_0x163d41['ms']||0x1013*0x1+-0x1caf+0xc9d;VisuMZ[_0x344bf2(0x31d)+'ct'][_0x344bf2(0xedd)](_0xd94cb9,_0x390f69);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],'ActSeq_Imp'+_0x4258d1(0x5d1)+'urPoint',_0xf45647=>{const _0x1d7455=_0x4258d1,_0x1f437a={'VBIaz':'Linear'};if(!Imported['VisuMZ_3_A'+_0x1d7455(0x60f)+'t'])return;const _0x357dbf=SceneManager['_scene'][_0x1d7455(0x1b3)];if(!_0x357dbf)return;VisuMZ['ConvertPar'+_0x1d7455(0xc0b)](_0xf45647,_0xf45647);const _0x468b29=_0xf45647['X']||0x19db+0x1*0xe4+0xa7*-0x29,_0x2721ae=_0xf45647['Y']||0x1f1b+0x1998+-0x38b3,_0x38b2f9=_0xf45647[_0x1d7455(0x326)]||-0xa7f*-0x2+-0xba*0x11+-0x8a4,_0x4ba4c0=_0xf45647[_0x1d7455(0x979)]||-0x1*-0x782+-0x22*-0xce+0x116f*-0x2,_0x3ef7b2=_0xf45647[_0x1d7455(0x3c1)]||-0x140*-0x1+-0x1636+-0x6fd*-0x3,_0x12cded=_0xf45647['EasingType']||_0x1f437a['VBIaz'];_0x357dbf[_0x1d7455(0xa6b)+'lurImpactF'+'ilter'](_0x38b2f9,_0x468b29,_0x2721ae,_0x4ba4c0,_0x3ef7b2,_0x12cded);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData['name'],_0x4258d1(0xd70)+_0x4258d1(0x5d1)+'urTargetCe'+_0x4258d1(0x541),_0x3642dc=>{const _0x506296=_0x4258d1,_0x5c3b38={'cFOMk':_0x506296(0x12b7),'wlQJj':function(_0xf7d181,_0x159b89){return _0xf7d181>=_0x159b89;},'cHseT':function(_0x5657cf,_0xdd8675){return _0x5657cf/_0xdd8675;},'UWAjx':function(_0x24eb2d,_0x589884){return _0x24eb2d+_0x589884;},'JbckP':function(_0x1a341d,_0x5da7fa){return _0x1a341d/_0x5da7fa;},'jcuAl':function(_0x3d02e7,_0x14921b){return _0x3d02e7+_0x14921b;},'CrvWP':function(_0xe63a18,_0x271d50){return _0xe63a18/_0x271d50;},'LROhj':function(_0x6ed595,_0x42b9d2){return _0x6ed595-_0x42b9d2;}};if(!Imported['VisuMZ_3_A'+_0x506296(0x60f)+'t'])return;const _0x18e598=SceneManager[_0x506296(0x14b3)][_0x506296(0x1b3)];if(!_0x18e598)return;VisuMZ['ConvertPar'+_0x506296(0xc0b)](_0x3642dc,_0x3642dc);const _0x4fc1c5=VisuMZ['CreateActi'+'onSequence'+_0x506296(0xb00)](_0x3642dc[_0x506296(0xb00)]),_0x55a5c9=_0x3642dc[_0x506296(0x681)+_0x506296(0x940)],_0x5029a8=_0x3642dc[_0x506296(0x1521)]||0x85*-0x3a+-0x2357+0x4179,_0x5c68f4=_0x3642dc[_0x506296(0x114e)]||0x1*0x1b61+0x18e9+0x123*-0x2e,_0x3c53d4=_0x3642dc[_0x506296(0x326)]||-0x1ee9+0x265d+0x3*-0x27c,_0x19f809=_0x3642dc[_0x506296(0x979)]||0x2*0x3b3+0x25*-0x97+0xe6d,_0x3502a6=_0x3642dc[_0x506296(0x3c1)]||-0x26fd+0x4d6+0x2228,_0x5d8449=_0x3642dc[_0x506296(0xab5)]||_0x5c3b38['cFOMk'],_0x26006a=Math[_0x506296(0xd3a)](..._0x4fc1c5['map'](_0x407876=>_0x407876[_0x506296(0xc06)]()[_0x506296(0x921)]-_0x407876[_0x506296(0xc06)]()['mainSprite'+_0x506296(0x22c)]()/(0x18*-0xb8+-0x2211+0x3353))),_0x59271e=Math[_0x506296(0x503)](..._0x4fc1c5[_0x506296(0x15f9)](_0x29a3cb=>_0x29a3cb[_0x506296(0xc06)]()[_0x506296(0x921)]+_0x29a3cb[_0x506296(0xc06)]()[_0x506296(0x10f3)+'Width']()/(0x2*-0xd88+-0xcd9+-0x3a1*-0xb))),_0x1db6ed=Math[_0x506296(0xd3a)](..._0x4fc1c5[_0x506296(0x15f9)](_0x588a63=>_0x588a63[_0x506296(0xc06)]()[_0x506296(0x1085)]-_0x588a63[_0x506296(0xc06)]()[_0x506296(0x10f3)+_0x506296(0x156a)]())),_0x2c58e7=Math[_0x506296(0x503)](..._0x4fc1c5['map'](_0x3f198c=>_0x3f198c['battler']()[_0x506296(0x1085)])),_0x3211b2=_0x4fc1c5[_0x506296(0x7de)](_0x223916=>_0x223916[_0x506296(0x1580)]())[_0x506296(0x1645)],_0x3b9978=_0x4fc1c5[_0x506296(0x7de)](_0x3bf447=>_0x3bf447[_0x506296(0xaf5)]())[_0x506296(0x1645)];let _0x4712bb=0x61*0x2e+-0x2*0x2bc+-0xbf6,_0x2aa925=0x5d6*-0x5+-0x84c*0x2+0x2dc6;if(_0x55a5c9[_0x506296(0x79c)](/front/i))_0x4712bb=_0x5c3b38[_0x506296(0x7d3)](_0x3211b2,_0x3b9978)?_0x26006a:_0x59271e;else{if(_0x55a5c9[_0x506296(0x79c)](/middle/i))_0x4712bb=_0x5c3b38[_0x506296(0x149c)](_0x5c3b38['UWAjx'](_0x26006a,_0x59271e),0xd45+-0x3*-0x175+-0x11a2),melee=-(0x1f*0x135+0x1db5+-0x431f);else _0x55a5c9['match'](/back/i)&&(_0x4712bb=_0x5c3b38['wlQJj'](_0x3211b2,_0x3b9978)?_0x59271e:_0x26006a);}if(_0x55a5c9[_0x506296(0x79c)](/head/i))_0x2aa925=_0x1db6ed;else{if(_0x55a5c9[_0x506296(0x79c)](/center/i))_0x2aa925=_0x5c3b38['JbckP'](_0x5c3b38[_0x506296(0x1426)](_0x1db6ed,_0x2c58e7),0xcb5*0x3+-0x1*-0x1b4+-0x27d1);else _0x55a5c9[_0x506296(0x79c)](/base/i)&&(_0x2aa925=_0x2c58e7);}_0x4712bb+=_0x5c3b38[_0x506296(0x1057)](_0x5c3b38[_0x506296(0x101d)](Graphics[_0x506296(0xc2a)],Graphics[_0x506296(0x1309)]),-0xb72+-0x126d*0x1+0x1de1),_0x2aa925+=_0x5c3b38[_0x506296(0xcb6)](_0x5c3b38[_0x506296(0x101d)](Graphics[_0x506296(0x1594)],Graphics[_0x506296(0x744)]),0x25*0xbb+-0xa96+-0x106f),_0x4712bb+=_0x5029a8,_0x2aa925+=_0x5c68f4,_0x18e598[_0x506296(0xa6b)+_0x506296(0x947)+'ilter'](_0x3c53d4,_0x4712bb,_0x2aa925,_0x19f809,_0x3502a6,_0x5d8449);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xde4)+_0x4258d1(0x10f5)+_0x4258d1(0xb4d),_0x26386a=>{const _0x4994c6=_0x4258d1,_0x49c203={'qoTdS':function(_0x2c890d,_0x3b9077){return _0x2c890d<=_0x3b9077;},'jDaZS':function(_0x56ab80,_0xe6f1bb){return _0x56ab80(_0xe6f1bb);},'yLucE':'Action\x20Seq'+'uence\x20Impa'+_0x4994c6(0xd98)+'n\x20update!','xDRjj':_0x4994c6(0x13db)+'ctPrep'};if(!Imported[_0x4994c6(0x1403)+_0x4994c6(0x60f)+'t'])return;const _0x4cee1a=SceneManager['_scene'][_0x4994c6(0x1b3)];if(!_0x4cee1a)return;if(_0x49c203[_0x4994c6(0x9ec)](VisuMZ[_0x4994c6(0x31d)+'ct'][_0x4994c6(0x389)],-0xe47*0x1+0x213b+-0x12f3+0.050000000000000044)){_0x49c203[_0x4994c6(0xcb4)](alert,_0x49c203['yLucE']),SceneManager[_0x4994c6(0xfb6)]();return;}VisuMZ[_0x4994c6(0xd5c)+_0x4994c6(0xc0b)](_0x26386a,_0x26386a);const _0xa56266=VisuMZ[_0x4994c6(0x8ec)+'onSequence'+_0x4994c6(0xb00)](_0x26386a[_0x4994c6(0xb00)]),_0x291ee2={'filename':_0x26386a['Filename'],'horzCells':_0x26386a[_0x4994c6(0x12ed)]||0x942*0x1+0x6b*-0x41+0x2*0x8f5,'vertCells':_0x26386a[_0x4994c6(0x8e1)]||-0x16ab+-0x99+0x1745,'frameDelay':_0x26386a[_0x4994c6(0x153e)]||0x1*0x1421+-0x1d5f+0x93f,'smooth':_0x26386a[_0x4994c6(0xa2d)]||![],'anchorX':_0x26386a[_0x4994c6(0x15a3)]||0xd*0x2de+-0x1*0x1736+0xc8*-0x12,'anchorY':_0x26386a['anchorY']||0xd8b*0x1+-0x12e8+0x55d,'offsetX':_0x26386a[_0x4994c6(0xc66)]||-0x7af*0x3+0x17*-0x173+-0x407*-0xe,'offsetY':_0x26386a[_0x4994c6(0xce9)]||-0xb7e*-0x1+-0x1a6*0xd+0x9f0};for(const _0x1d7576 of _0xa56266){if(!_0x1d7576)continue;if(!_0x1d7576[_0x4994c6(0xc06)]())continue;_0x1d7576['battler']()[_0x4994c6(0x344)+_0x4994c6(0x12ad)](_0x291ee2);}const _0x4b65a2=$gameTemp[_0x4994c6(0xb0b)+_0x4994c6(0xf36)+_0x4994c6(0x1456)+'r']();_0x4b65a2&&_0x4b65a2['setWaitMod'+'e'](_0x49c203[_0x4994c6(0x526)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xde4)+_0x4258d1(0x10f5)+_0x4258d1(0xb12),_0x3c2233=>{const _0x3b3595=_0x4258d1,_0x169631={'kOdpM':function(_0x4986c0,_0x5c211c){return _0x4986c0<=_0x5c211c;},'LoAtH':function(_0x10207b,_0x14bce4){return _0x10207b(_0x14bce4);},'KePAd':_0x3b3595(0xe0c)+_0x3b3595(0x140c)+_0x3b3595(0xd98)+_0x3b3595(0x29a)};if(!Imported[_0x3b3595(0x1403)+_0x3b3595(0x60f)+'t'])return;const _0x27a834=SceneManager[_0x3b3595(0x14b3)][_0x3b3595(0x1b3)];if(!_0x27a834)return;if(_0x169631[_0x3b3595(0x12b5)](VisuMZ[_0x3b3595(0x31d)+'ct']['version'],-0xb*0x3d+0x186f+-0x745*0x3+0.050000000000000044)){_0x169631[_0x3b3595(0x11ab)](alert,_0x169631['KePAd']),SceneManager[_0x3b3595(0xfb6)]();return;}VisuMZ[_0x3b3595(0xd5c)+_0x3b3595(0xc0b)](_0x3c2233,_0x3c2233);const _0x34d794=VisuMZ[_0x3b3595(0x8ec)+_0x3b3595(0xad7)+'Targets'](_0x3c2233['Targets']);for(const _0x31dc8a of _0x34d794){if(!_0x31dc8a)continue;if(!_0x31dc8a[_0x3b3595(0xc06)]())continue;_0x31dc8a[_0x3b3595(0xc06)]()[_0x3b3595(0xbf9)+'Animation']();}}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xde4)+_0x4258d1(0x10f5)+'ionPauseRe'+_0x4258d1(0x334),_0x5c9b96=>{const _0x376ed8=_0x4258d1,_0x474ea2={'NyCwh':function(_0x7db878,_0x3dca97){return _0x7db878<=_0x3dca97;},'psznu':function(_0x4462d1,_0x1965c1){return _0x4462d1(_0x1965c1);},'fiddZ':_0x376ed8(0xe0c)+'uence\x20Impa'+_0x376ed8(0xd98)+_0x376ed8(0x29a)};if(!Imported[_0x376ed8(0x1403)+'ctSeqImpac'+'t'])return;const _0x4fa3b5=SceneManager['_scene'][_0x376ed8(0x1b3)];if(!_0x4fa3b5)return;if(_0x474ea2[_0x376ed8(0x263)](VisuMZ[_0x376ed8(0x31d)+'ct']['version'],0x33c+-0x19b4+0x1679*0x1+0.050000000000000044)){_0x474ea2[_0x376ed8(0x3a7)](alert,_0x474ea2[_0x376ed8(0xa23)]),SceneManager[_0x376ed8(0xfb6)]();return;}VisuMZ[_0x376ed8(0xd5c)+_0x376ed8(0xc0b)](_0x5c9b96,_0x5c9b96);const _0x1875da=VisuMZ[_0x376ed8(0x8ec)+_0x376ed8(0xad7)+_0x376ed8(0xb00)](_0x5c9b96['Targets']),_0x2599fc=_0x5c9b96[_0x376ed8(0x1038)];for(const _0x2602ee of _0x1875da){if(!_0x2602ee)continue;if(!_0x2602ee[_0x376ed8(0xc06)]())continue;_0x2602ee[_0x376ed8(0xc06)]()[_0x376ed8(0x159a)+'tAnimation'](_0x2599fc);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0xde4)+_0x4258d1(0x13e1)+'rInjectAni',_0x322ea0=>{const _0x237932=_0x4258d1,_0x38090b={'suoRa':_0x237932(0x13db)+_0x237932(0xc44)};if(!SceneManager[_0x237932(0x614)+_0x237932(0x6e5)]())return;const _0x162604=$gameTemp['getLastPlu'+_0x237932(0xf36)+_0x237932(0x1456)+'r']();if(!_0x162604)return;_0x162604[_0x237932(0xf48)+'e'](_0x38090b[_0x237932(0xd99)]);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+'hanics_Act'+'ionEffect',_0x32b42a=>{const _0x22197c=_0x4258d1,_0x3da36d={'pqIjA':function(_0x4ddbd5,_0x363ee9){return _0x4ddbd5||_0x363ee9;},'NWDCR':_0x22197c(0xaf6)+'ct','MYIrK':_0x22197c(0xc11)};if(!SceneManager[_0x22197c(0x614)+_0x22197c(0x6e5)]())return;VisuMZ['ConvertPar'+_0x22197c(0xc0b)](_0x32b42a,_0x32b42a);const _0x44a8ce=$gameTemp[_0x22197c(0xb0b)+_0x22197c(0xf36)+_0x22197c(0x1456)+'r'](),_0x39ebaa=BattleManager[_0x22197c(0x15a2)],_0x5ef50d=BattleManager[_0x22197c(0xa47)],_0x43771a=BattleManager[_0x22197c(0x579)];if(_0x3da36d[_0x22197c(0x13f1)](!_0x44a8ce,!_0x39ebaa)||!_0x5ef50d)return;if(!_0x39ebaa[_0x22197c(0x780)]())return;const _0x4544cf=VisuMZ[_0x22197c(0x8ec)+'onSequence'+_0x22197c(0xb00)](_0x32b42a['Targets']);for(const _0x1d36fb of _0x4544cf){if(!_0x1d36fb)continue;_0x43771a[_0x22197c(0x88f)](_0x3da36d[_0x22197c(0x1133)],_0x5ef50d,_0x1d36fb);}_0x44a8ce[_0x22197c(0xf48)+'e'](_0x3da36d[_0x22197c(0x151f)]);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x114d)+'hanics_Act'+'iveChainIn'+_0x4258d1(0x4e8),_0x1be82d=>{const _0x2b1bd3=_0x4258d1;if(!SceneManager[_0x2b1bd3(0x614)+_0x2b1bd3(0x6e5)]())return;if(!Imported['VisuMZ_3_A'+_0x2b1bd3(0x5d3)+'Skills'])return;$gameTemp[_0x2b1bd3(0xe88)+'tionEnd']=!![];}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x677)+_0x4258d1(0x363),_0x23b20d=>{const _0x305236=_0x4258d1,_0x2d02b7={'Wlksk':_0x305236(0x8ac),'lYUsB':_0x305236(0xdab),'MXWSt':_0x305236(0x887),'NCDry':_0x305236(0xe65),'Wzudr':_0x305236(0xfa5),'RYZkn':_0x305236(0xc62),'BxUWD':_0x305236(0xad0),'jooFX':'LUK','coyHl':function(_0x3b6fec,_0x7c0b71){return _0x3b6fec>=_0x7c0b71;},'SyrPX':function(_0x16e0b9,_0x549fea){return _0x16e0b9<=_0x549fea;},'NfbvE':function(_0x735eb1,_0x5146c4){return _0x735eb1<=_0x5146c4;}};if(!SceneManager['isSceneBat'+_0x305236(0x6e5)]())return;VisuMZ[_0x305236(0xd5c)+_0x305236(0xc0b)](_0x23b20d,_0x23b20d);const _0x260acb=[_0x2d02b7[_0x305236(0x2a9)],_0x2d02b7[_0x305236(0xd7b)],_0x2d02b7['MXWSt'],_0x2d02b7[_0x305236(0x115f)],_0x2d02b7[_0x305236(0xb03)],_0x2d02b7[_0x305236(0xf25)],_0x2d02b7[_0x305236(0x7c2)],_0x2d02b7[_0x305236(0x1050)]],_0x133fb0=_0x23b20d['Buffs'],_0x43f269=_0x23b20d['Debuffs'],_0x204d53=_0x23b20d['Turns'],_0x365a31=VisuMZ[_0x305236(0x8ec)+_0x305236(0xad7)+_0x305236(0xb00)](_0x23b20d[_0x305236(0xb00)]);for(const _0x134c8b of _0x365a31){if(!_0x134c8b)continue;for(const _0x461bbf of _0x133fb0){const _0x2d6e35=_0x260acb['indexOf'](_0x461bbf[_0x305236(0x191)+'e']()[_0x305236(0xbb6)]());_0x2d02b7['coyHl'](_0x2d6e35,-0x1*-0xa6d+-0x499+-0x175*0x4)&&_0x2d02b7[_0x305236(0xa74)](_0x2d6e35,-0x12ec*0x1+-0xd92+0x2085)&&_0x134c8b[_0x305236(0x153a)](_0x2d6e35,_0x204d53);}for(const _0x2d2e25 of _0x43f269){const _0x1fb9b9=_0x260acb['indexOf'](_0x2d2e25[_0x305236(0x191)+'e']()[_0x305236(0xbb6)]());_0x2d02b7[_0x305236(0xcbe)](_0x1fb9b9,-0x16a1*-0x1+-0x20cf+-0xa2e*-0x1)&&_0x2d02b7[_0x305236(0x1200)](_0x1fb9b9,-0x185*0x9+0x10c+0xca8)&&_0x134c8b[_0x305236(0x352)](_0x1fb9b9,_0x204d53);}}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x677)+_0x4258d1(0xe3b),_0x2b8ff0=>{const _0x382ede=_0x4258d1;if(!SceneManager['isSceneBat'+'tle']())return;VisuMZ[_0x382ede(0xd5c)+_0x382ede(0xc0b)](_0x2b8ff0,_0x2b8ff0);const _0x5c0397=_0x2b8ff0[_0x382ede(0x1287)],_0x2799a3=VisuMZ[_0x382ede(0x8ec)+'onSequence'+_0x382ede(0xb00)](_0x2b8ff0[_0x382ede(0xb00)]);for(const _0x4fb82d of _0x2799a3){if(!_0x4fb82d)continue;for(const _0x329ef6 of _0x5c0397){_0x4fb82d[_0x382ede(0x122f)](_0x329ef6);}}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x542)+'orPenetrat'+_0x4258d1(0x1485),_0xb7fa8=>{const _0x569e87=_0x4258d1;if(!SceneManager['isSceneBat'+'tle']())return;VisuMZ['ConvertPar'+_0x569e87(0xc0b)](_0xb7fa8,_0xb7fa8);const _0x1d99ba=BattleManager[_0x569e87(0x15a2)],_0x56cc7e={'arPenRate':_0xb7fa8[_0x569e87(0xacf)],'arPenFlat':_0xb7fa8['ArPenFlat'],'arRedRate':_0xb7fa8['ArRedRate'],'arRedFlat':_0xb7fa8[_0x569e87(0x95f)]};_0x1d99ba[_0x569e87(0x1182)+_0x569e87(0x896)]=_0x56cc7e;}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x1548)+_0x4258d1(0x77a)+'ss',_0x5871a9=>{const _0x251418=_0x4258d1;if(!SceneManager[_0x251418(0x614)+'tle']())return;if(!Imported[_0x251418(0xf86)+_0x251418(0x5ef)+_0x251418(0xc2e)])return;VisuMZ[_0x251418(0xd5c)+_0x251418(0xc0b)](_0x5871a9,_0x5871a9);const _0x102d70=VisuMZ['CreateActi'+_0x251418(0xad7)+_0x251418(0xb00)](_0x5871a9['Targets']),_0x230234=_0x5871a9['Reveal']||-0x419+-0x2229+0x3*0xcc1;for(const _0x2acfbe of _0x102d70){if(!_0x2acfbe)continue;if(!_0x2acfbe[_0x251418(0xaf5)]())continue;_0x2acfbe[_0x251418(0x13e9)+_0x251418(0x8be)](_0x230234);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0xc8c)+_0x4258d1(0x14df),_0x193265=>{const _0xd6f225=_0x4258d1;if(!SceneManager[_0xd6f225(0x614)+_0xd6f225(0x6e5)]())return;if(!Imported[_0xd6f225(0xd6f)+_0xd6f225(0xa8d)+_0xd6f225(0x3eb)])return;if(!BattleManager[_0xd6f225(0xf69)]())return;VisuMZ['ConvertPar'+_0xd6f225(0xc0b)](_0x193265,_0x193265);const _0x41e40a=VisuMZ[_0xd6f225(0x8ec)+_0xd6f225(0xad7)+_0xd6f225(0xb00)](_0x193265['Targets']),_0x29b3c4=_0x193265[_0xd6f225(0x15b6)],_0x37d9eb=_0x193265['ChargeRate'],_0x4ea60b=_0x193265['Interrupt'];for(const _0x179e78 of _0x41e40a){if(!_0x179e78)continue;if(_0x179e78[_0xd6f225(0x920)+_0xd6f225(0x139f)]())_0x179e78[_0xd6f225(0x910)+'hargeTime'](_0x29b3c4);else{if(_0x179e78[_0xd6f225(0x524)+_0xd6f225(0x2c5)]()){_0x179e78['changeAtbC'+'astTime'](_0x37d9eb);if(_0x4ea60b)_0x179e78[_0xd6f225(0xff6)+'pt']();}}}}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Mec'+_0x4258d1(0x1202)+_0x4258d1(0x158e)+_0x4258d1(0x1299),_0x9ffb4f=>{const _0x19f2cc=_0x4258d1;if(!SceneManager[_0x19f2cc(0x614)+'tle']())return;if(!Imported[_0x19f2cc(0x33b)+_0x19f2cc(0x87e)])return;VisuMZ['ConvertPar'+_0x19f2cc(0xc0b)](_0x9ffb4f,_0x9ffb4f);const _0x577e6c=VisuMZ[_0x19f2cc(0x8ec)+'onSequence'+_0x19f2cc(0xb00)](_0x9ffb4f[_0x19f2cc(0xb00)]),_0x4ed792=_0x9ffb4f[_0x19f2cc(0xb2d)+'s'];for(const _0x3ca2c6 of _0x577e6c){if(!_0x3ca2c6)continue;_0x3ca2c6[_0x19f2cc(0xb42)+_0x19f2cc(0xb2d)+'s'](_0x4ed792);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Mec'+_0x4258d1(0x1202)+_0x4258d1(0x18f)+_0x4258d1(0x71e),_0x4be894=>{const _0x3d6919=_0x4258d1;if(!SceneManager[_0x3d6919(0x614)+'tle']())return;if(!Imported[_0x3d6919(0x33b)+'oostAction'])return;if(!BattleManager[_0x3d6919(0xa47)])return;VisuMZ[_0x3d6919(0xd5c)+_0x3d6919(0xc0b)](_0x4be894,_0x4be894);const _0x9630cc=_0x4be894[_0x3d6919(0x13aa)];$gameVariables['setValue'](_0x9630cc,BattleManager[_0x3d6919(0xa47)][_0x3d6919(0x1388)+_0x3d6919(0x505)]());}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x32d)+'akShieldCh'+_0x4258d1(0x1299),_0xc215d7=>{const _0x5f1eb7=_0x4258d1;if(!SceneManager[_0x5f1eb7(0x614)+_0x5f1eb7(0x6e5)]())return;if(!Imported[_0x5f1eb7(0x134a)+_0x5f1eb7(0x200)+'s'])return;VisuMZ['ConvertPar'+_0x5f1eb7(0xc0b)](_0xc215d7,_0xc215d7);const _0x205721=VisuMZ[_0x5f1eb7(0x8ec)+_0x5f1eb7(0xad7)+_0x5f1eb7(0xb00)](_0xc215d7[_0x5f1eb7(0xb00)]),_0x4ecfd1=_0xc215d7[_0x5f1eb7(0xa7c)+'ds'];for(const _0x464787 of _0x205721){if(!_0x464787)continue;if(_0x464787['isBreakStu'+_0x5f1eb7(0x945)]())continue;if(!_0x464787[_0x5f1eb7(0xc14)+_0x5f1eb7(0x1c7)+_0x5f1eb7(0xdd7)]())continue;_0x464787['alterBreak'+'Shield'](_0x4ecfd1);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x114d)+_0x4258d1(0x32d)+_0x4258d1(0x1207)+_0x4258d1(0x12f3),_0x2b8a68=>{const _0x12846d=_0x4258d1;if(!SceneManager['isSceneBat'+_0x12846d(0x6e5)]())return;if(!Imported['VisuMZ_4_B'+_0x12846d(0x200)+'s'])return;VisuMZ[_0x12846d(0xd5c)+'ams'](_0x2b8a68,_0x2b8a68);const _0x584a3c=VisuMZ[_0x12846d(0x8ec)+_0x12846d(0xad7)+_0x12846d(0xb00)](_0x2b8a68['Targets']);for(const _0x347804 of _0x584a3c){if(!_0x347804)continue;if(_0x347804[_0x12846d(0x169d)+_0x12846d(0x945)]())continue;if(!_0x347804[_0x12846d(0xc14)+_0x12846d(0x1c7)+_0x12846d(0xdd7)]())continue;_0x347804[_0x12846d(0x1ff)+_0x12846d(0x218)]();}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x114d)+_0x4258d1(0x605)+_0x4258d1(0xd77),_0x3b32ec=>{const _0x4c78b7=_0x4258d1;if(!SceneManager[_0x4c78b7(0x614)+'tle']())return;if(!Imported[_0x4c78b7(0xd6f)+_0x4c78b7(0xa8d)+_0x4c78b7(0x11cc)])return;if(!BattleManager[_0x4c78b7(0x985)]())return;VisuMZ[_0x4c78b7(0xd5c)+_0x4c78b7(0xc0b)](_0x3b32ec,_0x3b32ec);const _0x183c6d=VisuMZ[_0x4c78b7(0x8ec)+_0x4c78b7(0xad7)+_0x4c78b7(0xb00)](_0x3b32ec[_0x4c78b7(0xb00)]),_0x13c4aa=_0x3b32ec[_0x4c78b7(0x7dc)+'s'];for(const _0x4c7e10 of _0x183c6d){if(!_0x4c7e10)continue;_0x4c7e10[_0x4c78b7(0x230)+'oints'](_0x13c4aa);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x28a)+'lapse',_0x12da9a=>{const _0x3673b1=_0x4258d1,_0x2f6237={'HvaKL':function(_0x38b23c,_0xb1d36e){return _0x38b23c||_0xb1d36e;},'GLtZs':_0x3673b1(0x9e6)+'ct'};if(!SceneManager[_0x3673b1(0x614)+_0x3673b1(0x6e5)]())return;VisuMZ[_0x3673b1(0xd5c)+_0x3673b1(0xc0b)](_0x12da9a,_0x12da9a);const _0x5968c5=$gameTemp[_0x3673b1(0xb0b)+_0x3673b1(0xf36)+_0x3673b1(0x1456)+'r'](),_0x5ce7dd=BattleManager[_0x3673b1(0x15a2)],_0x3005ba=BattleManager[_0x3673b1(0xa47)];if(_0x2f6237[_0x3673b1(0xdc1)](!_0x5968c5,!_0x5ce7dd)||!_0x3005ba)return;if(!_0x5ce7dd[_0x3673b1(0x780)]())return;const _0x31b6b9=VisuMZ[_0x3673b1(0x8ec)+_0x3673b1(0xad7)+_0x3673b1(0xb00)](_0x12da9a[_0x3673b1(0xb00)]);for(const _0x472508 of _0x31b6b9){if(!_0x472508)continue;_0x12da9a[_0x3673b1(0x9fa)]&&(_0x472508[_0x3673b1(0xc97)+_0x3673b1(0x1159)](),_0x472508['addState'](_0x472508[_0x3673b1(0x10da)+'Id']())),_0x472508['isDeathSta'+_0x3673b1(0xb7b)]()&&_0x472508['performCol'+'lapse']();}_0x5968c5['setWaitMod'+'e'](_0x2f6237[_0x3673b1(0xd3c)]);}),PluginManager['registerCo'+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0xbd6)+_0x4258d1(0xf5e),_0x2a8161=>{const _0x17a67e=_0x4258d1;if(!SceneManager[_0x17a67e(0x614)+'tle']())return;if(!Imported[_0x17a67e(0xd6f)+_0x17a67e(0xa8d)+_0x17a67e(0xfb7)])return;if(!BattleManager[_0x17a67e(0x105d)]())return;VisuMZ[_0x17a67e(0xd5c)+_0x17a67e(0xc0b)](_0x2a8161,_0x2a8161);const _0x55ed3b=VisuMZ[_0x17a67e(0x8ec)+_0x17a67e(0xad7)+_0x17a67e(0xb00)](_0x2a8161[_0x17a67e(0xb00)]),_0x13c056=_0x2a8161['ChangeOrde'+'rBy'];for(const _0x13bb58 of _0x55ed3b){if(!_0x13bb58)continue;_0x13bb58[_0x17a67e(0x6a6)+_0x17a67e(0xb07)](_0x13c056);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Mec'+_0x4258d1(0xbd6)+'Speed',_0x1c510b=>{const _0x13f235=_0x4258d1,_0xe4fde3={'cUVMJ':function(_0x377e22,_0xe19558){return _0x377e22===_0xe19558;},'ZMiZY':_0x13f235(0x8a1),'EVwed':function(_0x5a2ccc,_0x25a291){return _0x5a2ccc===_0x25a291;},'nrNJw':_0x13f235(0xb08)};if(!SceneManager[_0x13f235(0x614)+_0x13f235(0x6e5)]())return;if(!Imported[_0x13f235(0xd6f)+_0x13f235(0xa8d)+'mCTB'])return;if(!BattleManager[_0x13f235(0x105d)]())return;VisuMZ['ConvertPar'+'ams'](_0x1c510b,_0x1c510b);const _0x15b217=VisuMZ['CreateActi'+_0x13f235(0xad7)+_0x13f235(0xb00)](_0x1c510b[_0x13f235(0xb00)]),_0x3729d1=_0x1c510b['ChargeRate'],_0x3ff0b2=_0x1c510b['ChargeRate'];for(const _0x50a944 of _0x15b217){if(!_0x50a944)continue;if(_0xe4fde3['cUVMJ'](_0x50a944[_0x13f235(0x1419)],_0xe4fde3[_0x13f235(0x9f9)]))_0x50a944[_0x13f235(0x1203)+_0x13f235(0x6f5)](_0x3729d1);else _0xe4fde3[_0x13f235(0x12b9)](_0x50a944[_0x13f235(0x1419)],_0xe4fde3[_0x13f235(0x92a)])&&_0x50a944['changeCtbC'+_0x13f235(0x161a)](_0x3ff0b2);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x114d)+_0x4258d1(0x930)+_0x4258d1(0x34b)+_0x4258d1(0x15db),_0x5e8d23=>{const _0x34b986=_0x4258d1;if(!SceneManager['isSceneBat'+_0x34b986(0x6e5)]())return;VisuMZ['ConvertPar'+_0x34b986(0xc0b)](_0x5e8d23,_0x5e8d23);const _0x191947=BattleManager[_0x34b986(0x15a2)];if(!_0x191947)return;let _0x28aaf7=_0x5e8d23[_0x34b986(0xb7e)];_0x191947['setCustomD'+'amageFormu'+'la'](_0x28aaf7);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],'ActSeq_Mec'+_0x4258d1(0x799)+_0x4258d1(0x582),_0x5524bf=>{const _0x14b100=_0x4258d1;if(!SceneManager[_0x14b100(0x614)+_0x14b100(0x6e5)]())return;VisuMZ[_0x14b100(0xd5c)+_0x14b100(0xc0b)](_0x5524bf,_0x5524bf);const _0x87e56a=VisuMZ[_0x14b100(0x8ec)+_0x14b100(0xad7)+_0x14b100(0xb00)](_0x5524bf[_0x14b100(0xb00)]);for(const _0xc2b697 of _0x87e56a){if(!_0xc2b697)continue;if(_0xc2b697['shouldPopu'+_0x14b100(0x994)]())_0xc2b697[_0x14b100(0x14d6)+'ePopup']();}}),PluginManager['registerCo'+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0xfb9)+_0x4258d1(0x131d),_0x1295d0=>{const _0x5c111d=_0x4258d1,_0x32e322={'wdKCQ':function(_0x5ec27e,_0x6df613){return _0x5ec27e!==_0x6df613;},'ImPHh':_0x5c111d(0xe34)};if(!SceneManager[_0x5c111d(0x614)+_0x5c111d(0x6e5)]())return;VisuMZ[_0x5c111d(0xd5c)+_0x5c111d(0xc0b)](_0x1295d0,_0x1295d0);const _0x7f0a2d=$gameTemp['getLastPlu'+_0x5c111d(0xf36)+_0x5c111d(0x1456)+'r'](),_0x13e8a3=BattleManager[_0x5c111d(0xa47)],_0x203557=_0x1295d0[_0x5c111d(0xae7)+'l'];if(!_0x7f0a2d)return;if(!_0x13e8a3)return;_0x13e8a3&&_0x13e8a3[_0x5c111d(0xfce)]()&&_0x32e322['wdKCQ'](_0x203557[_0x5c111d(0x191)+'e']()[_0x5c111d(0xbb6)](),_0x32e322[_0x5c111d(0x14bd)])&&_0x7f0a2d[_0x5c111d(0xa92)]([_0x203557]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0xb6e)+_0x4258d1(0xe1d)+'Effect',_0x6cb72=>{const _0x423b75=_0x4258d1,_0x4df187={'acPcF':'emulateAct'+'ionEffect','nkqtc':_0x423b75(0xc11)};if(!SceneManager[_0x423b75(0x614)+'tle']())return;VisuMZ[_0x423b75(0xd5c)+'ams'](_0x6cb72,_0x6cb72);const _0x2c5209=$gameTemp[_0x423b75(0xb0b)+'ginCommand'+_0x423b75(0x1456)+'r'](),_0x5da07a=BattleManager[_0x423b75(0x579)];if(!_0x2c5209)return;const _0x459b1b=VisuMZ[_0x423b75(0x8ec)+_0x423b75(0xad7)+'Targets'](_0x6cb72['Users']),_0x3697de=VisuMZ['CreateActi'+'onSequence'+_0x423b75(0xb00)](_0x6cb72[_0x423b75(0xb00)]);for(const _0x1b4373 of _0x459b1b){for(const _0x3ec962 of _0x3697de){if(!_0x3ec962)continue;const _0x5425be=$dataSkills[_0x1b4373['attackSkil'+_0x423b75(0x7ab)]()];_0x5da07a[_0x423b75(0x88f)](_0x4df187[_0x423b75(0xdd5)],_0x1b4373,_0x3ec962,_0x5425be);}}_0x2c5209[_0x423b75(0xf48)+'e'](_0x4df187[_0x423b75(0x9e4)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+'hanics_Emu'+_0x4258d1(0x669)+_0x4258d1(0x1026),_0x3b5706=>{const _0x5047be=_0x4258d1,_0x58dd25={'buvTG':_0x5047be(0xf18)+_0x5047be(0xf56),'HVfFH':_0x5047be(0xc11)};if(!SceneManager[_0x5047be(0x614)+_0x5047be(0x6e5)]())return;VisuMZ[_0x5047be(0xd5c)+_0x5047be(0xc0b)](_0x3b5706,_0x3b5706);const _0x38ccc1=$gameTemp['getLastPlu'+_0x5047be(0xf36)+_0x5047be(0x1456)+'r'](),_0x154428=BattleManager[_0x5047be(0x579)];if(!_0x38ccc1)return;const _0x1dbe33=VisuMZ[_0x5047be(0x8ec)+_0x5047be(0xad7)+'Targets'](_0x3b5706[_0x5047be(0x1150)]),_0x3c341d=VisuMZ['CreateActi'+'onSequence'+_0x5047be(0xb00)](_0x3b5706[_0x5047be(0xb00)]);for(const _0x426346 of _0x1dbe33){for(const _0x1eba09 of _0x3c341d){if(!_0x1eba09)continue;const _0x5ce9a1=$dataSkills[_0x426346[_0x5047be(0x7c4)+'Id']()];_0x154428['push'](_0x58dd25[_0x5047be(0x400)],_0x426346,_0x1eba09,_0x5ce9a1);}}_0x38ccc1[_0x5047be(0xf48)+'e'](_0x58dd25[_0x5047be(0x556)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+'hanics_Emu'+_0x4258d1(0x335)+_0x4258d1(0xcc8),_0x313b27=>{const _0x3cf698=_0x4258d1,_0x21ee0f={'bDANQ':function(_0x3b14ec,_0x2501b4){return _0x3b14ec(_0x2501b4);},'mcqKe':'emulateAct'+_0x3cf698(0xf56),'lCHCD':_0x3cf698(0xc11)};if(!SceneManager[_0x3cf698(0x614)+_0x3cf698(0x6e5)]())return;VisuMZ[_0x3cf698(0xd5c)+_0x3cf698(0xc0b)](_0x313b27,_0x313b27);const _0x3a2570=$gameTemp[_0x3cf698(0xb0b)+_0x3cf698(0xf36)+_0x3cf698(0x1456)+'r'](),_0x13463d=BattleManager[_0x3cf698(0x579)],_0xfea585=_0x21ee0f[_0x3cf698(0xf5b)](Number,_0x313b27[_0x3cf698(0xb65)]||0x2e*-0x29+0x525+0x23a),_0x5e12f7=$dataItems[_0xfea585];if(!_0x3a2570)return;if(!_0x5e12f7)return;const _0x169be3=VisuMZ[_0x3cf698(0x8ec)+_0x3cf698(0xad7)+_0x3cf698(0xb00)](_0x313b27[_0x3cf698(0x1150)]),_0xe419df=VisuMZ['CreateActi'+_0x3cf698(0xad7)+_0x3cf698(0xb00)](_0x313b27[_0x3cf698(0xb00)]);for(const _0x240a0d of _0x169be3){for(const _0x1fd18e of _0xe419df){if(!_0x1fd18e)continue;_0x13463d['push'](_0x21ee0f[_0x3cf698(0x401)],_0x240a0d,_0x1fd18e,_0x5e12f7);}}_0x3a2570['setWaitMod'+'e'](_0x21ee0f[_0x3cf698(0x1351)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x114d)+_0x4258d1(0xb6e)+'lateSkillC'+_0x4258d1(0x135f),_0x4a6694=>{const _0x124d86=_0x4258d1,_0x574ed8={'lMwsv':function(_0x1d8317,_0x2d4818){return _0x1d8317(_0x2d4818);},'EajbC':function(_0x1c9277,_0x154e41){return _0x1c9277<=_0x154e41;}};if(!SceneManager['isSceneBat'+_0x124d86(0x6e5)]())return;VisuMZ[_0x124d86(0xd5c)+'ams'](_0x4a6694,_0x4a6694);let _0x4f62c2=_0x574ed8['lMwsv'](Number,_0x4a6694[_0x124d86(0xd45)]||0x196*-0x8+0x1*-0x1abb+-0x276b*-0x1);if(_0x574ed8[_0x124d86(0x8d8)](_0x4f62c2,0x11*0xa3+0xef2+0x19c5*-0x1)){const _0x32590b=BattleManager['_action'];if(_0x32590b&&_0x32590b[_0x124d86(0x83f)]())_0x4f62c2=_0x32590b['item']()['id'];else return;}const _0x8c8c84=$dataSkills[_0x4f62c2];if(!_0x8c8c84)return;const _0x516823=VisuMZ[_0x124d86(0x8ec)+_0x124d86(0xad7)+_0x124d86(0xb00)](_0x4a6694[_0x124d86(0x1150)]);for(const _0x3c1486 of _0x516823){_0x3c1486[_0x124d86(0xb30)+'st'](_0x8c8c84);}}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x114d)+'hanics_Emu'+_0x4258d1(0xc94)+_0x4258d1(0x1026),_0x435827=>{const _0x46ea67=_0x4258d1,_0x1110a1={'hPoBO':function(_0x16bd20,_0x392d5e){return _0x16bd20(_0x392d5e);},'mFmIP':'emulateAct'+_0x46ea67(0xf56),'mtwLP':_0x46ea67(0xc11)};if(!SceneManager[_0x46ea67(0x614)+_0x46ea67(0x6e5)]())return;VisuMZ[_0x46ea67(0xd5c)+_0x46ea67(0xc0b)](_0x435827,_0x435827);const _0x13e7a4=$gameTemp[_0x46ea67(0xb0b)+_0x46ea67(0xf36)+_0x46ea67(0x1456)+'r'](),_0x31e04a=BattleManager['_logWindow'],_0x29177c=_0x1110a1[_0x46ea67(0xe5c)](Number,_0x435827[_0x46ea67(0xd45)]||0x9*-0x1a7+0x39e*0x6+-0x6d4),_0x9a8324=$dataSkills[_0x29177c];if(!_0x13e7a4)return;if(!_0x9a8324)return;const _0x287bcb=VisuMZ[_0x46ea67(0x8ec)+_0x46ea67(0xad7)+_0x46ea67(0xb00)](_0x435827[_0x46ea67(0x1150)]),_0x129b83=VisuMZ['CreateActi'+_0x46ea67(0xad7)+_0x46ea67(0xb00)](_0x435827[_0x46ea67(0xb00)]);for(const _0x14b78b of _0x287bcb){for(const _0x57ad79 of _0x129b83){if(!_0x57ad79)continue;_0x31e04a[_0x46ea67(0x88f)](_0x1110a1[_0x46ea67(0x1632)],_0x14b78b,_0x57ad79,_0x9a8324);}}_0x13e7a4[_0x46ea67(0xf48)+'e'](_0x1110a1[_0x46ea67(0xf3f)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0xaea)+_0x4258d1(0x1646),_0x1a3fa8=>{const _0x315dfd=_0x4258d1;if(!SceneManager[_0x315dfd(0x614)+_0x315dfd(0x6e5)]())return;VisuMZ['ConvertPar'+_0x315dfd(0xc0b)](_0x1a3fa8,_0x1a3fa8);const _0x18a7a3=VisuMZ[_0x315dfd(0x8ec)+_0x315dfd(0xad7)+_0x315dfd(0xb00)](_0x1a3fa8[_0x315dfd(0xb00)]);for(const _0x3b186f of _0x18a7a3){if(!_0x3b186f)continue;if(!_0x3b186f['isEnemy']())continue;_0x3b186f[_0x315dfd(0x117a)]();}}),PluginManager['registerCo'+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x1689)+_0x4258d1(0x10d1),_0x194162=>{const _0x40470a=_0x4258d1;if(!SceneManager[_0x40470a(0x614)+'tle']())return;if(!Imported[_0x40470a(0xd6f)+_0x40470a(0xa8d)+_0x40470a(0x845)])return;if(!BattleManager['isETB']())return;VisuMZ['ConvertPar'+_0x40470a(0xc0b)](_0x194162,_0x194162);const _0x2ff28f=_0x194162['ActionCoun'+'t'];BattleManager[_0x40470a(0xa47)]&&BattleManager[_0x40470a(0xa47)][_0x40470a(0xf99)+'t']()['gainCurren'+_0x40470a(0x9f3)+'B'](_0x2ff28f);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],'ActSeq_Mec'+_0x4258d1(0x13d1)+_0x4258d1(0x10d1),_0x199b40=>{const _0x1ecd75=_0x4258d1;if(!SceneManager[_0x1ecd75(0x614)+_0x1ecd75(0x6e5)]())return;if(!Imported[_0x1ecd75(0xd6f)+_0x1ecd75(0xa8d)+_0x1ecd75(0x4d9)])return;if(!BattleManager[_0x1ecd75(0x13b1)]())return;VisuMZ[_0x1ecd75(0xd5c)+'ams'](_0x199b40,_0x199b40);const _0x30ec55=_0x199b40[_0x1ecd75(0x1610)+'t'];BattleManager[_0x1ecd75(0xa47)]&&BattleManager[_0x1ecd75(0xa47)][_0x1ecd75(0xf99)+'t']()[_0x1ecd75(0xaf9)+_0x1ecd75(0xd56)+'B'](_0x30ec55);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],'ActSeq_Mec'+_0x4258d1(0xd71)+_0x4258d1(0x12e0),_0xcdc96b=>{const _0x25eb95=_0x4258d1,_0x8a8bb2={'MnfIp':function(_0x2ade3d,_0x365ce9){return _0x2ade3d+_0x365ce9;},'kWaap':function(_0x187111,_0x129175){return _0x187111*_0x129175;},'jOSBD':function(_0x5096d4,_0x4800b9){return _0x5096d4+_0x4800b9;},'JwuKA':function(_0x9a999b,_0x361326){return _0x9a999b!==_0x361326;},'Xmxyi':function(_0x1252ab,_0x59fa5d){return _0x1252ab!==_0x59fa5d;},'wmCEz':function(_0x1f3c03,_0x17f983){return _0x1f3c03!==_0x17f983;}};if(!SceneManager[_0x25eb95(0x614)+_0x25eb95(0x6e5)]())return;VisuMZ[_0x25eb95(0xd5c)+'ams'](_0xcdc96b,_0xcdc96b);const _0x3ae4c4=VisuMZ[_0x25eb95(0x8ec)+_0x25eb95(0xad7)+_0x25eb95(0xb00)](_0xcdc96b[_0x25eb95(0xb00)]),_0x4abab9=_0xcdc96b[_0x25eb95(0x11b0)],_0x460fe4=_0xcdc96b[_0x25eb95(0xc01)],_0x420e0c=_0xcdc96b[_0x25eb95(0x1248)],_0xb4ab6b=_0xcdc96b[_0x25eb95(0x14d3)],_0x4653d2=_0xcdc96b[_0x25eb95(0x15d7)],_0x7cde8b=_0xcdc96b[_0x25eb95(0x75b)],_0x125898=_0xcdc96b[_0x25eb95(0x12a8)];for(const _0x184840 of _0x3ae4c4){if(!_0x184840)continue;const _0x11f12b=_0x184840[_0x25eb95(0x266)](),_0x3e6383=Math[_0x25eb95(0xdea)](_0x8a8bb2[_0x25eb95(0x959)](_0x8a8bb2[_0x25eb95(0x49f)](_0x4abab9,_0x184840[_0x25eb95(0x13be)]),_0x460fe4)),_0xf799fc=Math['round'](_0x8a8bb2['jOSBD'](_0x8a8bb2[_0x25eb95(0x49f)](_0x420e0c,_0x184840['mmp']),_0xb4ab6b)),_0x1fe7e0=Math['round'](_0x8a8bb2[_0x25eb95(0x10a0)](_0x8a8bb2[_0x25eb95(0x49f)](_0x4653d2,_0x184840[_0x25eb95(0x603)]()),_0x7cde8b));if(_0x8a8bb2[_0x25eb95(0x7ac)](_0x3e6383,-0x295*-0x1+-0x2603+0x38b*0xa))_0x184840[_0x25eb95(0xb6b)](_0x3e6383);if(_0x8a8bb2[_0x25eb95(0x1008)](_0xf799fc,0x1dd9+0x7b0+-0x2589))_0x184840[_0x25eb95(0x212)](_0xf799fc);if(_0x8a8bb2['wmCEz'](_0x1fe7e0,0x22*0xc9+0x767*0x1+-0x2219))_0x184840[_0x25eb95(0x1529)](_0x1fe7e0);if(_0x125898)_0x184840[_0x25eb95(0x14d6)+_0x25eb95(0x47f)]();_0x11f12b&&_0x184840[_0x25eb95(0xfce)]()&&_0x184840[_0x25eb95(0xa20)+_0x25eb95(0x131b)]();}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+'hanics_Imm'+'ortal',_0x5a8bbc=>{const _0x3bdca4=_0x4258d1;if(!SceneManager[_0x3bdca4(0x614)+_0x3bdca4(0x6e5)]())return;VisuMZ[_0x3bdca4(0xd5c)+_0x3bdca4(0xc0b)](_0x5a8bbc,_0x5a8bbc);const _0x28015c=VisuMZ[_0x3bdca4(0x8ec)+'onSequence'+'Targets'](_0x5a8bbc['Targets']);for(const _0x2197b2 of _0x28015c){if(!_0x2197b2)continue;_0x2197b2[_0x3bdca4(0xe87)+'l'](_0x5a8bbc[_0x3bdca4(0x113d)]);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x1030)+_0x4258d1(0x130c),_0x52e2cc=>{const _0x565be4=_0x4258d1;if(!SceneManager[_0x565be4(0x614)+_0x565be4(0x6e5)]())return;VisuMZ[_0x565be4(0xd5c)+_0x565be4(0xc0b)](_0x52e2cc,_0x52e2cc);const _0x55ba00=BattleManager[_0x565be4(0x15a2)],_0xcb0d88={'criticalHitRate':_0x52e2cc['CriticalHi'+_0x565be4(0x574)],'criticalHitFlat':_0x52e2cc['CriticalHi'+_0x565be4(0x1409)],'criticalDmgRate':_0x52e2cc[_0x565be4(0xa70)+_0x565be4(0x11fd)],'criticalDmgFlat':_0x52e2cc[_0x565be4(0xa70)+_0x565be4(0x9d9)],'damageRate':_0x52e2cc['DamageRate'],'damageFlat':_0x52e2cc[_0x565be4(0x104f)],'hitRate':_0x52e2cc[_0x565be4(0x25b)],'hitFlat':_0x52e2cc['HitFlat']};_0x55ba00[_0x565be4(0x15c7)+'rs']=_0xcb0d88;}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x9b7)+_0x4258d1(0x6b7),_0x3653dd=>{const _0x1f1fe7=_0x4258d1;if(!SceneManager[_0x1f1fe7(0x614)+'tle']())return;VisuMZ[_0x1f1fe7(0xd5c)+'ams'](_0x3653dd,_0x3653dd);const _0x382573=_0x3653dd[_0x1f1fe7(0x483)+_0x1f1fe7(0x455)];SceneManager['_scene'][_0x1f1fe7(0x157f)+_0x1f1fe7(0x4ff)+_0x1f1fe7(0x12b2)](_0x382573);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0xc3a)+'Order',_0x501f16=>{const _0x388123=_0x4258d1;if(!SceneManager[_0x388123(0x614)+'tle']())return;if(!Imported[_0x388123(0xd6f)+_0x388123(0xa8d)+_0x388123(0x75c)])return;if(!BattleManager[_0x388123(0x449)]())return;VisuMZ[_0x388123(0xd5c)+_0x388123(0xc0b)](_0x501f16,_0x501f16);const _0x3b22e6=VisuMZ[_0x388123(0x8ec)+_0x388123(0xad7)+_0x388123(0xb00)](_0x501f16[_0x388123(0xb00)]);for(const _0x301d68 of _0x3b22e6){if(!_0x301d68)continue;let _0x515646=_0x501f16[_0x388123(0x1535)+'n'],_0x5e8184=_0x501f16[_0x388123(0xf09)],_0x47b6fa=_0x501f16[_0x388123(0x54a)];BattleManager['_actionBat'+_0x388123(0x4fe)][_0x388123(0x163f)](_0x301d68)?_0x515646+=_0x47b6fa:_0x5e8184+=_0x47b6fa,BattleManager[_0x388123(0x88d)+_0x388123(0x6c9)](_0x301d68,-_0x515646,![]),BattleManager['turnOrderC'+_0x388123(0x6c9)](_0x301d68,-_0x5e8184,!![]);}}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x858)+'AlterCost',_0x471c00=>{const _0x2ce094=_0x4258d1,_0x38f70a={'Nbzyk':'unchanged'};if(!SceneManager[_0x2ce094(0x614)+_0x2ce094(0x6e5)]())return;if(!Imported['VisuMZ_2_B'+_0x2ce094(0xa8d)+_0x2ce094(0x157e)])return;if(!BattleManager[_0x2ce094(0x1660)]())return;VisuMZ['ConvertPar'+'ams'](_0x471c00,_0x471c00);const _0x4b69cb=BattleManager[_0x2ce094(0xa47)][_0x2ce094(0xf99)+'t'](),_0x368272=_0x471c00[_0x2ce094(0x311)],_0x333253=_0x471c00[_0x2ce094(0x6f7)+'e']||_0x38f70a[_0x2ce094(0x1bf)],_0x134004=_0x471c00[_0x2ce094(0xc1e)]||_0x38f70a[_0x2ce094(0x1bf)],_0x56963a=_0x471c00['alterCost']||-0x139e+-0x33d*0x6+0x270c,_0x55617f=_0x471c00[_0x2ce094(0x298)+_0x2ce094(0x100b)]||-0x243c+0x1ee*-0x7+0x31be;(_0x4b69cb[_0x2ce094(0xaae)+'tionCostPT'+'B']()||_0x368272)&&(_0x368272&&(_0x4b69cb[_0x2ce094(0x11c7)+_0x2ce094(0x153b)]=_0x4b69cb[_0x2ce094(0x11c7)+_0x2ce094(0x153b)]||{},_0x4b69cb[_0x2ce094(0x11c7)+_0x2ce094(0x153b)][_0x2ce094(0x8c9)]=-0x1ea7+-0x10f*-0x7+0xee*0x19),_0x4b69cb['alterActio'+_0x2ce094(0xa5e)](_0x333253,_0x134004,_0x56963a,_0x55617f));}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x858)+_0x4258d1(0x315),_0x2d5be6=>{const _0x507775=_0x4258d1,_0x272a66={'EyiMB':function(_0x3d6fbd,_0x69fe37){return _0x3d6fbd<=_0x69fe37;},'uMbSh':function(_0x1f2d2c,_0x308ef5){return _0x1f2d2c>_0x308ef5;}};if(!SceneManager[_0x507775(0x614)+_0x507775(0x6e5)]())return;if(!Imported[_0x507775(0xd6f)+_0x507775(0xa8d)+_0x507775(0x157e)])return;if(!BattleManager[_0x507775(0x1660)]())return;VisuMZ['ConvertPar'+'ams'](_0x2d5be6,_0x2d5be6);const _0xde2e7e=BattleManager['_subject'][_0x507775(0xf99)+'t']();let _0x3a1d7d=Math['max'](_0x2d5be6[_0x507775(0x57d)+'nt'],0x7*0x15f+-0x791*0x3+0xd1a),_0x220c4e=_0xde2e7e[_0x507775(0x9fd)+_0x507775(0x5a7)](),_0x37cc14=_0xde2e7e['getHalfAct'+'ionsPTB']();while(_0x3a1d7d--){if(_0x272a66[_0x507775(0x5e7)](_0x220c4e,0x1873*0x1+0x2611+-0x3e84)&&_0x272a66[_0x507775(0x5e7)](_0x37cc14,-0x26bc+-0xcaf+0x336b))break;else _0x272a66['uMbSh'](_0x220c4e,0xb90+-0x248d+0x18fd)?(_0x220c4e--,_0x37cc14++):_0x37cc14--;}_0xde2e7e['setFullAct'+_0x507775(0x5a7)](_0x220c4e),_0xde2e7e['setHalfAct'+_0x507775(0x5a7)](_0x37cc14);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x858)+'FullHalfAc'+'tion',_0x3360ad=>{const _0x123c0c=_0x4258d1;if(!SceneManager[_0x123c0c(0x614)+_0x123c0c(0x6e5)]())return;if(!Imported[_0x123c0c(0xd6f)+_0x123c0c(0xa8d)+_0x123c0c(0x157e)])return;if(!BattleManager[_0x123c0c(0x1660)]())return;VisuMZ[_0x123c0c(0xd5c)+_0x123c0c(0xc0b)](_0x3360ad,_0x3360ad);const _0x58bb82=BattleManager[_0x123c0c(0xa47)][_0x123c0c(0xf99)+'t']();let _0x31a251=_0x3360ad[_0x123c0c(0x7ed)+'s'],_0x24181e=_0x3360ad[_0x123c0c(0x8de)+'s'];_0x58bb82[_0x123c0c(0x12e2)+_0x123c0c(0x76c)](_0x31a251),_0x58bb82[_0x123c0c(0xe33)+'tionsPTB'](_0x24181e);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x1467)+_0x4258d1(0x30b)+_0x4258d1(0xabb),_0x49c52e=>{const _0x2f703b=_0x4258d1,_0x184f6f={'HMaWa':_0x2f703b(0x8ac),'Qpbuy':_0x2f703b(0xdab),'GQmgm':_0x2f703b(0x887),'BsCII':_0x2f703b(0xe65),'VvSfZ':_0x2f703b(0xfa5),'KzLjt':_0x2f703b(0xc62),'IjDhI':_0x2f703b(0xad0),'UNOVK':'LUK','bLNzi':function(_0x210dc9,_0x453d35){return _0x210dc9>=_0x453d35;},'hIDMe':function(_0x379a56,_0x249e0c){return _0x379a56<=_0x249e0c;},'imCbE':function(_0x26dfbd,_0x5a8f59){return _0x26dfbd<=_0x5a8f59;}};if(!SceneManager[_0x2f703b(0x614)+'tle']())return;VisuMZ[_0x2f703b(0xd5c)+'ams'](_0x49c52e,_0x49c52e);const _0x4d78d4=[_0x184f6f[_0x2f703b(0x1679)],_0x184f6f[_0x2f703b(0x893)],_0x184f6f[_0x2f703b(0x1151)],_0x184f6f[_0x2f703b(0x1581)],_0x184f6f['VvSfZ'],_0x184f6f[_0x2f703b(0x963)],_0x184f6f[_0x2f703b(0xc35)],_0x184f6f['UNOVK']],_0x3458c8=_0x49c52e[_0x2f703b(0x1524)],_0x584fbf=_0x49c52e['Debuffs'],_0x10b442=VisuMZ[_0x2f703b(0x8ec)+_0x2f703b(0xad7)+_0x2f703b(0xb00)](_0x49c52e['Targets']);for(const _0x5251c0 of _0x10b442){if(!_0x5251c0)continue;for(const _0x12294b of _0x3458c8){const _0x539ca3=_0x4d78d4[_0x2f703b(0xfd7)](_0x12294b['toUpperCas'+'e']()[_0x2f703b(0xbb6)]());_0x184f6f[_0x2f703b(0x1474)](_0x539ca3,-0x16ed+-0xfe*-0x12+0x1*0x511)&&_0x184f6f[_0x2f703b(0x862)](_0x539ca3,0x943+0x10bd+-0x19f9)&&_0x5251c0[_0x2f703b(0x162f)+_0x2f703b(0x58b)](_0x539ca3)&&_0x5251c0[_0x2f703b(0x1140)](_0x539ca3);}for(const _0x230fe3 of _0x584fbf){const _0xae013f=_0x4d78d4[_0x2f703b(0xfd7)](_0x230fe3[_0x2f703b(0x191)+'e']()[_0x2f703b(0xbb6)]());_0x184f6f[_0x2f703b(0x1474)](_0xae013f,-0x4*-0x4c1+-0x1ee*0x4+0x6*-0x1e2)&&_0x184f6f[_0x2f703b(0xc65)](_0xae013f,-0x1b2a+-0x1440+0x2f71)&&_0x5251c0['isDebuffAf'+_0x2f703b(0x1183)](_0xae013f)&&_0x5251c0[_0x2f703b(0x1140)](_0xae013f);}}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+'hanics_Rem'+'oveState',_0x3a0209=>{const _0x459f07=_0x4258d1;if(!SceneManager[_0x459f07(0x614)+_0x459f07(0x6e5)]())return;VisuMZ[_0x459f07(0xd5c)+'ams'](_0x3a0209,_0x3a0209);const _0x5384b8=_0x3a0209['States'],_0x435684=VisuMZ[_0x459f07(0x8ec)+_0x459f07(0xad7)+_0x459f07(0xb00)](_0x3a0209[_0x459f07(0xb00)]);for(const _0x3f4aad of _0x435684){if(!_0x3f4aad)continue;for(const _0x477640 of _0x5384b8){_0x3f4aad[_0x459f07(0x14bb)+'e'](_0x477640);}}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x114d)+'hanics_Sta'+_0x4258d1(0xe35)+'ngeBy',_0x84c022=>{const _0x2a5561=_0x4258d1,_0x28e2ea={'RtiNB':function(_0x4915f2,_0x52db07){return _0x4915f2(_0x52db07);}};if(!SceneManager[_0x2a5561(0x614)+_0x2a5561(0x6e5)]())return;if(!Imported[_0x2a5561(0x1410)+_0x2a5561(0x13a2)+_0x2a5561(0x9c6)])return;VisuMZ[_0x2a5561(0xd5c)+_0x2a5561(0xc0b)](_0x84c022,_0x84c022);const _0x56ca84=VisuMZ[_0x2a5561(0x8ec)+'onSequence'+_0x2a5561(0xb00)](_0x84c022['Targets']),_0x20b29e=_0x28e2ea[_0x2a5561(0xa82)](Number,_0x84c022[_0x2a5561(0xda2)]),_0x1eaa97=_0x28e2ea['RtiNB'](Number,_0x84c022[_0x2a5561(0xaa9)]),_0x502d93=_0x84c022[_0x2a5561(0x2aa)+'te'];for(const _0x571e71 of _0x56ca84){if(!_0x571e71)continue;_0x502d93&&!_0x571e71[_0x2a5561(0x1338)+_0x2a5561(0x327)](_0x20b29e)?(_0x571e71[_0x2a5561(0x122f)](_0x20b29e),_0x571e71[_0x2a5561(0xfd5)+'rns'](_0x20b29e,_0x1eaa97)):_0x571e71[_0x2a5561(0x7b5)+'rns'](_0x20b29e,_0x1eaa97);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Mec'+_0x4258d1(0x1a0)+'teTurnsCha'+_0x4258d1(0xb8d),_0x516f0b=>{const _0x18c047=_0x4258d1,_0x284c91={'ZwGTN':function(_0x16c921,_0x20f341){return _0x16c921(_0x20f341);}};if(!SceneManager[_0x18c047(0x614)+_0x18c047(0x6e5)]())return;if(!Imported[_0x18c047(0x1410)+_0x18c047(0x13a2)+_0x18c047(0x9c6)])return;VisuMZ[_0x18c047(0xd5c)+_0x18c047(0xc0b)](_0x516f0b,_0x516f0b);const _0x3cc452=VisuMZ[_0x18c047(0x8ec)+_0x18c047(0xad7)+'Targets'](_0x516f0b[_0x18c047(0xb00)]),_0x3cb308=_0x284c91[_0x18c047(0x1516)](Number,_0x516f0b[_0x18c047(0xda2)]),_0x29ab59=Math['max'](_0x284c91[_0x18c047(0x1516)](Number,_0x516f0b[_0x18c047(0xaa9)]),-0x1a5+-0x1d0d+0x1eb2),_0x25bfab=_0x516f0b[_0x18c047(0x2aa)+'te'];for(const _0x482c00 of _0x3cc452){if(!_0x482c00)continue;_0x25bfab&&!_0x482c00[_0x18c047(0x1338)+_0x18c047(0x327)](_0x3cb308)&&_0x482c00[_0x18c047(0x122f)](_0x3cb308),_0x482c00[_0x18c047(0xfd5)+_0x18c047(0x120e)](_0x3cb308,_0x29ab59);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x6dc)+_0x4258d1(0x4a3),_0x2904c5=>{const _0x35cdc5=_0x4258d1,_0x1d8244={'ehKIG':function(_0x44b7a8,_0x513da9){return _0x44b7a8===_0x513da9;}};if(!SceneManager['isSceneBat'+_0x35cdc5(0x6e5)]())return;if(!Imported[_0x35cdc5(0xd6f)+_0x35cdc5(0xa8d)+_0x35cdc5(0x1171)])return;if(!BattleManager[_0x35cdc5(0x1588)]())return;VisuMZ['ConvertPar'+_0x35cdc5(0xc0b)](_0x2904c5,_0x2904c5);const _0x92bc=_0x2904c5[_0x35cdc5(0xba3)],_0x193ffd=VisuMZ['CreateActi'+_0x35cdc5(0xad7)+'Targets'](_0x2904c5[_0x35cdc5(0xb00)]),_0x134cef=_0x2904c5['ForceExplo'+_0x35cdc5(0xc47)],_0x2c4574=_0x2904c5[_0x35cdc5(0x1450)],_0xd2976e=_0x2904c5[_0x35cdc5(0x789)+'iter'],_0x3d81e3=BattleManager[_0x35cdc5(0x15a2)];if(_0x92bc)for(const _0x2ddc70 of _0x193ffd){if(!_0x2ddc70)continue;if(_0x1d8244[_0x35cdc5(0x1260)](_0x2ddc70,user))continue;if(_0x134cef)_0x2ddc70['setSTBExpl'+_0x35cdc5(0x1040)](![]);_0x2ddc70[_0x35cdc5(0x1525)+_0x35cdc5(0x55f)](BattleManager[_0x35cdc5(0xa47)],_0x3d81e3);}if(_0x2c4574&&BattleManager[_0x35cdc5(0xa47)]){if(_0xd2976e)BattleManager[_0x35cdc5(0xa47)][_0x35cdc5(0x55b)+'oited'](![]);const _0x51da72=_0x193ffd[-0x65+0xa53*0x3+-0x1e94];BattleManager['performSTB'+_0x35cdc5(0x1450)](_0x51da72,_0x3d81e3);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Mec'+_0x4258d1(0x6dc)+'ExtraActio'+'n',_0x2147e3=>{const _0x43af5f=_0x4258d1;if(!SceneManager['isSceneBat'+_0x43af5f(0x6e5)]())return;if(!Imported['VisuMZ_2_B'+'attleSyste'+_0x43af5f(0x1171)])return;if(!BattleManager[_0x43af5f(0x1588)]())return;VisuMZ[_0x43af5f(0xd5c)+_0x43af5f(0xc0b)](_0x2147e3,_0x2147e3);const _0x1cd466=_0x2147e3[_0x43af5f(0x499)];BattleManager[_0x43af5f(0xa47)]&&BattleManager[_0x43af5f(0xa47)][_0x43af5f(0x1240)+'tant'](_0x1cd466);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x6dc)+_0x4258d1(0x46f)+_0x4258d1(0xb6c),_0x1b202a=>{const _0x2113ce=_0x4258d1,_0x19a3b8={'tpuZD':function(_0x282667,_0x1bc5b2){return _0x282667<=_0x1bc5b2;}};if(!SceneManager['isSceneBat'+_0x2113ce(0x6e5)]())return;if(!Imported[_0x2113ce(0xd6f)+_0x2113ce(0xa8d)+_0x2113ce(0x1171)])return;if(!BattleManager[_0x2113ce(0x1588)]())return;VisuMZ['ConvertPar'+_0x2113ce(0xc0b)](_0x1b202a,_0x1b202a);let _0x48dec2=_0x1b202a[_0x2113ce(0x499)];if(BattleManager[_0x2113ce(0xa47)]){BattleManager['_subject']['_actions']=BattleManager[_0x2113ce(0xa47)]['_actions']||[];while(_0x48dec2--){if(_0x19a3b8[_0x2113ce(0xf53)](BattleManager[_0x2113ce(0xa47)][_0x2113ce(0x775)][_0x2113ce(0x1645)],0x1dad+-0x9f5*0x3+0x32))break;BattleManager[_0x2113ce(0xa47)][_0x2113ce(0x775)][_0x2113ce(0xa6f)]();}}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x127c)+'pWeapon',_0x45aacf=>{const _0x506006=_0x4258d1;if(!SceneManager['isSceneBat'+_0x506006(0x6e5)]())return;if(!Imported[_0x506006(0x627)+_0x506006(0xa15)+_0x506006(0x45f)])return;VisuMZ['ConvertPar'+_0x506006(0xc0b)](_0x45aacf,_0x45aacf);const _0x542fa9=VisuMZ[_0x506006(0x8ec)+_0x506006(0xad7)+'Targets'](_0x45aacf[_0x506006(0xb00)]),_0x4cd360=_0x45aacf[_0x506006(0x386)+'ID'];for(const _0x49ba2d of _0x542fa9){if(!_0x49ba2d)continue;if(!_0x49ba2d[_0x506006(0x1580)]())continue;_0x49ba2d['switchToWe'+_0x506006(0xa37)](_0x4cd360);}}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x292)+_0x4258d1(0x1031),_0x240710=>{const _0x46830c=_0x4258d1;if(!SceneManager[_0x46830c(0x614)+_0x46830c(0x6e5)]())return;VisuMZ[_0x46830c(0xd5c)+_0x46830c(0xc0b)](_0x240710,_0x240710);const _0x22cbef=VisuMZ[_0x46830c(0x8ec)+_0x46830c(0xad7)+_0x46830c(0xb00)](_0x240710['Targets']),_0x3102fa=_0x240710[_0x46830c(0x1271)],_0x872489={'textColor':ColorManager['getColor'](_0x240710[_0x46830c(0x7ba)]),'flashColor':_0x240710[_0x46830c(0x1230)],'flashDuration':_0x240710[_0x46830c(0x563)+_0x46830c(0x1485)]};for(const _0x4bd4c8 of _0x22cbef){if(!_0x4bd4c8)continue;_0x4bd4c8['setupTextP'+_0x46830c(0x295)](_0x3102fa,_0x872489);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x8a2)+_0x4258d1(0xf9b),_0x33c1da=>{const _0x4ba9b5=_0x4258d1,_0x52af8d={'czLLO':function(_0x11b943,_0x3fb8d3){return _0x11b943(_0x3fb8d3);}};if(!SceneManager[_0x4ba9b5(0x614)+_0x4ba9b5(0x6e5)]())return;VisuMZ[_0x4ba9b5(0xd5c)+'ams'](_0x33c1da,_0x33c1da);const _0x329688=VisuMZ[_0x4ba9b5(0x8ec)+_0x4ba9b5(0xad7)+_0x4ba9b5(0xb00)](_0x33c1da[_0x4ba9b5(0xb00)]);let _0x3d8fb0=$gameVariables['value'](_0x33c1da[_0x4ba9b5(0xa45)]);Imported[_0x4ba9b5(0x7d7)+_0x4ba9b5(0x138e)]&&_0x33c1da['DigitGroup'+_0x4ba9b5(0x623)]&&(_0x3d8fb0=VisuMZ[_0x4ba9b5(0x13ca)+'s'](_0x3d8fb0));const _0x50a32c=_0x52af8d[_0x4ba9b5(0x407)](String,_0x3d8fb0),_0x3b0f39={'textColor':ColorManager['getColor'](_0x33c1da[_0x4ba9b5(0x7ba)]),'flashColor':_0x33c1da['FlashColor'],'flashDuration':_0x33c1da[_0x4ba9b5(0x563)+_0x4ba9b5(0x1485)]};for(const _0x473200 of _0x329688){if(!_0x473200)continue;_0x473200[_0x4ba9b5(0x1431)+_0x4ba9b5(0x295)](_0x50a32c,_0x3b0f39);}}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x114d)+_0x4258d1(0x6f1)+_0x4258d1(0x154a),_0x11e014=>{const _0x6f4686=_0x4258d1,_0x31fd91={'xJVLb':'battleEffe'+'ct'};if(!SceneManager['isSceneBat'+_0x6f4686(0x6e5)]())return;const _0x291cde=$gameTemp[_0x6f4686(0xb0b)+_0x6f4686(0xf36)+'Interprete'+'r']();if(!_0x291cde)return;_0x291cde[_0x6f4686(0xf48)+'e'](_0x31fd91[_0x6f4686(0xc7c)]);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x106e)+_0x4258d1(0xcd0)+_0x4258d1(0xd20),_0x32af19=>{const _0x2d002e=_0x4258d1;if(!SceneManager[_0x2d002e(0x614)+_0x2d002e(0x6e5)]())return;VisuMZ['ConvertPar'+_0x2d002e(0xc0b)](_0x32af19,_0x32af19);const _0x325a73=VisuMZ[_0x2d002e(0x8ec)+_0x2d002e(0xad7)+_0x2d002e(0xb00)](_0x32af19[_0x2d002e(0xb00)]);for(const _0x2d6390 of _0x325a73){if(!_0x2d6390)continue;_0x2d6390[_0x2d002e(0x5b3)+_0x2d002e(0x1302)]();}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x106e)+_0x4258d1(0xe3e)+_0x4258d1(0xdfe)+'e',_0x1fb295=>{const _0x1c90dd=_0x4258d1,_0x58e3f2={'vIZib':_0x1c90dd(0x3a8),'prBuw':_0x1c90dd(0x65c),'WakzF':'swing','lywNR':'missile'};if(!SceneManager['isSceneBat'+'tle']())return;VisuMZ[_0x1c90dd(0xd5c)+_0x1c90dd(0xc0b)](_0x1fb295,_0x1fb295);const _0x1827b8=VisuMZ[_0x1c90dd(0x8ec)+_0x1c90dd(0xad7)+_0x1c90dd(0xb00)](_0x1fb295[_0x1c90dd(0xb00)]),_0x1265c3=_0x1fb295[_0x1c90dd(0x93f)][_0x1c90dd(0x1bc)+'e']()[_0x1c90dd(0xbb6)]();let _0x17d879=_0x1fb295[_0x1c90dd(0x783)];const _0x45cd4b=_0x1fb295[_0x1c90dd(0x107a)];![_0x58e3f2[_0x1c90dd(0xc4a)],_0x58e3f2['prBuw'],_0x58e3f2[_0x1c90dd(0x2c0)],_0x58e3f2[_0x1c90dd(0x1147)]][_0x1c90dd(0x163f)](_0x1265c3)&&(_0x17d879=![]);for(const _0x238d4f of _0x1827b8){if(!_0x238d4f)continue;_0x238d4f[_0x1c90dd(0xecc)+'on'](_0x1265c3,_0x17d879,_0x45cd4b);}}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x106e)+_0x4258d1(0x543)+_0x4258d1(0x876),_0x5b28f8=>{const _0x47590c=_0x4258d1,_0x3667f7={'ArMXn':function(_0x26c6c6,_0x4c8026){return _0x26c6c6(_0x4c8026);},'wNCWC':function(_0x17b88e,_0x165c55){return _0x17b88e===_0x165c55;},'oxXzW':_0x47590c(0x3a8),'JMWBx':_0x47590c(0x65c),'zXSui':'swing','HlLHf':_0x47590c(0x1666)};if(!SceneManager[_0x47590c(0x614)+_0x47590c(0x6e5)]())return;VisuMZ['ConvertPar'+_0x47590c(0xc0b)](_0x5b28f8,_0x5b28f8);const _0x37801e=VisuMZ[_0x47590c(0x8ec)+'onSequence'+_0x47590c(0xb00)](_0x5b28f8[_0x47590c(0xb00)]),_0x5de12b=_0x5b28f8[_0x47590c(0x93f)][_0x47590c(0x1bc)+'e']()[_0x47590c(0xbb6)](),_0x5aed9a=_0x5b28f8['ShowWeapon'];for(const _0x739a0e of _0x37801e){if(!_0x739a0e)continue;_0x739a0e[_0x47590c(0x1473)+'n']=_0x5aed9a;if(_0x5de12b[_0x47590c(0x79c)](/ATTACK[ ](\d+)/i))_0x739a0e[_0x47590c(0x409)+_0x47590c(0xbdd)](_0x3667f7[_0x47590c(0x4fc)](Number,RegExp['$1']));else _0x3667f7[_0x47590c(0x94d)](_0x5de12b,_0x3667f7[_0x47590c(0xe54)])?_0x739a0e[_0x47590c(0x409)+_0x47590c(0x1413)]():_0x739a0e[_0x47590c(0x759)+_0x47590c(0x1485)](_0x5de12b);if(!_0x5aed9a)_0x739a0e[_0x47590c(0xfcc)+'nAnimation'](-0x841+-0x1*0x1505+-0x2*-0xea3);else{if(_0x5aed9a&&[_0x3667f7[_0x47590c(0x13f6)],_0x3667f7[_0x47590c(0x126c)],_0x3667f7[_0x47590c(0x15fe)]][_0x47590c(0x163f)](_0x5de12b)){}}_0x739a0e[_0x47590c(0x1473)+'n']=undefined;}}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x106e)+_0x4258d1(0x14ec)+_0x4258d1(0x572),_0x1888f9=>{const _0x56297f=_0x4258d1;if(!SceneManager['isSceneBat'+_0x56297f(0x6e5)]())return;VisuMZ['ConvertPar'+_0x56297f(0xc0b)](_0x1888f9,_0x1888f9);const _0x368106=BattleManager[_0x56297f(0x15a2)];if(!_0x368106)return;if(!_0x368106[_0x56297f(0x780)]())return;const _0x1a4994=VisuMZ['CreateActi'+_0x56297f(0xad7)+'Targets'](_0x1888f9[_0x56297f(0xb00)]);for(const _0xccf61b of _0x1a4994){if(!_0xccf61b)continue;_0xccf61b['performAct'+_0x56297f(0x1485)](_0x368106);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x106e)+_0x4258d1(0x7d8)+_0x4258d1(0xd51),_0xe61f33=>{const _0x3118d1=_0x4258d1;if(!SceneManager[_0x3118d1(0x614)+_0x3118d1(0x6e5)]())return;VisuMZ['ConvertPar'+_0x3118d1(0xc0b)](_0xe61f33,_0xe61f33);const _0x4a9a1e=VisuMZ['CreateActi'+_0x3118d1(0xad7)+'Targets'](_0xe61f33['Targets']);for(const _0x5cbd69 of _0x4a9a1e){if(!_0x5cbd69)continue;if(!_0x5cbd69['battler']())continue;_0x5cbd69['battler']()['refreshMot'+_0x3118d1(0x1485)]();}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Mot'+_0x4258d1(0x94c)+_0x4258d1(0xf94),_0x179046=>{const _0x563cb8=_0x4258d1,_0x5a1918={'TLpDN':function(_0x292999,_0x5ad288){return _0x292999*_0x5ad288;}};if(!SceneManager[_0x563cb8(0x614)+_0x563cb8(0x6e5)]())return;VisuMZ[_0x563cb8(0xd5c)+_0x563cb8(0xc0b)](_0x179046,_0x179046);const _0x236c54=$gameTemp[_0x563cb8(0xb0b)+_0x563cb8(0xf36)+_0x563cb8(0x1456)+'r'](),_0x19a0a1=_0x5a1918[_0x563cb8(0x133a)](_0x179046[_0x563cb8(0xdfe)+'eWait'],Sprite_Battler[_0x563cb8(0x6ca)+'ed']);_0x236c54[_0x563cb8(0x58e)](_0x19a0a1);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x1053)+_0x4258d1(0x1574)+_0x4258d1(0xa02),_0xc596c7=>{const _0x4f8cc3=_0x4258d1,_0x138a32={'lCUVD':function(_0x355028,_0x4d1a1e){return _0x355028||_0x4d1a1e;},'WyJHD':'battleMove'};if(!SceneManager[_0x4f8cc3(0x614)+_0x4f8cc3(0x6e5)]())return;VisuMZ[_0x4f8cc3(0xd5c)+_0x4f8cc3(0xc0b)](_0xc596c7,_0xc596c7);const _0x2dd855=$gameTemp[_0x4f8cc3(0xb0b)+_0x4f8cc3(0xf36)+'Interprete'+'r'](),_0x73ba54=BattleManager[_0x4f8cc3(0x15a2)];if(_0x138a32[_0x4f8cc3(0x166e)](!_0x2dd855,!_0x73ba54))return;if(!_0x73ba54['item']())return;const _0x47a9d2=VisuMZ[_0x4f8cc3(0x8ec)+_0x4f8cc3(0xad7)+_0x4f8cc3(0xb00)](_0xc596c7[_0x4f8cc3(0xb00)]);for(const _0x146eed of _0x47a9d2){if(!_0x146eed)continue;_0x146eed[_0x4f8cc3(0xe11)+_0x4f8cc3(0xb4d)](_0x73ba54);}if(_0xc596c7[_0x4f8cc3(0xeb2)+'ement'])_0x2dd855[_0x4f8cc3(0xf48)+'e'](_0x138a32['WyJHD']);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],'ActSeq_Mov'+'ement_Home'+_0x4258d1(0x768),_0x3f2d77=>{const _0x491001=_0x4258d1,_0x563602={'JzMDs':_0x491001(0x462)};if(!SceneManager[_0x491001(0x614)+_0x491001(0x6e5)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x491001(0xd5c)+'ams'](_0x3f2d77,_0x3f2d77);const _0x36ced7=$gameTemp[_0x491001(0xb0b)+_0x491001(0xf36)+_0x491001(0x1456)+'r'](),_0x393afb=VisuMZ['CreateActi'+'onSequence'+'Targets'](_0x3f2d77['Targets']),_0x5baf30=_0x3f2d77['DistanceAd'+_0x491001(0xcfb)],_0x147d68=_0x3f2d77['DistanceX'],_0x60a849=_0x3f2d77[_0x491001(0xa1c)],_0x225798=_0x3f2d77[_0x491001(0x3c1)],_0x2dfeb6=_0x3f2d77[_0x491001(0xad9)+_0x491001(0x1485)],_0x5d699f=_0x3f2d77[_0x491001(0xab5)],_0x35242f=_0x3f2d77[_0x491001(0x93f)],_0x378680=_0x3f2d77[_0x491001(0xeb2)+'ement'];if(!_0x36ced7)return;for(const _0x59954b of _0x393afb){if(!_0x59954b)continue;let _0x31f864=_0x147d68,_0x11b938=_0x60a849;if(_0x5baf30[_0x491001(0x79c)](/horz/i))_0x31f864*=_0x59954b[_0x491001(0x1580)]()?-(-0x2445+0x160+-0x1*-0x22e6):0x55*-0x3+0xc*-0x42+0x418;if(_0x5baf30[_0x491001(0x79c)](/vert/i))_0x11b938*=_0x59954b['isActor']()?-(-0x1*0x442+0x1e6b*-0x1+0x22ae):-0x1662+-0xe6*0x1a+0x2dbf;_0x59954b[_0x491001(0x1155)+_0x491001(0x1006)+_0x491001(0x13f3)](_0x31f864,_0x11b938,_0x225798,_0x2dfeb6,_0x5d699f),_0x59954b['requestMot'+_0x491001(0x1485)](_0x35242f);}if(_0x378680)_0x36ced7[_0x491001(0xf48)+'e'](_0x563602[_0x491001(0x6a7)]);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x1053)+_0x4258d1(0xa5b)+_0x4258d1(0xe1f)+_0x4258d1(0xc3b),_0x16a54f=>{const _0x1768d5=_0x4258d1,_0xd1a840={'zkjrr':_0x1768d5(0x462)};if(!SceneManager[_0x1768d5(0x614)+_0x1768d5(0x6e5)]())return;if(!$gameSystem[_0x1768d5(0x8df)]())return;VisuMZ[_0x1768d5(0xd5c)+_0x1768d5(0xc0b)](_0x16a54f,_0x16a54f);const _0x330f8d=$gameTemp[_0x1768d5(0xb0b)+_0x1768d5(0xf36)+'Interprete'+'r'](),_0xf3f956=VisuMZ['CreateActi'+_0x1768d5(0xad7)+'Targets'](_0x16a54f[_0x1768d5(0xb00)]),_0x51dd1e=_0x16a54f[_0x1768d5(0x283)+'st'],_0xcf7c11=_0x16a54f[_0x1768d5(0x1521)],_0x51c521=_0x16a54f[_0x1768d5(0x114e)],_0x5072a8=_0x16a54f[_0x1768d5(0x3c1)],_0x459bf9=_0x16a54f[_0x1768d5(0xad9)+_0x1768d5(0x1485)],_0x445dca=_0x16a54f['EasingType'],_0x432b60=_0x16a54f[_0x1768d5(0x93f)],_0x103690=_0x16a54f[_0x1768d5(0xeb2)+_0x1768d5(0xe17)];if(!_0x330f8d)return;for(const _0x39543b of _0xf3f956){if(!_0x39543b)continue;const _0x1e1ead=_0x16a54f[_0x1768d5(0xc79)+'nJS'](_0x39543b)||{'x':0x0,'y':0x0};let _0x39a4fa=_0x1e1ead['x'],_0x43d714=_0x1e1ead['y'];if(_0x51dd1e['match'](/none/i))_0x39a4fa+=_0xcf7c11,_0x43d714+=_0x51c521;else{if(_0x51dd1e['match'](/horz/i)&&_0x51dd1e[_0x1768d5(0x79c)](/vert/i))_0x39a4fa+=_0x39543b[_0x1768d5(0x1580)]()?-_0xcf7c11:_0xcf7c11,_0x43d714+=_0x39543b[_0x1768d5(0x1580)]()?-_0x51c521:_0x51c521;else{if(_0x51dd1e[_0x1768d5(0x79c)](/horz/i))_0x39a4fa+=_0x39543b[_0x1768d5(0x1580)]()?-_0xcf7c11:_0xcf7c11,_0x43d714+=_0x51c521;else _0x51dd1e['match'](/vert/i)&&(_0x39a4fa+=_0xcf7c11,_0x43d714+=_0x39543b[_0x1768d5(0x1580)]()?-_0x51c521:_0x51c521);}}_0x39543b[_0x1768d5(0x1155)+_0x1768d5(0x1044)+'nt'](_0x39a4fa,_0x43d714,_0x5072a8,_0x459bf9,_0x445dca,-(-0x254b+-0x1adf*0x1+0x402b)),_0x39543b[_0x1768d5(0x759)+'ion'](_0x432b60);}if(_0x103690)_0x330f8d[_0x1768d5(0xf48)+'e'](_0xd1a840[_0x1768d5(0x20c)]);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x1053)+_0x4258d1(0xa5b)+_0x4258d1(0x698)+'t',_0x56435b=>{const _0x38ae7a=_0x4258d1,_0x41f13e={'Zucge':function(_0xbb4cbd,_0x3d931b){return _0xbb4cbd/_0x3d931b;},'eovnD':function(_0x127f57,_0xe2fd94){return _0x127f57/_0xe2fd94;},'bEbTG':function(_0x4fd8b3,_0x36746c){return _0x4fd8b3(_0x36746c);},'oNfsj':function(_0x3189ac,_0x77148a){return _0x3189ac(_0x77148a);},'BtYTs':_0x38ae7a(0x462)};if(!SceneManager['isSceneBat'+'tle']())return;if(!$gameSystem[_0x38ae7a(0x8df)]())return;VisuMZ[_0x38ae7a(0xd5c)+_0x38ae7a(0xc0b)](_0x56435b,_0x56435b);const _0x136639=$gameTemp[_0x38ae7a(0xb0b)+_0x38ae7a(0xf36)+_0x38ae7a(0x1456)+'r'](),_0x19fad9=VisuMZ['CreateActi'+_0x38ae7a(0xad7)+'Targets'](_0x56435b[_0x38ae7a(0xb00)]),_0x11e6cb=_0x56435b[_0x38ae7a(0xc79)+'n'],_0x4e15fd=_0x56435b[_0x38ae7a(0x283)+'st'],_0x3ecc0a=_0x56435b['OffsetX'],_0xa9638f=_0x56435b[_0x38ae7a(0x114e)],_0x26e45f=_0x56435b['Duration'],_0x256e2b=_0x56435b['FaceDirect'+_0x38ae7a(0x1485)],_0x521bf4=_0x56435b[_0x38ae7a(0xab5)],_0x35e5e2=_0x56435b[_0x38ae7a(0x93f)],_0x1746ba=_0x56435b[_0x38ae7a(0xeb2)+_0x38ae7a(0xe17)];if(!_0x136639)return;for(const _0x16e2ef of _0x19fad9){if(!_0x16e2ef)continue;let _0x244948=_0x16e2ef[_0x38ae7a(0xc06)]()['_baseX'],_0x5ba424=_0x16e2ef[_0x38ae7a(0xc06)]()[_0x38ae7a(0x1085)];if(_0x11e6cb[_0x38ae7a(0x79c)](/home/i))_0x244948=_0x16e2ef[_0x38ae7a(0xc06)]()[_0x38ae7a(0x6f0)],_0x5ba424=_0x16e2ef['battler']()[_0x38ae7a(0xd2e)];else{if(_0x11e6cb[_0x38ae7a(0x79c)](/center/i))_0x244948=_0x41f13e[_0x38ae7a(0x1607)](Graphics[_0x38ae7a(0x1309)],0x561+0x24b*-0x7+0x1*0xaae),_0x5ba424=_0x41f13e[_0x38ae7a(0x13c3)](Graphics[_0x38ae7a(0x744)],0x17*-0x1af+0xb1c+-0x1*-0x1b9f);else _0x11e6cb[_0x38ae7a(0x79c)](/point (\d+), (\d+)/i)&&(_0x244948=_0x41f13e[_0x38ae7a(0x318)](Number,RegExp['$1']),_0x5ba424=_0x41f13e[_0x38ae7a(0x944)](Number,RegExp['$2']));}if(_0x4e15fd[_0x38ae7a(0x79c)](/none/i))_0x244948+=_0x3ecc0a,_0x5ba424+=_0xa9638f;else{if(_0x4e15fd['match'](/horz/i)&&_0x4e15fd[_0x38ae7a(0x79c)](/vert/i))_0x244948+=_0x16e2ef[_0x38ae7a(0x1580)]()?-_0x3ecc0a:_0x3ecc0a,_0x5ba424+=_0x16e2ef['isActor']()?-_0xa9638f:_0xa9638f;else{if(_0x4e15fd[_0x38ae7a(0x79c)](/horz/i))_0x244948+=_0x16e2ef[_0x38ae7a(0x1580)]()?-_0x3ecc0a:_0x3ecc0a,_0x5ba424+=_0xa9638f;else _0x4e15fd[_0x38ae7a(0x79c)](/vert/i)&&(_0x244948+=_0x3ecc0a,_0x5ba424+=_0x16e2ef[_0x38ae7a(0x1580)]()?-_0xa9638f:_0xa9638f);}}_0x16e2ef[_0x38ae7a(0x1155)+_0x38ae7a(0x1044)+'nt'](_0x244948,_0x5ba424,_0x26e45f,_0x256e2b,_0x521bf4,-(0x19*0x123+0xe*0x218+-0x1cdd*0x2)),_0x16e2ef['requestMot'+_0x38ae7a(0x1485)](_0x35e5e2);}if(_0x1746ba)_0x136639[_0x38ae7a(0xf48)+'e'](_0x41f13e['BtYTs']);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x1053)+_0x4258d1(0xa5b)+_0x4258d1(0x764)+'et',_0x4cf99e=>{const _0x4f467c=_0x4258d1,_0x4f5834={'KjGKQ':function(_0x10fd73,_0x1a4c74){return _0x10fd73>=_0x1a4c74;},'BuzcH':function(_0xaa6cff,_0x593f5d){return _0xaa6cff/_0x593f5d;},'zlMTC':function(_0x481d50,_0x4d9302){return _0x481d50+_0x4d9302;},'dUZWm':function(_0x537599,_0x300b8d){return _0x537599>=_0x300b8d;},'OasbC':function(_0x565b52,_0x7af70c){return _0x565b52/_0x7af70c;},'XAten':_0x4f467c(0x462)};if(!SceneManager[_0x4f467c(0x614)+_0x4f467c(0x6e5)]())return;if(!$gameSystem[_0x4f467c(0x8df)]())return;VisuMZ[_0x4f467c(0xd5c)+_0x4f467c(0xc0b)](_0x4cf99e,_0x4cf99e);const _0x4cd012=$gameTemp[_0x4f467c(0xb0b)+'ginCommand'+'Interprete'+'r'](),_0x301cfb=VisuMZ[_0x4f467c(0x8ec)+_0x4f467c(0xad7)+_0x4f467c(0xb00)](_0x4cf99e[_0x4f467c(0x306)]),_0x524fae=VisuMZ[_0x4f467c(0x8ec)+'onSequence'+_0x4f467c(0xb00)](_0x4cf99e['Targets2']),_0x2089c9=_0x4cf99e[_0x4f467c(0x681)+_0x4f467c(0x940)];let _0x399617=_0x4cf99e[_0x4f467c(0x196)+_0x4f467c(0x13f3)];const _0x589623=_0x4cf99e[_0x4f467c(0x283)+'st'],_0x2cbcfe=_0x4cf99e[_0x4f467c(0x1521)],_0x5d47d0=_0x4cf99e['OffsetY'],_0x3d8fc5=_0x4cf99e[_0x4f467c(0x3c1)],_0x2215b7=_0x4cf99e[_0x4f467c(0xad9)+_0x4f467c(0x1485)],_0x5e174b=_0x4cf99e[_0x4f467c(0xab5)],_0x334b36=_0x4cf99e[_0x4f467c(0x93f)],_0x51efbf=_0x4cf99e[_0x4f467c(0xeb2)+'ement'],_0x49ae41=Math[_0x4f467c(0xd3a)](..._0x524fae[_0x4f467c(0x15f9)](_0x3459b1=>_0x3459b1[_0x4f467c(0xc06)]()[_0x4f467c(0x921)]-_0x3459b1[_0x4f467c(0xc06)]()['mainSprite'+_0x4f467c(0x22c)]()/(0x2fe*-0x1+-0x1c4d+-0xa6f*-0x3))),_0x52538a=Math[_0x4f467c(0x503)](..._0x524fae[_0x4f467c(0x15f9)](_0x351474=>_0x351474[_0x4f467c(0xc06)]()[_0x4f467c(0x921)]+_0x351474[_0x4f467c(0xc06)]()['mainSprite'+_0x4f467c(0x22c)]()/(0x917*-0x1+0x1337+-0x25*0x46))),_0x442e27=Math[_0x4f467c(0xd3a)](..._0x524fae['map'](_0x47ac5a=>_0x47ac5a[_0x4f467c(0xc06)]()[_0x4f467c(0x1085)]-_0x47ac5a[_0x4f467c(0xc06)]()[_0x4f467c(0x10f3)+_0x4f467c(0x156a)]())),_0x1a273f=Math[_0x4f467c(0x503)](..._0x524fae[_0x4f467c(0x15f9)](_0x124f10=>_0x124f10[_0x4f467c(0xc06)]()[_0x4f467c(0x1085)])),_0xcda235=_0x524fae['filter'](_0x27eb53=>_0x27eb53['isActor']())['length'],_0x10dfcd=_0x524fae[_0x4f467c(0x7de)](_0x1d7b21=>_0x1d7b21[_0x4f467c(0xaf5)]())[_0x4f467c(0x1645)];let _0x907b15=0x25c7+0x197a+0x3f41*-0x1,_0x5428ea=0x2*-0x7f+0x53*-0x52+0x1b94;if(_0x2089c9[_0x4f467c(0x79c)](/front/i))_0x907b15=_0x4f5834[_0x4f467c(0x82d)](_0xcda235,_0x10dfcd)?_0x49ae41:_0x52538a;else{if(_0x2089c9[_0x4f467c(0x79c)](/middle/i))_0x907b15=_0x4f5834[_0x4f467c(0x81e)](_0x4f5834[_0x4f467c(0x384)](_0x49ae41,_0x52538a),0x950+-0x1f5b+0x160d),_0x399617=-(0x1352*0x2+-0x10c6+-0x15dd*0x1);else _0x2089c9[_0x4f467c(0x79c)](/back/i)&&(_0x907b15=_0x4f5834[_0x4f467c(0x169f)](_0xcda235,_0x10dfcd)?_0x52538a:_0x49ae41);}if(_0x2089c9[_0x4f467c(0x79c)](/head/i))_0x5428ea=_0x442e27;else{if(_0x2089c9[_0x4f467c(0x79c)](/center/i))_0x5428ea=_0x4f5834['OasbC'](_0x4f5834[_0x4f467c(0x384)](_0x442e27,_0x1a273f),0x3*-0x116+-0x1b95+0x1ed9);else _0x2089c9[_0x4f467c(0x79c)](/base/i)&&(_0x5428ea=_0x1a273f);}if(!_0x4cd012)return;for(const _0x1efcef of _0x301cfb){if(!_0x1efcef)continue;let _0x32978a=_0x907b15,_0x430c11=_0x5428ea;if(_0x589623['match'](/none/i))_0x32978a+=_0x2cbcfe,_0x430c11+=_0x5d47d0;else{if(_0x589623['match'](/horz/i)&&_0x589623[_0x4f467c(0x79c)](/vert/i))_0x32978a+=_0x1efcef['isActor']()?-_0x2cbcfe:_0x2cbcfe,_0x430c11+=_0x1efcef['isActor']()?-_0x5d47d0:_0x5d47d0;else{if(_0x589623['match'](/horz/i))_0x32978a+=_0x1efcef[_0x4f467c(0x1580)]()?-_0x2cbcfe:_0x2cbcfe,_0x430c11+=_0x5d47d0;else _0x589623['match'](/vert/i)&&(_0x32978a+=_0x2cbcfe,_0x430c11+=_0x1efcef[_0x4f467c(0x1580)]()?-_0x5d47d0:_0x5d47d0);}}_0x1efcef['moveBattle'+_0x4f467c(0x1044)+'nt'](_0x32978a,_0x430c11,_0x3d8fc5,_0x2215b7,_0x5e174b,_0x399617),_0x1efcef['requestMot'+'ion'](_0x334b36);}if(_0x51efbf)_0x4cd012[_0x4f467c(0xf48)+'e'](_0x4f5834[_0x4f467c(0xb78)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x1053)+_0x4258d1(0x1522)+_0x4258d1(0xd57),_0x3396d9=>{const _0x4c07a0=_0x4258d1;if(!SceneManager['isSceneBat'+_0x4c07a0(0x6e5)]())return;if(!$gameSystem[_0x4c07a0(0x8df)]())return;VisuMZ[_0x4c07a0(0xd5c)+_0x4c07a0(0xc0b)](_0x3396d9,_0x3396d9);const _0x13f3a7=VisuMZ[_0x4c07a0(0x8ec)+'onSequence'+'Targets'](_0x3396d9[_0x4c07a0(0xb00)]);let _0x1b2a3b=_0x3396d9['Direction']['match'](/back/i);for(const _0x5a9df9 of _0x13f3a7){if(!_0x5a9df9)continue;if(_0x3396d9[_0x4c07a0(0xd57)][_0x4c07a0(0x79c)](/rand/i))_0x1b2a3b=Math[_0x4c07a0(0x154d)](0x11b7+-0x1538+0x1d*0x1f);_0x5a9df9[_0x4c07a0(0xae9)+'Flip'](!!_0x1b2a3b);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x1053)+_0x4258d1(0x1522)+_0x4258d1(0xd9b),_0x2f6b68=>{const _0xd03f13=_0x4258d1;if(!SceneManager[_0xd03f13(0x614)+_0xd03f13(0x6e5)]())return;if(!$gameSystem[_0xd03f13(0x8df)]())return;VisuMZ['ConvertPar'+_0xd03f13(0xc0b)](_0x2f6b68,_0x2f6b68);const _0x3e8434=VisuMZ[_0xd03f13(0x8ec)+_0xd03f13(0xad7)+_0xd03f13(0xb00)](_0x2f6b68[_0xd03f13(0xb00)]),_0x397595=_0x2f6b68[_0xd03f13(0x58a)];for(const _0x26de4c of _0x3e8434){if(!_0x26de4c)continue;const _0x5e20ac=_0x2f6b68['PointJS'](_0x26de4c)||{'x':0x0,'y':0x0};let _0x3c324b=_0x5e20ac['x'],_0x20c3bc=_0x5e20ac['y'];_0x26de4c['setBattler'+_0xd03f13(0x396)](Math[_0xd03f13(0xdea)](_0x3c324b),Math[_0xd03f13(0xdea)](_0x20c3bc),!!_0x397595);}}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x1053)+_0x4258d1(0x1522)+_0x4258d1(0x869),_0x1f073b=>{const _0x542c3e=_0x4258d1,_0x15d133={'LyFEJ':function(_0x5f374c,_0x3a6d9c){return _0x5f374c/_0x3a6d9c;},'oMCRK':function(_0x528eb3,_0x1a4dde){return _0x528eb3/_0x1a4dde;},'ifkQQ':function(_0x236b6d,_0x490d3d){return _0x236b6d(_0x490d3d);}};if(!SceneManager[_0x542c3e(0x614)+'tle']())return;if(!$gameSystem[_0x542c3e(0x8df)]())return;VisuMZ[_0x542c3e(0xd5c)+_0x542c3e(0xc0b)](_0x1f073b,_0x1f073b);const _0x4485cb=VisuMZ[_0x542c3e(0x8ec)+'onSequence'+_0x542c3e(0xb00)](_0x1f073b[_0x542c3e(0xb00)]);let _0x4854cb=_0x1f073b['Point'];const _0x27761a=_0x1f073b['FaceAway'];for(const _0x2f914c of _0x4485cb){if(!_0x2f914c)continue;let _0x52039b=_0x2f914c['battler']()['_baseX'],_0x32b072=_0x2f914c[_0x542c3e(0xc06)]()['_baseY'];if(_0x4854cb[_0x542c3e(0x79c)](/home/i))_0x52039b=_0x2f914c['battler']()['_homeX'],_0x32b072=_0x2f914c[_0x542c3e(0xc06)]()[_0x542c3e(0xd2e)];else{if(_0x4854cb[_0x542c3e(0x79c)](/center/i))_0x52039b=_0x15d133[_0x542c3e(0x1137)](Graphics[_0x542c3e(0x1309)],-0x1fb9+-0x2392+0x434d),_0x32b072=_0x15d133[_0x542c3e(0x4df)](Graphics[_0x542c3e(0x744)],0x4*-0x78d+0x1*0xb11+0x1325);else _0x4854cb[_0x542c3e(0x79c)](/point (\d+), (\d+)/i)&&(_0x52039b=_0x15d133[_0x542c3e(0xcda)](Number,RegExp['$1']),_0x32b072=_0x15d133['ifkQQ'](Number,RegExp['$2']));}_0x2f914c[_0x542c3e(0xae9)+_0x542c3e(0x396)](Math[_0x542c3e(0xdea)](_0x52039b),Math['round'](_0x32b072),!!_0x27761a);}}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData['name'],'ActSeq_Mov'+'ement_Face'+_0x4258d1(0x3ce),_0x38ddd3=>{const _0xb82d5=_0x4258d1,_0x1007c5={'oKrrG':function(_0x49ef08,_0x1a8c8f){return _0x49ef08/_0x1a8c8f;}};if(!SceneManager[_0xb82d5(0x614)+_0xb82d5(0x6e5)]())return;if(!$gameSystem[_0xb82d5(0x8df)]())return;VisuMZ[_0xb82d5(0xd5c)+_0xb82d5(0xc0b)](_0x38ddd3,_0x38ddd3);const _0x574d6c=VisuMZ[_0xb82d5(0x8ec)+_0xb82d5(0xad7)+_0xb82d5(0xb00)](_0x38ddd3[_0xb82d5(0x306)]),_0x70aef7=VisuMZ[_0xb82d5(0x8ec)+_0xb82d5(0xad7)+_0xb82d5(0xb00)](_0x38ddd3[_0xb82d5(0x999)]),_0x27a378=_0x1007c5[_0xb82d5(0x426)](_0x70aef7['map'](_0x278906=>_0x278906&&_0x278906[_0xb82d5(0xc06)]()?_0x278906[_0xb82d5(0xc06)]()[_0xb82d5(0x921)]:-0x2239+-0x154f+-0x3788*-0x1),_0x70aef7[_0xb82d5(0x1645)]||-0x2591+-0xde7+-0x1*-0x3379),_0x49ccbe=_0x1007c5[_0xb82d5(0x426)](_0x70aef7[_0xb82d5(0x15f9)](_0x182d76=>_0x182d76&&_0x182d76[_0xb82d5(0xc06)]()?_0x182d76[_0xb82d5(0xc06)]()[_0xb82d5(0x1085)]:-0x59*-0x1d+-0x13*0x3d+-0x58e),_0x70aef7[_0xb82d5(0x1645)]||0x1f0e+0x25dc+-0x44e9),_0x10a39c=_0x38ddd3[_0xb82d5(0x58a)];for(const _0xe0df00 of _0x574d6c){if(!_0xe0df00)continue;_0xe0df00[_0xb82d5(0xae9)+_0xb82d5(0x396)](Math[_0xb82d5(0xdea)](_0x27a378),Math['round'](_0x49ccbe),!!_0x10a39c);}}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData['name'],'ActSeq_Mov'+_0x4258d1(0x99b)+'t',_0x137dfd=>{const _0x2d53cb=_0x4258d1,_0x3b08df={'lUpcB':_0x2d53cb(0xe2e)+'t'};if(!SceneManager['isSceneBat'+'tle']())return;VisuMZ['ConvertPar'+_0x2d53cb(0xc0b)](_0x137dfd,_0x137dfd);const _0x4b09af=$gameTemp[_0x2d53cb(0xb0b)+_0x2d53cb(0xf36)+_0x2d53cb(0x1456)+'r'](),_0x3cd39d=VisuMZ['CreateActi'+_0x2d53cb(0xad7)+'Targets'](_0x137dfd[_0x2d53cb(0xb00)]),_0x455f84=_0x137dfd[_0x2d53cb(0x156a)],_0x5c8d98=_0x137dfd['Duration'],_0x3e6a28=_0x137dfd[_0x2d53cb(0xab5)],_0x4b861d=_0x137dfd[_0x2d53cb(0xbb7)+'at'];if(!_0x4b09af)return;for(const _0x4233bd of _0x3cd39d){if(!_0x4233bd)continue;_0x4233bd['floatBattl'+'er'](_0x455f84,_0x5c8d98,_0x3e6a28);}if(_0x4b861d)_0x4b09af[_0x2d53cb(0xf48)+'e'](_0x3b08df[_0x2d53cb(0xe47)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x1053)+_0x4258d1(0xa5b)+'Reset',_0x22b073=>{const _0x3b2401=_0x4258d1,_0xd133b6={'eLBEl':_0x3b2401(0x462)};if(!SceneManager['isSceneBat'+_0x3b2401(0x6e5)]())return;VisuMZ['ConvertPar'+_0x3b2401(0xc0b)](_0x22b073,_0x22b073);const _0x4c54d2=$gameTemp[_0x3b2401(0xb0b)+'ginCommand'+_0x3b2401(0x1456)+'r']();if(!_0x4c54d2)return;const _0x24a0da=VisuMZ['CreateActi'+'onSequence'+_0x3b2401(0xb00)](_0x22b073[_0x3b2401(0xb00)]);for(const _0x53f537 of _0x24a0da){if(!_0x53f537)continue;_0x53f537[_0x3b2401(0xe11)+_0x3b2401(0x256)+_0x3b2401(0x1514)]();}BattleManager[_0x3b2401(0xa47)]&&BattleManager[_0x3b2401(0xa47)][_0x3b2401(0xe11)+_0x3b2401(0xb12)]();if(_0x22b073[_0x3b2401(0xeb2)+_0x3b2401(0xe17)])_0x4c54d2[_0x3b2401(0xf48)+'e'](_0xd133b6['eLBEl']);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x1053)+_0x4258d1(0x157b),_0x46d009=>{const _0x2f3dd6=_0x4258d1,_0x24e781={'oqLyZ':_0x2f3dd6(0x12fa)};if(!SceneManager['isSceneBat'+'tle']())return;VisuMZ[_0x2f3dd6(0xd5c)+_0x2f3dd6(0xc0b)](_0x46d009,_0x46d009);const _0xc5b50c=$gameTemp[_0x2f3dd6(0xb0b)+_0x2f3dd6(0xf36)+'Interprete'+'r'](),_0x4c9134=VisuMZ[_0x2f3dd6(0x8ec)+_0x2f3dd6(0xad7)+_0x2f3dd6(0xb00)](_0x46d009[_0x2f3dd6(0xb00)]),_0x280972=_0x46d009['Height'],_0xe8537b=_0x46d009[_0x2f3dd6(0x3c1)],_0xe0bba8=_0x46d009['WaitForJum'+'p'];if(!_0xc5b50c)return;for(const _0x43bbdf of _0x4c9134){if(!_0x43bbdf)continue;_0x43bbdf[_0x2f3dd6(0xd21)+'r'](_0x280972,_0xe8537b);}if(_0xe0bba8)_0xc5b50c[_0x2f3dd6(0xf48)+'e'](_0x24e781[_0x2f3dd6(0xea2)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x1053)+_0x4258d1(0x9b3)+'By',_0x2df319=>{const _0x41edc7=_0x4258d1,_0xe01378={'QgFut':_0x41edc7(0x462)};if(!SceneManager[_0x41edc7(0x614)+_0x41edc7(0x6e5)]())return;if(!$gameSystem[_0x41edc7(0x8df)]())return;VisuMZ[_0x41edc7(0xd5c)+_0x41edc7(0xc0b)](_0x2df319,_0x2df319);const _0x3aae59=$gameTemp[_0x41edc7(0xb0b)+_0x41edc7(0xf36)+_0x41edc7(0x1456)+'r'](),_0x3dea37=VisuMZ[_0x41edc7(0x8ec)+'onSequence'+_0x41edc7(0xb00)](_0x2df319[_0x41edc7(0xb00)]),_0x1b09f8=_0x2df319[_0x41edc7(0x47e)+_0x41edc7(0xcfb)],_0x3febb2=_0x2df319['DistanceX'],_0x43c9d6=_0x2df319[_0x41edc7(0xa1c)],_0xc457ee=_0x2df319[_0x41edc7(0x3c1)],_0x127f85=_0x2df319[_0x41edc7(0xad9)+_0x41edc7(0x1485)],_0x37cd31=_0x2df319['EasingType'],_0x563062=_0x2df319[_0x41edc7(0x93f)],_0x264c88=_0x2df319[_0x41edc7(0xeb2)+_0x41edc7(0xe17)];if(!_0x3aae59)return;for(const _0x4ed2ac of _0x3dea37){if(!_0x4ed2ac)continue;let _0x57c3d8=_0x3febb2,_0x564a4b=_0x43c9d6;if(_0x1b09f8[_0x41edc7(0x79c)](/horz/i))_0x57c3d8*=_0x4ed2ac[_0x41edc7(0x1580)]()?-(-0x1b8c+0x12ef+0x89e):-0x89*0x1a+-0x16eb+-0xcd*-0x2e;if(_0x1b09f8[_0x41edc7(0x79c)](/vert/i))_0x564a4b*=_0x4ed2ac[_0x41edc7(0x1580)]()?-(-0x267e+0x14*-0x197+-0x1*-0x464b):-0x3bb+-0x1*-0x1c83+-0x1*0x18c7;_0x4ed2ac[_0x41edc7(0x1155)+_0x41edc7(0x984)](_0x57c3d8,_0x564a4b,_0xc457ee,_0x127f85,_0x37cd31),_0x4ed2ac[_0x41edc7(0x759)+_0x41edc7(0x1485)](_0x563062);}if(_0x264c88)_0x3aae59['setWaitMod'+'e'](_0xe01378[_0x41edc7(0x704)]);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData['name'],_0x4258d1(0x1053)+_0x4258d1(0x9b3)+_0x4258d1(0x949),_0x34a887=>{const _0x30a53f=_0x4258d1,_0x22b13c={'yMLsf':_0x30a53f(0x462)};if(!SceneManager[_0x30a53f(0x614)+'tle']())return;if(!$gameSystem[_0x30a53f(0x8df)]())return;VisuMZ[_0x30a53f(0xd5c)+'ams'](_0x34a887,_0x34a887);const _0x2400d1=$gameTemp[_0x30a53f(0xb0b)+_0x30a53f(0xf36)+_0x30a53f(0x1456)+'r'](),_0x493217=VisuMZ[_0x30a53f(0x8ec)+'onSequence'+_0x30a53f(0xb00)](_0x34a887['Targets']),_0x5ec5f6=_0x34a887[_0x30a53f(0x283)+'st'],_0x2a95c4=_0x34a887[_0x30a53f(0x1521)],_0x3319a6=_0x34a887[_0x30a53f(0x114e)],_0x388fcf=_0x34a887[_0x30a53f(0x3c1)],_0x5ca749=_0x34a887['FaceDirect'+'ion'],_0x2a29cc=_0x34a887['EasingType'],_0x15c1ea=_0x34a887[_0x30a53f(0x93f)],_0x3163c5=_0x34a887[_0x30a53f(0xeb2)+_0x30a53f(0xe17)];if(!_0x2400d1)return;for(const _0x2a09ac of _0x493217){if(!_0x2a09ac)continue;const _0xad8c9c=_0x34a887[_0x30a53f(0xc79)+_0x30a53f(0x1201)](_0x2a09ac)||{'x':0x0,'y':0x0};let _0x11ba3c=_0xad8c9c['x'],_0x1a0ed6=_0xad8c9c['y'];if(_0x5ec5f6[_0x30a53f(0x79c)](/none/i))_0x11ba3c+=_0x2a95c4,_0x1a0ed6+=_0x3319a6;else{if(_0x5ec5f6[_0x30a53f(0x79c)](/horz/i)&&_0x5ec5f6[_0x30a53f(0x79c)](/vert/i))_0x11ba3c+=_0x2a09ac[_0x30a53f(0x1580)]()?-_0x2a95c4:_0x2a95c4,_0x1a0ed6+=_0x2a09ac[_0x30a53f(0x1580)]()?-_0x3319a6:_0x3319a6;else{if(_0x5ec5f6['match'](/horz/i))_0x11ba3c+=_0x2a09ac[_0x30a53f(0x1580)]()?-_0x2a95c4:_0x2a95c4,_0x1a0ed6+=_0x3319a6;else _0x5ec5f6[_0x30a53f(0x79c)](/vert/i)&&(_0x11ba3c+=_0x2a95c4,_0x1a0ed6+=_0x2a09ac['isActor']()?-_0x3319a6:_0x3319a6);}}_0x2a09ac[_0x30a53f(0x1155)+_0x30a53f(0x1d6)](_0x11ba3c,_0x1a0ed6,_0x388fcf,_0x5ca749,_0x2a29cc,-(-0x1*0x1f87+0x11*0xd5+0x1163)),_0x2a09ac[_0x30a53f(0x759)+'ion'](_0x15c1ea);}if(_0x3163c5)_0x2400d1[_0x30a53f(0xf48)+'e'](_0x22b13c[_0x30a53f(0x10dc)]);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData['name'],_0x4258d1(0x1053)+_0x4258d1(0x9b3)+_0x4258d1(0x15b4),_0x66ce1b=>{const _0x24f71b=_0x4258d1,_0x62e5f7={'nYtDK':function(_0x11bcfb,_0xc90bc2){return _0x11bcfb/_0xc90bc2;},'gBuWQ':function(_0xd7c171,_0x11f536){return _0xd7c171(_0x11f536);},'SeNwl':function(_0x4a0c1f,_0x4ceca4){return _0x4a0c1f(_0x4ceca4);},'EAGoJ':_0x24f71b(0x462)};if(!SceneManager['isSceneBat'+_0x24f71b(0x6e5)]())return;if(!$gameSystem[_0x24f71b(0x8df)]())return;VisuMZ['ConvertPar'+_0x24f71b(0xc0b)](_0x66ce1b,_0x66ce1b);const _0x55ec1a=$gameTemp[_0x24f71b(0xb0b)+_0x24f71b(0xf36)+'Interprete'+'r'](),_0x194cac=VisuMZ['CreateActi'+_0x24f71b(0xad7)+_0x24f71b(0xb00)](_0x66ce1b['Targets']),_0x120086=_0x66ce1b['Destinatio'+'n'],_0x39e660=_0x66ce1b['OffsetAdju'+'st'],_0x510161=_0x66ce1b[_0x24f71b(0x1521)],_0x3304b0=_0x66ce1b[_0x24f71b(0x114e)],_0x29574e=_0x66ce1b[_0x24f71b(0x3c1)],_0xec1fce=_0x66ce1b[_0x24f71b(0xad9)+'ion'],_0x2d2671=_0x66ce1b[_0x24f71b(0xab5)],_0x16c568=_0x66ce1b[_0x24f71b(0x93f)],_0x443871=_0x66ce1b['WaitForMov'+'ement'];if(!_0x55ec1a)return;for(const _0x31a9e6 of _0x194cac){if(!_0x31a9e6)continue;let _0x27d95e=_0x31a9e6[_0x24f71b(0xc06)]()[_0x24f71b(0x921)],_0xf26a41=_0x31a9e6[_0x24f71b(0xc06)]()['_baseY'];if(_0x120086[_0x24f71b(0x79c)](/home/i))_0x27d95e=_0x31a9e6[_0x24f71b(0xc06)]()[_0x24f71b(0x6f0)],_0xf26a41=_0x31a9e6[_0x24f71b(0xc06)]()[_0x24f71b(0xd2e)];else{if(_0x120086[_0x24f71b(0x79c)](/center/i))_0x27d95e=_0x62e5f7['nYtDK'](Graphics[_0x24f71b(0x1309)],-0xfeb+-0x9b*0x25+0xdf*0x2c),_0xf26a41=_0x62e5f7[_0x24f71b(0x2c3)](Graphics[_0x24f71b(0x744)],0x1d3c+-0x1413+-0x927);else _0x120086['match'](/point (\d+), (\d+)/i)&&(_0x27d95e=_0x62e5f7['gBuWQ'](Number,RegExp['$1']),_0xf26a41=_0x62e5f7[_0x24f71b(0x694)](Number,RegExp['$2']));}if(_0x39e660[_0x24f71b(0x79c)](/none/i))_0x27d95e+=_0x510161,_0xf26a41+=_0x3304b0;else{if(_0x39e660[_0x24f71b(0x79c)](/horz/i)&&_0x39e660[_0x24f71b(0x79c)](/vert/i))_0x27d95e+=_0x31a9e6['isActor']()?-_0x510161:_0x510161,_0xf26a41+=_0x31a9e6[_0x24f71b(0x1580)]()?-_0x3304b0:_0x3304b0;else{if(_0x39e660[_0x24f71b(0x79c)](/horz/i))_0x27d95e+=_0x31a9e6[_0x24f71b(0x1580)]()?-_0x510161:_0x510161,_0xf26a41+=_0x3304b0;else _0x39e660[_0x24f71b(0x79c)](/vert/i)&&(_0x27d95e+=_0x510161,_0xf26a41+=_0x31a9e6[_0x24f71b(0x1580)]()?-_0x3304b0:_0x3304b0);}}_0x31a9e6[_0x24f71b(0x1155)+_0x24f71b(0x1d6)](_0x27d95e,_0xf26a41,_0x29574e,_0xec1fce,_0x2d2671,-(0x14dd+0x7*0x3d6+-0x2fb6)),_0x31a9e6[_0x24f71b(0x759)+_0x24f71b(0x1485)](_0x16c568);}if(_0x443871)_0x55ec1a[_0x24f71b(0xf48)+'e'](_0x62e5f7['EAGoJ']);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x1053)+_0x4258d1(0x9b3)+_0x4258d1(0xd31),_0x3be05c=>{const _0x3a664e=_0x4258d1,_0x324a44={'yoQtu':function(_0x7e514f,_0x3d0153){return _0x7e514f>=_0x3d0153;},'LJFCo':function(_0x23c450,_0x52356f){return _0x23c450/_0x52356f;},'nqwKD':function(_0x311702,_0x19a489){return _0x311702+_0x19a489;},'eLfVO':function(_0x45d818,_0x5611f3){return _0x45d818/_0x5611f3;},'WnjGx':'battleMove'};if(!SceneManager['isSceneBat'+_0x3a664e(0x6e5)]())return;if(!$gameSystem[_0x3a664e(0x8df)]())return;VisuMZ['ConvertPar'+_0x3a664e(0xc0b)](_0x3be05c,_0x3be05c);const _0x360114=$gameTemp[_0x3a664e(0xb0b)+_0x3a664e(0xf36)+_0x3a664e(0x1456)+'r'](),_0x54f0bd=VisuMZ[_0x3a664e(0x8ec)+_0x3a664e(0xad7)+_0x3a664e(0xb00)](_0x3be05c['Targets1']),_0x403deb=VisuMZ[_0x3a664e(0x8ec)+'onSequence'+'Targets'](_0x3be05c[_0x3a664e(0x999)]),_0xc419a5=_0x3be05c[_0x3a664e(0x681)+_0x3a664e(0x940)];let _0x1e3cdf=_0x3be05c['MeleeDista'+_0x3a664e(0x13f3)];const _0x4d6369=_0x3be05c[_0x3a664e(0x283)+'st'],_0x27a653=_0x3be05c[_0x3a664e(0x1521)],_0x4bf980=_0x3be05c[_0x3a664e(0x114e)],_0x53f80b=_0x3be05c[_0x3a664e(0x3c1)],_0x1e346c=_0x3be05c[_0x3a664e(0xad9)+'ion'],_0x335db8=_0x3be05c[_0x3a664e(0xab5)],_0x287c4a=_0x3be05c['MotionType'],_0x1c3951=_0x3be05c[_0x3a664e(0xeb2)+'ement'],_0x417a1f=Math[_0x3a664e(0xd3a)](..._0x403deb['map'](_0x162a03=>_0x162a03['battler']()['_baseX']-_0x162a03[_0x3a664e(0xc06)]()[_0x3a664e(0x10f3)+'Width']()/(-0x682*0x6+0x4*0x7b5+0x36*0x27))),_0x13aa72=Math[_0x3a664e(0x503)](..._0x403deb[_0x3a664e(0x15f9)](_0x43de3a=>_0x43de3a['battler']()['_baseX']+_0x43de3a[_0x3a664e(0xc06)]()[_0x3a664e(0x10f3)+_0x3a664e(0x22c)]()/(-0x23c*-0xd+-0x1300+-0xa0a))),_0x5c5ea1=Math[_0x3a664e(0xd3a)](..._0x403deb[_0x3a664e(0x15f9)](_0x34e922=>_0x34e922[_0x3a664e(0xc06)]()[_0x3a664e(0x1085)]-_0x34e922[_0x3a664e(0xc06)]()[_0x3a664e(0x10f3)+_0x3a664e(0x156a)]())),_0x2710ce=Math['max'](..._0x403deb[_0x3a664e(0x15f9)](_0x520f7f=>_0x520f7f[_0x3a664e(0xc06)]()['_baseY'])),_0x2366ac=_0x403deb[_0x3a664e(0x7de)](_0x3f9e3e=>_0x3f9e3e[_0x3a664e(0x1580)]())[_0x3a664e(0x1645)],_0x2b5741=_0x403deb[_0x3a664e(0x7de)](_0x415d69=>_0x415d69['isEnemy']())[_0x3a664e(0x1645)];let _0x781982=0x1*0xaee+0x839*0x1+0x1*-0x1327,_0x4e71a4=-0x9f3*0x2+0x17b3+-0x8b*0x7;if(_0xc419a5[_0x3a664e(0x79c)](/front/i))_0x781982=_0x324a44[_0x3a664e(0x15f6)](_0x2366ac,_0x2b5741)?_0x417a1f:_0x13aa72;else{if(_0xc419a5['match'](/middle/i))_0x781982=_0x324a44['LJFCo'](_0x324a44[_0x3a664e(0x11b7)](_0x417a1f,_0x13aa72),-0x7*-0x56c+0x2489+-0x4a7b),_0x1e3cdf=-(0x2444+-0x6e8+-0xf*0x1f5);else _0xc419a5[_0x3a664e(0x79c)](/back/i)&&(_0x781982=_0x324a44[_0x3a664e(0x15f6)](_0x2366ac,_0x2b5741)?_0x13aa72:_0x417a1f);}if(_0xc419a5['match'](/head/i))_0x4e71a4=_0x5c5ea1;else{if(_0xc419a5[_0x3a664e(0x79c)](/center/i))_0x4e71a4=_0x324a44[_0x3a664e(0x5fb)](_0x324a44[_0x3a664e(0x11b7)](_0x5c5ea1,_0x2710ce),0x6*0x346+0x2*0x167+0x1670*-0x1);else _0xc419a5[_0x3a664e(0x79c)](/base/i)&&(_0x4e71a4=_0x2710ce);}if(!_0x360114)return;for(const _0x342c9f of _0x54f0bd){if(!_0x342c9f)continue;let _0x576720=_0x781982,_0x36a616=_0x4e71a4;if(_0x4d6369[_0x3a664e(0x79c)](/none/i))_0x576720+=_0x27a653,_0x36a616+=_0x4bf980;else{if(_0x4d6369[_0x3a664e(0x79c)](/horz/i)&&_0x4d6369['match'](/vert/i))_0x576720+=_0x342c9f[_0x3a664e(0x1580)]()?-_0x27a653:_0x27a653,_0x36a616+=_0x342c9f[_0x3a664e(0x1580)]()?-_0x4bf980:_0x4bf980;else{if(_0x4d6369['match'](/horz/i))_0x576720+=_0x342c9f[_0x3a664e(0x1580)]()?-_0x27a653:_0x27a653,_0x36a616+=_0x4bf980;else _0x4d6369['match'](/vert/i)&&(_0x576720+=_0x27a653,_0x36a616+=_0x342c9f[_0x3a664e(0x1580)]()?-_0x4bf980:_0x4bf980);}}_0x342c9f[_0x3a664e(0x1155)+_0x3a664e(0x1d6)](_0x576720,_0x36a616,_0x53f80b,_0x1e346c,_0x335db8,_0x1e3cdf),_0x342c9f[_0x3a664e(0x759)+_0x3a664e(0x1485)](_0x287c4a);}if(_0x1c3951)_0x360114[_0x3a664e(0xf48)+'e'](_0x324a44[_0x3a664e(0x105b)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Mov'+_0x4258d1(0x4fd)+'ity',_0x3903d9=>{const _0x254c15=_0x4258d1,_0x2edd4b={'VLvUM':_0x254c15(0x975)+_0x254c15(0x100b)};if(!SceneManager[_0x254c15(0x614)+_0x254c15(0x6e5)]())return;VisuMZ[_0x254c15(0xd5c)+_0x254c15(0xc0b)](_0x3903d9,_0x3903d9);const _0x10ff18=$gameTemp[_0x254c15(0xb0b)+_0x254c15(0xf36)+_0x254c15(0x1456)+'r'](),_0x21a938=VisuMZ['CreateActi'+_0x254c15(0xad7)+'Targets'](_0x3903d9[_0x254c15(0xb00)]),_0x4d26a8=_0x3903d9['Opacity'],_0x2401ad=_0x3903d9['Duration'],_0x4bfce7=_0x3903d9[_0x254c15(0xab5)],_0x5d5d96=_0x3903d9['WaitForOpa'+_0x254c15(0xfa7)];if(!_0x10ff18)return;for(const _0x5968fb of _0x21a938){if(!_0x5968fb)continue;_0x5968fb[_0x254c15(0xf5c)+_0x254c15(0xaaa)](_0x4d26a8,_0x2401ad,_0x4bfce7);}if(_0x5d5d96)_0x10ff18[_0x254c15(0xf48)+'e'](_0x2edd4b[_0x254c15(0xa8b)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x1053)+_0x4258d1(0x148a)+'e',_0x2e518e=>{const _0x3bbd46=_0x4258d1,_0x30a88f={'kflYq':'battleGrow'};if(!SceneManager[_0x3bbd46(0x614)+_0x3bbd46(0x6e5)]())return;VisuMZ[_0x3bbd46(0xd5c)+'ams'](_0x2e518e,_0x2e518e);const _0x51a273=$gameTemp[_0x3bbd46(0xb0b)+_0x3bbd46(0xf36)+'Interprete'+'r'](),_0x55719a=VisuMZ['CreateActi'+'onSequence'+_0x3bbd46(0xb00)](_0x2e518e['Targets']),_0x207c82=_0x2e518e[_0x3bbd46(0x122a)],_0x473b8c=_0x2e518e['ScaleY'],_0x7bbd5c=_0x2e518e[_0x3bbd46(0x3c1)],_0x48191e=_0x2e518e[_0x3bbd46(0xab5)],_0x56656b=_0x2e518e[_0x3bbd46(0xc2b)+'le'];if(!_0x51a273)return;for(const _0x346f90 of _0x55719a){if(!_0x346f90)continue;_0x346f90[_0x3bbd46(0x12f9)+'r'](_0x207c82,_0x473b8c,_0x7bbd5c,_0x48191e);}if(_0x56656b)_0x51a273[_0x3bbd46(0xf48)+'e'](_0x30a88f[_0x3bbd46(0x188)]);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x1053)+_0x4258d1(0xbe4),_0x722f81=>{const _0x485e25=_0x4258d1,_0x353b2e={'zJrYB':_0x485e25(0xb60)+'teSkew'};if(!SceneManager[_0x485e25(0x614)+'tle']())return;VisuMZ[_0x485e25(0xd5c)+_0x485e25(0xc0b)](_0x722f81,_0x722f81);const _0x153d17=$gameTemp[_0x485e25(0xb0b)+_0x485e25(0xf36)+_0x485e25(0x1456)+'r'](),_0x295015=VisuMZ[_0x485e25(0x8ec)+'onSequence'+_0x485e25(0xb00)](_0x722f81[_0x485e25(0xb00)]),_0x1a103e=_0x722f81[_0x485e25(0xf60)],_0x195221=_0x722f81['SkewY'],_0x2330c5=_0x722f81[_0x485e25(0x3c1)],_0x5de84e=_0x722f81[_0x485e25(0xab5)],_0x2e233f=_0x722f81[_0x485e25(0x9da)+'w'];if(!_0x153d17)return;for(const _0x4e46f0 of _0x295015){if(!_0x4e46f0)continue;_0x4e46f0[_0x485e25(0x9ad)+'r'](_0x1a103e,_0x195221,_0x2330c5,_0x5de84e);}if(_0x2e233f)_0x153d17['setWaitMod'+'e'](_0x353b2e[_0x485e25(0xc26)]);}),PluginManager['registerCo'+'mmand'](pluginData['name'],_0x4258d1(0x1053)+'ement_Spin',_0x5317e7=>{const _0x3db54a=_0x4258d1,_0x2fbf28={'SIDwn':'battleSpin'};if(!SceneManager[_0x3db54a(0x614)+_0x3db54a(0x6e5)]())return;VisuMZ[_0x3db54a(0xd5c)+_0x3db54a(0xc0b)](_0x5317e7,_0x5317e7);const _0x1d45fc=$gameTemp[_0x3db54a(0xb0b)+'ginCommand'+'Interprete'+'r'](),_0x47ac38=VisuMZ[_0x3db54a(0x8ec)+_0x3db54a(0xad7)+_0x3db54a(0xb00)](_0x5317e7[_0x3db54a(0xb00)]),_0x47e273=_0x5317e7[_0x3db54a(0x1314)],_0x356f5b=_0x5317e7[_0x3db54a(0x3c1)],_0x22ee64=_0x5317e7['EasingType'],_0x4d3290=_0x5317e7['RevertAngl'+'e'],_0x20efdc=_0x5317e7['WaitForSpi'+'n'];if(!_0x1d45fc)return;for(const _0x1a5b9a of _0x47ac38){if(!_0x1a5b9a)continue;_0x1a5b9a['spinBattle'+'r'](_0x47e273,_0x356f5b,_0x22ee64,_0x4d3290);}if(_0x20efdc)_0x1d45fc[_0x3db54a(0xf48)+'e'](_0x2fbf28['SIDwn']);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x1053)+_0x4258d1(0x21f)+_0x4258d1(0xb76),_0x98a5ed=>{const _0x58e8aa=_0x4258d1,_0x549dc4={'mdnvm':_0x58e8aa(0xe2e)+'t'};if(!SceneManager[_0x58e8aa(0x614)+_0x58e8aa(0x6e5)]())return;const _0x662bd6=$gameTemp[_0x58e8aa(0xb0b)+_0x58e8aa(0xf36)+_0x58e8aa(0x1456)+'r']();if(!_0x662bd6)return;_0x662bd6[_0x58e8aa(0xf48)+'e'](_0x549dc4[_0x58e8aa(0x15c1)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x1053)+_0x4258d1(0x21f)+_0x4258d1(0x1162),_0x1ac66f=>{const _0x33c371=_0x4258d1,_0xecf783={'mpeTs':_0x33c371(0x12fa)};if(!SceneManager[_0x33c371(0x614)+_0x33c371(0x6e5)]())return;const _0x162c5e=$gameTemp[_0x33c371(0xb0b)+'ginCommand'+'Interprete'+'r']();if(!_0x162c5e)return;_0x162c5e[_0x33c371(0xf48)+'e'](_0xecf783[_0x33c371(0xb56)]);}),PluginManager['registerCo'+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x1053)+_0x4258d1(0x21f)+_0x4258d1(0x1321)+'t',_0x2334e5=>{const _0x530c8f=_0x4258d1,_0x3d0cef={'XSUlJ':_0x530c8f(0x462)};if(!SceneManager[_0x530c8f(0x614)+_0x530c8f(0x6e5)]())return;const _0x22ff3b=$gameTemp['getLastPlu'+_0x530c8f(0xf36)+_0x530c8f(0x1456)+'r']();if(!_0x22ff3b)return;_0x22ff3b[_0x530c8f(0xf48)+'e'](_0x3d0cef['XSUlJ']);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x1053)+'ement_Wait'+_0x4258d1(0x795),_0x3cae50=>{const _0x55242f=_0x4258d1,_0x24c68b={'iCpJY':_0x55242f(0x975)+_0x55242f(0x100b)};if(!SceneManager[_0x55242f(0x614)+_0x55242f(0x6e5)]())return;const _0x20fa1f=$gameTemp['getLastPlu'+_0x55242f(0xf36)+'Interprete'+'r']();if(!_0x20fa1f)return;_0x20fa1f['setWaitMod'+'e'](_0x24c68b[_0x55242f(0xa64)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],'ActSeq_Mov'+_0x4258d1(0x21f)+_0x4258d1(0x3a5),_0x5638bd=>{const _0x578c37=_0x4258d1,_0x594d54={'GQqxK':'battleGrow'};if(!SceneManager[_0x578c37(0x614)+'tle']())return;const _0x450395=$gameTemp[_0x578c37(0xb0b)+'ginCommand'+_0x578c37(0x1456)+'r']();if(!_0x450395)return;_0x450395[_0x578c37(0xf48)+'e'](_0x594d54[_0x578c37(0xc55)]);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x1053)+'ement_Wait'+_0x4258d1(0xaa0),_0x293ae1=>{const _0x15de70=_0x4258d1,_0x37154f={'oPBtO':_0x15de70(0xb60)+'teSkew'};if(!SceneManager[_0x15de70(0x614)+_0x15de70(0x6e5)]())return;const _0x10f205=$gameTemp[_0x15de70(0xb0b)+_0x15de70(0xf36)+_0x15de70(0x1456)+'r']();if(!_0x10f205)return;_0x10f205[_0x15de70(0xf48)+'e'](_0x37154f[_0x15de70(0xc09)]);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData['name'],_0x4258d1(0x1053)+_0x4258d1(0x21f)+_0x4258d1(0x9ac),_0x2d6b84=>{const _0xaa1e2e=_0x4258d1,_0x3a5ba2={'SSPfh':_0xaa1e2e(0x720)};if(!SceneManager[_0xaa1e2e(0x614)+_0xaa1e2e(0x6e5)]())return;const _0x41865d=$gameTemp[_0xaa1e2e(0xb0b)+_0xaa1e2e(0xf36)+'Interprete'+'r']();if(!_0x41865d)return;_0x41865d[_0xaa1e2e(0xf48)+'e'](_0x3a5ba2[_0xaa1e2e(0xd22)]);}),VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1fb)+_0x4258d1(0xe4c)+_0x4258d1(0x99d)]=function(){const _0x166a55=_0x4258d1,_0x47e108={'FchoG':function(_0x49940d,_0x116024){return _0x49940d<_0x116024;},'vksZb':'VisuMZ_3_A'+_0x166a55(0x12ae)+_0x166a55(0x161f)+_0x166a55(0x4c3)+_0x166a55(0xa3a),'TSBHB':_0x166a55(0x456)+'or\x20VisuMZ_'+_0x166a55(0x5e8)+_0x166a55(0x25a)+'.','VdJZm':function(_0x44a9d5,_0xf05392){return _0x44a9d5(_0xf05392);}};if(!Imported[_0x166a55(0x1403)+_0x166a55(0x12ae)+_0x166a55(0xede)])return;if(_0x47e108[_0x166a55(0x16a6)](VisuMZ[_0x166a55(0x94b)+_0x166a55(0x1568)][_0x166a55(0x389)],0xadc*-0x2+-0x20c4+0x367d+0.08000000000000007)){let _0x3ed093='';_0x3ed093+=_0x47e108['vksZb'],_0x3ed093+=_0x47e108[_0x166a55(0x820)],_0x47e108[_0x166a55(0x11d2)](alert,_0x3ed093),SceneManager[_0x166a55(0xfb6)]();}},PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],'ActSeq_Pro'+_0x4258d1(0x8dd)+'imation',_0xec2c2c=>{const _0x4d5ff4=_0x4258d1,_0x4f1b38={'yoEyi':_0x4d5ff4(0xbeb)+_0x4d5ff4(0x1568)};if(!SceneManager[_0x4d5ff4(0x614)+_0x4d5ff4(0x6e5)]())return;if(!Imported['VisuMZ_3_A'+'ctSeqProje'+_0x4d5ff4(0xede)])return;VisuMZ[_0x4d5ff4(0xd5c)+_0x4d5ff4(0xc0b)](_0xec2c2c,_0xec2c2c),VisuMZ[_0x4d5ff4(0x337)][_0x4d5ff4(0x1fb)+'qProjectil'+_0x4d5ff4(0x99d)]();const _0x58809b=$gameTemp[_0x4d5ff4(0xb0b)+_0x4d5ff4(0xf36)+_0x4d5ff4(0x1456)+'r'](),_0xbd8823=_0xec2c2c['WaitForPro'+_0x4d5ff4(0xb23)];if(!_0x58809b)return;const _0x1e88a3=BattleManager[_0x4d5ff4(0x1b3)];if(!_0x1e88a3)return;_0x1e88a3[_0x4d5ff4(0xe1a)+_0x4d5ff4(0xad7)+'Projectile'](_0xec2c2c);if(_0xbd8823)_0x58809b['setWaitMod'+'e'](_0x4f1b38[_0x4d5ff4(0xdc7)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xb9e)+_0x4258d1(0x13f4)+'on',_0x12423f=>{const _0xa6241d=_0x4258d1,_0x6b2786={'GkdVb':_0xa6241d(0xbeb)+'ectiles'};if(!SceneManager[_0xa6241d(0x614)+_0xa6241d(0x6e5)]())return;if(!Imported[_0xa6241d(0x1403)+_0xa6241d(0x12ae)+'ctiles'])return;VisuMZ[_0xa6241d(0xd5c)+_0xa6241d(0xc0b)](_0x12423f,_0x12423f),VisuMZ[_0xa6241d(0x337)][_0xa6241d(0x1fb)+_0xa6241d(0xe4c)+_0xa6241d(0x99d)]();const _0x3d0b62=$gameTemp['getLastPlu'+'ginCommand'+_0xa6241d(0x1456)+'r'](),_0x2f7b7c=_0x12423f[_0xa6241d(0xd07)+_0xa6241d(0xb23)];if(!_0x3d0b62)return;const _0x318207=BattleManager[_0xa6241d(0x1b3)];if(!_0x318207)return;_0x318207[_0xa6241d(0xe1a)+_0xa6241d(0xad7)+_0xa6241d(0x40f)](_0x12423f);if(_0x2f7b7c)_0x3d0b62[_0xa6241d(0xf48)+'e'](_0x6b2786[_0xa6241d(0x1153)]);}),PluginManager['registerCo'+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xb9e)+_0x4258d1(0xff5)+_0x4258d1(0x544),_0x2a4365=>{const _0x49f9df=_0x4258d1,_0x4ee8be={'vpKII':_0x49f9df(0xbeb)+'ectiles'};if(!SceneManager[_0x49f9df(0x614)+_0x49f9df(0x6e5)]())return;if(!Imported[_0x49f9df(0x1403)+_0x49f9df(0x12ae)+_0x49f9df(0xede)])return;VisuMZ[_0x49f9df(0xd5c)+_0x49f9df(0xc0b)](_0x2a4365,_0x2a4365),VisuMZ[_0x49f9df(0x337)][_0x49f9df(0x1fb)+_0x49f9df(0xe4c)+'eVersion']();const _0x20cdb4=$gameTemp[_0x49f9df(0xb0b)+_0x49f9df(0xf36)+_0x49f9df(0x1456)+'r'](),_0x44620d=_0x2a4365[_0x49f9df(0xd07)+'jectile'];if(!_0x20cdb4)return;const _0x236fdb=BattleManager['_spriteset'];if(!_0x236fdb)return;_0x236fdb[_0x49f9df(0xe1a)+_0x49f9df(0xad7)+_0x49f9df(0x40f)](_0x2a4365);if(_0x44620d)_0x20cdb4[_0x49f9df(0xf48)+'e'](_0x4ee8be[_0x49f9df(0x16c1)]);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xff8)+'ngeSkew',_0x4990b5=>{const _0x5b8e11=_0x4258d1,_0x5a5d9a={'jDuDY':_0x5b8e11(0x1005)};if(!SceneManager[_0x5b8e11(0x614)+'tle']())return;if(!Imported['VisuMZ_3_A'+_0x5b8e11(0x90e)+'a'])return;VisuMZ['ConvertPar'+_0x5b8e11(0xc0b)](_0x4990b5,_0x4990b5);const _0x22865d=$gameTemp[_0x5b8e11(0xb0b)+_0x5b8e11(0xf36)+_0x5b8e11(0x1456)+'r'](),_0x17aea7=_0x4990b5[_0x5b8e11(0x9da)+'w'];if(!_0x22865d)return;$gameScreen[_0x5b8e11(0xf5d)+'kew'](_0x4990b5[_0x5b8e11(0xf60)],_0x4990b5[_0x5b8e11(0xf7f)],_0x4990b5[_0x5b8e11(0x3c1)],_0x4990b5[_0x5b8e11(0xab5)]);if(_0x17aea7)_0x22865d[_0x5b8e11(0xf48)+'e'](_0x5a5d9a['jDuDY']);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],'ActSeq_Ske'+_0x4258d1(0x1352),_0x40c9c7=>{const _0x5173d6=_0x4258d1,_0xf287d4={'hZrQw':_0x5173d6(0x1005)};if(!SceneManager[_0x5173d6(0x614)+'tle']())return;if(!Imported[_0x5173d6(0x1403)+'ctSeqCamer'+'a'])return;VisuMZ[_0x5173d6(0xd5c)+'ams'](_0x40c9c7,_0x40c9c7);const _0x57e280=$gameTemp[_0x5173d6(0xb0b)+'ginCommand'+_0x5173d6(0x1456)+'r'](),_0x2e15f8=_0x40c9c7['WaitForSke'+'w'];if(!_0x57e280)return;$gameScreen[_0x5173d6(0xf5d)+_0x5173d6(0x6b4)](-0xd86*0x1+0x2407*-0x1+0x127*0x2b,0xb*0x50+-0x1bfe+0x1c1*0xe,_0x40c9c7[_0x5173d6(0x3c1)],_0x40c9c7[_0x5173d6(0xab5)]);if(_0x2e15f8)_0x57e280['setWaitMod'+'e'](_0xf287d4[_0x5173d6(0x27e)]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x728)+_0x4258d1(0x132d)+'kew',_0x2d9e84=>{const _0x460df4=_0x4258d1,_0x22cd12={'bcPmp':'battleSkew'};if(!SceneManager[_0x460df4(0x614)+_0x460df4(0x6e5)]())return;if(!Imported['VisuMZ_3_A'+_0x460df4(0x90e)+'a'])return;const _0xb2a97c=$gameTemp[_0x460df4(0xb0b)+_0x460df4(0xf36)+'Interprete'+'r']();if(!_0xb2a97c)return;_0xb2a97c['setWaitMod'+'e'](_0x22cd12[_0x460df4(0xcdc)]);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x3cf)+'get_Curren'+_0x4258d1(0x1004),_0x2aaad4=>{const _0x5a9d12=_0x4258d1,_0xe2c04={'ejNyM':function(_0x24cfec,_0x87b59d){return _0x24cfec!==_0x87b59d;},'SJIyt':_0x5a9d12(0xe34)};if(!SceneManager[_0x5a9d12(0x614)+'tle']())return;VisuMZ['ConvertPar'+_0x5a9d12(0xc0b)](_0x2aaad4,_0x2aaad4);const _0x474aae=$gameTemp[_0x5a9d12(0xb0b)+_0x5a9d12(0xf36)+_0x5a9d12(0x1456)+'r'](),_0x2bfe4e=_0x2aaad4['Index'],_0x4dc306=_0x2aaad4['JumpToLabe'+'l'];if(!_0x474aae)return;BattleManager[_0x5a9d12(0x162d)+'ex']=_0x2bfe4e,BattleManager[_0x5a9d12(0xdef)]=BattleManager[_0x5a9d12(0x1e3)+'s']?BattleManager[_0x5a9d12(0x1e3)+'s'][BattleManager[_0x5a9d12(0x162d)+'ex']]||null:null,BattleManager[_0x5a9d12(0xdef)]&&_0xe2c04[_0x5a9d12(0x156b)](_0x4dc306[_0x5a9d12(0x191)+'e']()[_0x5a9d12(0xbb6)](),_0xe2c04[_0x5a9d12(0x14cf)])&&_0x474aae['command119']([_0x4dc306]);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x3cf)+'get_NextTa'+'rget',_0x104ac2=>{const _0x1eb5d6=_0x4258d1,_0x5b6625={'vjIts':function(_0x1db6e7,_0x41192c){return _0x1db6e7!==_0x41192c;},'kcvsj':'UNTITLED'};if(!SceneManager[_0x1eb5d6(0x614)+_0x1eb5d6(0x6e5)]())return;VisuMZ['ConvertPar'+_0x1eb5d6(0xc0b)](_0x104ac2,_0x104ac2);const _0x41da5a=$gameTemp[_0x1eb5d6(0xb0b)+_0x1eb5d6(0xf36)+_0x1eb5d6(0x1456)+'r'](),_0x191481=_0x104ac2['JumpToLabe'+'l'];if(!_0x41da5a)return;BattleManager[_0x1eb5d6(0x162d)+'ex']++,BattleManager[_0x1eb5d6(0xdef)]=BattleManager['_allTarget'+'s'][BattleManager[_0x1eb5d6(0x162d)+'ex']]||null,BattleManager[_0x1eb5d6(0xdef)]&&_0x5b6625['vjIts'](_0x191481[_0x1eb5d6(0x191)+'e']()[_0x1eb5d6(0xbb6)](),_0x5b6625[_0x1eb5d6(0x51a)])&&_0x41da5a[_0x1eb5d6(0xa92)]([_0x191481]);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x3cf)+_0x4258d1(0x111b)+_0x4258d1(0x3a3),_0x4a7a63=>{const _0x44470e=_0x4258d1,_0x21dda4={'LxJoP':function(_0x132256,_0x439470){return _0x132256!==_0x439470;},'kvasj':_0x44470e(0xe34)};if(!SceneManager[_0x44470e(0x614)+'tle']())return;VisuMZ['ConvertPar'+'ams'](_0x4a7a63,_0x4a7a63);const _0x3db7c5=$gameTemp[_0x44470e(0xb0b)+_0x44470e(0xf36)+'Interprete'+'r'](),_0x36aa49=_0x4a7a63[_0x44470e(0xae7)+'l'];if(!_0x3db7c5)return;BattleManager['_targetInd'+'ex']--,BattleManager['_target']=BattleManager[_0x44470e(0x1e3)+'s'][BattleManager[_0x44470e(0x162d)+'ex']]||null,BattleManager[_0x44470e(0xdef)]&&_0x21dda4['LxJoP'](_0x36aa49[_0x44470e(0x191)+'e']()[_0x44470e(0xbb6)](),_0x21dda4['kvasj'])&&_0x3db7c5[_0x44470e(0xa92)]([_0x36aa49]);}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],_0x4258d1(0x3cf)+_0x4258d1(0x1279)+_0x4258d1(0x3a3),_0x3ff5ad=>{const _0x346a8f=_0x4258d1,_0x32fffe={'gDGcL':function(_0x425152,_0x2a1328){return _0x425152!==_0x2a1328;},'NwPEa':function(_0x2ed645,_0xbcc0fe){return _0x2ed645<=_0xbcc0fe;},'uQroQ':_0x346a8f(0xe34)};if(!SceneManager[_0x346a8f(0x614)+'tle']())return;VisuMZ[_0x346a8f(0xd5c)+_0x346a8f(0xc0b)](_0x3ff5ad,_0x3ff5ad);const _0x2b1ac0=$gameTemp[_0x346a8f(0xb0b)+_0x346a8f(0xf36)+_0x346a8f(0x1456)+'r'](),_0x489e20=_0x3ff5ad[_0x346a8f(0x851)+'m'],_0xfb2bec=_0x3ff5ad[_0x346a8f(0xae7)+'l'];if(!_0x2b1ac0)return;const _0x20fb0f=BattleManager[_0x346a8f(0x162d)+'ex'];for(;;){BattleManager[_0x346a8f(0x162d)+'ex']=Math[_0x346a8f(0x154d)](BattleManager[_0x346a8f(0x1e3)+'s']['length']);if(!_0x489e20)break;if(_0x32fffe['gDGcL'](BattleManager[_0x346a8f(0x162d)+'ex'],_0x20fb0f))break;if(_0x32fffe['NwPEa'](BattleManager['_allTarget'+'s']['length'],-0xd34+0x1d2c+-0xff7)){BattleManager[_0x346a8f(0x162d)+'ex']=-0xce3+-0x16*-0x15+0x1*0xb15;break;}}BattleManager['_target']=BattleManager[_0x346a8f(0x1e3)+'s'][BattleManager['_targetInd'+'ex']]||null,BattleManager[_0x346a8f(0xdef)]&&_0x32fffe['gDGcL'](_0xfb2bec[_0x346a8f(0x191)+'e']()[_0x346a8f(0xbb6)](),_0x32fffe[_0x346a8f(0x8f2)])&&_0x2b1ac0[_0x346a8f(0xa92)]([_0xfb2bec]);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x132b)+'tleVoice_P'+_0x4258d1(0x78f)+'ine',_0x351fae=>{const _0x417e0f=_0x4258d1;if(!SceneManager[_0x417e0f(0x614)+_0x417e0f(0x6e5)]())return;if(!Imported[_0x417e0f(0x33b)+_0x417e0f(0x423)+'s'])return;if(!ConfigManager[_0x417e0f(0x4f5)+'es'])return;VisuMZ[_0x417e0f(0xd5c)+'ams'](_0x351fae,_0x351fae);const _0x38bfe0=VisuMZ[_0x417e0f(0x8ec)+_0x417e0f(0xad7)+_0x417e0f(0xb00)](_0x351fae[_0x417e0f(0xb00)]);let _0x344752=_0x351fae[_0x417e0f(0x118d)]||'';for(const _0x54d28b of _0x38bfe0){if(!_0x54d28b)continue;_0x54d28b[_0x417e0f(0x15e1)+_0x417e0f(0x4b4)](_0x344752);}}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x132b)+'tleVoice_P'+'laySpecial'+_0x4258d1(0xd42),_0x416296=>{const _0x2b6402=_0x4258d1,_0x136698={'XfvUi':function(_0x1265e9,_0x464bff){return _0x1265e9+_0x464bff;}};if(!SceneManager['isSceneBat'+_0x2b6402(0x6e5)]())return;if(!Imported['VisuMZ_3_B'+_0x2b6402(0x423)+'s'])return;if(!ConfigManager[_0x2b6402(0x4f5)+'es'])return;VisuMZ[_0x2b6402(0xd5c)+_0x2b6402(0xc0b)](_0x416296,_0x416296);const _0x2bcac8=VisuMZ[_0x2b6402(0x8ec)+'onSequence'+_0x2b6402(0xb00)](_0x416296[_0x2b6402(0xb00)]);let _0x5e2da1=_0x136698[_0x2b6402(0x9ab)](_0x416296['VoiceLineT'+_0x2b6402(0x715)]||'',_0x416296[_0x2b6402(0x125b)]||'');for(const _0x160108 of _0x2bcac8){if(!_0x160108)continue;_0x160108['playBattle'+_0x2b6402(0x4b4)](_0x5e2da1);}}),PluginManager[_0x4258d1(0x1665)+_0x4258d1(0x1330)](pluginData['name'],'ActSeq_Wea'+_0x4258d1(0x5eb)+'ctiveWeapo'+'n',_0x4113a8=>{const _0xa2363b=_0x4258d1;if(!SceneManager[_0xa2363b(0x614)+_0xa2363b(0x6e5)]())return;VisuMZ['ConvertPar'+_0xa2363b(0xc0b)](_0x4113a8,_0x4113a8);const _0x5c5a33=VisuMZ['CreateActi'+_0xa2363b(0xad7)+_0xa2363b(0xb00)](_0x4113a8[_0xa2363b(0xb00)]);for(const _0x58c115 of _0x5c5a33){if(!_0x58c115)continue;if(!_0x58c115[_0xa2363b(0x1580)]())continue;_0x58c115[_0xa2363b(0x378)+'eWeaponSlo'+'t']();}}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x14ae)+_0x4258d1(0xdbf)+'tiveWeapon',_0x10baa8=>{const _0x577242=_0x4258d1,_0xe5725f={'woQSL':function(_0x3196cd,_0x272137){return _0x3196cd>_0x272137;},'QNEWy':function(_0x4317bf,_0x2f0907){return _0x4317bf!==_0x2f0907;},'lEuNp':'UNTITLED'};if(!SceneManager[_0x577242(0x614)+_0x577242(0x6e5)]())return;VisuMZ[_0x577242(0xd5c)+_0x577242(0xc0b)](_0x10baa8,_0x10baa8);const _0x31c0a5=$gameTemp[_0x577242(0xb0b)+_0x577242(0xf36)+_0x577242(0x1456)+'r']();let _0x200ccd=![];const _0x1f836f=_0x10baa8[_0x577242(0xae7)+'l'],_0x526786=VisuMZ['CreateActi'+'onSequence'+_0x577242(0xb00)](_0x10baa8['Targets']);for(const _0x232f13 of _0x526786){if(!_0x232f13)continue;if(!_0x232f13['isActor']())continue;_0x232f13[_0x577242(0xba6)+_0x577242(0x5c5)](),_0xe5725f['woQSL'](_0x232f13[_0x577242(0x11da)]()['length'],0xdca+0x2*-0x1085+0x1340)?_0x200ccd=!![]:_0x232f13['clearActiv'+_0x577242(0x89f)+'t']();}_0x200ccd&&_0xe5725f[_0x577242(0x1115)](_0x1f836f[_0x577242(0x191)+'e']()[_0x577242(0xbb6)](),_0xe5725f[_0x577242(0x1236)])&&_0x31c0a5[_0x577242(0xa92)]([_0x1f836f]);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0x14ae)+'pon_SetAct'+_0x4258d1(0x565),_0x4b93d4=>{const _0x5cf86a=_0x4258d1;if(!SceneManager[_0x5cf86a(0x614)+_0x5cf86a(0x6e5)]())return;VisuMZ[_0x5cf86a(0xd5c)+_0x5cf86a(0xc0b)](_0x4b93d4,_0x4b93d4);let _0xddfedc=_0x4b93d4[_0x5cf86a(0x435)];_0xddfedc--,_0xddfedc=Math[_0x5cf86a(0x503)](_0xddfedc,0x5f4*0x6+-0x1*0xf53+0x1*-0x1465);const _0x265616=VisuMZ['CreateActi'+'onSequence'+_0x5cf86a(0xb00)](_0x4b93d4['Targets']);for(const _0xda011a of _0x265616){if(!_0xda011a)continue;if(!_0xda011a['isActor']())continue;_0xda011a[_0x5cf86a(0xe78)+'eaponSlot'](_0xddfedc);}}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xdd1)+'m_Scale',_0x5960db=>{const _0xb5c22c=_0x4258d1,_0x2f7866={'TjmKh':_0xb5c22c(0x445)};if(!SceneManager[_0xb5c22c(0x614)+_0xb5c22c(0x6e5)]())return;if(!Imported[_0xb5c22c(0x1403)+_0xb5c22c(0x90e)+'a'])return;VisuMZ['ConvertPar'+'ams'](_0x5960db,_0x5960db);const _0x5392b5=$gameTemp[_0xb5c22c(0xb0b)+_0xb5c22c(0xf36)+'Interprete'+'r'](),_0x169451=_0x5960db[_0xb5c22c(0x969)+'m'];if(!_0x5392b5)return;$gameScreen[_0xb5c22c(0x48d)+_0xb5c22c(0xa35)](_0x5960db[_0xb5c22c(0xa59)],_0x5960db[_0xb5c22c(0x3c1)],_0x5960db[_0xb5c22c(0xab5)]);if(_0x169451)_0x5392b5['setWaitMod'+'e'](_0x2f7866['TjmKh']);}),PluginManager[_0x4258d1(0x1665)+'mmand'](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xdd1)+_0x4258d1(0x1400),_0x4792e8=>{const _0xddd8f5=_0x4258d1,_0x4f09da={'ENouu':_0xddd8f5(0x445)};if(!SceneManager[_0xddd8f5(0x614)+_0xddd8f5(0x6e5)]())return;if(!Imported['VisuMZ_3_A'+'ctSeqCamer'+'a'])return;VisuMZ[_0xddd8f5(0xd5c)+_0xddd8f5(0xc0b)](_0x4792e8,_0x4792e8);const _0x4097ee=$gameTemp[_0xddd8f5(0xb0b)+_0xddd8f5(0xf36)+_0xddd8f5(0x1456)+'r'](),_0x4772a8=_0x4792e8[_0xddd8f5(0x969)+'m'];if(!_0x4097ee)return;$gameScreen['setBattleZ'+_0xddd8f5(0xa35)](0x28*0xc1+0x2*0xe3e+-0x3aa3,_0x4792e8[_0xddd8f5(0x3c1)],_0x4792e8[_0xddd8f5(0xab5)]);if(_0x4772a8)_0x4097ee[_0xddd8f5(0xf48)+'e'](_0x4f09da[_0xddd8f5(0xf49)]);}),PluginManager['registerCo'+_0x4258d1(0x1330)](pluginData[_0x4258d1(0xd40)],_0x4258d1(0xdd1)+_0x4258d1(0x286)+_0x4258d1(0xa35),_0x404446=>{const _0x2836c2=_0x4258d1,_0x13b7e1={'wgbNy':_0x2836c2(0x445)};if(!SceneManager[_0x2836c2(0x614)+_0x2836c2(0x6e5)]())return;if(!Imported[_0x2836c2(0x1403)+_0x2836c2(0x90e)+'a'])return;const _0x55d027=$gameTemp[_0x2836c2(0xb0b)+_0x2836c2(0xf36)+_0x2836c2(0x1456)+'r']();if(!_0x55d027)return;_0x55d027['setWaitMod'+'e'](_0x13b7e1[_0x2836c2(0x559)]);}),VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x593)+_0x4258d1(0x75e)+_0x4258d1(0x5b1)]=Scene_Boot[_0x4258d1(0xf38)][_0x4258d1(0x721)+'Loaded'],Scene_Boot[_0x4258d1(0xf38)][_0x4258d1(0x721)+_0x4258d1(0xea4)]=function(){const _0x28b9f5=_0x4258d1,_0x31fce5={'fKPzB':_0x28b9f5(0x848)+_0x28b9f5(0xe4b)},_0x486c95=_0x31fce5[_0x28b9f5(0x1530)]['split']('|');let _0x3acf28=0x11f3+0x3*-0x765+-0x1*-0x43c;while(!![]){switch(_0x486c95[_0x3acf28++]){case'0':this['process_Vi'+_0x28b9f5(0x10ab)+_0x28b9f5(0x53d)+_0x28b9f5(0xd8d)]();continue;case'1':this[_0x28b9f5(0x4f3)+_0x28b9f5(0x10ab)+_0x28b9f5(0xe74)+_0x28b9f5(0x696)]();continue;case'2':this[_0x28b9f5(0x4f3)+'suMZ_Battl'+_0x28b9f5(0x4a1)+_0x28b9f5(0x1088)+'s']();continue;case'3':this[_0x28b9f5(0x4f3)+_0x28b9f5(0x10ab)+_0x28b9f5(0x1189)+'attleCommo'+_0x28b9f5(0x640)]();continue;case'4':this[_0x28b9f5(0x4f3)+_0x28b9f5(0x10ab)+_0x28b9f5(0x14c3)+_0x28b9f5(0xa52)]();continue;case'5':this['process_Vi'+_0x28b9f5(0x10ab)+_0x28b9f5(0x16bf)+'teRegExp']();continue;case'6':this['process_Vi'+_0x28b9f5(0x10ab)+_0x28b9f5(0x4ba)+_0x28b9f5(0xb10)]();continue;case'7':VisuMZ[_0x28b9f5(0x337)][_0x28b9f5(0x593)+_0x28b9f5(0x75e)+_0x28b9f5(0x5b1)][_0x28b9f5(0xb14)](this);continue;case'8':this[_0x28b9f5(0x4f3)+_0x28b9f5(0x10ab)+_0x28b9f5(0x13a8)+'Troops']();continue;}break;}},Scene_Boot['prototype'][_0x4258d1(0x4f3)+'suMZ_Battl'+_0x4258d1(0x53d)+_0x4258d1(0xd8d)]=function(){const _0x88d592=_0x4258d1;if(VisuMZ[_0x88d592(0x1b5)+_0x88d592(0x6aa)])return;this['process_Vi'+_0x88d592(0x10ab)+_0x88d592(0x14d5)+'on_Notetag'+'s'](),this[_0x88d592(0x4f3)+_0x88d592(0x10ab)+_0x88d592(0x1214)+'tObject_No'+'tetags'](),this[_0x88d592(0x4f3)+_0x88d592(0x10ab)+_0x88d592(0x510)+_0x88d592(0x673)]();},Scene_Boot[_0x4258d1(0xf38)]['process_Vi'+'suMZ_Battl'+_0x4258d1(0x14c3)+_0x4258d1(0xa52)]=function(){const _0x24ede1=_0x4258d1,_0x1cfe71={'nbcNJ':function(_0x56453d,_0x55e7de){return _0x56453d<_0x55e7de;}},_0x4c7d91=$dataSystem[_0x24ede1(0x769)+'s']['length'];for(let _0x4a825a=-0x2*0xe64+0x25a7+0x2f5*-0x3;_0x1cfe71[_0x24ede1(0x2b6)](_0x4a825a,_0x4c7d91);_0x4a825a++){const _0x1e9ae3=$dataSystem['attackMoti'+_0x24ede1(0x995)][_0x4a825a];if(_0x1e9ae3)continue;$dataSystem[_0x24ede1(0x36e)+'ons'][_0x4a825a]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x4258d1(0xf38)]['process_Vi'+'suMZ_Battl'+_0x4258d1(0x4ba)+_0x4258d1(0xb10)]=function(){const _0x11cebf=_0x4258d1,_0x38a44b={'uTuso':function(_0x135d1c,_0x3261eb){return _0x135d1c===_0x3261eb;},'sUFOU':_0x11cebf(0x11e2)},_0x25c8e2=VisuMZ['BattleCore'][_0x11cebf(0x424)];_0x38a44b[_0x11cebf(0x102e)](_0x25c8e2[_0x11cebf(0x1683)][_0x11cebf(0xba8)+_0x11cebf(0x1485)],undefined)&&(_0x25c8e2['Damage'][_0x11cebf(0xba8)+'ion']=_0x38a44b[_0x11cebf(0x5b6)]),_0x38a44b[_0x11cebf(0x102e)](_0x25c8e2[_0x11cebf(0x1224)][_0x11cebf(0x12d2)+'e'],undefined)&&(_0x25c8e2[_0x11cebf(0x1224)][_0x11cebf(0x12d2)+'e']=![]),_0x38a44b[_0x11cebf(0x102e)](_0x25c8e2[_0x11cebf(0xcce)][_0x11cebf(0x12d2)+'e'],undefined)&&(_0x25c8e2['Enemy'][_0x11cebf(0x12d2)+'e']=!![]),_0x38a44b[_0x11cebf(0x102e)](_0x25c8e2[_0x11cebf(0x1224)][_0x11cebf(0xdcf)+_0x11cebf(0x10cb)],undefined)&&(_0x25c8e2[_0x11cebf(0x1224)][_0x11cebf(0xdcf)+_0x11cebf(0x10cb)]=![]),_0x38a44b[_0x11cebf(0x102e)](_0x25c8e2[_0x11cebf(0x1224)][_0x11cebf(0xdcf)+_0x11cebf(0x10ac)],undefined)&&(_0x25c8e2[_0x11cebf(0x1224)][_0x11cebf(0xdcf)+_0x11cebf(0x10ac)]=!![]);},VisuMZ[_0x4258d1(0x16b9)+'es']={},Scene_Boot[_0x4258d1(0xf38)]['process_Vi'+'suMZ_Battl'+'eCore_Dama'+_0x4258d1(0x696)]=function(){const _0x372698=_0x4258d1;for(const _0x526107 of VisuMZ[_0x372698(0x337)]['Settings'][_0x372698(0x1683)][_0x372698(0x16b9)+_0x372698(0x5e2)]){if(!_0x526107)continue;const _0x42aba5=_0x526107['Name'][_0x372698(0x191)+'e']()[_0x372698(0xbb6)]();VisuMZ[_0x372698(0x16b9)+'es'][_0x42aba5]=_0x526107;}},VisuMZ[_0x4258d1(0x337)]['RegExp']={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot[_0x4258d1(0xf38)][_0x4258d1(0x4f3)+'suMZ_Battl'+'eCore_Crea'+'teRegExp']=function(){const _0x2abc55=_0x4258d1,_0x62db4a={'KrvMG':_0x2abc55(0x1362)+'s\x5cS]*)\x5cs*<'+_0x2abc55(0x1392),'rDDuq':_0x2abc55(0x1039),'RVQbX':'PRE-','RiwGs':_0x2abc55(0xa53),'SgmgR':_0x2abc55(0xced),'CoECc':_0x2abc55(0x808)+'S','nQfGC':_0x2abc55(0x1437)+_0x2abc55(0xc38),'aSKXE':_0x2abc55(0x9dd)+'JS','fhrHf':'JS\x20%1DAMAG'+_0x2abc55(0xb33),'tQGZr':_0x2abc55(0xa46),'rmjDd':'AS\x20USER','XoiHr':_0x2abc55(0x874),'rtjTO':_0x2abc55(0x129b),'zdZcT':'%1StartAct'+_0x2abc55(0x35d),'fyijh':_0x2abc55(0x38a)+_0x2abc55(0x512),'NFggi':_0x2abc55(0x13b9)+_0x2abc55(0x1201),'cEdVo':_0x2abc55(0xf6e)+_0x2abc55(0x916),'jeCzU':_0x2abc55(0x13d6)+_0x2abc55(0x7d6),'aDKki':_0x2abc55(0x38a)+_0x2abc55(0x1246),'NQjNH':_0x2abc55(0x14d0)+_0x2abc55(0xb8c),'oLCRS':'JS\x20%1END\x20B'+_0x2abc55(0xffc),'MiCyq':_0x2abc55(0x4fa)+_0x2abc55(0x10aa),'AlKHd':_0x2abc55(0x13a7)+_0x2abc55(0x95b),'mfzXq':_0x2abc55(0xf31)+_0x2abc55(0x1578),'BvzCI':'JS\x20BATTLE\x20'+'DEFEAT','gMaBi':_0x2abc55(0xf34)+_0x2abc55(0x206),'ffDFl':_0x2abc55(0x107c)+_0x2abc55(0x93a),'zwWiS':'EscapeFail'+_0x2abc55(0x5f6),'qXiPl':_0x2abc55(0x107c)+_0x2abc55(0xc93),'dMERr':_0x2abc55(0x1172)+_0x2abc55(0x1201),'OFsaY':'JS\x20%1START'+_0x2abc55(0x15de),'mzMsS':_0x2abc55(0x1095)+'S','YrASJ':_0x2abc55(0x152c)+_0x2abc55(0x1647),'UpQcJ':_0x2abc55(0x3fd)+_0x2abc55(0xd9c),'OKsdp':'JS\x20%1REGEN'+_0x2abc55(0xe79)},_0x235dc6=VisuMZ['BattleCore'][_0x2abc55(0x951)],_0x5734f6=_0x62db4a['KrvMG'],_0x203f9c=[[_0x62db4a[_0x2abc55(0x1158)],_0x62db4a['RVQbX']],[_0x62db4a[_0x2abc55(0xf12)],_0x62db4a[_0x2abc55(0x14ac)]]],_0x40a2ab=[[_0x62db4a[_0x2abc55(0x954)],_0x62db4a[_0x2abc55(0x116c)]],[_0x62db4a[_0x2abc55(0x10cc)],_0x62db4a[_0x2abc55(0x146e)]]],_0x207c11=[['',''],[_0x62db4a[_0x2abc55(0x112c)],_0x62db4a[_0x2abc55(0x143f)]],[_0x62db4a[_0x2abc55(0x1556)],_0x62db4a[_0x2abc55(0xe6e)]]];for(const _0x31838a of _0x40a2ab){for(const _0x56180a of _0x207c11){for(const _0x1a8ca5 of _0x203f9c){const _0x12c117=_0x31838a[0xccd+-0x107+-0xbc6][_0x2abc55(0xf22)](_0x1a8ca5[0x1aa6+0x1*0x21ad+-0x1*0x3c53],_0x56180a[-0x1063*0x1+-0x1e03*-0x1+0x2*-0x6d0]),_0x182c53=_0x31838a[0x1351*-0x1+0x227c+-0xf2a][_0x2abc55(0xf22)](_0x1a8ca5[-0x1385+-0x1997+-0x2d1d*-0x1],_0x56180a[0x5c1*0x3+0x102b*0x2+-0x3198])['trim'](),_0x3f0bb9=new RegExp(_0x5734f6['format'](_0x182c53),'i');_0x235dc6[_0x12c117]=_0x3f0bb9;}}}const _0x151175=[[_0x62db4a['zdZcT'],_0x62db4a[_0x2abc55(0x27d)]],[_0x62db4a[_0x2abc55(0x2ed)],_0x62db4a[_0x2abc55(0x730)]]];for(const _0x130c54 of _0x151175){for(const _0x26d20f of _0x203f9c){const _0x413889=_0x130c54[0xb63+-0x795*0x2+-0x1*-0x3c7][_0x2abc55(0xf22)](_0x26d20f[0x2402+-0x16b2+-0xd50]),_0x92de55=_0x130c54[0x4d3*-0x4+0x3*-0xb2a+0x31b*0x11][_0x2abc55(0xf22)](_0x26d20f[-0x919*0x2+0x1*-0x773+-0x31*-0x86]),_0x336fe5=new RegExp(_0x5734f6[_0x2abc55(0xf22)](_0x92de55),'i');_0x235dc6[_0x413889]=_0x336fe5;}}const _0x458f7c=[[_0x62db4a['jeCzU'],_0x62db4a[_0x2abc55(0x2dd)]],[_0x62db4a['NQjNH'],_0x62db4a[_0x2abc55(0x15dc)]],[_0x62db4a[_0x2abc55(0xe72)],_0x62db4a[_0x2abc55(0x10d2)]],[_0x62db4a[_0x2abc55(0x1559)],_0x62db4a[_0x2abc55(0x101f)]],[_0x62db4a[_0x2abc55(0x6a8)],_0x62db4a[_0x2abc55(0x1398)]],[_0x62db4a['zwWiS'],_0x62db4a[_0x2abc55(0x667)]],[_0x62db4a[_0x2abc55(0x122e)],_0x62db4a[_0x2abc55(0x64b)]],[_0x62db4a[_0x2abc55(0x2fe)],_0x62db4a[_0x2abc55(0xf0b)]],[_0x62db4a[_0x2abc55(0xfbe)],_0x62db4a['OKsdp']]];for(const _0x2f348f of _0x458f7c){for(const _0x2e059b of _0x203f9c){const _0x47180b=_0x2f348f[0x825+0x2358+-0x2b7d][_0x2abc55(0xf22)](_0x2e059b[0x16c8+-0x201+-0x14c7*0x1]),_0x2e581e=_0x2f348f[-0x26b1+0x520+-0x10c9*-0x2][_0x2abc55(0xf22)](_0x2e059b[0xbcf+0x14b*-0x16+0x10a4]),_0x318edb=new RegExp(_0x5734f6['format'](_0x2e581e),'i');_0x235dc6[_0x47180b]=_0x318edb;}}},Scene_Boot[_0x4258d1(0xf38)][_0x4258d1(0x4f3)+_0x4258d1(0x10ab)+'eCore_Acti'+_0x4258d1(0x1527)+'s']=function(){const _0x19e9c1=_0x4258d1,_0x5e84b6=$dataSkills[_0x19e9c1(0x121f)]($dataItems);for(const _0x4127c8 of _0x5e84b6){if(!_0x4127c8)continue;VisuMZ['BattleCore'][_0x19e9c1(0xac5)+_0x19e9c1(0x817)+'n'](_0x4127c8);}},Scene_Boot[_0x4258d1(0xf38)][_0x4258d1(0x4f3)+_0x4258d1(0x10ab)+_0x4258d1(0x1214)+'tObject_No'+_0x4258d1(0x6aa)]=function(){const _0x576d0d=_0x4258d1,_0x3076f8=$dataActors[_0x576d0d(0x121f)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x30d1e6 of _0x3076f8){if(!_0x30d1e6)continue;VisuMZ[_0x576d0d(0x337)][_0x576d0d(0xac5)+'tags_Trait'+'Objects'](_0x30d1e6);}},Scene_Boot[_0x4258d1(0xf38)][_0x4258d1(0x4f3)+_0x4258d1(0x10ab)+'eCore_Base'+'Troops']=function(){const _0x147913=_0x4258d1,_0x5a8534={'FymzJ':function(_0x433779,_0x65400b){return _0x433779===_0x65400b;}},_0x5b35f2=VisuMZ[_0x147913(0x337)][_0x147913(0x424)][_0x147913(0x12c8)][_0x147913(0xb8b)+'Ds'],_0x27ebf9=[];for(const _0x9c4245 of _0x5b35f2){const _0xdfb8dc=$dataTroops[_0x9c4245];if(_0xdfb8dc)_0x27ebf9['push'](JsonEx['makeDeepCo'+'py'](_0xdfb8dc));}for(const _0x268a7d of $dataTroops){if(!_0x268a7d)continue;for(const _0x5efe47 of _0x27ebf9){if(_0x5a8534[_0x147913(0x635)](_0x5efe47['id'],_0x268a7d['id']))continue;_0x268a7d['pages']=_0x268a7d[_0x147913(0xf8d)][_0x147913(0x121f)](_0x5efe47[_0x147913(0xf8d)]);}}},Scene_Boot['prototype']['process_Vi'+_0x4258d1(0x10ab)+_0x4258d1(0x1189)+_0x4258d1(0x1275)+_0x4258d1(0x640)]=function(){const _0x226690=_0x4258d1,_0x4107f1={'zZoGa':function(_0x4ab225,_0x162eb4){return _0x4ab225>_0x162eb4;},'sEcCx':function(_0x40da9e,_0x14aea7){return _0x40da9e-_0x14aea7;},'NNBrF':function(_0x4bc886,_0x4c6385){return _0x4bc886!==_0x4c6385;}},_0x4a6397=VisuMZ['BattleCore']['Settings'][_0x226690(0x12c8)];if(_0x4107f1[_0x226690(0xf0d)](_0x4a6397['BattleStar'+_0x226690(0x6cb)],0x373*-0x1+0x1*-0xc41+0x3ed*0x4)&&$dataCommonEvents[_0x4a6397[_0x226690(0x10ff)+'tEvent']]){const _0x4ea4bd=$dataCommonEvents[_0x4a6397['BattleStar'+_0x226690(0x6cb)]],_0x5baedc=_0x4107f1[_0x226690(0x34d)](_0x4ea4bd[_0x226690(0x7fe)][_0x226690(0x1645)],0xb*0x299+0x1db+-0x1e6c),_0x285089=_0x4ea4bd[_0x226690(0x7fe)][_0x5baedc];if(_0x285089&&_0x4107f1[_0x226690(0xd2d)](_0x285089[_0x226690(0xca9)],-0x2*0x86a+0x5e*0x2e+-0x1*-0xd6)){const _0x4050b2={'code':0xe6,'indent':0x0,'parameters':[-0xee8+-0x99f*0x2+0x1*0x2227]},_0x25ce35=_0x4ea4bd[_0x226690(0x7fe)][_0x226690(0x4ca)]();_0x4ea4bd['list'][_0x226690(0x1019)](_0x4050b2),_0x4ea4bd['list'][_0x226690(0x1019)](_0x25ce35);}}},Scene_Boot[_0x4258d1(0xf38)][_0x4258d1(0x4f3)+_0x4258d1(0x10ab)+'eCore_Comm'+_0x4258d1(0x1088)+'s']=function(){const _0x24f7f8=_0x4258d1;VisuMZ['BattleCore']['CreateComm'+_0x24f7f8(0x1088)+'s'](),VisuMZ['BattleCore'][_0x24f7f8(0x25d)+_0x24f7f8(0x201)+_0x24f7f8(0xf64)]($dataSkills),VisuMZ['BattleCore'][_0x24f7f8(0x25d)+_0x24f7f8(0x201)+_0x24f7f8(0xf64)]($dataItems);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xcf0)+'onEventKey'+'s']=function(){const _0x525706=_0x4258d1,_0x3bb038={'HqsiY':function(_0x24281f,_0x23e8dc){return _0x24281f(_0x23e8dc);}};VisuMZ['BattleCore']['_commonEve'+_0x525706(0x233)]={};for(const _0x3dc7e2 of $dataCommonEvents){if(!_0x3dc7e2)continue;if(_0x3dc7e2[_0x525706(0xd40)][_0x525706(0x79c)](/\[(.*)\]/i)){let _0x41b919=_0x3bb038['HqsiY'](String,RegExp['$1'])['replace'](/,/g,'')[_0x525706(0x191)+'e']()[_0x525706(0xbb6)]();VisuMZ['BattleCore'][_0x525706(0xadc)+_0x525706(0x233)][_0x41b919]=_0x3dc7e2['id'];}}},VisuMZ['BattleCore'][_0x4258d1(0x25d)+_0x4258d1(0x201)+_0x4258d1(0xf64)]=function(_0x4c8278){const _0x5bcb95=_0x4258d1;for(const _0x183ca3 of _0x4c8278){if(!_0x183ca3)continue;VisuMZ[_0x5bcb95(0x337)][_0x5bcb95(0x25d)+'EventKeysF'+'orObj'](_0x183ca3);}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x25d)+_0x4258d1(0x201)+_0x4258d1(0x7bd)]=function(_0x1c6283){const _0x1bf064=_0x4258d1,_0x5a1677={'QCbiu':function(_0x1d2614,_0x42c9db){return _0x1d2614(_0x42c9db);},'gYEDk':_0x1bf064(0xb0f)+_0x1bf064(0x198)+'NCE>'};if(!_0x1c6283)return;if(!_0x1c6283[_0x1bf064(0xfda)])return;VisuMZ['BattleCore'][_0x1bf064(0xadc)+'ntKey']=VisuMZ[_0x1bf064(0x337)]['_commonEve'+'ntKey']||{};const _0xc131de=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x596980=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x4363d1=[];const _0x553b84=_0x1c6283[_0x1bf064(0x278)]['match'](_0xc131de);if(_0x553b84){for(const _0x354fb7 of _0x553b84){_0x354fb7[_0x1bf064(0x79c)](_0xc131de);const _0x67f820=_0x5a1677['QCbiu'](String,RegExp['$1'])[_0x1bf064(0xba9)](',')[_0x1bf064(0x15f9)](_0x38c4fe=>String(_0x38c4fe)[_0x1bf064(0x191)+'e']()['trim']());_0x4363d1=_0x4363d1[_0x1bf064(0x121f)](_0x67f820);}!_0x1c6283[_0x1bf064(0x278)][_0x1bf064(0x79c)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x1c6283[_0x1bf064(0x278)]+=_0x5a1677[_0x1bf064(0x124b)]);;}if(_0x1c6283['note'][_0x1bf064(0x79c)](_0x596980)){const _0x2a1078=_0x5a1677['QCbiu'](String,RegExp['$1'])[_0x1bf064(0xba9)](/[\r\n]+/)[_0x1bf064(0x15f9)](_0x28363f=>String(_0x28363f)[_0x1bf064(0x191)+'e']()[_0x1bf064(0xbb6)]());_0x4363d1=_0x4363d1[_0x1bf064(0x121f)](_0x2a1078);!_0x1c6283[_0x1bf064(0x278)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x1c6283[_0x1bf064(0x278)]+=_0x5a1677[_0x1bf064(0x124b)]);;}for(const _0x55e39e of _0x4363d1){if(VisuMZ['BattleCore']['_commonEve'+'ntKey'][_0x55e39e]){const _0x1bb01f=VisuMZ[_0x1bf064(0x337)][_0x1bf064(0xadc)+_0x1bf064(0x233)][_0x55e39e],_0x448481={'code':0x2c,'dataId':_0x1bb01f,'value1':0x1,'value2':0x0};_0x1c6283[_0x1bf064(0xfda)][_0x1bf064(0x88f)](_0x448481);}}},Scene_Boot[_0x4258d1(0xf38)][_0x4258d1(0x4f3)+_0x4258d1(0x10ab)+_0x4258d1(0x510)+'nctions']=function(){const _0x1f4cba=_0x4258d1,_0x153636=$dataSkills[_0x1f4cba(0x121f)]($dataItems);for(const _0x1b8562 of _0x153636){if(!_0x1b8562)continue;VisuMZ['BattleCore'][_0x1f4cba(0xac5)+_0x1f4cba(0x577)+'ts'](_0x1b8562);}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1229)+_0x4258d1(0x749)]=VisuMZ['ParseActor'+_0x4258d1(0x749)],VisuMZ[_0x4258d1(0x1229)+_0x4258d1(0x749)]=function(_0x3c9308){const _0xae44=_0x4258d1;VisuMZ[_0xae44(0x337)][_0xae44(0x1229)+_0xae44(0x749)]&&VisuMZ[_0xae44(0x337)][_0xae44(0x1229)+_0xae44(0x749)][_0xae44(0xb14)](this,_0x3c9308),VisuMZ[_0xae44(0x337)]['Parse_Note'+_0xae44(0x5db)+_0xae44(0x905)](_0x3c9308);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x55a)+'Notetags']=VisuMZ['ParseClass'+'Notetags'],VisuMZ[_0x4258d1(0x55a)+_0x4258d1(0x749)]=function(_0x40dfb4){const _0x49f93d=_0x4258d1;VisuMZ[_0x49f93d(0x337)]['ParseClass'+_0x49f93d(0x749)]&&VisuMZ[_0x49f93d(0x337)][_0x49f93d(0x55a)+_0x49f93d(0x749)][_0x49f93d(0xb14)](this,_0x40dfb4),VisuMZ[_0x49f93d(0x337)][_0x49f93d(0xac5)+_0x49f93d(0x5db)+_0x49f93d(0x905)](_0x40dfb4);},VisuMZ['BattleCore'][_0x4258d1(0x158f)+_0x4258d1(0x749)]=VisuMZ[_0x4258d1(0x158f)+_0x4258d1(0x749)],VisuMZ[_0x4258d1(0x158f)+_0x4258d1(0x749)]=function(_0x5c653b){const _0x4e7f33=_0x4258d1;VisuMZ[_0x4e7f33(0x337)][_0x4e7f33(0x158f)+'Notetags']&&VisuMZ[_0x4e7f33(0x337)][_0x4e7f33(0x158f)+_0x4e7f33(0x749)][_0x4e7f33(0xb14)](this,_0x5c653b),VisuMZ['BattleCore'][_0x4e7f33(0xac5)+_0x4e7f33(0x817)+'n'](_0x5c653b),VisuMZ['BattleCore'][_0x4e7f33(0xac5)+'tags_Targe'+'ts'](_0x5c653b);},VisuMZ[_0x4258d1(0x337)]['ParseItemN'+_0x4258d1(0x485)]=VisuMZ[_0x4258d1(0xb5e)+'otetags'],VisuMZ[_0x4258d1(0xb5e)+_0x4258d1(0x485)]=function(_0x15f4a6){const _0x388dfc=_0x4258d1;VisuMZ[_0x388dfc(0x337)]['ParseItemN'+'otetags']&&VisuMZ[_0x388dfc(0x337)][_0x388dfc(0xb5e)+_0x388dfc(0x485)]['call'](this,_0x15f4a6),VisuMZ[_0x388dfc(0x337)]['Parse_Note'+'tags_Actio'+'n'](_0x15f4a6),VisuMZ[_0x388dfc(0x337)][_0x388dfc(0xac5)+_0x388dfc(0x577)+'ts'](_0x15f4a6);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1621)+_0x4258d1(0x10a7)]=VisuMZ[_0x4258d1(0x1621)+'nNotetags'],VisuMZ[_0x4258d1(0x1621)+_0x4258d1(0x10a7)]=function(_0xdc02c1){const _0x32561c=_0x4258d1;VisuMZ[_0x32561c(0x337)][_0x32561c(0x1621)+_0x32561c(0x10a7)]&&VisuMZ[_0x32561c(0x337)][_0x32561c(0x1621)+'nNotetags'][_0x32561c(0xb14)](this,_0xdc02c1),VisuMZ[_0x32561c(0x337)][_0x32561c(0xac5)+_0x32561c(0x5db)+_0x32561c(0x905)](_0xdc02c1);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x971)+_0x4258d1(0x749)]=VisuMZ[_0x4258d1(0x971)+_0x4258d1(0x749)],VisuMZ['ParseArmor'+_0x4258d1(0x749)]=function(_0x4a8faf){const _0x5b0ff5=_0x4258d1;VisuMZ['BattleCore'][_0x5b0ff5(0x971)+'Notetags']&&VisuMZ[_0x5b0ff5(0x337)][_0x5b0ff5(0x971)+_0x5b0ff5(0x749)][_0x5b0ff5(0xb14)](this,_0x4a8faf),VisuMZ['BattleCore'][_0x5b0ff5(0xac5)+_0x5b0ff5(0x5db)+_0x5b0ff5(0x905)](_0x4a8faf);},VisuMZ[_0x4258d1(0x337)]['ParseEnemy'+_0x4258d1(0x749)]=VisuMZ[_0x4258d1(0x1436)+_0x4258d1(0x749)],VisuMZ[_0x4258d1(0x1436)+_0x4258d1(0x749)]=function(_0x4bc499){const _0x27b01f=_0x4258d1;VisuMZ[_0x27b01f(0x337)][_0x27b01f(0x1436)+_0x27b01f(0x749)]&&VisuMZ[_0x27b01f(0x337)][_0x27b01f(0x1436)+'Notetags'][_0x27b01f(0xb14)](this,_0x4bc499),VisuMZ[_0x27b01f(0x337)][_0x27b01f(0xac5)+'tags_Trait'+_0x27b01f(0x905)](_0x4bc499);},VisuMZ['BattleCore'][_0x4258d1(0x9a1)+_0x4258d1(0x749)]=VisuMZ['ParseState'+_0x4258d1(0x749)],VisuMZ[_0x4258d1(0x9a1)+'Notetags']=function(_0x30442c){const _0x2da1a1=_0x4258d1;VisuMZ[_0x2da1a1(0x337)][_0x2da1a1(0x9a1)+_0x2da1a1(0x749)]&&VisuMZ['BattleCore']['ParseState'+_0x2da1a1(0x749)][_0x2da1a1(0xb14)](this,_0x30442c),VisuMZ[_0x2da1a1(0x337)][_0x2da1a1(0xac5)+_0x2da1a1(0x5db)+_0x2da1a1(0x905)](_0x30442c);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xac5)+'tags_Actio'+'n']=function(_0x1179ad){const _0x585b75=_0x4258d1,_0x870c93={'LyXtU':'PreApplyJS','vLSoL':_0x585b75(0x1074)+'S','GkLfP':'PreDamageJ'+'S','YfVuy':_0x585b75(0x586)+'JS','XYqzG':_0x585b75(0x751)+_0x585b75(0x10f4),'UDQIq':'PostStartA'+_0x585b75(0xbbd),'bcerT':'PreEndActi'+_0x585b75(0x733),'NmYpy':_0x585b75(0x7fc)+'ionJS','GVesl':function(_0x3c6a0c,_0x412d25){return _0x3c6a0c(_0x412d25);}},_0x57f0c0=[_0x870c93[_0x585b75(0x6c6)],_0x870c93[_0x585b75(0x1455)],_0x870c93['GkLfP'],_0x870c93['YfVuy'],_0x870c93[_0x585b75(0x215)],_0x870c93[_0x585b75(0xd89)],_0x870c93[_0x585b75(0xd68)],_0x870c93[_0x585b75(0xdcb)]];for(const _0x3e28de of _0x57f0c0){VisuMZ['BattleCore'][_0x585b75(0xba1)](_0x1179ad,_0x3e28de);}const _0x1f27b2=_0x1179ad[_0x585b75(0x278)];_0x1f27b2[_0x585b75(0x79c)](/<ALWAYS CRITICAL/i)&&(_0x1179ad[_0x585b75(0xbc0)]['critical']=!![]),_0x1f27b2[_0x585b75(0x79c)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x1179ad['repeats']=Math[_0x585b75(0x503)](-0xf26+0x122+-0xe05*-0x1,_0x870c93[_0x585b75(0x97d)](Number,RegExp['$1']))),_0x1f27b2[_0x585b75(0x79c)](/<TARGET:[ ](.*)>/i)&&(_0x1179ad['scope']=_0x870c93['GVesl'](String,RegExp['$1'])[_0x585b75(0x191)+'e']()[_0x585b75(0xbb6)]());},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xac5)+'tags_Trait'+_0x4258d1(0x905)]=function(_0x34e8c0){const _0x18d5f3=_0x4258d1,_0x46a5b6={'jOrSJ':_0x18d5f3(0x73a)+'UserJS','CsmRB':_0x18d5f3(0xba5)+'sUserJS','WMOZB':_0x18d5f3(0x33d)+_0x18d5f3(0xd97),'JvaPu':'PostDamage'+_0x18d5f3(0xfa3),'KifGH':_0x18d5f3(0x73a)+_0x18d5f3(0x908),'KVkHI':_0x18d5f3(0xba5)+_0x18d5f3(0x15be),'IgnZY':_0x18d5f3(0x33d)+_0x18d5f3(0x15be),'yWnKQ':_0x18d5f3(0x586)+_0x18d5f3(0xec3),'eTijn':_0x18d5f3(0x751)+_0x18d5f3(0x10f4),'GxauT':_0x18d5f3(0x9e3)+_0x18d5f3(0xbbd),'QOKUf':_0x18d5f3(0xecd)+_0x18d5f3(0x733),'GqdiZ':_0x18d5f3(0x7fc)+_0x18d5f3(0x35d),'iyVKD':_0x18d5f3(0xb3d)+_0x18d5f3(0x9d4),'rGkzl':_0x18d5f3(0xa38)+_0x18d5f3(0x15f2),'Vxofc':_0x18d5f3(0xa84)+_0x18d5f3(0x75a),'bbiRw':_0x18d5f3(0x2c1)+'tleJS','tzBAP':_0x18d5f3(0x4fa)+'oryJS','DLdZA':'BattleDefe'+_0x18d5f3(0x1578),'KkOph':_0x18d5f3(0xf34)+_0x18d5f3(0x206),'vCPlY':_0x18d5f3(0x90c)+'ureJS','DhvvL':'PreStartTu'+_0x18d5f3(0x986),'nPQXc':'PostStartT'+'urnJS','FuTRb':_0x18d5f3(0x726)+'JS','zRNeO':_0x18d5f3(0xbca)+'nJS','ChiUs':_0x18d5f3(0x59d)+_0x18d5f3(0x110d),'AvNoA':_0x18d5f3(0x73f)+_0x18d5f3(0x7ff),'DAkRf':_0x18d5f3(0x5b5),'AYiLh':_0x18d5f3(0x5b5)+'AsUser','oOLyD':_0x18d5f3(0x5b5)+_0x18d5f3(0x874),'ItnRO':_0x18d5f3(0x1577)+_0x18d5f3(0xa46),'QVAZV':_0x18d5f3(0x1577)+_0x18d5f3(0x874)},_0x5538b5=[_0x46a5b6[_0x18d5f3(0x897)],_0x46a5b6[_0x18d5f3(0xbd8)],_0x46a5b6[_0x18d5f3(0x1238)],_0x46a5b6[_0x18d5f3(0xdb1)],_0x46a5b6['KifGH'],_0x46a5b6['KVkHI'],_0x46a5b6[_0x18d5f3(0x287)],_0x46a5b6[_0x18d5f3(0x330)],_0x46a5b6[_0x18d5f3(0x991)],_0x46a5b6[_0x18d5f3(0xc02)],_0x46a5b6['QOKUf'],_0x46a5b6[_0x18d5f3(0x304)],_0x46a5b6[_0x18d5f3(0x608)],_0x46a5b6[_0x18d5f3(0x10cd)],_0x46a5b6[_0x18d5f3(0x5ff)],_0x46a5b6['bbiRw'],_0x46a5b6[_0x18d5f3(0x104a)],_0x46a5b6['DLdZA'],_0x46a5b6['KkOph'],_0x46a5b6[_0x18d5f3(0x5bf)],_0x46a5b6[_0x18d5f3(0x15d4)],_0x46a5b6[_0x18d5f3(0x11cf)],_0x46a5b6['FuTRb'],_0x46a5b6['zRNeO'],_0x46a5b6[_0x18d5f3(0x91c)],_0x46a5b6[_0x18d5f3(0x134e)]];for(const _0x17ba53 of _0x5538b5){VisuMZ[_0x18d5f3(0x337)][_0x18d5f3(0xba1)](_0x34e8c0,_0x17ba53);}const _0x182e34=[_0x46a5b6[_0x18d5f3(0x8aa)],_0x46a5b6[_0x18d5f3(0x1642)],_0x46a5b6[_0x18d5f3(0xaf2)],_0x46a5b6[_0x18d5f3(0x160d)],_0x46a5b6['QVAZV']];for(const _0x3b974c of _0x182e34){VisuMZ[_0x18d5f3(0x337)]['createRate'+'JS'](_0x34e8c0,_0x3b974c);}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xac5)+_0x4258d1(0x577)+'ts']=function(_0x380f0d){const _0x5f3726=_0x4258d1,_0x3e285e={'SyRdZ':function(_0x474109,_0x5e2920){return _0x474109(_0x5e2920);},'HZtdM':_0x5f3726(0xb00),'qqKTD':_0x5f3726(0xe0a)+_0x5f3726(0x146a)},_0x2a00d4=_0x380f0d[_0x5f3726(0x278)];if(_0x2a00d4[_0x5f3726(0x79c)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x2cd75b=_0x3e285e['SyRdZ'](String,RegExp['$1']),_0x2fc715=VisuMZ[_0x5f3726(0x337)]['createKeyJ'+'S'](_0x380f0d,_0x3e285e[_0x5f3726(0x28e)]);VisuMZ[_0x5f3726(0x337)][_0x5f3726(0x1273)+_0x5f3726(0x829)](_0x2cd75b,_0x2fc715);}if(_0x2a00d4[_0x5f3726(0x79c)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x314988=_0x3e285e['SyRdZ'](String,RegExp['$1']),_0x42f72b=VisuMZ[_0x5f3726(0x337)][_0x5f3726(0x66d)+'S'](_0x380f0d,_0x3e285e[_0x5f3726(0xa22)]);VisuMZ[_0x5f3726(0x337)]['createComm'+_0x5f3726(0x1080)+'JS'](_0x314988,_0x42f72b);}},VisuMZ[_0x4258d1(0x337)]['JS']={},VisuMZ['BattleCore'][_0x4258d1(0xba1)]=function(_0x5ed498,_0x4c5698){const _0x54a4c8=_0x4258d1,_0x142ffe=_0x5ed498[_0x54a4c8(0x278)];if(_0x142ffe[_0x54a4c8(0x79c)](VisuMZ[_0x54a4c8(0x337)][_0x54a4c8(0x951)][_0x4c5698])){const _0x1a1b5e=RegExp['$1'],_0x1d3b6d=(_0x54a4c8(0x4ed)+_0x54a4c8(0xb98)+'are\x20Argume'+'nts\x0a\x20\x20\x20\x20\x20\x20'+'\x20\x20\x20\x20\x20\x20cons'+'t\x20user\x20=\x20a'+'rguments[0'+_0x54a4c8(0x130e)+'\x20\x20\x20\x20\x20const'+'\x20target\x20=\x20'+'arguments['+_0x54a4c8(0xf6a)+'\x20\x20\x20\x20\x20\x20cons'+_0x54a4c8(0x1db)+_0x54a4c8(0x8eb)+';\x0a\x20\x20\x20\x20\x20\x20\x20\x20'+_0x54a4c8(0x13ae)+_0x54a4c8(0x10e8)+'ments[3]\x20|'+_0x54a4c8(0xcb7)+_0x54a4c8(0x604)+'\x20originalV'+_0x54a4c8(0x12c1)+_0x54a4c8(0x2e6)+'\x20\x20\x20\x20\x20\x20\x20//\x20'+_0x54a4c8(0x10c6)+'nstants\x0a\x20\x20'+'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20'+'const\x20acti'+_0x54a4c8(0xebf)+_0x54a4c8(0x112a)+_0x54a4c8(0x1107)+_0x54a4c8(0x3ac)+'?\x20this\x20:\x20u'+'ser.curren'+_0x54a4c8(0xbfa)+_0x54a4c8(0x4ed)+_0x54a4c8(0x13f9)+_0x54a4c8(0xac6)+_0x54a4c8(0x1073)+_0x54a4c8(0x87f)+_0x54a4c8(0x6bf)+'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20'+_0x54a4c8(0x132c)+'acker\x20=\x20us'+_0x54a4c8(0x14a6)+_0x54a4c8(0xaa4)+_0x54a4c8(0x2c2)+_0x54a4c8(0x709)+_0x54a4c8(0x4ed)+_0x54a4c8(0xd90)+_0x54a4c8(0x97f)+_0x54a4c8(0x14a6)+_0x54a4c8(0xaa4)+_0x54a4c8(0xffa)+_0x54a4c8(0x709)+_0x54a4c8(0x4ed)+_0x54a4c8(0x13f9)+_0x54a4c8(0x92e)+';\x0a\x20\x20\x20\x20\x20\x20\x20\x20'+_0x54a4c8(0x2b7)+'currentCla'+_0x54a4c8(0x548)+'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20'+'\x20\x20const\x20sk'+_0x54a4c8(0x8c8)+_0x54a4c8(0x1197)+_0x54a4c8(0x301)+_0x54a4c8(0xbd2)+_0x54a4c8(0x1650)+_0x54a4c8(0xc10)+_0x54a4c8(0xae2)+'\x20\x20\x20\x20const\x20'+'item\x20=\x20(th'+_0x54a4c8(0x1295)+_0x54a4c8(0xeda)+_0x54a4c8(0x6d0)+_0x54a4c8(0x785)+'tem()\x20:\x20ob'+'j;\x0a\x20\x20\x20\x20\x20\x20\x20'+_0x54a4c8(0x633)+_0x54a4c8(0x703)+_0x54a4c8(0x387)+_0x54a4c8(0x11f8)+_0x54a4c8(0xb69)+'\x20obj;\x0a\x20\x20\x20\x20'+_0x54a4c8(0x1443)+_0x54a4c8(0xc03)+_0x54a4c8(0xf04)+'\x20\x20\x20\x20\x20\x20\x20\x20\x20c'+'onst\x20state'+_0x54a4c8(0xc7a)+_0x54a4c8(0x1073)+'\x20//\x20Create'+'\x20Compatibi'+_0x54a4c8(0x12ab)+_0x54a4c8(0xa5a)+_0x54a4c8(0x604)+'\x20origin\x20=\x20'+_0x54a4c8(0x207)+(_0x54a4c8(0x970)+_0x54a4c8(0x128e)+'.VisuMZ_1_'+_0x54a4c8(0xfaa)+_0x54a4c8(0xe02)+_0x54a4c8(0x6e6)+_0x54a4c8(0x136c)+_0x54a4c8(0x98b)+_0x54a4c8(0x1073)+_0x54a4c8(0x2f1)+'n\x20=\x20target'+'.getStateO'+_0x54a4c8(0x339)+_0x54a4c8(0x8b8)+_0x54a4c8(0x9f2)+_0x54a4c8(0x1073)+_0x54a4c8(0x16ac)+_0x54a4c8(0x140d)+_0x54a4c8(0x1073)+_0x54a4c8(0xa2e)+'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20'+_0x54a4c8(0x6f6)+'\x20\x20\x20\x20\x20\x20\x20}\x20c'+'atch\x20(e)\x20{'+'\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20'+'\x20\x20\x20\x20\x20\x20\x20if\x20'+_0x54a4c8(0x1249)+_0x54a4c8(0xec2)+_0x54a4c8(0xd06)+_0x54a4c8(0x33e)+'\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20'+_0x54a4c8(0x291)+_0x54a4c8(0x1641)+'\x20NaN\x20Check'+_0x54a4c8(0x4ed)+_0x54a4c8(0x36a)+_0x54a4c8(0xfba)+_0x54a4c8(0x1697)+_0x54a4c8(0x970)+_0x54a4c8(0x1a7)+_0x54a4c8(0x540)+_0x54a4c8(0xaa2)+_0x54a4c8(0x1073)+_0x54a4c8(0x1443)+_0x54a4c8(0xf4c)+'\x27NaN\x20value'+'\x20created\x20b'+_0x54a4c8(0x6b5)+_0x54a4c8(0x24e)+_0x54a4c8(0x7c9)+_0x54a4c8(0x1073)+_0x54a4c8(0x1443)+_0x54a4c8(0xf4c)+_0x54a4c8(0x637)+'\x20value\x20to\x20'+'%2\x27.format'+_0x54a4c8(0x4ac)+_0x54a4c8(0x1303)+_0x54a4c8(0x4ed)+_0x54a4c8(0x1276)+_0x54a4c8(0x1073)+_0x54a4c8(0xb16)+_0x54a4c8(0x12a3)+_0x54a4c8(0x7bf)+'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20'+'}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20'+_0x54a4c8(0xc41)+_0x54a4c8(0x1427)+_0x54a4c8(0x4ed)+_0x54a4c8(0xda7)+'value;\x0a\x20\x20\x20'+_0x54a4c8(0x66a)))[_0x54a4c8(0xf22)](_0x1a1b5e),_0xed9d67=VisuMZ[_0x54a4c8(0x337)]['createKeyJ'+'S'](_0x5ed498,_0x4c5698);VisuMZ[_0x54a4c8(0x337)]['JS'][_0xed9d67]=new Function(_0x1d3b6d);}},VisuMZ['BattleCore'][_0x4258d1(0x66d)+'S']=function(_0xd233ca,_0x2311c3){const _0x4d3462=_0x4258d1,_0x3194c6={'ZacrE':_0x4d3462(0x374)+'2','XxSlF':_0x4d3462(0xd47)+'2','hgBSF':'Skill-%1-%'+'2','Bjshx':_0x4d3462(0x15aa),'AuBMx':'Weapon-%1-'+'%2','AuIQF':'Armor-%1-%'+'2','IgPtH':_0x4d3462(0xce2)+'2','LsnVk':_0x4d3462(0xd03)+'2'};if(VisuMZ['createKeyJ'+'S'])return VisuMZ[_0x4d3462(0x66d)+'S'](_0xd233ca,_0x2311c3);let _0x5d9e10='';if($dataActors[_0x4d3462(0x163f)](_0xd233ca))_0x5d9e10=_0x3194c6[_0x4d3462(0x794)][_0x4d3462(0xf22)](_0xd233ca['id'],_0x2311c3);if($dataClasses[_0x4d3462(0x163f)](_0xd233ca))_0x5d9e10=_0x3194c6['XxSlF'][_0x4d3462(0xf22)](_0xd233ca['id'],_0x2311c3);if($dataSkills[_0x4d3462(0x163f)](_0xd233ca))_0x5d9e10=_0x3194c6['hgBSF'][_0x4d3462(0xf22)](_0xd233ca['id'],_0x2311c3);if($dataItems[_0x4d3462(0x163f)](_0xd233ca))_0x5d9e10=_0x3194c6['Bjshx'][_0x4d3462(0xf22)](_0xd233ca['id'],_0x2311c3);if($dataWeapons[_0x4d3462(0x163f)](_0xd233ca))_0x5d9e10=_0x3194c6[_0x4d3462(0x46d)][_0x4d3462(0xf22)](_0xd233ca['id'],_0x2311c3);if($dataArmors[_0x4d3462(0x163f)](_0xd233ca))_0x5d9e10=_0x3194c6['AuIQF'][_0x4d3462(0xf22)](_0xd233ca['id'],_0x2311c3);if($dataEnemies[_0x4d3462(0x163f)](_0xd233ca))_0x5d9e10=_0x3194c6[_0x4d3462(0x14db)][_0x4d3462(0xf22)](_0xd233ca['id'],_0x2311c3);if($dataStates[_0x4d3462(0x163f)](_0xd233ca))_0x5d9e10=_0x3194c6[_0x4d3462(0x573)]['format'](_0xd233ca['id'],_0x2311c3);return _0x5d9e10;},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1273)+_0x4258d1(0x829)]=function(_0x2e3566,_0x16f42b){const _0x1041ca=_0x4258d1,_0x4924c8=('\x0a\x20\x20\x20\x20\x20\x20\x20\x20/'+_0x1041ca(0x7c0)+_0x1041ca(0x56e)+'\x20\x20\x20\x20\x20\x20\x20\x20co'+_0x1041ca(0xebe)+_0x1041ca(0x1546)+'[0];\x0a\x20\x20\x20\x20\x20'+_0x1041ca(0x13f9)+_0x1041ca(0xac6)+_0x1041ca(0x11f8)+_0x1041ca(0x1382)+'r;\x0a\x20\x20\x20\x20\x20\x20\x20'+_0x1041ca(0xa78)+_0x1041ca(0x1cc)+_0x1041ca(0x1620)+_0x1041ca(0x1641)+_0x1041ca(0x151c)+'ode\x0a\x20\x20\x20\x20\x20\x20'+_0x1041ca(0x1692)+_0x1041ca(0x1073)+_0x1041ca(0xe9e)+'\x20}\x20catch\x20('+_0x1041ca(0x629)+_0x1041ca(0x16a3)+_0x1041ca(0x1249)+'.isPlaytes'+_0x1041ca(0xd06)+_0x1041ca(0x33e)+_0x1041ca(0x14b5)+_0x1041ca(0x981)+'//\x20Return\x20'+_0x1041ca(0x13b7)+_0x1041ca(0x164f)+_0x1041ca(0x1336)+'|\x20[];\x0a\x20\x20\x20\x20')[_0x1041ca(0xf22)](_0x2e3566);VisuMZ['BattleCore']['JS'][_0x16f42b]=new Function(_0x4924c8);},VisuMZ[_0x4258d1(0x337)]['createComm'+_0x4258d1(0x1080)+'JS']=function(_0x532005,_0x1b2e6c){const _0x47f597=_0x4258d1,_0x34c8fd=('\x0a\x20\x20\x20\x20\x20\x20\x20\x20/'+_0x47f597(0x7c0)+_0x47f597(0x56e)+_0x47f597(0x1443)+_0x47f597(0xebe)+'\x20arguments'+_0x47f597(0x1668)+'\x20\x20\x20const\x20s'+_0x47f597(0x772)+_0x47f597(0x15e5)+_0x47f597(0x5ab)+_0x47f597(0xf8c)+_0x47f597(0x11dd)+_0x47f597(0x1127)+_0x47f597(0xac6)+_0x47f597(0x604)+_0x47f597(0x213)+'\x20true;\x0a\x0a\x20\x20'+'\x20\x20\x20\x20\x20\x20//\x20P'+'rocess\x20Cod'+_0x47f597(0x166d)+_0x47f597(0xa2e)+_0x47f597(0xeee)+_0x47f597(0x14b5)+'\x20catch\x20(e)'+_0x47f597(0xf24)+_0x47f597(0x441)+'gameTemp.i'+_0x47f597(0x52a)+_0x47f597(0xd49)+_0x47f597(0x1169)+_0x47f597(0x9f2)+_0x47f597(0x1641)+_0x47f597(0x898)+'lue\x0a\x20\x20\x20\x20\x20\x20'+'\x20\x20return\x20v'+'isible;\x0a\x20\x20'+'\x20\x20')[_0x47f597(0xf22)](_0x532005);VisuMZ[_0x47f597(0x337)]['JS'][_0x1b2e6c]=new Function(_0x34c8fd);},VisuMZ['BattleCore'][_0x4258d1(0x82a)+'JS']=function(_0x37c8f1,_0x5dd1db){const _0xff47f0=_0x4258d1,_0x107ce6=_0x37c8f1[_0xff47f0(0x278)];if(_0x107ce6[_0xff47f0(0x79c)](VisuMZ[_0xff47f0(0x337)][_0xff47f0(0x951)][_0x5dd1db])){const _0x1d0018=RegExp['$1'],_0x3748b6=('\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20'+_0xff47f0(0xb98)+'are\x20Argume'+'nts\x0a\x20\x20\x20\x20\x20\x20'+_0xff47f0(0xaa4)+'t\x20user\x20=\x20a'+_0xff47f0(0x11aa)+_0xff47f0(0x130e)+_0xff47f0(0x633)+_0xff47f0(0x1606)+'arguments['+_0xff47f0(0xf6a)+_0xff47f0(0xaa4)+_0xff47f0(0x1db)+_0xff47f0(0x8eb)+_0xff47f0(0xae2)+_0xff47f0(0x1280)+_0xff47f0(0xec9)+_0xff47f0(0x6d8)+_0xff47f0(0xcdf)+'\x20\x20\x20\x20\x20\x20let\x20'+_0xff47f0(0x8c5)+_0xff47f0(0x312)+'\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20'+_0xff47f0(0x688)+_0xff47f0(0x37e)+_0xff47f0(0x97e)+'\x20\x20\x20\x20\x20\x20\x20con'+'st\x20action\x20'+_0xff47f0(0xd29)+'nstructor\x20'+'===\x20Game_A'+'ction)\x20?\x20t'+_0xff47f0(0x5fd)+'.currentAc'+_0xff47f0(0x85a)+_0xff47f0(0x1073)+_0xff47f0(0xe68)+_0xff47f0(0x207)+_0xff47f0(0x1443)+'nst\x20b\x20=\x20ta'+'rget;\x0a\x20\x20\x20\x20'+'\x20\x20\x20\x20\x20\x20\x20\x20co'+_0xff47f0(0xbbc)+_0xff47f0(0x6fa)+_0xff47f0(0x4ed)+'\x20\x20\x20const\x20d'+_0xff47f0(0xdf3)+_0xff47f0(0xde9)+_0xff47f0(0x1073)+'const\x20heal'+_0xff47f0(0x6fa)+'\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20'+_0xff47f0(0x13ea)+_0xff47f0(0x616)+_0xff47f0(0xde9)+_0xff47f0(0x1073)+'const\x20acto'+_0xff47f0(0xb26)+_0xff47f0(0x1073)+_0xff47f0(0x88e)+_0xff47f0(0x59f)+_0xff47f0(0xf04)+_0xff47f0(0x397)+'onst\x20skill'+_0xff47f0(0x15da)+_0xff47f0(0x4b5)+_0xff47f0(0x52c)+_0xff47f0(0x62a)+_0xff47f0(0xfcf)+')\x20:\x20obj;\x0a\x20'+_0xff47f0(0x1073)+_0xff47f0(0xadf)+_0xff47f0(0xb90)+'constructo'+_0xff47f0(0x2ae)+_0xff47f0(0x727)+_0xff47f0(0x166f)+_0xff47f0(0x2a5)+_0xff47f0(0x1073)+'\x20\x20const\x20we'+_0xff47f0(0x9cb)+';\x0a\x20\x20\x20\x20\x20\x20\x20\x20'+_0xff47f0(0x2b7)+'armor\x20=\x20ob'+_0xff47f0(0x3e4)+_0xff47f0(0x633)+_0xff47f0(0xb81)+'bj;\x0a\x20\x20\x20\x20\x20\x20'+_0xff47f0(0xaa4)+_0xff47f0(0x16b6)+_0xff47f0(0xc16)+_0xff47f0(0x1641)+_0xff47f0(0x58c)+_0xff47f0(0x13d5)+_0xff47f0(0xec7)+_0xff47f0(0x1045)+_0xff47f0(0x7fb)+_0xff47f0(0x6b6)+_0xff47f0(0x1407)+(_0xff47f0(0xd91)+'mported.Vi'+_0xff47f0(0x607)+_0xff47f0(0x32f)+'ore\x20&&\x20$da'+_0xff47f0(0xbc8)+'ncludes(ob'+'j))\x20{\x0a\x20\x20\x20\x20'+'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20'+'\x20\x20origin\x20='+_0xff47f0(0x992)+_0xff47f0(0x1562)+_0xff47f0(0x4bb)+_0xff47f0(0xae2)+_0xff47f0(0xe81)+'\x20\x20\x20\x20\x20\x20\x20\x20\x20/'+'/\x20Process\x20'+'Code\x0a\x20\x20\x20\x20\x20'+_0xff47f0(0x3f3)+_0xff47f0(0xf24)+_0xff47f0(0x11b6)+_0xff47f0(0x50c)+_0xff47f0(0x740)+'h\x20(e)\x20{\x0a\x20\x20'+_0xff47f0(0x1073)+_0xff47f0(0x183)+_0xff47f0(0xf20)+_0xff47f0(0x1f9)+')\x20console.'+_0xff47f0(0x2b8)+'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20'+'}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20'+'\x20\x20\x20\x20\x20//\x20Na'+_0xff47f0(0xfb1)+_0xff47f0(0x1073)+_0xff47f0(0x1220)+_0xff47f0(0x11cd)+_0xff47f0(0x1073)+_0xff47f0(0x183)+'ameTemp.is'+_0xff47f0(0x1f9)+_0xff47f0(0xae0)+_0xff47f0(0x1073)+_0xff47f0(0xe15)+_0xff47f0(0x15ed)+_0xff47f0(0xe9b)+_0xff47f0(0x6f9)+'.format(\x27\x27'+_0xff47f0(0x89a)+_0xff47f0(0x109e)+_0xff47f0(0x1073)+_0xff47f0(0xdb4)+'.log(\x27Rest'+_0xff47f0(0x39a)+_0xff47f0(0x349)+_0xff47f0(0x539)+_0xff47f0(0x1ca)+_0xff47f0(0x12bd)+_0xff47f0(0x1073)+_0xff47f0(0xfb3)+'\x20\x20\x20\x20\x20\x20\x20\x20va'+_0xff47f0(0x24c)+_0xff47f0(0x3b4)+_0xff47f0(0x1073)+_0xff47f0(0x1358)+_0xff47f0(0x141a)+_0xff47f0(0x6c2)+_0xff47f0(0x166d)+'\x20\x20\x20\x20return'+_0xff47f0(0x7cb)+_0xff47f0(0x66a)))[_0xff47f0(0xf22)](_0x1d0018),_0x1751e4=VisuMZ[_0xff47f0(0x337)][_0xff47f0(0x66d)+'S'](_0x37c8f1,_0x5dd1db);VisuMZ[_0xff47f0(0x337)]['JS'][_0x1751e4]=new Function(_0x3748b6);}},TextManager[_0x4258d1(0x47d)]=VisuMZ[_0x4258d1(0x337)]['Settings'][_0x4258d1(0xde5)][_0x4258d1(0x29d)+_0x4258d1(0x3dc)],TextManager['autoBattle'+'Start']=VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)][_0x4258d1(0xe46)]['StartName'],TextManager[_0x4258d1(0x47d)+'Style']=VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)][_0x4258d1(0xe46)][_0x4258d1(0x203)],TextManager[_0x4258d1(0xc1f)+_0x4258d1(0xe6d)]=VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)][_0x4258d1(0x428)][_0x4258d1(0x13bb)],ColorManager[_0x4258d1(0x45e)]=function(_0x35cb99){const _0x5bd2a1=_0x4258d1,_0x2f652b={'TLliw':function(_0x57c2ea,_0x2f3ece){return _0x57c2ea(_0x2f3ece);},'gfRka':_0x5bd2a1(0xc9a),'qSGpb':function(_0x5ed391,_0x1c4148){return _0x5ed391(_0x1c4148);}};return _0x35cb99=_0x2f652b[_0x5bd2a1(0x66c)](String,_0x35cb99),_0x35cb99[_0x5bd2a1(0x79c)](/#(.*)/i)?_0x2f652b[_0x5bd2a1(0x6ef)][_0x5bd2a1(0xf22)](_0x2f652b['qSGpb'](String,RegExp['$1'])):this[_0x5bd2a1(0x506)](_0x2f652b[_0x5bd2a1(0x66c)](Number,_0x35cb99));},DataManager[_0x4258d1(0x8a7)+'tyle']=function(_0x351830){const _0x13be8d=_0x4258d1,_0x47126b={'UTWoN':function(_0x503fcf,_0x50c4c7){return _0x503fcf(_0x50c4c7);},'zoMSi':function(_0x4d0567,_0x40322b){return _0x4d0567===_0x40322b;},'poCcp':_0x13be8d(0xb2f)};if(_0x351830['note'][_0x13be8d(0x79c)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x54feb8=_0x47126b[_0x13be8d(0x61a)](String,RegExp['$1'])[_0x13be8d(0x191)+'e']()[_0x13be8d(0xbb6)]();if(_0x47126b['zoMSi'](_0x54feb8,_0x47126b[_0x13be8d(0x838)]))return _0x47126b[_0x13be8d(0x838)];if(VisuMZ['DamageStyl'+'es'][_0x54feb8])return _0x54feb8;}const _0x15fd22=VisuMZ[_0x13be8d(0x337)][_0x13be8d(0x424)][_0x13be8d(0x1683)][_0x13be8d(0x5d0)+'ageStyle'][_0x13be8d(0x191)+'e']()['trim']();if(VisuMZ[_0x13be8d(0x16b9)+'es'][_0x15fd22])return _0x15fd22;return _0x47126b[_0x13be8d(0x838)];},DataManager['getStypeId'+_0x4258d1(0x119d)]=function(_0x1a8033){const _0x579be6=_0x4258d1,_0x5588c3={'HNhxx':function(_0x422ff1,_0x4a238a){return _0x422ff1<_0x4a238a;}};_0x1a8033=_0x1a8033[_0x579be6(0x191)+'e']()[_0x579be6(0xbb6)](),this['_stypeIDs']=this['_stypeIDs']||{};if(this[_0x579be6(0x2d4)][_0x1a8033])return this[_0x579be6(0x2d4)][_0x1a8033];for(let _0x7ea2e4=-0x1ada+-0x92*0x3a+0x3bef;_0x5588c3[_0x579be6(0x9f1)](_0x7ea2e4,-0x41f*-0x6+-0x1*-0xb3f+0x2395*-0x1);_0x7ea2e4++){if(!$dataSystem['skillTypes'][_0x7ea2e4])continue;let _0x34b8d0=$dataSystem['skillTypes'][_0x7ea2e4]['toUpperCas'+'e']()[_0x579be6(0xbb6)]();_0x34b8d0=_0x34b8d0[_0x579be6(0xf58)](/\x1I\[(\d+)\]/gi,''),_0x34b8d0=_0x34b8d0['replace'](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0x34b8d0]=_0x7ea2e4;}return this[_0x579be6(0x2d4)][_0x1a8033]||-0x4f4+-0xd*-0x2+0x4da;},DataManager[_0x4258d1(0x691)+_0x4258d1(0x119d)]=function(_0x11380f){const _0x100281=_0x4258d1;_0x11380f=_0x11380f[_0x100281(0x191)+'e']()[_0x100281(0xbb6)](),this[_0x100281(0x1213)]=this[_0x100281(0x1213)]||{};if(this[_0x100281(0x1213)][_0x11380f])return this[_0x100281(0x1213)][_0x11380f];for(const _0x11528b of $dataSkills){if(!_0x11528b)continue;this[_0x100281(0x1213)][_0x11528b[_0x100281(0xd40)][_0x100281(0x191)+'e']()['trim']()]=_0x11528b['id'];}return this[_0x100281(0x1213)][_0x11380f]||0x816+0x74*-0x8+-0x476*0x1;},DataManager['getEnemyId'+_0x4258d1(0x119d)]=function(_0x5c764d){const _0x132fce=_0x4258d1;_0x5c764d=_0x5c764d[_0x132fce(0x191)+'e']()[_0x132fce(0xbb6)](),this[_0x132fce(0x1317)]=this[_0x132fce(0x1317)]||{};if(this[_0x132fce(0x1317)][_0x5c764d])return this[_0x132fce(0x1317)][_0x5c764d];for(const _0xe18cc0 of $dataEnemies){if(!_0xe18cc0)continue;this[_0x132fce(0x1317)][_0xe18cc0[_0x132fce(0xd40)]['toUpperCas'+'e']()[_0x132fce(0xbb6)]()]=_0xe18cc0['id'];}return this[_0x132fce(0x1317)][_0x5c764d]||-0x1dbe+-0x1f82+-0xa0*-0x62;},DataManager[_0x4258d1(0x14a7)+_0x4258d1(0x119d)]=function(_0x635641){const _0x235943=_0x4258d1,_0x5a976e={'aVuXh':function(_0x53470f,_0x46f9c4){return _0x53470f<_0x46f9c4;},'Ewpfm':_0x235943(0x216)};_0x635641=_0x635641[_0x235943(0x191)+'e']()[_0x235943(0xbb6)](),this[_0x235943(0xe64)]=this['_wtypeIDs']||{};if(this[_0x235943(0xe64)][_0x635641])return this[_0x235943(0xe64)][_0x635641];for(let _0x288d66=0x1*-0x1597+-0x5f*-0x1+0x1539;_0x5a976e[_0x235943(0x45c)](_0x288d66,0x11c*0x5+0x143e+-0x1966);_0x288d66++){if(!$dataSystem[_0x235943(0x769)+'s'][_0x288d66])continue;let _0x1ff278=$dataSystem['weaponType'+'s'][_0x288d66][_0x235943(0x191)+'e']()[_0x235943(0xbb6)]();_0x1ff278=_0x1ff278[_0x235943(0xf58)](/\x1I\[(\d+)\]/gi,''),_0x1ff278=_0x1ff278['replace'](/\\I\[(\d+)\]/gi,''),this[_0x235943(0xe64)][_0x1ff278]=_0x288d66;}return this[_0x235943(0xe64)][_0x5a976e[_0x235943(0x1673)]]=-0x79*0x16+0x16e1+-0xc7b*0x1,this[_0x235943(0xe64)][_0x635641]||0x4*0x28b+-0x1c39+0x120d;},DataManager['battleDisp'+'layText']=function(_0xe6917){const _0x7b9ff2=_0x4258d1,_0x4910b7={'NYqTR':_0x7b9ff2(0x31c),'jBAxo':function(_0x521f20,_0x2bc24f){return _0x521f20(_0x2bc24f);}},_0x1e1001=_0x4910b7[_0x7b9ff2(0x2df)];let _0x598200=_0xe6917[_0x7b9ff2(0x16a1)],_0x32b226=_0xe6917[_0x7b9ff2(0xd40)];const _0x3691a0=_0xe6917[_0x7b9ff2(0x278)];return _0x3691a0['match'](/<DISPLAY ICON: (\d+)>/i)&&(_0x598200=_0x4910b7[_0x7b9ff2(0x736)](Number,RegExp['$1'])),_0x3691a0[_0x7b9ff2(0x79c)](/<DISPLAY TEXT: (.*)>/i)&&(_0x32b226=_0x4910b7[_0x7b9ff2(0x736)](String,RegExp['$1'])),_0x1e1001[_0x7b9ff2(0xf22)](_0x598200,_0x32b226);},DataManager[_0x4258d1(0xcf6)+_0x4258d1(0x15b1)]=function(_0x3cfccb){const _0xf3618e=_0x4258d1,_0x5a3695={'wPNiZ':function(_0x3eafa0,_0x1f067a){return _0x3eafa0(_0x1f067a);}};return _0x3cfccb[_0xf3618e(0x278)][_0xf3618e(0x79c)](/<COMMAND TEXT: (.*)>/i)?_0x5a3695[_0xf3618e(0xb9f)](String,RegExp['$1']):_0x3cfccb['name'];},DataManager[_0x4258d1(0xcf6)+_0x4258d1(0x2d8)]=function(_0x1f1fe2){const _0x54668a=_0x4258d1,_0x462af9={'wOMcm':function(_0x59f05f,_0x5099e1){return _0x59f05f(_0x5099e1);}};return _0x1f1fe2[_0x54668a(0x278)]['match'](/<COMMAND ICON: (\d+)>/i)?_0x462af9[_0x54668a(0xbd3)](Number,RegExp['$1']):_0x1f1fe2[_0x54668a(0x16a1)];},DataManager[_0x4258d1(0xdbc)+'Ds']=function(_0x717e33){const _0x49ff47=_0x4258d1,_0x1c62df={'kWEBI':function(_0x24b9c6,_0x542239){return _0x24b9c6(_0x542239);}},_0x10b5b1=$dataEnemies[_0x717e33];if(_0x10b5b1){if(_0x10b5b1[_0x49ff47(0x278)][_0x49ff47(0x79c)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x783aef=_0x1c62df[_0x49ff47(0x469)](String,RegExp['$1'])['split'](/[\r\n]+/)[_0x49ff47(0x1113)](''),_0x16c564=this[_0x49ff47(0x8b3)+_0x49ff47(0x883)+'a'](_0x783aef);_0x717e33=this[_0x49ff47(0xd72)+'WithName'](_0x16c564)||_0x717e33,_0x717e33=DataManager['swapEnemyI'+'Ds'](_0x717e33);}}return _0x717e33;},DataManager['processRan'+_0x4258d1(0x883)+'a']=function(_0x58c4ef){const _0x14c0c9=_0x4258d1,_0x249142={'otFiO':function(_0x37a067,_0x1a60af){return _0x37a067(_0x1a60af);},'BbVBl':function(_0x18ad2c,_0x6782f6){return _0x18ad2c(_0x6782f6);},'bKkbd':function(_0x1f70e4,_0x28ac40){return _0x1f70e4!==_0x28ac40;},'JwnZv':function(_0x3b4577,_0x15071d){return _0x3b4577<=_0x15071d;},'FGlSn':function(_0x5a583e,_0x1dd431){return _0x5a583e*_0x1dd431;}};let _0x4a807e=0x3db*0x1+0xe80+0x125b*-0x1;const _0x30d7c4={};for(const _0x496817 of _0x58c4ef){if(_0x496817['match'](/(.*):[ ](\d+)/i)){const _0x3f1a5f=_0x249142[_0x14c0c9(0x50b)](String,RegExp['$1'])[_0x14c0c9(0xbb6)](),_0x452f7b=_0x249142[_0x14c0c9(0x50b)](Number,RegExp['$2']);_0x30d7c4[_0x3f1a5f]=_0x452f7b,_0x4a807e+=_0x452f7b;}else{if(_0x496817[_0x14c0c9(0x79c)](/(.*):[ ](\d+\.?\d+)/i)){const _0xc40c86=_0x249142[_0x14c0c9(0x1ee)](String,RegExp['$1'])['trim'](),_0x4209b7=_0x249142[_0x14c0c9(0x1ee)](Number,RegExp['$2']);_0x30d7c4[_0xc40c86]=_0x4209b7,_0x4a807e+=_0x4209b7;}else _0x249142[_0x14c0c9(0x962)](_0x496817,'')&&(_0x30d7c4[_0x496817]=0x1f63+0x2378+0xc7*-0x56,_0x4a807e++);}}if(_0x249142[_0x14c0c9(0x416)](_0x4a807e,-0x13c4+-0x1b1*-0x7+0x7ed))return'';let _0x4324bb=_0x249142['FGlSn'](Math[_0x14c0c9(0x108d)](),_0x4a807e);for(const _0x2aaa30 in _0x30d7c4){_0x4324bb-=_0x30d7c4[_0x2aaa30];if(_0x249142[_0x14c0c9(0x416)](_0x4324bb,-0x2*-0x602+-0xc*0x2f3+0xb*0x220))return _0x2aaa30;}return'';},DataManager[_0x4258d1(0x115b)+_0x4258d1(0xafe)+_0x4258d1(0x4b1)+_0x4258d1(0x75d)+'ct']=function(_0xc5e6d5){const _0x27613a=_0x4258d1,_0x50fe02={'PFPcU':function(_0x228b23,_0x357f23){return _0x228b23===_0x357f23;}};if(!_0xc5e6d5)return![];if(!VisuMZ['BattleCore'][_0x27613a(0x424)][_0x27613a(0x1000)+_0x27613a(0x37c)][_0x27613a(0x1501)+'g'])return![];if(_0xc5e6d5[_0x27613a(0x278)]['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0xc5e6d5[_0x27613a(0x278)][_0x27613a(0x79c)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x5d91ff of _0xc5e6d5[_0x27613a(0xfda)]){if(!_0x5d91ff)continue;if(_0x50fe02['PFPcU'](_0x5d91ff['code'],Game_Action[_0x27613a(0xe8d)+'MON_EVENT']))return!![];}return![];},DataManager['createTroo'+_0x4258d1(0x8d0)]=function(_0x1dc04){const _0x3483d7=_0x4258d1,_0x4529b2=$dataTroops[_0x1dc04];if(!_0x4529b2)return'';let _0x225788='';_0x225788+=_0x4529b2['name'];for(const _0x2166bd of _0x4529b2[_0x3483d7(0xf8d)]){for(const _0x296d4a of _0x2166bd[_0x3483d7(0x7fe)]){[-0x8b1+-0x1638+0xd*0x269,-0x78*0x40+0x55*-0x2d+0x2e89][_0x3483d7(0x163f)](_0x296d4a[_0x3483d7(0xca9)])&&(_0x225788+='\x0a',_0x225788+=_0x296d4a[_0x3483d7(0x1267)][-0x1*0x205e+-0x8f0+-0x22*-0x137]);}}return _0x225788;},ConfigManager[_0x4258d1(0x47d)+_0x4258d1(0xab4)]=ConfigManager[_0x4258d1(0x47d)+_0x4258d1(0xab4)]??![],ConfigManager['autoBattle'+'UseSkills']=ConfigManager['autoBattle'+_0x4258d1(0xa6c)]??![],ConfigManager['visualHpGa'+_0x4258d1(0xe6d)]=ConfigManager[_0x4258d1(0xc1f)+_0x4258d1(0xe6d)]??!![],VisuMZ['BattleCore'][_0x4258d1(0x5d5)+'ger_makeDa'+'ta']=ConfigManager[_0x4258d1(0x121b)],ConfigManager['makeData']=function(){const _0x4d47b8=_0x4258d1,_0x2de472=VisuMZ[_0x4d47b8(0x337)]['ConfigMana'+_0x4d47b8(0xf28)+'ta'][_0x4d47b8(0xb14)](this);return _0x2de472[_0x4d47b8(0x47d)+_0x4d47b8(0xab4)]=this[_0x4d47b8(0x47d)+_0x4d47b8(0xab4)],_0x2de472[_0x4d47b8(0x47d)+_0x4d47b8(0xa6c)]=this['autoBattle'+_0x4d47b8(0xa6c)],_0x2de472[_0x4d47b8(0xc1f)+_0x4d47b8(0xe6d)]=this[_0x4d47b8(0xc1f)+_0x4d47b8(0xe6d)],_0x2de472;},VisuMZ[_0x4258d1(0x337)]['ConfigMana'+'ger_applyD'+_0x4258d1(0xde6)]=ConfigManager[_0x4258d1(0x125d)],ConfigManager[_0x4258d1(0x125d)]=function(_0x4f8cb0){const _0x372dac=_0x4258d1,_0x3249dc={'LzxYK':function(_0x22e5d6,_0x325c28){return _0x22e5d6 in _0x325c28;},'OuRnK':'autoBattle'+_0x372dac(0xab4),'hAqUl':_0x372dac(0x47d)+_0x372dac(0xa6c),'CYPsO':function(_0x3bffb6,_0x328a24){return _0x3bffb6 in _0x328a24;},'pJapQ':_0x372dac(0xc1f)+_0x372dac(0xe6d)};VisuMZ[_0x372dac(0x337)]['ConfigMana'+_0x372dac(0x1324)+_0x372dac(0xde6)][_0x372dac(0xb14)](this,_0x4f8cb0),_0x3249dc[_0x372dac(0xf7a)](_0x3249dc[_0x372dac(0x1471)],_0x4f8cb0)?this[_0x372dac(0x47d)+_0x372dac(0xab4)]=_0x4f8cb0[_0x3249dc['OuRnK']]:this['autoBattle'+_0x372dac(0xab4)]=![],_0x3249dc[_0x372dac(0xf7a)](_0x3249dc[_0x372dac(0x1219)],_0x4f8cb0)?this[_0x372dac(0x47d)+_0x372dac(0xa6c)]=_0x4f8cb0[_0x3249dc[_0x372dac(0x1219)]]:this[_0x372dac(0x47d)+_0x372dac(0xa6c)]=![],_0x3249dc[_0x372dac(0xb0e)](_0x3249dc['pJapQ'],_0x4f8cb0)?this[_0x372dac(0xc1f)+_0x372dac(0xe6d)]=_0x4f8cb0[_0x3249dc[_0x372dac(0x296)]]:this[_0x372dac(0xc1f)+_0x372dac(0xe6d)]=!![];},ImageManager[_0x4258d1(0x9f5)+_0x4258d1(0x1515)]=ImageManager[_0x4258d1(0x9f5)+_0x4258d1(0x1515)]||0x2f*-0x99+-0x160d*-0x1+-0x1*-0x613,ImageManager['svActorVer'+'tCells']=ImageManager['svActorVer'+_0x4258d1(0x1de)]||-0x11*0x101+0x3*0x909+-0xa04,VisuMZ[_0x4258d1(0x337)]['BattleMana'+_0x4258d1(0x36f)]=BattleManager[_0x4258d1(0xb3e)],BattleManager['setup']=function(_0x5dd552,_0x279a7b,_0x32e2f7){const _0x249aa1=_0x4258d1;VisuMZ[_0x249aa1(0x337)][_0x249aa1(0xbf2)+'ger_setup'][_0x249aa1(0xb14)](this,_0x5dd552,_0x279a7b,_0x32e2f7),this[_0x249aa1(0x10f8)+_0x249aa1(0x20b)]={};},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbf2)+_0x4258d1(0xc95)+_0x4258d1(0xbc4)]=BattleManager[_0x4258d1(0x104c)+'s'],BattleManager[_0x4258d1(0x104c)+'s']=function(){const _0x5981aa=_0x4258d1;VisuMZ[_0x5981aa(0x337)]['BattleMana'+_0x5981aa(0xc95)+_0x5981aa(0xbc4)][_0x5981aa(0xb14)](this),this[_0x5981aa(0x810)+'tlers']=[];},BattleManager[_0x4258d1(0x16b0)+_0x4258d1(0x123a)]=function(){const _0xa10c2a=_0x4258d1;if(!SceneManager[_0xa10c2a(0x614)+'tle']())return;const _0xcf83bf=SceneManager[_0xa10c2a(0x14b3)][_0xa10c2a(0x5c1)+_0xa10c2a(0xfdb)];if(_0xcf83bf)_0xcf83bf[_0xa10c2a(0x1563)+_0xa10c2a(0x16bc)]();},BattleManager[_0x4258d1(0x1511)]=function(){const _0xeaffc7=_0x4258d1,_0x253f68={'lihSG':_0xeaffc7(0xf08),'NsiVb':_0xeaffc7(0xee9)};if(BattleManager[_0xeaffc7(0x13c5)]())return _0x253f68['lihSG'];return _0x253f68[_0xeaffc7(0x882)];},BattleManager[_0x4258d1(0xfc9)+'s']=function(_0x416704){const _0x4d7f79=_0x4258d1,_0x399ba5={'Ltoyo':function(_0x3877fe,_0x44bb92){return _0x3877fe===_0x44bb92;}};return _0x416704=_0x416704[_0x4d7f79(0x191)+'e']()[_0x4d7f79(0xbb6)](),_0x399ba5['Ltoyo'](this[_0x4d7f79(0x1511)](),_0x416704);},BattleManager[_0x4258d1(0x26a)]=function(){const _0x4a5b9b=_0x4258d1,_0x5d7361={'lsxkB':_0x4a5b9b(0xee9)};return this[_0x4a5b9b(0xfc9)+'s'](_0x5d7361['lsxkB']);},BattleManager['isTurnBase'+'d']=function(){const _0x1f5243=_0x4258d1;return this[_0x1f5243(0x26a)]();},BattleManager[_0x4258d1(0x855)+'d']=function(){const _0x5438d3=_0x4258d1;return!this[_0x5438d3(0x813)+'d']();},BattleManager[_0x4258d1(0xa3f)+'d']=function(){const _0x1d3562=_0x4258d1;return!this[_0x1d3562(0x813)+'d']()&&!this[_0x1d3562(0x855)+'d']();},BattleManager[_0x4258d1(0x1141)+'FromKey']=function(_0x3fe3ab){const _0x30e7b7=_0x4258d1,_0x3e6eaa={'OsVRq':function(_0x1d10c7,_0x1d1ae7){return _0x1d10c7!==_0x1d1ae7;}};this['_battlerKe'+_0x30e7b7(0x20b)]=this[_0x30e7b7(0x10f8)+_0x30e7b7(0x20b)]||{};if(_0x3e6eaa['OsVRq'](this['_battlerKe'+'yCache'][_0x3fe3ab],undefined))return this[_0x30e7b7(0x10f8)+'yCache'][_0x3fe3ab];this[_0x30e7b7(0x10f8)+_0x30e7b7(0x20b)][_0x3fe3ab]=null;const _0x5e12e0=this['allBattleM'+_0x30e7b7(0xf63)](),_0x1d524a=_0x5e12e0[_0x30e7b7(0x12db)](_0x4ca682=>_0x4ca682['battlerKey']()===_0x3fe3ab);if(_0x1d524a)this[_0x30e7b7(0x10f8)+_0x30e7b7(0x20b)][_0x3fe3ab]=_0x1d524a;return this[_0x30e7b7(0x10f8)+_0x30e7b7(0x20b)][_0x3fe3ab];},Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0xe71)]=function(){const _0x494578=_0x4258d1,_0x4308aa={'CcGZx':_0x494578(0xab8),'vcMCO':_0x494578(0xd12),'UFfoz':'enemy'};return _0x4308aa[_0x494578(0xa96)][_0x494578(0xf22)](this['isActor']()?_0x4308aa['vcMCO']:_0x4308aa[_0x494578(0x735)],this['name']());},Game_Action['prototype'][_0x4258d1(0x53f)+_0x4258d1(0x8d3)]=function(_0x11b3a6){const _0x2c47de=_0x4258d1,_0x488a5e={'mlkct':function(_0x10274a,_0x54b84a){return _0x10274a!==_0x54b84a;},'lOadl':function(_0x102de2,_0x247f4c){return _0x102de2===_0x247f4c;},'uotVo':_0x2c47de(0x105f)};if(_0x488a5e[_0x2c47de(0x1166)](this['_targetBat'+'tlerKey'],''))return;_0x488a5e[_0x2c47de(0x8e8)](typeof _0x11b3a6,_0x488a5e[_0x2c47de(0x1b6)])?this[_0x2c47de(0x518)+_0x2c47de(0x13e3)]=_0x11b3a6['toLowerCas'+'e']()[_0x2c47de(0xbb6)]():this[_0x2c47de(0x518)+_0x2c47de(0x13e3)]=_0x11b3a6[_0x2c47de(0xe71)]();},Game_Action['prototype']['getBattler'+_0x4258d1(0x2c8)]=function(){const _0x410fc7=_0x4258d1;return[this['getSpecifi'+_0x410fc7(0x600)+_0x410fc7(0x8bb)]()];},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0xc82)+_0x4258d1(0x600)+_0x4258d1(0x8bb)]=function(){const _0x3dd76e=_0x4258d1,_0x237ca7=this[_0x3dd76e(0x518)+_0x3dd76e(0x13e3)]||'',_0x249ea5=BattleManager['getBattler'+'FromKey'](_0x237ca7);if(!_0x249ea5)return this[_0x3dd76e(0x1141)+_0x3dd76e(0x141f)+'eplacement']();if(!_0x249ea5[_0x3dd76e(0x266)]())return this[_0x3dd76e(0x1141)+'KeyTargetR'+_0x3dd76e(0xed7)]();return _0x249ea5;},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x1141)+'KeyTargetR'+_0x4258d1(0xed7)]=function(){const _0x41f958=_0x4258d1,_0x5edc37=this[_0x41f958(0x518)+'tlerKey'];return _0x5edc37[_0x41f958(0x79c)](/ACTOR/i)?this['friendsUni'+'t']()['trueRandom'+_0x41f958(0x3ce)]():this[_0x41f958(0xe85)+'nit']()[_0x41f958(0xc1a)+'Target']();},BattleManager[_0x4258d1(0xe6c)+'ttlers']=function(){const _0x532c74=_0x4258d1;return this['allBattleM'+_0x532c74(0xf63)]()['filter'](_0x4b70ac=>_0x4b70ac[_0x532c74(0xbd9)]());},BattleManager[_0x4258d1(0x1fc)+_0x4258d1(0x705)]=function(_0x34b99b){const _0x485b32=_0x4258d1,_0x141796={'qArcX':function(_0x45e617,_0x3b4b28){return _0x45e617===_0x3b4b28;},'NgicS':_0x485b32(0x4fa)+'oryJS'};_0x141796['qArcX'](_0x34b99b,_0x141796[_0x485b32(0xbdf)])&&(this['_endingBat'+_0x485b32(0x6e5)]=!![]),$gameParty[_0x485b32(0x1fc)+_0x485b32(0x705)](_0x34b99b),$gameTroop[_0x485b32(0x1fc)+_0x485b32(0x705)](_0x34b99b);},VisuMZ[_0x4258d1(0x337)]['BattleMana'+_0x4258d1(0x5de)+_0x4258d1(0x1311)]=BattleManager[_0x4258d1(0x66f)+'e'],BattleManager['startBattl'+'e']=function(){const _0x1ef0b1=_0x4258d1,_0x129c9d={'PTmCC':_0x1ef0b1(0x4e7)+'4','NEYmN':_0x1ef0b1(0xb3d)+'ttleJS','kZefO':_0x1ef0b1(0xa38)+_0x1ef0b1(0x15f2)},_0x5e46e1=_0x129c9d[_0x1ef0b1(0x3ee)]['split']('|');let _0x2b7ba0=-0x54c+-0x3*0x179+0x9b7*0x1;while(!![]){switch(_0x5e46e1[_0x2b7ba0++]){case'0':VisuMZ[_0x1ef0b1(0x337)][_0x1ef0b1(0xbf2)+_0x1ef0b1(0x5de)+'attle'][_0x1ef0b1(0xb14)](this);continue;case'1':this[_0x1ef0b1(0xabc)+_0x1ef0b1(0x6e5)]=![];continue;case'2':this[_0x1ef0b1(0x1fc)+_0x1ef0b1(0x705)](_0x129c9d[_0x1ef0b1(0xa0d)]);continue;case'3':this[_0x1ef0b1(0x139c)+'e']=ConfigManager[_0x1ef0b1(0x47d)+_0x1ef0b1(0xab4)];continue;case'4':this[_0x1ef0b1(0x1fc)+_0x1ef0b1(0x705)](_0x129c9d[_0x1ef0b1(0xa7f)]);continue;case'5':this[_0x1ef0b1(0x160c)]=![];continue;}break;}},BattleManager[_0x4258d1(0x3d6)+_0x4258d1(0x710)+_0x4258d1(0x1165)]=function(_0xea55e6){const _0x2de882=_0x4258d1,_0x573435={'KBeOb':function(_0x40f129,_0x5c9abd){return _0x40f129!==_0x5c9abd;},'ndfnw':_0x2de882(0x90c),'hchEv':'%1Event'},_0x4b88f1=VisuMZ[_0x2de882(0x337)][_0x2de882(0x424)][_0x2de882(0x12c8)];_0x573435[_0x2de882(0xcc0)](_0xea55e6,_0x573435['ndfnw'])&&_0x4b88f1[_0x2de882(0xfb2)+'vent']&&VisuMZ['BattleCore'][_0x2de882(0x1325)+_0x2de882(0x1346)+'alid'](_0x4b88f1['BattleEndE'+_0x2de882(0xff4)])&&$gameTemp[_0x2de882(0x679)+'monEvent'](_0x4b88f1[_0x2de882(0xfb2)+'vent']);const _0x26ffdd=_0x573435['hchEv']['format'](_0xea55e6);_0x4b88f1[_0x26ffdd]&&VisuMZ[_0x2de882(0x337)][_0x2de882(0x1325)+_0x2de882(0x1346)+_0x2de882(0x1500)](_0x4b88f1[_0x26ffdd])&&$gameTemp[_0x2de882(0x679)+_0x2de882(0x8c4)](_0x4b88f1[_0x26ffdd]);},VisuMZ['BattleCore']['BattleMana'+_0x4258d1(0x365)]=BattleManager[_0x4258d1(0x466)],BattleManager[_0x4258d1(0x466)]=function(){const _0x2a22ad=_0x4258d1;VisuMZ['BattleCore']['BattleMana'+_0x2a22ad(0x365)][_0x2a22ad(0xb14)](this),SceneManager[_0x2a22ad(0x614)+'tle']()&&BattleManager[_0x2a22ad(0xfff)+'t']();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbf2)+'ger_checkB'+_0x4258d1(0x6c5)]=BattleManager['checkBattl'+'eEnd'],BattleManager[_0x4258d1(0x922)+'eEnd']=function(){const _0x3f113a=_0x4258d1,_0x1c176d={'zFQdA':function(_0x30b3b0,_0x275643){return _0x30b3b0===_0x275643;},'weWVC':_0x3f113a(0x648)};if(_0x1c176d[_0x3f113a(0xb6a)](this[_0x3f113a(0x1602)],_0x1c176d['weWVC'])){if($gameTemp[_0x3f113a(0x1164)+_0x3f113a(0x14a2)+'d']())return![];}return VisuMZ[_0x3f113a(0x337)][_0x3f113a(0xbf2)+_0x3f113a(0x167c)+'attleEnd'][_0x3f113a(0xb14)](this);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbf2)+_0x4258d1(0x1c2)+'sVictory']=BattleManager[_0x4258d1(0x9f8)+_0x4258d1(0xcf4)],BattleManager[_0x4258d1(0x9f8)+'tory']=function(){const _0x9e4bc=_0x4258d1,_0x15d594={'ezwYf':_0x9e4bc(0x4fa)+_0x9e4bc(0x10aa),'YtnCN':_0x9e4bc(0x620)};this[_0x9e4bc(0xabc)+'tle']=!![],this[_0x9e4bc(0x1fc)+_0x9e4bc(0x705)](_0x15d594[_0x9e4bc(0x146d)]),VisuMZ['BattleCore']['BattleMana'+_0x9e4bc(0x1c2)+_0x9e4bc(0x20d)][_0x9e4bc(0xb14)](this),this['processPos'+_0x9e4bc(0x710)+_0x9e4bc(0x1165)](_0x15d594[_0x9e4bc(0x2bf)]);},VisuMZ[_0x4258d1(0x337)]['BattleMana'+_0x4258d1(0x1c2)+_0x4258d1(0x12ec)]=BattleManager['processAbo'+'rt'],BattleManager[_0x4258d1(0xd60)+'rt']=function(){const _0x2b4faf=_0x4258d1;this['_endingBat'+'tle']=!![],VisuMZ[_0x2b4faf(0x337)][_0x2b4faf(0xbf2)+_0x2b4faf(0x1c2)+_0x2b4faf(0x12ec)][_0x2b4faf(0xb14)](this);},VisuMZ[_0x4258d1(0x337)]['BattleMana'+'ger_proces'+_0x4258d1(0xc88)]=BattleManager['processDef'+_0x4258d1(0x12a0)],BattleManager[_0x4258d1(0xcae)+_0x4258d1(0x12a0)]=function(){const _0x173504=_0x4258d1,_0x391f21={'PeEem':_0x173504(0xf31)+_0x173504(0x1578),'TJofO':_0x173504(0xf8f)};this[_0x173504(0xabc)+_0x173504(0x6e5)]=!![],this[_0x173504(0x1fc)+'tleCoreJS'](_0x391f21['PeEem']),VisuMZ[_0x173504(0x337)][_0x173504(0xbf2)+_0x173504(0x1c2)+_0x173504(0xc88)]['call'](this),this[_0x173504(0x3d6)+_0x173504(0x710)+'monEvents'](_0x391f21[_0x173504(0x126f)]);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbf2)+_0x4258d1(0x1638)+_0x4258d1(0x6e5)]=BattleManager[_0x4258d1(0x13c0)],BattleManager[_0x4258d1(0x13c0)]=function(_0x3637d1){const _0x4e6262=_0x4258d1,_0x51ec97={'YmOHM':'2|3|0|4|1','dBVCN':_0x4e6262(0xa84)+_0x4e6262(0x75a),'HBnzT':_0x4e6262(0x2c1)+_0x4e6262(0x7d6)},_0x484547=_0x51ec97[_0x4e6262(0x4d5)]['split']('|');let _0x4fc860=-0x79f+0xcd9+-0x53a;while(!![]){switch(_0x484547[_0x4fc860++]){case'0':this[_0x4e6262(0x1fc)+'tleCoreJS'](_0x51ec97[_0x4e6262(0xcca)]);continue;case'1':this[_0x4e6262(0x1fc)+_0x4e6262(0x705)](_0x51ec97[_0x4e6262(0x65a)]);continue;case'2':this[_0x4e6262(0x160c)]=!![];continue;case'3':this[_0x4e6262(0x139c)+'e']=![];continue;case'4':VisuMZ[_0x4e6262(0x337)][_0x4e6262(0xbf2)+_0x4e6262(0x1638)+_0x4e6262(0x6e5)]['call'](this,_0x3637d1);continue;}break;}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbf2)+_0x4258d1(0x16b5)+_0x4258d1(0x340)]=BattleManager[_0x4258d1(0x7e2)],BattleManager[_0x4258d1(0x7e2)]=function(){const _0x20332d=_0x4258d1,_0x208786={'UYYpO':_0x20332d(0xbe6)+_0x20332d(0x986),'LvxpK':_0x20332d(0x84b)+_0x20332d(0x1493)};if(this[_0x20332d(0x813)+'d']())this['processBat'+_0x20332d(0x705)](_0x208786[_0x20332d(0x161d)]);VisuMZ[_0x20332d(0x337)][_0x20332d(0xbf2)+_0x20332d(0x16b5)+'urn'][_0x20332d(0xb14)](this);if(this['isTurnBase'+'d']())this['processBat'+_0x20332d(0x705)](_0x208786[_0x20332d(0xa3b)]);},BattleManager[_0x4258d1(0x952)+'n']=function(){const _0x33057a=_0x4258d1,_0x6d1b50=this[_0x33057a(0xa47)],_0x5a2cbe=_0x6d1b50[_0x33057a(0x195)+_0x33057a(0x1485)]();_0x5a2cbe?(_0x5a2cbe[_0x33057a(0x1239)](),_0x5a2cbe['isValid']()?(this[_0x33057a(0xa8f)+'n'](),_0x6d1b50[_0x33057a(0x272)+_0x33057a(0x5a0)]()):(_0x6d1b50[_0x33057a(0x272)+_0x33057a(0x5a0)](),this[_0x33057a(0xb97)]())):(this[_0x33057a(0xb97)](),this[_0x33057a(0xa47)]=null);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbf2)+_0x4258d1(0xc8d)+'ction']=BattleManager['startActio'+'n'],BattleManager[_0x4258d1(0xa8f)+'n']=function(){const _0x35e521=_0x4258d1,_0x412861={'EAAww':function(_0x5d02d0,_0x16656a){return _0x5d02d0===_0x16656a;},'JVZba':_0x35e521(0x751)+'tionJS','KoDkq':function(_0x19aa38,_0x2fa905){return _0x19aa38===_0x2fa905;},'ZSthQ':_0x35e521(0x9e3)+_0x35e521(0xbbd)},_0x6b8b63=this[_0x35e521(0xa47)][_0x35e521(0x195)+'ion'](),_0xff92aa=this['_subject'];_0x6b8b63&&_0x412861[_0x35e521(0x155d)](_0x6b8b63[_0x35e521(0x8e9)](),_0xff92aa)&&_0x6b8b63[_0x35e521(0x6ba)+_0x35e521(0x7bb)](_0x412861['JVZba']),VisuMZ[_0x35e521(0x337)][_0x35e521(0xbf2)+_0x35e521(0xc8d)+_0x35e521(0x333)]['call'](this),_0x6b8b63&&_0x412861['KoDkq'](_0x6b8b63[_0x35e521(0x8e9)](),_0xff92aa)&&_0x6b8b63['actionBatt'+_0x35e521(0x7bb)](_0x412861[_0x35e521(0x653)]);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbf2)+_0x4258d1(0x1412)+_0x4258d1(0x1485)]=BattleManager[_0x4258d1(0xb97)],BattleManager[_0x4258d1(0xb97)]=function(){const _0xb3c07a=_0x4258d1,_0x324ebf={'QKUnw':function(_0x53ee59,_0x24a7e1){return _0x53ee59!==_0x24a7e1;},'GOgGJ':function(_0x2fa1b8,_0xde03e5){return _0x2fa1b8===_0xde03e5;},'baogH':_0xb3c07a(0xecd)+_0xb3c07a(0x733),'cjiaJ':_0xb3c07a(0x648),'RnQsY':'PostEndAct'+_0xb3c07a(0x35d)},_0x8246b0=this[_0xb3c07a(0x15a2)],_0x51a572=this[_0xb3c07a(0xa47)];_0x8246b0&&_0x324ebf[_0xb3c07a(0x2be)](_0x8246b0,this[_0xb3c07a(0x660)+'n'])&&_0x324ebf[_0xb3c07a(0x86c)](_0x8246b0['subject'](),_0x51a572)&&_0x8246b0[_0xb3c07a(0x6ba)+_0xb3c07a(0x7bb)](_0x324ebf[_0xb3c07a(0xbfe)]),this[_0xb3c07a(0xa47)]?VisuMZ[_0xb3c07a(0x337)]['BattleMana'+_0xb3c07a(0x1412)+'ion'][_0xb3c07a(0xb14)](this):this[_0xb3c07a(0x1602)]=_0x324ebf['cjiaJ'],_0x8246b0&&_0x324ebf[_0xb3c07a(0x2be)](_0x8246b0,this[_0xb3c07a(0x660)+'n'])&&_0x324ebf[_0xb3c07a(0x86c)](_0x8246b0[_0xb3c07a(0x8e9)](),_0x51a572)&&_0x8246b0[_0xb3c07a(0x6ba)+_0xb3c07a(0x7bb)](_0x324ebf[_0xb3c07a(0xb3c)]),this[_0xb3c07a(0xb41)+_0xb3c07a(0xfe6)+'s'](this[_0xb3c07a(0xd9f)+_0xb3c07a(0xf63)]()),this[_0xb3c07a(0x660)+'n']=this[_0xb3c07a(0x15a2)];},BattleManager['refreshBat'+_0x4258d1(0xfe6)+'s']=function(_0x441ee9){const _0x598e3e=_0x4258d1;for(const _0x1a1986 of _0x441ee9){if(!_0x1a1986)continue;if(!_0x1a1986[_0x598e3e(0xc06)]())continue;_0x1a1986[_0x598e3e(0xc06)]()[_0x598e3e(0x885)+_0x598e3e(0x1485)]();}},BattleManager[_0x4258d1(0xa3d)+'on']=function(){const _0x34c3b0=_0x4258d1;!this[_0x34c3b0(0x579)]['isBusy']()&&this['endAction']();},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x49e)+_0x4258d1(0x15c6)]=function(){const _0x18ac33=_0x4258d1,_0x19f17b={'YAXww':function(_0x1af075,_0x158d8e){return _0x1af075===_0x158d8e;}};this[_0x18ac33(0xad5)+'t']();if(Imported['VisuMZ_1_S'+_0x18ac33(0x13a2)+_0x18ac33(0x9c6)]){const _0x5e3315=VisuMZ[_0x18ac33(0xfaa)+'esCore'][_0x18ac33(0x424)]['States'];_0x5e3315&&_0x19f17b[_0x18ac33(0x3d1)](_0x5e3315[_0x18ac33(0x109f)+_0x18ac33(0x5a3)],![])&&this['removeStat'+_0x18ac33(0x1490)](-0x1*-0xa39+-0x66f+0x33*-0x13);}else this[_0x18ac33(0x14bb)+_0x18ac33(0x1490)](-0x2678*0x1+-0x1360+0x39d9);this['removeBuff'+'sAuto']();},BattleManager['makeEscape'+'Ratio']=function(){const _0x50d1b0=_0x4258d1;this[_0x50d1b0(0x36c)+'io']=VisuMZ[_0x50d1b0(0x337)]['Settings'][_0x50d1b0(0x12c8)][_0x50d1b0(0x15e9)+_0x50d1b0(0xe62)][_0x50d1b0(0xb14)](this);},VisuMZ['BattleCore'][_0x4258d1(0xbf2)+'ger_onEsca'+_0x4258d1(0x1301)]=BattleManager[_0x4258d1(0x634)+_0x4258d1(0xfcd)],BattleManager['onEscapeSu'+_0x4258d1(0xfcd)]=function(){const _0x3ea592=_0x4258d1,_0x4fc843={'ulmbV':'EscapeSucc'+_0x3ea592(0x206),'ivmwl':_0x3ea592(0xf34)+_0x3ea592(0x902)};this[_0x3ea592(0x1fc)+_0x3ea592(0x705)](_0x4fc843[_0x3ea592(0xf16)]),BattleManager[_0x3ea592(0x1b3)][_0x3ea592(0x806)+_0x3ea592(0xca6)](),VisuMZ[_0x3ea592(0x337)][_0x3ea592(0xbf2)+'ger_onEsca'+_0x3ea592(0x1301)][_0x3ea592(0xb14)](this),this[_0x3ea592(0x3d6)+_0x3ea592(0x710)+_0x3ea592(0x1165)](_0x4fc843[_0x3ea592(0xa73)]);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbf2)+'ger_onEsca'+_0x4258d1(0x1380)]=BattleManager[_0x4258d1(0x144d)+_0x4258d1(0x747)],BattleManager[_0x4258d1(0x144d)+_0x4258d1(0x747)]=function(){const _0x21bb16=_0x4258d1,_0x263804={'fxsdF':_0x21bb16(0x90c)+_0x21bb16(0x5f6),'UuVDi':function(_0x23f03d,_0x2acd00){return _0x23f03d+_0x2acd00;},'ofAKF':_0x21bb16(0x90c)};this[_0x21bb16(0x1fc)+_0x21bb16(0x705)](_0x263804[_0x21bb16(0x4da)]);const _0x49166d=this[_0x21bb16(0x36c)+'io'];VisuMZ['BattleCore'][_0x21bb16(0xbf2)+_0x21bb16(0xece)+_0x21bb16(0x1380)][_0x21bb16(0xb14)](this),this[_0x21bb16(0x36c)+'io']=_0x263804[_0x21bb16(0x163a)](_0x49166d,VisuMZ[_0x21bb16(0x337)]['Settings']['Mechanics'][_0x21bb16(0x15e9)+_0x21bb16(0x1075)][_0x21bb16(0xb14)](this)),this[_0x21bb16(0x15e6)]=![],this[_0x21bb16(0x3d6)+_0x21bb16(0x710)+'monEvents'](_0x263804['ofAKF']);},BattleManager['displaySta'+_0x4258d1(0xabf)]=function(){const _0x47318c=_0x4258d1,_0x1ce852={'qWaAb':_0x47318c(0xe3c),'RIHAD':_0x47318c(0x58e),'DSRDX':'clear'};let _0x4d16e6=![];if(this['isDisplayE'+_0x47318c(0x10c4)+_0x47318c(0x3b1)]())for(const _0x41bc95 of $gameTroop[_0x47318c(0xa09)]()){this['_logWindow'][_0x47318c(0x88f)](_0x1ce852[_0x47318c(0xa77)],TextManager[_0x47318c(0xb24)][_0x47318c(0xf22)](_0x41bc95)),this[_0x47318c(0x579)][_0x47318c(0x88f)](_0x1ce852[_0x47318c(0x14a1)]),_0x4d16e6=!![];}if(this[_0x47318c(0xe43)+'e'])this[_0x47318c(0x579)][_0x47318c(0x88f)](_0x1ce852[_0x47318c(0xa77)],TextManager['preemptive']['format']($gameParty[_0x47318c(0xd40)]())),this['_logWindow']['push'](_0x1ce852['RIHAD']);else this[_0x47318c(0x670)]&&(this[_0x47318c(0x579)][_0x47318c(0x88f)](_0x1ce852[_0x47318c(0xa77)],TextManager[_0x47318c(0xed9)]['format']($gameParty['name']())),this[_0x47318c(0x579)][_0x47318c(0x88f)](_0x1ce852['RIHAD']));_0x4d16e6&&(this[_0x47318c(0x579)]['push'](_0x1ce852['RIHAD']),this['_logWindow'][_0x47318c(0x88f)](_0x1ce852[_0x47318c(0x289)])),this[_0x47318c(0x13c5)]()&&this[_0x47318c(0x18c)+'yCommandWi'+_0x47318c(0xb19)]()&&(this['_tpbNeedsP'+'artyComman'+'d']=![]);},BattleManager[_0x4258d1(0x5ac)+_0x4258d1(0x10c4)+_0x4258d1(0x3b1)]=function(){const _0x18e472=_0x4258d1;if(BattleManager['_autoBattl'+'e'])return![];return VisuMZ[_0x18e472(0x337)]['Settings']['Enemy'][_0x18e472(0x10de)];},VisuMZ['BattleCore']['BattleMana'+_0x4258d1(0x14be)+_0x4258d1(0x1591)]=BattleManager[_0x4258d1(0x1012)],BattleManager['startInput']=function(){const _0x2797c2=_0x4258d1;VisuMZ[_0x2797c2(0x337)][_0x2797c2(0xbf2)+'ger_startI'+_0x2797c2(0x1591)]['call'](this),this[_0x2797c2(0x26a)]()&&this[_0x2797c2(0x18c)+'yCommandWi'+_0x2797c2(0xb19)]()&&!this[_0x2797c2(0x670)]&&$gameParty[_0x2797c2(0x7e9)]()&&this[_0x2797c2(0xad6)+_0x2797c2(0x68a)]();},BattleManager[_0x4258d1(0x18c)+_0x4258d1(0x1549)+'ndow']=function(){const _0x1fcba4=_0x4258d1;return VisuMZ['BattleCore'][_0x1fcba4(0x424)][_0x1fcba4(0xde5)][_0x1fcba4(0x2de)+'md'];},BattleManager['checkTpbIn'+_0x4258d1(0x142e)]=function(){const _0xa096f1=_0x4258d1;this[_0xa096f1(0x533)+_0xa096f1(0x498)]()&&this[_0xa096f1(0xad6)+'Command']();},VisuMZ['BattleCore'][_0x4258d1(0x1547)+'le_startAc'+_0x4258d1(0xca2)+_0x4258d1(0x434)]=Scene_Battle['prototype'][_0x4258d1(0x1416)+_0x4258d1(0x9f7)+'ection'],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x1416)+_0x4258d1(0x9f7)+_0x4258d1(0x14e0)]=function(){const _0x1d40ad=_0x4258d1;VisuMZ['BattleCore']['Scene_Batt'+_0x1d40ad(0x993)+_0x1d40ad(0xca2)+_0x1d40ad(0x434)][_0x1d40ad(0xb14)](this),BattleManager[_0x1d40ad(0x13c5)]()&&BattleManager[_0x1d40ad(0xc45)+'artyComman'+'d']&&(BattleManager[_0x1d40ad(0xc45)+'artyComman'+'d']=![],this['actorComma'+'ndCancelTP'+'B']());},BattleManager['emulateAct'+_0x4258d1(0x1485)]=function(_0x33671e,_0x2967a0,_0x402e3f){const _0x40224f=_0x4258d1;if(!_0x402e3f)return;if(!_0x33671e)return;if(!_0x2967a0)return;const _0xe666f=this[_0x40224f(0x15a2)];this[_0x40224f(0x15a2)]=new Game_Action(_0x33671e);if(DataManager['isItem'](_0x402e3f))this['_action'][_0x40224f(0x10d4)](_0x402e3f['id']);if(DataManager[_0x40224f(0x83f)](_0x402e3f))this[_0x40224f(0x15a2)][_0x40224f(0x37f)](_0x402e3f['id']);if(this[_0x40224f(0x15a2)]['item']())BattleManager[_0x40224f(0xe7d)+'on'](_0x33671e,_0x2967a0);this[_0x40224f(0x15a2)]=_0xe666f;},BattleManager[_0x4258d1(0x1319)+_0x4258d1(0x165f)+'n']=function(_0x1f2e6c,_0x1ada12){const _0x4d86e7=_0x4258d1,_0x3b60d6={'UeaWo':_0x4d86e7(0x118b)},_0x5470e4=_0x3b60d6[_0x4d86e7(0xbe5)]['split']('|');let _0xec6de5=-0x66*0x49+-0x988+-0x1*-0x269e;while(!![]){switch(_0x5470e4[_0xec6de5++]){case'0':this[_0x4d86e7(0x579)][_0x4d86e7(0x42b)+_0x4d86e7(0x1185)](_0x1ada12);continue;case'1':this[_0x4d86e7(0x15a2)][_0x4d86e7(0x3e6)+'nTarget']=_0x1ada12;continue;case'2':this['_logWindow']['displayRef'+_0x4d86e7(0x5e9)+_0x4d86e7(0x6a0)](_0x1f2e6c,this[_0x4d86e7(0x15a2)]);continue;case'3':this[_0x4d86e7(0x15a2)][_0x4d86e7(0x729)](_0x1f2e6c);continue;case'4':this[_0x4d86e7(0x579)][_0x4d86e7(0xd27)+'ionResults'](_0x1f2e6c,_0x1f2e6c);continue;}break;}},VisuMZ['BattleCore'][_0x4258d1(0xbf2)+_0x4258d1(0x46b)+_0x4258d1(0x13eb)]=BattleManager[_0x4258d1(0x1599)+'Orders'],BattleManager['makeAction'+'Orders']=function(){const _0x4442a8=_0x4258d1;VisuMZ[_0x4442a8(0x337)]['BattleMana'+_0x4442a8(0x46b)+_0x4442a8(0x13eb)][_0x4442a8(0xb14)](this),this[_0x4442a8(0x1177)+_0x4442a8(0x4fe)]=this[_0x4442a8(0x1177)+'tlers'][_0x4442a8(0x7de)](_0x2d9075=>_0x2d9075&&_0x2d9075['isAppeared']());},VisuMZ['BattleCore'][_0x4258d1(0xbf2)+'ger_update'+_0x4258d1(0x1414)]=BattleManager[_0x4258d1(0x13b2)+'e'],BattleManager[_0x4258d1(0x13b2)+'e']=function(_0x4c6fe4){const _0x2b4ca5=_0x4258d1,_0x41552d={'BtzTM':function(_0x37527f,_0x157814){return _0x37527f===_0x157814;},'fAAnH':_0x2b4ca5(0xc3e),'uVlUV':function(_0x1f30dd,_0x16b13c){return _0x1f30dd===_0x16b13c;},'xDdQq':_0x2b4ca5(0x1264)+'n'};if(_0x41552d[_0x2b4ca5(0x1d0)](this[_0x2b4ca5(0x1602)],_0x41552d[_0x2b4ca5(0xdf2)]))this['updateCust'+_0x2b4ca5(0x329)+_0x2b4ca5(0x1111)]();else _0x41552d[_0x2b4ca5(0x520)](this[_0x2b4ca5(0x1602)],_0x41552d[_0x2b4ca5(0x30a)])?this[_0x2b4ca5(0x7e4)+_0x2b4ca5(0x372)]():VisuMZ['BattleCore'][_0x2b4ca5(0xbf2)+'ger_update'+_0x2b4ca5(0x1414)][_0x2b4ca5(0xb14)](this,_0x4c6fe4);},BattleManager['prepareCus'+_0x4258d1(0xe82)+_0x4258d1(0xc9f)]=function(){const _0x5b3867=_0x4258d1,_0x2af7c9={'YOzvA':_0x5b3867(0xc3e)};this['_allTarget'+'s']=this[_0x5b3867(0xc89)][_0x5b3867(0xb58)](-0xf*-0x1eb+-0x16ff*0x1+-0x5c6),this[_0x5b3867(0x162d)+'ex']=0x26e5+0x40*0x43+0x37*-0x103,this[_0x5b3867(0xdef)]=this[_0x5b3867(0x1e3)+'s'][-0x200e+-0x468+0x123b*0x2]||null,this[_0x5b3867(0x1602)]=_0x2af7c9['YOzvA'];},BattleManager['updateCust'+_0x4258d1(0x329)+'quence']=function(){const _0x2cd568=_0x4258d1,_0x3948fb={'OGrTB':_0x2cd568(0xc30)};!this[_0x2cd568(0xfff)+'tMain']()&&!this['_logWindow'][_0x2cd568(0xae8)]()&&(this[_0x2cd568(0x1602)]=_0x3948fb[_0x2cd568(0x1613)]);},BattleManager[_0x4258d1(0x1264)+'n']=function(_0x21568b){const _0x1fd1b0=_0x4258d1,_0xd2dbf={'viKDr':function(_0x19b92c,_0x4c8a68){return _0x19b92c===_0x4c8a68;}};this['_actionBat'+_0x1fd1b0(0x4fe)][_0x1fd1b0(0x1113)](_0x21568b);if(_0xd2dbf[_0x1fd1b0(0x42a)](_0x21568b,this[_0x1fd1b0(0xa47)]))return;const _0x115320=JsonEx[_0x1fd1b0(0x15e4)+'py'](_0x21568b[_0x1fd1b0(0x195)+_0x1fd1b0(0x1485)]());this[_0x1fd1b0(0x810)+_0x1fd1b0(0x4fe)]['push']([_0x21568b,_0x115320]);},BattleManager[_0x4258d1(0xaba)+_0x4258d1(0x12f6)]=function(){},BattleManager[_0x4258d1(0xee4)+'t']=function(){const _0x554540=_0x4258d1,_0x539c0c={'Vhhlq':'turn','dgeKC':function(_0x370b7c,_0x273d9e){return _0x370b7c>_0x273d9e;}};if(this['isTpb']())this['_phase']=_0x539c0c[_0x554540(0xed5)];else _0x539c0c['dgeKC'](this[_0x554540(0x810)+_0x554540(0x4fe)][_0x554540(0x1645)],0x4d+-0x91*0x35+0x4f4*0x6)?this[_0x554540(0x1602)]=_0x539c0c[_0x554540(0xed5)]:this['startInput']();},BattleManager[_0x4258d1(0xab6)+'ject']=function(){const _0x12d6f3=_0x4258d1,_0x32566c={'ikFTw':_0x12d6f3(0x9fc)},_0x3d8f0c=this['_subject'];_0x3d8f0c&&this[_0x12d6f3(0x13c5)]()&&_0x3d8f0c['setActionS'+_0x12d6f3(0x12c3)](_0x32566c[_0x12d6f3(0xac7)]);for(;;){const _0x22e95e=this[_0x12d6f3(0xab6)+_0x12d6f3(0x1540)+'ol']();if(!_0x22e95e)return null;if(_0x22e95e[_0x12d6f3(0x782)+'mber']()&&_0x22e95e['isAlive']())return _0x22e95e;}},BattleManager[_0x4258d1(0xab6)+_0x4258d1(0x1540)+'ol']=function(){const _0x560fb7=_0x4258d1,_0x5af1e4={'fpbNf':function(_0x2fc12a,_0x102ced){return _0x2fc12a>_0x102ced;}};if(_0x5af1e4[_0x560fb7(0xe42)](this['_forcedBat'+_0x560fb7(0x4fe)][_0x560fb7(0x1645)],0xe*0x47+0x62*-0x19+0x5b0)){const _0x212821=this[_0x560fb7(0x810)+_0x560fb7(0x4fe)][_0x560fb7(0xa6f)](),_0x4a3fa8=_0x212821[0x3*0x3e5+-0x44+-0xb6b];return _0x4a3fa8[_0x560fb7(0x775)]=_0x4a3fa8['_actions']||[],_0x4a3fa8[_0x560fb7(0x775)][-0x4c*-0x6f+-0xa03+-0x16f1]=_0x212821[0x1952+-0x5cb+-0x1386],_0x4a3fa8;}else return this['_actionBat'+_0x560fb7(0x4fe)]['shift']();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x3d4)+'er_forceAc'+_0x4258d1(0x940)]=Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x1264)+'n'],Game_Battler[_0x4258d1(0xf38)]['forceActio'+'n']=function(_0x583235,_0x218edf){const _0x1c1168=_0x4258d1,_0x52934a={'RLtiC':function(_0x1e2f62,_0x195259){return _0x1e2f62-_0x195259;}};VisuMZ[_0x1c1168(0x337)][_0x1c1168(0x3d4)+_0x1c1168(0x88a)+_0x1c1168(0x940)]['call'](this,_0x583235,_0x218edf),this[_0x1c1168(0x775)][_0x52934a[_0x1c1168(0xea8)](this['_actions'][_0x1c1168(0x1645)],-0x2564+-0x1ca4+0x4209)][_0x1c1168(0x827)+'on']=!![];},Game_Interpreter['prototype'][_0x4258d1(0x1554)]=function(_0x1e4d45){return this['iterateBat'+'tler'](_0x1e4d45[0x818+-0x18ea+-0x869*-0x2],_0x1e4d45[-0x1*0x1e7d+0x233*0x2+0x1a18],_0x483994=>{const _0x5949c2=_0x30a3;!_0x483994['isDeathSta'+_0x5949c2(0xb7b)]()&&(_0x483994[_0x5949c2(0x1264)+'n'](_0x1e4d45[0x1a22+-0x255d+0x89*0x15],_0x1e4d45[0x355*0x6+0x1*0x1016+-0x527*0x7]),BattleManager['forceActio'+'n'](_0x483994));}),!![];},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x3d4)+'er_makeSpe'+'ed']=Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x11ff)],Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x11ff)]=function(){const _0x3d5af8=_0x4258d1,_0x1a323c={'oLfWO':function(_0x1808c1,_0x5dfe7c){return _0x1808c1<=_0x5dfe7c;}};VisuMZ[_0x3d5af8(0x337)][_0x3d5af8(0x3d4)+_0x3d5af8(0x12ee)+'ed']['call'](this),_0x1a323c['oLfWO'](this[_0x3d5af8(0x775)]['length'],0x18d*0x17+0x3*0xb3f+-0x4568)&&(this[_0x3d5af8(0xd61)]=Number[_0x3d5af8(0x398)+_0x3d5af8(0x2db)]);},BattleManager[_0x4258d1(0x9df)+_0x4258d1(0x1372)+_0x4258d1(0x9e8)]=function(){const _0x3bef9b=_0x4258d1;if(VisuMZ[_0x3bef9b(0x337)][_0x3bef9b(0x424)]['Damage'][_0x3bef9b(0xc5a)+_0x3bef9b(0x9e8)]??!![])return![];return SceneManager['isSceneBat'+_0x3bef9b(0x6e5)]()&&this[_0x3bef9b(0xabc)+'tle'];},VisuMZ[_0x4258d1(0x337)]['BattleMana'+'ger_select'+_0x4258d1(0xc5c)+'d']=BattleManager[_0x4258d1(0xad6)+_0x4258d1(0x68a)],BattleManager[_0x4258d1(0xad6)+_0x4258d1(0x68a)]=function(){const _0x6001a5=_0x4258d1;this[_0x6001a5(0x13c5)]()?this['selectNext'+_0x6001a5(0x1259)]():VisuMZ['BattleCore']['BattleMana'+_0x6001a5(0x2e2)+_0x6001a5(0xc5c)+'d'][_0x6001a5(0xb14)](this);},BattleManager[_0x4258d1(0xad6)+'CommandTpb']=function(){const _0x2cf7de=_0x4258d1;if(this[_0x2cf7de(0x15e2)+_0x2cf7de(0x168d)]){if(this[_0x2cf7de(0x15e2)+'tor'][_0x2cf7de(0xad6)+_0x2cf7de(0x68a)]())return;this[_0x2cf7de(0x145a)+'rInput'](),this[_0x2cf7de(0xd13)+_0x2cf7de(0x1fd)](),!this[_0x2cf7de(0xa47)]&&!this[_0x2cf7de(0x15e2)+_0x2cf7de(0x168d)]&&SceneManager[_0x2cf7de(0x14b3)]['updateBatt'+_0x2cf7de(0x3f2)]();}else!this['_subject']&&this['selectNext'+'Actor']();},BattleManager[_0x4258d1(0xd13)+_0x4258d1(0x1fd)]=function(){const _0x5a4a48=_0x4258d1;(!this[_0x5a4a48(0x533)+'Inputtable']()||this['needsActor'+'InputCance'+'l']())&&(this[_0x5a4a48(0xab0)+_0x5a4a48(0x8a3)+'Actor']&&(!$gameParty[_0x5a4a48(0x8ab)+_0x5a4a48(0x1514)]()[_0x5a4a48(0x163f)](this[_0x5a4a48(0xab0)+_0x5a4a48(0x8a3)+_0x5a4a48(0x1224)])&&(this[_0x5a4a48(0xab0)+_0x5a4a48(0x8a3)+'Actor']=null)),!this['_tpbSceneC'+_0x5a4a48(0x8a3)+_0x5a4a48(0x1224)]?(this['cancelActo'+_0x5a4a48(0xe9f)](),this[_0x5a4a48(0x15e2)+_0x5a4a48(0x168d)]=null,this[_0x5a4a48(0x15e6)]=![]):this[_0x5a4a48(0xb57)+_0x5a4a48(0x110c)]());},BattleManager['revertTpbC'+_0x4258d1(0x110c)]=function(){const _0x174db9=_0x4258d1,_0x4ad875={'Dvnpw':_0x174db9(0x1084)};!$gameParty[_0x174db9(0x8ab)+'ers']()[_0x174db9(0x163f)](this[_0x174db9(0xab0)+'hangeCache'+_0x174db9(0x1224)])&&(this[_0x174db9(0xab0)+'hangeCache'+_0x174db9(0x1224)]=null),this[_0x174db9(0xab0)+'hangeCache'+_0x174db9(0x1224)]?(this[_0x174db9(0x15e2)+_0x174db9(0x168d)]=this[_0x174db9(0xab0)+_0x174db9(0x8a3)+'Actor'],this[_0x174db9(0x15e2)+_0x174db9(0x168d)][_0x174db9(0x1419)]=_0x4ad875['Dvnpw'],this[_0x174db9(0x15e6)]=!![],this['_tpbSceneC'+_0x174db9(0x8a3)+_0x174db9(0x1224)]=null):(this[_0x174db9(0xd11)+_0x174db9(0xe9f)](),this[_0x174db9(0x15e2)+'tor']=null,this[_0x174db9(0x15e6)]=![]);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbf2)+_0x4258d1(0xdd2)+_0x4258d1(0x13a5)]=BattleManager[_0x4258d1(0x480)+_0x4258d1(0x8e3)],BattleManager[_0x4258d1(0x480)+_0x4258d1(0x8e3)]=function(){const _0x4f6704=_0x4258d1,_0x21733a={'IFRiA':function(_0x865703,_0x5171b6){return _0x865703===_0x5171b6;},'gDNRp':_0x4f6704(0xc3e)};return _0x21733a['IFRiA'](this[_0x4f6704(0x1602)],_0x21733a[_0x4f6704(0x790)])?this[_0x4f6704(0x7b4)+_0x4f6704(0x41b)+'se']():VisuMZ['BattleCore']['BattleMana'+_0x4f6704(0xdd2)+_0x4f6704(0x13a5)]['call'](this);},BattleManager['battleCore'+_0x4258d1(0x41b)+'se']=function(){const _0x35f5f6=_0x4258d1;return this[_0x35f5f6(0x6a4)+'b']();},VisuMZ[_0x4258d1(0x337)]['BattleMana'+'ger_cancel'+_0x4258d1(0xc90)]=BattleManager[_0x4258d1(0xd11)+'rInput'],BattleManager[_0x4258d1(0xd11)+'rInput']=function(){const _0x148b80=_0x4258d1,_0x391982={'TvgNV':function(_0x34b9da,_0x3f21f0){return _0x34b9da===_0x3f21f0;},'CJYhB':_0x148b80(0x41f)};this[_0x148b80(0x13c5)]()&&_0x391982[_0x148b80(0xba2)](this[_0x148b80(0x1602)],_0x391982[_0x148b80(0x1ad)])&&(this[_0x148b80(0x15e2)+'tor']=null),VisuMZ[_0x148b80(0x337)][_0x148b80(0xbf2)+_0x148b80(0x1359)+_0x148b80(0xc90)][_0x148b80(0xb14)](this);},VisuMZ[_0x4258d1(0x337)]['BattleMana'+_0x4258d1(0x1446)+_0x4258d1(0xeec)]=BattleManager[_0x4258d1(0x1420)+_0x4258d1(0x333)],BattleManager['inputtingA'+_0x4258d1(0x333)]=function(){const _0x19ed47=_0x4258d1,_0x4937fd=this[_0x19ed47(0x15e2)+_0x19ed47(0x168d)];if(_0x4937fd&&!_0x4937fd[_0x19ed47(0x1420)+_0x19ed47(0x333)]()){const _0x295560=_0x4937fd[_0x19ed47(0x1421)+_0x19ed47(0x93c)];_0x4937fd['_actions'][_0x295560]=new Game_Action(_0x4937fd);}return VisuMZ[_0x19ed47(0x337)][_0x19ed47(0xbf2)+_0x19ed47(0x1446)+_0x19ed47(0xeec)][_0x19ed47(0xb14)](this);},VisuMZ[_0x4258d1(0x337)]['BattleMana'+_0x4258d1(0xe5b)+'ubstitute']=BattleManager[_0x4258d1(0x10e5)+_0x4258d1(0xb59)],BattleManager[_0x4258d1(0x10e5)+_0x4258d1(0xb59)]=function(_0x42ea30){const _0x3f836e=_0x4258d1;if(this[_0x3f836e(0x15a2)][_0x3f836e(0x1486)+'d']())return![];return VisuMZ[_0x3f836e(0x337)][_0x3f836e(0xbf2)+_0x3f836e(0xe5b)+_0x3f836e(0x430)]['call'](this,_0x42ea30);},SceneManager[_0x4258d1(0x614)+_0x4258d1(0x6e5)]=function(){const _0x23f83f=_0x4258d1,_0x5b9f8e={'DHQGh':function(_0x28321d,_0x5e1758){return _0x28321d===_0x5e1758;}};return this[_0x23f83f(0x14b3)]&&_0x5b9f8e['DHQGh'](this[_0x23f83f(0x14b3)][_0x23f83f(0xcab)+'r'],Scene_Battle);},SceneManager[_0x4258d1(0x9ed)+_0x4258d1(0x145d)]=function(){const _0x139085=_0x4258d1;return Spriteset_Battle[_0x139085(0xf38)][_0x139085(0x1608)]();},SceneManager[_0x4258d1(0xbc9)+'SceneBattl'+_0x4258d1(0x9d7)+'nable']=function(){const _0x5f0401=_0x4258d1;if(SceneManager[_0x5f0401(0xbc9)+_0x5f0401(0xcb3)](Scene_Options))return!![];return![];},SceneManager['isNextScen'+_0x4258d1(0x15ee)+'nsitionabl'+'e']=function(){const _0x5ea627=_0x4258d1;if(SceneManager[_0x5ea627(0x13bc)+'e'](Scene_Options))return!![];return![];},SceneManager[_0x4258d1(0x1389)+_0x4258d1(0x5fe)+_0x4258d1(0x1065)]=function(_0x2f7358){const _0x209992=_0x4258d1,_0x1ff4b1={'YwvPb':_0x209992(0x10ec)+_0x209992(0x995),'ssRov':_0x209992(0x25e)+'y','qkGam':_0x209992(0x1139)+_0x209992(0x12d4)};if(!SceneManager['isSceneBat'+_0x209992(0x6e5)]())return!![];const _0x5643dd=[_0x1ff4b1[_0x209992(0x10ce)],_0x1ff4b1[_0x209992(0xc7d)],_0x1ff4b1[_0x209992(0x1a2)]];return _0x5643dd[_0x209992(0x163f)](_0x2f7358[_0x209992(0xd40)]);},VisuMZ[_0x4258d1(0x337)]['SceneManag'+'er_push']=SceneManager[_0x4258d1(0x88f)],SceneManager['push']=function(_0x1f14be){const _0x432619=_0x4258d1;if(!SceneManager[_0x432619(0x1389)+_0x432619(0x5fe)+'sitionable'](_0x1f14be))return this[_0x432619(0xaca)+'tleCoreTra'+_0x432619(0x1217)+_0x432619(0xc4e)](_0x1f14be);VisuMZ[_0x432619(0x337)][_0x432619(0xbad)+_0x432619(0xc37)][_0x432619(0xb14)](this,_0x1f14be);},SceneManager['displayBat'+'tleCoreTra'+_0x4258d1(0x1217)+_0x4258d1(0xc4e)]=function(_0x2410f1){const _0x5cd443=_0x4258d1,_0x554889={'laYgx':_0x5cd443(0xbf3)+_0x5cd443(0x98f)+_0x5cd443(0x738)+_0x5cd443(0x190)+'nging','OBorF':_0x5cd443(0x11eb)+_0x5cd443(0xe9c),'SJBuK':function(_0xbcc20c,_0x110145){return _0xbcc20c(_0x110145);}};if(!$gameTemp['isPlaytest']())return;if(this[_0x5cd443(0x8cc)+'ttleCoreTr'+'ansitionEr'+_0x5cd443(0x13ce)])return;this[_0x5cd443(0x8cc)+_0x5cd443(0x79b)+_0x5cd443(0xa10)+'rorMsg']=!![];let _0x2c5f4a='';_0x2c5f4a+=_0x554889[_0x5cd443(0x501)],_0x2c5f4a+=_0x554889['OBorF'][_0x5cd443(0xf22)](_0x2410f1['name']),_0x554889['SJBuK'](alert,_0x2c5f4a);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xce4)+'initialize']=Game_Temp[_0x4258d1(0xf38)][_0x4258d1(0xca3)],Game_Temp[_0x4258d1(0xf38)][_0x4258d1(0xca3)]=function(){const _0x515905=_0x4258d1;VisuMZ[_0x515905(0x337)][_0x515905(0xce4)+_0x515905(0xca3)][_0x515905(0xb14)](this),this[_0x515905(0xa75)+_0x515905(0x111e)]=[];},VisuMZ[_0x4258d1(0x337)]['Game_Temp_'+'requestAni'+'mation']=Game_Temp[_0x4258d1(0xf38)][_0x4258d1(0xffe)+_0x4258d1(0x741)],Game_Temp[_0x4258d1(0xf38)][_0x4258d1(0xffe)+'mation']=function(_0x52a3bc,_0x31152c,_0x3e411e){const _0x396265=_0x4258d1;_0x52a3bc=_0x52a3bc['filter']((_0x335cc5,_0x1f2298,_0x536b3f)=>_0x536b3f[_0x396265(0xfd7)](_0x335cc5)===_0x1f2298);SceneManager[_0x396265(0x614)+_0x396265(0x6e5)]()&&SceneManager[_0x396265(0x9ed)+_0x396265(0x145d)]()&&(_0x3e411e=!_0x3e411e);VisuMZ['BattleCore'][_0x396265(0xce4)+'requestAni'+_0x396265(0x741)][_0x396265(0xb14)](this,_0x52a3bc,_0x31152c,_0x3e411e);SceneManager[_0x396265(0x614)+_0x396265(0x6e5)]()&&BattleManager[_0x396265(0x1b3)]['processAni'+'mationRequ'+_0x396265(0x1092)]();for(const _0x361d69 of _0x52a3bc){_0x361d69&&_0x361d69[_0x396265(0xaf5)]&&_0x361d69['isEnemy']()&&_0x361d69[_0x396265(0x149d)+'empVisibil'+_0x396265(0x100b)]();}},Game_Temp[_0x4258d1(0xf38)][_0x4258d1(0x147a)+_0x4258d1(0xf36)+'Interprete'+'r']=function(_0x5a933b){this['_lastPlugi'+'nCommandIn'+'terpreter']=_0x5a933b;},Game_Temp['prototype']['getLastPlu'+_0x4258d1(0xf36)+_0x4258d1(0x1456)+'r']=function(){const _0x485b6c=_0x4258d1;return this['_lastPlugi'+_0x485b6c(0x467)+_0x485b6c(0x473)];},Game_Temp['prototype'][_0x4258d1(0x348)+_0x4258d1(0x103f)+_0x4258d1(0xc6d)+_0x4258d1(0x6df)]=function(){const _0x3e7e2f=_0x4258d1;this[_0x3e7e2f(0x810)+_0x3e7e2f(0x234)]=undefined;},Game_Temp[_0x4258d1(0xf38)][_0x4258d1(0xde1)+_0x4258d1(0x103f)+_0x4258d1(0xc6d)+_0x4258d1(0x6df)]=function(_0x3d71ca){const _0x24fbd4=_0x4258d1,_0x4dffa9={'KLIji':function(_0x59aa38,_0x3f4848){return _0x59aa38&&_0x3f4848;}};_0x4dffa9[_0x24fbd4(0x13cb)]($gameMap,$dataMap)&&$dataMap[_0x24fbd4(0x278)]&&this[_0x24fbd4(0x1194)+'dGameTroop'+_0x24fbd4(0xc6d)+_0x24fbd4(0x6df)]($dataMap[_0x24fbd4(0x278)]);const _0x276599=$dataTroops[_0x3d71ca];if(_0x276599){let _0x4c71b7=DataManager['createTroo'+'pNote'](_0x276599['id']);this[_0x24fbd4(0x1194)+_0x24fbd4(0x103f)+_0x24fbd4(0xc6d)+_0x24fbd4(0x6df)](_0x4c71b7);}},Game_Temp['prototype'][_0x4258d1(0x1194)+'dGameTroop'+'SettingsBa'+_0x4258d1(0x6df)]=function(_0x4f625b){const _0x2a4178=_0x4258d1,_0x2eba86={'WOmiZ':function(_0x4dc8ab,_0x7ab64a){return _0x4dc8ab(_0x7ab64a);},'HggEC':_0x2a4178(0x1601),'bNekO':_0x2a4178(0x7fe),'ZMiHP':_0x2a4178(0x14b6),'GtmPC':'border','zzydh':'sideview_u'+'i','LsKES':_0x2a4178(0x93d)+'ui'};if(!_0x4f625b)return;if(_0x4f625b['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x5e9c65=_0x2eba86[_0x2a4178(0xee1)](String,RegExp['$1']);if(_0x5e9c65[_0x2a4178(0x79c)](/DEFAULT/i))this['_forcedBat'+_0x2a4178(0x234)]=_0x2eba86['HggEC'];else{if(_0x5e9c65[_0x2a4178(0x79c)](/LIST/i))this[_0x2a4178(0x810)+'tleLayout']=_0x2eba86[_0x2a4178(0xca1)];else{if(_0x5e9c65[_0x2a4178(0x79c)](/XP/i))this[_0x2a4178(0x810)+_0x2a4178(0x234)]='xp';else{if(_0x5e9c65['match'](/PORTRAIT/i))this[_0x2a4178(0x810)+_0x2a4178(0x234)]=_0x2eba86['ZMiHP'];else{if(_0x5e9c65['match'](/BORDER/i))this[_0x2a4178(0x810)+'tleLayout']=_0x2eba86[_0x2a4178(0xfd0)];else{if(_0x5e9c65['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0x2a4178(0x19e)+_0x2a4178(0xe21)+'tleUI']?this[_0x2a4178(0x810)+_0x2a4178(0x234)]=_0x2eba86['zzydh']:this[_0x2a4178(0x810)+_0x2a4178(0x234)]=_0x2eba86['HggEC'];else _0x5e9c65['match'](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x2a4178(0x6db)+'rontviewBa'+'ttleUI']?this[_0x2a4178(0x810)+'tleLayout']=_0x2eba86[_0x2a4178(0xad1)]:this['_forcedBat'+_0x2a4178(0x234)]=_0x2eba86[_0x2a4178(0x5a6)]);}}}}}}},VisuMZ[_0x4258d1(0x337)]['Game_Temp_'+_0x4258d1(0x57a)+_0x4258d1(0x1510)]=Game_Temp[_0x4258d1(0xf38)][_0x4258d1(0x57a)+_0x4258d1(0x1510)],Game_Temp[_0x4258d1(0xf38)][_0x4258d1(0x57a)+_0x4258d1(0x1510)]=function(_0x5a87b2,_0x492acd){const _0x2e576b=_0x4258d1;SceneManager[_0x2e576b(0x614)+_0x2e576b(0x6e5)]()?this[_0x2e576b(0x3d2)+_0x2e576b(0x493)](_0x5a87b2,_0x492acd):VisuMZ[_0x2e576b(0x337)]['Game_Temp_'+_0x2e576b(0x57a)+_0x2e576b(0x1510)][_0x2e576b(0xb14)](this,_0x5a87b2,_0x492acd);},Game_Temp[_0x4258d1(0xf38)][_0x4258d1(0x3d2)+'tleBalloon']=function(_0x2b68ab,_0x20a9e9){const _0x5ab02e=_0x4258d1,_0x458a34={'target':_0x2b68ab,'balloonId':_0x20a9e9};this[_0x5ab02e(0xa75)+_0x5ab02e(0x111e)]=this[_0x5ab02e(0xa75)+'loonQueue']||[],this['_battleBal'+'loonQueue'][_0x5ab02e(0x88f)](_0x458a34);},Game_Temp[_0x4258d1(0xf38)][_0x4258d1(0xf65)+'ttleBalloo'+'n']=function(){const _0x4ebd8b=_0x4258d1;return this[_0x4ebd8b(0xa75)+'loonQueue']=this['_battleBal'+'loonQueue']||[],this[_0x4ebd8b(0xa75)+_0x4ebd8b(0x111e)][_0x4ebd8b(0xa6f)]();},Game_Temp[_0x4258d1(0xf38)]['clearBattl'+_0x4258d1(0x690)]=function(){const _0x3c9e24=_0x4258d1;this[_0x3c9e24(0xa75)+'loonQueue']=[];},Spriteset_Battle['prototype'][_0x4258d1(0x1363)+_0x4258d1(0xb70)]=function(){const _0x5c9c0d=_0x4258d1,_0xf40de9={'Cdkeo':function(_0x1980db,_0x11688c){return _0x1980db===_0x11688c;}};_0xf40de9[_0x5c9c0d(0xf4a)](this[_0x5c9c0d(0xa75)+_0x5c9c0d(0x931)+'s'],undefined)&&(this[_0x5c9c0d(0xa75)+'loonSprite'+'s']=[]);for(const _0x583a8a of this['_battleBal'+_0x5c9c0d(0x931)+'s']){!_0x583a8a[_0x5c9c0d(0xead)]()&&this[_0x5c9c0d(0x14c7)+'leBalloon'](_0x583a8a);}this[_0x5c9c0d(0x1fc)+_0x5c9c0d(0x493)+_0x5c9c0d(0x102f)]();},Spriteset_Battle[_0x4258d1(0xf38)]['processBat'+'tleBalloon'+'Requests']=function(){const _0x52f315=_0x4258d1;for(;;){const _0x40365b=$gameTemp[_0x52f315(0xf65)+_0x52f315(0xfc3)+'n']();if(_0x40365b)this['createBatt'+'leBalloon'](_0x40365b);else break;}},Spriteset_Battle['prototype'][_0x4258d1(0xa05)+_0x4258d1(0xd28)]=function(_0x2a9c16){const _0x2e9fed=_0x4258d1,_0x49ebc0=this[_0x2e9fed(0x108e)+'Sprite'](_0x2a9c16[_0x2e9fed(0x15a6)]);if(_0x49ebc0){let _0x48abcd=null;Imported[_0x2e9fed(0xe12)+_0x2e9fed(0xf1f)+'s']&&Array['isArray'](_0x2a9c16[_0x2e9fed(0x6ec)])?_0x48abcd=new Sprite_IconBalloon():_0x48abcd=new Sprite_Balloon(),_0x48abcd['targetObje'+'ct']=_0x2a9c16[_0x2e9fed(0x15a6)],_0x48abcd['_target']=_0x49ebc0,_0x48abcd[_0x2e9fed(0xdef)][_0x2e9fed(0x1d7)]=_0x49ebc0,_0x48abcd['setup'](_0x49ebc0,_0x2a9c16[_0x2e9fed(0x6ec)]),BattleManager[_0x2e9fed(0x1593)+_0x2e9fed(0x2ad)+'r'](_0x48abcd),this[_0x2e9fed(0xa75)+_0x2e9fed(0x931)+'s'][_0x2e9fed(0x88f)](_0x48abcd);}},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x14c7)+_0x4258d1(0xd28)]=function(_0x375034){const _0x236548=_0x4258d1;this['_battleBal'+'loonSprite'+'s'][_0x236548(0x1113)](_0x375034),BattleManager['removeChil'+_0x236548(0xd1e)+_0x236548(0x1579)](_0x375034),_0x375034[_0x236548(0x7dd)]();},Sprite_Battler[_0x4258d1(0xf38)]['setBalloon'+'Pose']=function(_0x393e93,_0x536a1b){},Sprite_Battler['prototype'][_0x4258d1(0x1674)+'8dir']=function(){return![];},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x657)+_0x4258d1(0x1441)+_0x4258d1(0x1571)]=function(){const _0x522b02=_0x4258d1,_0x281d1b={'hShil':function(_0x2329a6,_0x3257b0){return _0x2329a6>_0x3257b0;}};return this[_0x522b02(0xa75)+_0x522b02(0x931)+'s']=this[_0x522b02(0xa75)+_0x522b02(0x931)+'s']||[],_0x281d1b['hShil'](this[_0x522b02(0xa75)+'loonSprite'+'s'][_0x522b02(0x1645)],-0x2345*0x1+-0x1*-0x1bd9+0x76c);},VisuMZ[_0x4258d1(0x337)]['Game_Syste'+_0x4258d1(0x2bd)+'ze']=Game_System[_0x4258d1(0xf38)]['initialize'],Game_System['prototype'][_0x4258d1(0xca3)]=function(){const _0x5a91c8=_0x4258d1;VisuMZ['BattleCore'][_0x5a91c8(0x302)+_0x5a91c8(0x2bd)+'ze']['call'](this),this[_0x5a91c8(0x1495)+_0x5a91c8(0x5b8)]();},Game_System['prototype'][_0x4258d1(0x1495)+_0x4258d1(0x5b8)]=function(){const _0xd4b10f=_0x4258d1;this['_defeatedE'+'nemies']=this[_0xd4b10f(0x270)+'nemies']||[];},Game_System[_0x4258d1(0xf38)][_0x4258d1(0x12c9)+_0x4258d1(0x872)]=function(){const _0x515add=_0x4258d1,_0x186976={'TnZZS':function(_0x58e926,_0x1f118d){return _0x58e926===_0x1f118d;}};if(_0x186976[_0x515add(0x152d)](this['_defeatedE'+_0x515add(0x1681)],undefined))this['initBattle'+'Core']();return this['_defeatedE'+_0x515add(0x1681)];},Game_System['prototype']['registerDe'+'featedEnem'+'y']=function(_0x1c8093){const _0x25485d=_0x4258d1,_0xbd086f={'VqFOg':_0x25485d(0x8f9),'yBYVo':function(_0x1c8713,_0x42660f){return _0x1c8713===_0x42660f;}},_0x558c2c=_0xbd086f[_0x25485d(0x1215)][_0x25485d(0xba9)]('|');let _0x5e9b2d=-0x1*0x1f2b+0x4*-0x8aa+0x41d3;while(!![]){switch(_0x558c2c[_0x5e9b2d++]){case'0':if(this[_0x25485d(0x270)+_0x25485d(0x1681)][_0x25485d(0x163f)](_0x1c8093))return;continue;case'1':this['_defeatedE'+_0x25485d(0x1681)][_0x25485d(0x13fe)]((_0x3b58a5,_0x9f1c90)=>_0x3b58a5-_0x9f1c90);continue;case'2':this['_defeatedE'+_0x25485d(0x1681)]['push'](_0x1c8093);continue;case'3':if(_0xbd086f[_0x25485d(0x487)](this['_defeatedE'+_0x25485d(0x1681)],undefined))this[_0x25485d(0x1495)+_0x25485d(0x5b8)]();continue;case'4':if(!_0x1c8093)return;continue;}break;}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x3d4)+_0x4258d1(0x7e3)+'NewState']=Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x4d0)+'e'],Game_BattlerBase['prototype'][_0x4258d1(0x4d0)+'e']=function(_0x37b902){const _0x2398ed=_0x4258d1,_0x19829={'aSyLp':function(_0x57572e,_0x1bc1d0){return _0x57572e!==_0x1bc1d0;}},_0x332f1a=this['isAlive'](),_0x5b0b75=this[_0x2398ed(0xd26)+_0x2398ed(0xa81)]();VisuMZ['BattleCore']['Game_Battl'+_0x2398ed(0x7e3)+_0x2398ed(0x112f)][_0x2398ed(0xb14)](this,_0x37b902),this[_0x2398ed(0xaf5)]()&&_0x332f1a&&this['isDead']()&&(this['_visualHpG'+_0x2398ed(0x150e)+_0x2398ed(0x5b4)]=!this[_0x2398ed(0x748)+'eatedBefor'+'e'](),$gameSystem[_0x2398ed(0x269)+_0x2398ed(0xa56)+'y'](this[_0x2398ed(0x990)]())),SceneManager[_0x2398ed(0x614)+'tle']()&&_0x19829['aSyLp'](_0x5b0b75,this[_0x2398ed(0xd26)+_0x2398ed(0xa81)]())&&(this['battler']()&&this[_0x2398ed(0xc06)]()[_0x2398ed(0x885)+_0x2398ed(0x1485)]());},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x748)+_0x4258d1(0x38c)+'e']=function(){const _0x42c5b0=_0x4258d1;return $gameSystem[_0x42c5b0(0x12c9)+_0x42c5b0(0x872)]()[_0x42c5b0(0x163f)](this['_enemyId']);},VisuMZ['BattleCore'][_0x4258d1(0x3d4)+'erBase_era'+_0x4258d1(0xa0b)]=Game_BattlerBase[_0x4258d1(0xf38)]['eraseState'],Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x692)]=function(_0x2e90d7){const _0x34d87f=_0x4258d1,_0x2163ca={'Wdalw':function(_0x57be30,_0x3ace4b){return _0x57be30===_0x3ace4b;}};VisuMZ[_0x34d87f(0x337)][_0x34d87f(0x3d4)+_0x34d87f(0x9bf)+_0x34d87f(0xa0b)][_0x34d87f(0xb14)](this,_0x2e90d7),this['isEnemy']()&&_0x2163ca[_0x34d87f(0x3e5)](_0x2e90d7,this[_0x34d87f(0x10da)+'Id']())&&this[_0x34d87f(0x266)]()&&(this[_0x34d87f(0x11ca)+_0x34d87f(0x150e)+'ied']=![]),!this[_0x34d87f(0x6e2)]&&!this['_tempBattl'+'er']&&SceneManager['isSceneBat'+_0x34d87f(0x6e5)]()&&this[_0x34d87f(0x759)+_0x34d87f(0x51e)]();},VisuMZ[_0x4258d1(0x337)]['Game_Actio'+_0x4258d1(0x55d)]=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x11c1)],Game_Action['prototype'][_0x4258d1(0x11c1)]=function(){const _0x20fb18=_0x4258d1,_0x48730c={'YByIU':_0x20fb18(0x708),'LPmgK':_0x20fb18(0x1601)},_0x3c4e83=_0x48730c['YByIU'][_0x20fb18(0xba9)]('|');let _0x281bd4=0x102b+-0x2245*-0x1+-0x3270;while(!![]){switch(_0x3c4e83[_0x281bd4++]){case'0':this[_0x20fb18(0x15c7)+'rs']={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0};continue;case'1':this[_0x20fb18(0xaf4)+'ageFormula']=_0x48730c[_0x20fb18(0x5f0)];continue;case'2':VisuMZ[_0x20fb18(0x337)][_0x20fb18(0xbb8)+_0x20fb18(0x55d)][_0x20fb18(0xb14)](this);continue;case'3':this['_armorPene'+_0x20fb18(0x896)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0};continue;case'4':this[_0x20fb18(0xf3a)+_0x20fb18(0x21d)+'y']();continue;}break;}},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0xf3a)+_0x4258d1(0x21d)+'y']=function(){const _0xb4d3b2=_0x4258d1;this[_0xb4d3b2(0x518)+'tlerKey']='';},VisuMZ[_0x4258d1(0x337)]['Game_Actio'+_0x4258d1(0x1067)+'ct']=Game_Action[_0x4258d1(0xf38)]['setSubject'],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x103b)]=function(_0x151fbe){const _0xb58db2=_0x4258d1;VisuMZ[_0xb58db2(0x337)][_0xb58db2(0xbb8)+_0xb58db2(0x1067)+'ct'][_0xb58db2(0xb14)](this,_0x151fbe),this[_0xb58db2(0xf3a)+_0xb58db2(0x21d)+'y']();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbb8)+_0x4258d1(0x4cc)]=Game_Action['prototype'][_0x4258d1(0x37f)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x37f)]=function(_0x5c8349){const _0x2b93c2=_0x4258d1;VisuMZ[_0x2b93c2(0x337)][_0x2b93c2(0xbb8)+'n_setSkill'][_0x2b93c2(0xb14)](this,_0x5c8349),this[_0x2b93c2(0xf3a)+_0x2b93c2(0x21d)+'y']();},VisuMZ['BattleCore']['Game_Actio'+'n_setItem']=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x10d4)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x10d4)]=function(_0x56282e){const _0x1ab5b2=_0x4258d1;VisuMZ[_0x1ab5b2(0x337)][_0x1ab5b2(0xbb8)+'n_setItem']['call'](this,_0x56282e),this[_0x1ab5b2(0xf3a)+'tBattlerKe'+'y']();},Game_Action[_0x4258d1(0xf38)]['makeDamage'+_0x4258d1(0x865)]=function(_0x5865b7,_0x18aea2){const _0x195b21=_0x4258d1;return VisuMZ[_0x195b21(0x337)][_0x195b21(0x424)][_0x195b21(0x1683)][_0x195b21(0xc22)+'mulaJS'][_0x195b21(0xb14)](this,_0x5865b7,_0x18aea2);},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x7ee)+_0x4258d1(0x13f3)]=function(_0x325a20,_0x26ae0f){const _0x57d58d=_0x4258d1;return VisuMZ[_0x57d58d(0x337)][_0x57d58d(0x424)][_0x57d58d(0x1683)]['VarianceFo'+_0x57d58d(0x1469)][_0x57d58d(0xb14)](this,_0x325a20,_0x26ae0f);},Game_Action['prototype'][_0x4258d1(0x1532)]=function(_0x3fca15,_0x53b2f3){const _0x14a634=_0x4258d1;return VisuMZ[_0x14a634(0x337)][_0x14a634(0x424)]['Damage']['GuardFormu'+'laJS'][_0x14a634(0xb14)](this,_0x3fca15,_0x53b2f3);},VisuMZ['BattleCore'][_0x4258d1(0xbb8)+_0x4258d1(0x84a)]=Game_Action[_0x4258d1(0xf38)]['itemHit'],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0xea7)]=function(_0x106ad6){const _0xfd998=_0x4258d1,_0x5939e1={'UstqM':function(_0x2eb72d,_0x5a5e40){return _0x2eb72d/_0x5a5e40;},'LNPDh':function(_0xff2e9c,_0x347f6c){return _0xff2e9c(_0x347f6c);},'jzrOx':function(_0x5c69d9,_0x2eb3e2){return _0x5c69d9+_0x2eb3e2;},'sNfNR':function(_0x5e4588,_0x1b3832){return _0x5e4588*_0x1b3832;}},_0xfe02a6=this[_0xfd998(0x780)]()[_0xfd998(0x278)];if(_0xfe02a6[_0xfd998(0x79c)](/<ALWAYS HIT>/i))return 0xf9e*-0x1+0x1b2f*-0x1+-0x2*-0x1567;else{if(_0xfe02a6[_0xfd998(0x79c)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return _0x5939e1[_0xfd998(0x546)](_0x5939e1[_0xfd998(0x9e7)](Number,RegExp['$1']),0x1139+0xc70+-0x1d45);else{let _0x282122=VisuMZ[_0xfd998(0x337)][_0xfd998(0xbb8)+_0xfd998(0x84a)][_0xfd998(0xb14)](this,_0x106ad6);return _0x282122=_0x5939e1[_0xfd998(0x6bc)](_0x5939e1[_0xfd998(0x134f)](this[_0xfd998(0x15c7)+'rs'][_0xfd998(0xa14)],_0x282122),this[_0xfd998(0x15c7)+'rs'][_0xfd998(0x13fc)]),$gameParty[_0xfd998(0x917)]()&&(_0x282122=this['applyBattl'+_0xfd998(0x1342)+_0xfd998(0xd9c)](_0x282122,_0x106ad6)),_0x282122;}}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbb8)+'n_updateLa'+'stTarget']=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x12fc)+_0x4258d1(0x3ce)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x12fc)+'Target']=function(_0x514cbf){const _0x3e0c46=_0x4258d1;this[_0x3e0c46(0xf85)+'plyBattleC'+_0x3e0c46(0x760)+'JS']=!![],VisuMZ[_0x3e0c46(0x337)]['Game_Actio'+_0x3e0c46(0xf4f)+_0x3e0c46(0xc52)][_0x3e0c46(0xb14)](this,_0x514cbf),this[_0x3e0c46(0xf85)+_0x3e0c46(0xc64)+'oreHitRate'+'JS']=undefined;},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0xcbc)+_0x4258d1(0x647)+'es']=function(_0x2c67e1){const _0xc0c636=_0x4258d1,_0x8af0d2={'DmjNI':'0|1|7|3|6|'+'2|4|5'},_0x20e66a=_0x8af0d2[_0xc0c636(0x2ba)][_0xc0c636(0xba9)]('|');let _0x31c089=0x1e13*0x1+-0x1*0x183+-0x4*0x724;while(!![]){switch(_0x20e66a[_0x31c089++]){case'0':window[_0xc0c636(0xc30)]=this;continue;case'1':window['a']=this[_0xc0c636(0x8e9)]();continue;case'2':window[_0xc0c636(0x18e)]=this['item']();continue;case'3':window[_0xc0c636(0x165c)]=this[_0xc0c636(0x8e9)]();continue;case'4':window[_0xc0c636(0x90d)]=this[_0xc0c636(0x780)]();continue;case'5':window[_0xc0c636(0x780)]=this['item']();continue;case'6':window[_0xc0c636(0x15a6)]=_0x2c67e1;continue;case'7':window['b']=_0x2c67e1;continue;}break;}},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x636)+'lVariables']=function(_0x25016f){const _0x526c82=_0x4258d1,_0x3944f3={'hIhns':_0x526c82(0xafc)+_0x526c82(0xb15)},_0x467078=_0x3944f3[_0x526c82(0x6a5)][_0x526c82(0xba9)]('|');let _0x4db701=-0xc10+-0x1fcb+0x2bdb;while(!![]){switch(_0x467078[_0x4db701++]){case'0':window['b']=undefined;continue;case'1':window['a']=undefined;continue;case'2':window[_0x526c82(0x18e)]=undefined;continue;case'3':window['target']=undefined;continue;case'4':window[_0x526c82(0xc30)]=undefined;continue;case'5':window['user']=undefined;continue;case'6':window['skill']=undefined;continue;case'7':window['item']=undefined;continue;}break;}},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0xdd3)+_0x4258d1(0x1342)+_0x4258d1(0xd9c)]=function(_0x53921c,_0x570543){const _0x470fe5=_0x4258d1,_0x570293={'BONvZ':'jsAccuracy','cEnit':'jsAccuracy'+_0x470fe5(0xa46),'FQRRH':_0x470fe5(0x5b5)+'AsTarget'};if(this[_0x470fe5(0xf85)+'plyBattleC'+_0x470fe5(0x760)+'JS'])return _0x53921c;this[_0x470fe5(0xcbc)+_0x470fe5(0x647)+'es'](_0x570543);if(this[_0x470fe5(0x780)]()){let _0x1dc21f=VisuMZ[_0x470fe5(0x337)][_0x470fe5(0x66d)+'S'](this[_0x470fe5(0x780)](),_0x570293['BONvZ']);VisuMZ[_0x470fe5(0x337)]['JS'][_0x1dc21f]&&(_0x53921c=VisuMZ['BattleCore']['JS'][_0x1dc21f]['call'](this,this[_0x470fe5(0x8e9)](),_0x570543,this['item'](),_0x53921c));}for(const _0x4d6650 of this[_0x470fe5(0x8e9)]()[_0x470fe5(0x522)+'ts']()){if(!_0x4d6650)continue;key=VisuMZ[_0x470fe5(0x337)][_0x470fe5(0x66d)+'S'](_0x4d6650,_0x570293[_0x470fe5(0x1290)]),VisuMZ['BattleCore']['JS'][key]&&(_0x53921c=VisuMZ[_0x470fe5(0x337)]['JS'][key][_0x470fe5(0xb14)](this,this[_0x470fe5(0x8e9)](),_0x570543,this[_0x470fe5(0x780)](),_0x53921c));}for(const _0x273b93 of _0x570543[_0x470fe5(0x522)+'ts']()){if(!_0x273b93)continue;key=VisuMZ[_0x470fe5(0x337)][_0x470fe5(0x66d)+'S'](_0x273b93,_0x570293[_0x470fe5(0x28c)]),VisuMZ[_0x470fe5(0x337)]['JS'][key]&&(_0x53921c=VisuMZ[_0x470fe5(0x337)]['JS'][key]['call'](this,this['subject'](),_0x570543,this[_0x470fe5(0x780)](),_0x53921c));}return this[_0x470fe5(0x636)+_0x470fe5(0x12aa)](_0x570543),_0x53921c;},Game_Action[_0x4258d1(0xf38)]['itemCri']=function(_0x443562){const _0x55a838=_0x4258d1,_0x3b722c={'kXEWy':function(_0x2754a4,_0x5aab09){return _0x2754a4+_0x5aab09;},'fqtKj':function(_0x4dc90f,_0x4635a5){return _0x4dc90f*_0x4635a5;}};if(!this[_0x55a838(0x780)]()['damage'][_0x55a838(0x900)])return 0xac*-0xc+-0x1136+0xca3*0x2;let _0x85d819=VisuMZ['BattleCore'][_0x55a838(0x424)][_0x55a838(0x1683)][_0x55a838(0x538)+'tRateJS']['call'](this,_0x443562);return _0x85d819=_0x3b722c[_0x55a838(0x9a8)](_0x3b722c['fqtKj'](this[_0x55a838(0x15c7)+'rs']['criticalHi'+_0x55a838(0x574)],_0x85d819),this[_0x55a838(0x15c7)+'rs'][_0x55a838(0x1520)+_0x55a838(0x1409)]),$gameParty[_0x55a838(0x917)]()&&(_0x85d819=this[_0x55a838(0xdd3)+'eCoreCriti'+_0x55a838(0x10bb)+'JS'](_0x85d819,_0x443562)),_0x85d819;},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0xdd3)+'eCoreCriti'+_0x4258d1(0x10bb)+'JS']=function(_0x33a10a,_0x2f861e){const _0x3e7929=_0x4258d1,_0x28ea76={'qXcPL':function(_0x214353,_0x5e4f96){return _0x214353(_0x5e4f96);},'PFTvZ':function(_0x38bf87,_0x2a4c8a){return _0x38bf87(_0x2a4c8a);}};this['declareGlo'+_0x3e7929(0x647)+'es'](_0x2f861e),window[_0x3e7929(0xfd2)]=_0x33a10a;{const _0x2b48fd=this[_0x3e7929(0x8e9)]()[_0x3e7929(0x522)+'ts']();for(const _0x31e94f of _0x2b48fd){if(!_0x31e94f)continue;if(_0x31e94f['note'][_0x3e7929(0x79c)](/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i)){const _0x509a2e=_0x28ea76[_0x3e7929(0x13b8)](String,RegExp['$1']);try{_0x28ea76[_0x3e7929(0x13b8)](eval,_0x509a2e);}catch(_0x51e006){if($gameTemp[_0x3e7929(0x555)]())console[_0x3e7929(0xeb7)](_0x51e006);}}}}{const _0x18bb70=_0x2f861e['traitObjec'+'ts']();for(const _0x3e6c9f of _0x18bb70){if(!_0x3e6c9f)continue;if(_0x3e6c9f[_0x3e7929(0x278)][_0x3e7929(0x79c)](/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i)){const _0x4cde5f=_0x28ea76[_0x3e7929(0x515)](String,RegExp['$1']);try{_0x28ea76[_0x3e7929(0x515)](eval,_0x4cde5f);}catch(_0x23e282){if($gameTemp[_0x3e7929(0x555)]())console[_0x3e7929(0xeb7)](_0x23e282);}}}}return _0x33a10a=window[_0x3e7929(0xfd2)],this['clearGloba'+_0x3e7929(0x12aa)](_0x2f861e),_0x33a10a;},Game_Action['prototype'][_0x4258d1(0xdd3)+_0x4258d1(0x84f)+_0x4258d1(0x10bb)+'JS']=function(_0x55ca49,_0x515b8a){const _0x1e3feb=_0x4258d1,_0x404b0d={'tyxdY':'jsCritRate'+'AsUser','ruBeo':'jsCritRate'+_0x1e3feb(0x874)};this[_0x1e3feb(0xcbc)+'balVariabl'+'es'](_0x515b8a);for(const _0x13dca8 of this[_0x1e3feb(0x8e9)]()[_0x1e3feb(0x522)+'ts']()){if(!_0x13dca8)continue;key=VisuMZ[_0x1e3feb(0x337)][_0x1e3feb(0x66d)+'S'](_0x13dca8,_0x404b0d[_0x1e3feb(0x2ab)]),VisuMZ['BattleCore']['JS'][key]&&(_0x55ca49=VisuMZ['BattleCore']['JS'][key][_0x1e3feb(0xb14)](this,this['subject'](),_0x515b8a,this[_0x1e3feb(0x780)](),_0x55ca49));}for(const _0x1950d0 of _0x515b8a['traitObjec'+'ts']()){if(!_0x1950d0)continue;key=VisuMZ[_0x1e3feb(0x337)][_0x1e3feb(0x66d)+'S'](_0x1950d0,_0x404b0d[_0x1e3feb(0xfef)]),VisuMZ[_0x1e3feb(0x337)]['JS'][key]&&(_0x55ca49=VisuMZ[_0x1e3feb(0x337)]['JS'][key]['call'](this,this[_0x1e3feb(0x8e9)](),_0x515b8a,this[_0x1e3feb(0x780)](),_0x55ca49));}return this[_0x1e3feb(0x636)+_0x1e3feb(0x12aa)](_0x515b8a),_0x55ca49;},Game_Action[_0x4258d1(0xf38)]['applyCriti'+_0x4258d1(0x10f6)]=function(_0x116f8b){const _0x18c002=_0x4258d1,_0x173af4={'myfML':function(_0x6a8145,_0x469e95){return _0x6a8145+_0x469e95;},'PFjqP':function(_0x7090c2,_0x30295f){return _0x7090c2*_0x30295f;}};return _0x116f8b=VisuMZ[_0x18c002(0x337)][_0x18c002(0x424)]['Damage'][_0x18c002(0x538)+_0x18c002(0x4f1)+'r']['call'](this,_0x116f8b),_0x116f8b=_0x173af4[_0x18c002(0x70f)](_0x173af4['PFjqP'](this[_0x18c002(0x15c7)+'rs']['criticalDm'+_0x18c002(0x11fd)],_0x116f8b),this[_0x18c002(0x15c7)+'rs'][_0x18c002(0x10fa)+_0x18c002(0x9d9)]),_0x116f8b;},VisuMZ['BattleCore'][_0x4258d1(0xbb8)+_0x4258d1(0x932)+'geFormula']=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x10d5)+_0x4258d1(0xb7e)],Game_Action[_0x4258d1(0xf38)]['evalDamage'+'Formula']=function(_0x4d9db5){const _0x4330e2=_0x4258d1,_0x6e769b={'Ibkqp':function(_0x469f20,_0x1155f7){return _0x469f20!==_0x1155f7;},'JdPoO':'default','YIUmS':function(_0x52263c,_0x262df6){return _0x52263c===_0x262df6;},'QYAMq':_0x4330e2(0xb2f)};if(_0x6e769b[_0x4330e2(0x35e)](this[_0x4330e2(0xaf4)+_0x4330e2(0x1206)],_0x6e769b[_0x4330e2(0x508)]))return this[_0x4330e2(0x99c)+_0x4330e2(0x11f6)](_0x4d9db5);else return _0x6e769b[_0x4330e2(0xf0e)](DataManager[_0x4330e2(0x8a7)+_0x4330e2(0xda6)](this['item']()),_0x6e769b['QYAMq'])?VisuMZ[_0x4330e2(0x337)][_0x4330e2(0xbb8)+_0x4330e2(0x932)+'geFormula'][_0x4330e2(0xb14)](this,_0x4d9db5):this[_0x4330e2(0x10d5)+'FormulaBat'+'tleCore'](_0x4d9db5);},Game_Action[_0x4258d1(0xf38)]['setCustomD'+_0x4258d1(0x1379)+'la']=function(_0x3c3ad1){const _0x1e62ec=_0x4258d1;this['_customDam'+_0x1e62ec(0x1206)]=_0x3c3ad1;},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x99c)+'geFormula']=function(_0x7fcd9d){const _0x4083cd=_0x4258d1,_0x3d4a55=this[_0x4083cd(0x780)](),_0x310389=_0x3d4a55[_0x4083cd(0xbc0)][_0x4083cd(0x1442)];_0x3d4a55['damage'][_0x4083cd(0x1442)]=this['_customDam'+_0x4083cd(0x1206)];let _0x578011=VisuMZ[_0x4083cd(0x337)][_0x4083cd(0xbb8)+_0x4083cd(0x932)+_0x4083cd(0x11f6)][_0x4083cd(0xb14)](this,_0x7fcd9d);return _0x3d4a55['damage']['formula']=_0x310389,_0x578011;},Game_Action['prototype'][_0x4258d1(0x273)+'e']=function(){const _0x519be1=_0x4258d1,_0x2c55fe={'eTHIT':function(_0xb24f7b,_0xc69e99){return _0xb24f7b(_0xc69e99);},'WhFwq':'MANUAL'};if(this[_0x519be1(0x780)]()[_0x519be1(0x278)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x23c383=_0x2c55fe[_0x519be1(0xf2f)](String,RegExp['$1'])['toUpperCas'+'e']()[_0x519be1(0xbb6)]();return _0x23c383;}return _0x2c55fe['WhFwq'];},Game_Action['prototype'][_0x4258d1(0x10d5)+_0x4258d1(0x4cb)+'tleCore']=function(_0x441244){const _0x15e173=_0x4258d1,_0x4e4416=DataManager[_0x15e173(0x8a7)+'tyle'](this['item']()),_0xee52fb=VisuMZ[_0x15e173(0x16b9)+'es'][_0x4e4416];try{return _0xee52fb[_0x15e173(0xb7e)][_0x15e173(0xb14)](this,_0x441244);}catch(_0xda17c0){if($gameTemp[_0x15e173(0x555)]())console['log'](_0xda17c0);return VisuMZ[_0x15e173(0x337)][_0x15e173(0xbb8)+'n_evalDama'+_0x15e173(0x11f6)][_0x15e173(0xb14)](this);}},Game_Action['prototype']['applyArmor'+'Modifiers']=function(_0x4cfbcf,_0x43146a){const _0x534e24=_0x4258d1,_0x7b68b={'CAUgN':function(_0x2839f7,_0x4bb415){return _0x2839f7(_0x4bb415);},'rLfWY':function(_0x431741,_0x158a8d){return _0x431741>_0x158a8d;}};if(this[_0x534e24(0x1023)+'it']())return _0x43146a;const _0x41debe=this['subject'](),_0x5499e9=_0x4cfbcf;let _0x39c552=[],_0x545933=[];_0x39c552[_0x534e24(0x88f)](this[_0x534e24(0x1182)+_0x534e24(0x896)][_0x534e24(0x125e)],this[_0x534e24(0x1182)+_0x534e24(0x896)][_0x534e24(0x1570)]),_0x545933[_0x534e24(0x88f)](this[_0x534e24(0x1182)+_0x534e24(0x896)][_0x534e24(0x135c)],this[_0x534e24(0x1182)+_0x534e24(0x896)]['arRedRate']);const _0x4bb297=this[_0x534e24(0xd04)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x5d078d=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x1695a8=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x2ab50c=this[_0x534e24(0xd04)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x39c552=_0x39c552[_0x534e24(0x121f)](_0x5499e9['traitObjec'+'ts']()[_0x534e24(0x15f9)](_0x1cc481=>_0x1cc481&&_0x1cc481[_0x534e24(0x278)][_0x534e24(0x79c)](_0x4bb297)?Number(RegExp['$1']):0x5f*0x4f+0x3*0x388+-0x27e9)),_0x545933=_0x545933['concat'](_0x5499e9[_0x534e24(0x522)+'ts']()[_0x534e24(0x15f9)](_0x3b342f=>_0x3b342f&&_0x3b342f[_0x534e24(0x278)]['match'](_0x5d078d)?Number(RegExp['$1'])/(0x1b65+0x1a8b+-0x358c):0x15b9+-0x13e3+-0x1d6)),_0x39c552=_0x39c552[_0x534e24(0x121f)](_0x41debe[_0x534e24(0x522)+'ts']()['map'](_0x12cd9b=>_0x12cd9b&&_0x12cd9b['note'][_0x534e24(0x79c)](_0x1695a8)?Number(RegExp['$1']):-0x1e0c+0x1*-0x6fb+0x2507)),_0x545933=_0x545933[_0x534e24(0x121f)](_0x41debe[_0x534e24(0x522)+'ts']()[_0x534e24(0x15f9)](_0x4db44c=>_0x4db44c&&_0x4db44c[_0x534e24(0x278)][_0x534e24(0x79c)](_0x2ab50c)?Number(RegExp['$1'])/(0xb2e+0x25c*0x10+-0x308a):0x21f+-0x7*-0x3eb+-0x763*0x4)),this[_0x534e24(0x780)]()[_0x534e24(0x278)]['match'](_0x1695a8)&&_0x39c552[_0x534e24(0x88f)](_0x7b68b[_0x534e24(0x639)](Number,RegExp['$1'])),this['item']()[_0x534e24(0x278)]['match'](_0x2ab50c)&&_0x545933['push'](_0x7b68b['CAUgN'](Number,RegExp['$1'])),_0x43146a=_0x39c552[_0x534e24(0x145e)]((_0x198af5,_0x21a9e9)=>_0x198af5-_0x21a9e9,_0x43146a),_0x7b68b[_0x534e24(0xc4d)](_0x43146a,0x4*0x57d+-0xd62*-0x1+-0x2356)&&(_0x43146a=_0x545933[_0x534e24(0x145e)]((_0x5eca91,_0x411418)=>_0x5eca91*(0x2406*-0x1+-0x13*0x17b+0x4028-_0x411418),_0x43146a)),_0x43146a;},VisuMZ['BattleCore']['Game_Actio'+_0x4258d1(0x14f7)+_0x4258d1(0xd5f)]=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x81c)+_0x4258d1(0xdda)],Game_Action['prototype'][_0x4258d1(0x81c)+'age']=function(_0x2e5338,_0x4d7fa3){const _0x2629e0=_0x4258d1,_0x3d9a48={'EKdLq':_0x2629e0(0x420)+_0x2629e0(0x109a),'uEbYa':function(_0x3463dc,_0x3a627e){return _0x3463dc*_0x3a627e;},'gcpGX':function(_0x2b0bda,_0x1d4646){return _0x2b0bda>=_0x1d4646;},'ocoRU':'PostDamage'+_0x2629e0(0x224),'mWWCp':function(_0x25137b,_0x3b7c63){return _0x25137b>_0x3b7c63;},'CUldg':_0x2629e0(0x57f)+'1JS'},_0x4a8420=_0x3d9a48['EKdLq'][_0x2629e0(0xba9)]('|');let _0xf58c9f=0x14*0x7e+-0x19c1+0x1*0xfe9;while(!![]){switch(_0x4a8420[_0xf58c9f++]){case'0':_0x4d7fa3=_0x3d9a48[_0x2629e0(0x7e7)](_0x4d7fa3,this[_0x2629e0(0x15c7)+'rs']['damageRate']);continue;case'1':_0x4d7fa3=this[_0x2629e0(0xddc)+'eCaps'](_0x4d7fa3);continue;case'2':this[_0x2629e0(0x531)+'e']+=_0x4d7fa3;continue;case'3':_0x4d7fa3+=_0x3d9a48['uEbYa'](this['_multiplie'+'rs'][_0x2629e0(0xada)],_0x3d9a48[_0x2629e0(0x151e)](_0x4d7fa3,0x1*-0xbff+0x201b+0x75*-0x2c)?0x6b0*-0x2+-0xdc0+0x1b21:-(-0x1e83+-0xa38+0x9e*0x42));continue;case'4':this[_0x2629e0(0xdd3)+'eCoreJS'](_0x3d9a48[_0x2629e0(0x448)],_0x2e5338,_0x4d7fa3,!![]);continue;case'5':this[_0x2629e0(0x144e)+_0x2629e0(0x404)]=_0x4d7fa3;continue;case'6':VisuMZ[_0x2629e0(0x337)]['Game_Actio'+'n_executeD'+_0x2629e0(0xd5f)]['call'](this,_0x2e5338,_0x4d7fa3);continue;case'7':_0x3d9a48[_0x2629e0(0x358)](_0x4d7fa3,-0x2*0xa6c+-0x1*-0x893+0xc45)?_0x4d7fa3=Math[_0x2629e0(0x438)](_0x4d7fa3):_0x4d7fa3=Math[_0x2629e0(0x76f)](_0x4d7fa3);continue;case'8':_0x4d7fa3=this[_0x2629e0(0xdd3)+'eCoreJS'](_0x3d9a48[_0x2629e0(0x1228)],_0x2e5338,_0x4d7fa3,![]);continue;case'9':this[_0x2629e0(0x531)+'e']=this[_0x2629e0(0x531)+'e']||-0x1*-0x2691+0x1*0x22bd+-0x494e;continue;}break;}},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0xddc)+'eCaps']=function(_0x18acff){const _0x4514a2=_0x4258d1;if(this[_0x4514a2(0x1453)+'mageCap']())return _0x18acff;return _0x18acff=this[_0x4514a2(0x14f1)+_0x4514a2(0x3ed)](_0x18acff),_0x18acff=this['applyHardD'+_0x4514a2(0x3ed)](_0x18acff),_0x18acff;},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x1453)+_0x4258d1(0x1393)]=function(){const _0x287806=_0x4258d1,_0x5f5dd6=/<BYPASS DAMAGE CAP>/i;if(this['item']()['note']['match'](_0x5f5dd6))return!![];if(this['subject']()[_0x287806(0x522)+'ts']()['some'](_0xff8030=>_0xff8030&&_0xff8030[_0x287806(0x278)][_0x287806(0x79c)](_0x5f5dd6)))return!![];return!VisuMZ[_0x287806(0x337)][_0x287806(0x424)]['Damage'][_0x287806(0x1584)+_0x287806(0x6eb)];},Game_Action['prototype'][_0x4258d1(0x14f1)+'amageCap']=function(_0x2f3483){const _0x281e57=_0x4258d1,_0x41e7a7={'ksQXQ':function(_0x242143,_0x4e3ff0){return _0x242143<_0x4e3ff0;},'NQFaV':function(_0x49d5ca,_0x3f3453){return _0x49d5ca/_0x3f3453;},'DecgV':function(_0x56eaf5,_0x2a2bbc){return _0x56eaf5(_0x2a2bbc);},'aTXAm':function(_0x5b7e00,_0x14962){return _0x5b7e00*_0x14962;},'xhKcu':function(_0x4e3e3b,_0x585b79){return _0x4e3e3b>_0x585b79;},'yuABp':function(_0x113c0d,_0x30552e){return _0x113c0d-_0x30552e;},'SLtFm':function(_0x3929b3,_0x44cbd7){return _0x3929b3/_0x44cbd7;},'Rrfex':function(_0x60ccb7,_0x5f0eb7){return _0x60ccb7+_0x5f0eb7;},'SyqDi':function(_0x4d3bc9,_0x4991c8){return _0x4d3bc9*_0x4991c8;},'OtZJw':function(_0x15e53c,_0x189cee){return _0x15e53c-_0x189cee;},'pdeaY':function(_0x1fcf90,_0x451cf0){return _0x1fcf90*_0x451cf0;}};if(!VisuMZ['BattleCore'][_0x281e57(0x424)][_0x281e57(0x1683)][_0x281e57(0x19c)+_0x281e57(0x7da)])return _0x2f3483;const _0x2abd0f=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x281e57(0x780)]()[_0x281e57(0x278)][_0x281e57(0x79c)](_0x2abd0f))return _0x2f3483;if(this[_0x281e57(0x8e9)]()[_0x281e57(0x522)+'ts']()[_0x281e57(0x13d2)](_0x1d6625=>_0x1d6625&&_0x1d6625[_0x281e57(0x278)]['match'](_0x2abd0f)))return _0x2f3483;const _0x2e71b1=_0x41e7a7['ksQXQ'](_0x2f3483,-0x151d+0x604+0x5*0x305)?-(0x23c6+0x62d+0x7*-0x5fe):-0x1*0x4bf+-0x167f+0x1b3f;_0x2f3483=Math[_0x281e57(0x1560)](_0x2f3483);let _0x2cad58=this['subject']()[_0x281e57(0x1129)+'CapRate']();this[_0x281e57(0x780)]()[_0x281e57(0x278)][_0x281e57(0x79c)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x2cad58+=_0x41e7a7[_0x281e57(0x12f8)](_0x41e7a7[_0x281e57(0x3ea)](Number,RegExp['$1']),-0x1*-0xb5d+0x1069*0x1+-0x1b62));_0x2cad58=_0x2cad58[_0x281e57(0x3d5)](-0x1794+-0x2*0xc6b+0x2*0x1835+0.01,0xfd9+0x16df*-0x1+0x707);const _0x123cd6=this[_0x281e57(0x1294)+_0x281e57(0x15ec)](),_0x3cf021=_0x41e7a7[_0x281e57(0x14a5)](_0x2cad58,_0x123cd6);if(_0x41e7a7[_0x281e57(0x46a)](_0x2f3483,_0x3cf021)&&_0x41e7a7[_0x281e57(0x46a)](_0x123cd6,_0x3cf021)){_0x2f3483-=_0x3cf021;const _0x2ccade=VisuMZ[_0x281e57(0x337)][_0x281e57(0x424)]['Damage'][_0x281e57(0xc67)+_0x281e57(0x1677)],_0x464331=Math['max'](_0x41e7a7['yuABp'](-0x1881+0x23ae+0x8f*-0x14,_0x41e7a7['SLtFm'](_0x2f3483,_0x41e7a7[_0x281e57(0x1dd)](_0x41e7a7['SyqDi'](_0x41e7a7['OtZJw'](_0x123cd6,_0x3cf021),_0x2ccade),_0x2f3483))),0x62*-0x2b+-0x22*-0x80+-0x8a+0.01);_0x2f3483*=_0x464331,_0x2f3483+=_0x3cf021;}return _0x41e7a7[_0x281e57(0x13ab)](_0x2f3483,_0x2e71b1);},Game_Action['prototype']['getHardDam'+_0x4258d1(0x15ec)]=function(){const _0x177d58=_0x4258d1,_0x2756cc={'YFuIX':function(_0x19d32f,_0x4700fd){return _0x19d32f(_0x4700fd);}};return this[_0x177d58(0x780)]()['note'][_0x177d58(0x79c)](/<DAMAGE CAP:[ ](\d+)>/i)?_0x2756cc['YFuIX'](Number,RegExp['$1']):this[_0x177d58(0x8e9)]()[_0x177d58(0x408)+_0x177d58(0x7da)]();},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0xd62)+_0x4258d1(0x3ed)]=function(_0xbea9de){const _0x52a9b5=_0x4258d1;let _0x573175=this[_0x52a9b5(0x1294)+_0x52a9b5(0x15ec)]();return _0xbea9de[_0x52a9b5(0x3d5)](-_0x573175,_0x573175);},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x5b9)+_0x4258d1(0x142f)]=function(){const _0x37a5d3=_0x4258d1;if(!this['item']())return![];if(!$gameParty[_0x37a5d3(0x917)]())return![];return(this[_0x37a5d3(0x780)]()[_0x37a5d3(0x278)]||'')['match'](/<DISPERSE DAMAGE>/i);},Game_Action[_0x4258d1(0xf38)]['disperseDa'+'mage']=function(_0x26b9b2){const _0x433c1f=_0x4258d1,_0x2d29a9={'lBxUi':function(_0x302821,_0x39412e){return _0x302821+_0x39412e;},'XACCf':function(_0x309666,_0x18b38d){return _0x309666>_0x18b38d;}};if(this[_0x433c1f(0x5b9)+_0x433c1f(0x142f)]()){let _0x214206=BattleManager[_0x433c1f(0xc89)];_0x26b9b2/=_0x214206[_0x433c1f(0x1645)],this[_0x433c1f(0x14fd)]()&&(_0x26b9b2*=_0x2d29a9['lBxUi'](this[_0x433c1f(0x8e9)]()[_0x433c1f(0xd2c)+_0x433c1f(0x1678)](),-0x2494+0x110b*-0x1+0x35a0)),_0x26b9b2=_0x2d29a9[_0x433c1f(0xe4a)](_0x26b9b2,0x6f*-0x31+0x2129+0xa*-0x131)?Math[_0x433c1f(0x438)](_0x26b9b2):Math[_0x433c1f(0x76f)](_0x26b9b2);}return _0x26b9b2;},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbb8)+_0x4258d1(0x12a4)+'geValueDis'+'perse']=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0xb04)+_0x4258d1(0x865)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0xb04)+_0x4258d1(0x865)]=function(_0x33e4d6,_0x37ba18){const _0x118fde=_0x4258d1;let _0x14ed9f=VisuMZ[_0x118fde(0x337)][_0x118fde(0xbb8)+'n_makeDama'+_0x118fde(0x20f)+_0x118fde(0x1369)]['call'](this,_0x33e4d6,_0x37ba18);return this[_0x118fde(0xb52)+_0x118fde(0x14d9)](_0x14ed9f);},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x44a)+_0x4258d1(0x13c2)]=function(_0x166213,_0x52fb2d){const _0x4813e9=_0x4258d1,_0x5837fa={'wYTrv':function(_0x594fb1,_0x470b74){return _0x594fb1*_0x470b74;},'LrucS':function(_0x6797d4,_0x3ea1fa){return _0x6797d4+_0x3ea1fa;},'JVhMc':function(_0x5a540b,_0x5f440e){return _0x5a540b!==_0x5f440e;}};let _0x4cc220=_0x5837fa[_0x4813e9(0x796)](_0x5837fa[_0x4813e9(0x3ec)](_0x5837fa['wYTrv'](_0x166213['mhp'],_0x52fb2d[_0x4813e9(0x7e5)]),_0x52fb2d[_0x4813e9(0x1487)]),_0x166213[_0x4813e9(0x1054)]);_0x4cc220=this[_0x4813e9(0xb52)+_0x4813e9(0x14d9)](_0x4cc220),this['isItem']()&&(_0x4cc220*=this['subject']()[_0x4813e9(0xf7b)]),_0x4cc220=Math[_0x4813e9(0x76f)](_0x4cc220),_0x5837fa[_0x4813e9(0x6c4)](_0x4cc220,-0x81e+-0x85c+0x107a)&&(_0x166213[_0x4813e9(0xb6b)](_0x4cc220),this[_0x4813e9(0xa60)+'s'](_0x166213));},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x44a)+'RecoverMp']=function(_0x38b2a0,_0x4098ea){const _0x1a4adc=_0x4258d1,_0x3e0861={'jmXNC':function(_0x3f24d2,_0x4996ef){return _0x3f24d2*_0x4996ef;},'elHRd':function(_0x374220,_0x284b67){return _0x374220+_0x284b67;},'yHtTk':function(_0x26fc45,_0x2fd76c){return _0x26fc45*_0x2fd76c;},'VuoKv':function(_0x47884c,_0x3fdc62){return _0x47884c!==_0x3fdc62;}};let _0x1c74e7=_0x3e0861['jmXNC'](_0x3e0861['elHRd'](_0x3e0861['yHtTk'](_0x38b2a0[_0x1a4adc(0x8cd)],_0x4098ea[_0x1a4adc(0x7e5)]),_0x4098ea[_0x1a4adc(0x1487)]),_0x38b2a0[_0x1a4adc(0x1054)]);_0x1c74e7=this[_0x1a4adc(0xb52)+_0x1a4adc(0x14d9)](_0x1c74e7),this['isItem']()&&(_0x1c74e7*=this['subject']()[_0x1a4adc(0xf7b)]),_0x1c74e7=Math['floor'](_0x1c74e7),_0x3e0861[_0x1a4adc(0x5a5)](_0x1c74e7,-0x1*-0x28b+-0x40a+0x17f)&&(_0x38b2a0[_0x1a4adc(0x212)](_0x1c74e7),this[_0x1a4adc(0xa60)+'s'](_0x38b2a0));},Game_Action[_0x4258d1(0xf38)]['itemEffect'+'GainTp']=function(_0x134410,_0x18ba30){const _0x116c46=_0x4258d1,_0x3eaf6a={'KEdxC':function(_0x400c39,_0x527cfb){return _0x400c39!==_0x527cfb;}};let _0x3618bd=Math[_0x116c46(0x76f)](_0x18ba30[_0x116c46(0x7e5)]);_0x3618bd=this[_0x116c46(0xb52)+_0x116c46(0x14d9)](_0x3618bd),_0x3eaf6a[_0x116c46(0x884)](_0x3618bd,0x1359+-0x3d*-0x23+0x6ec*-0x4)&&(_0x134410['gainTp'](_0x3618bd),this[_0x116c46(0xa60)+'s'](_0x134410));},VisuMZ['BattleCore'][_0x4258d1(0xbb8)+'n_apply']=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x729)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x729)]=function(_0x153943){const _0x29b998=_0x4258d1,_0x4670fc={'wGvYf':'1|0|2|3|4','uRZut':_0x29b998(0x9b5)+'JS','HqgUy':_0x29b998(0xd1b)+_0x29b998(0x14b2)},_0x2a462f=_0x4670fc[_0x29b998(0x5a2)][_0x29b998(0xba9)]('|');let _0x20d197=0x2ef+-0x1*0xae2+0x7f3;while(!![]){switch(_0x2a462f[_0x20d197++]){case'0':this[_0x29b998(0xdd3)+_0x29b998(0x14c2)](_0x4670fc[_0x29b998(0x4e5)],_0x153943,0x1*0x2427+0x1*0x1775+0x1dce*-0x2,!![]);continue;case'1':if(_0x153943&&_0x153943['isEnemy']())_0x153943[_0x29b998(0x149d)+_0x29b998(0x8e4)+'ity']();continue;case'2':VisuMZ[_0x29b998(0x337)][_0x29b998(0xbb8)+'n_apply'][_0x29b998(0xb14)](this,_0x153943);continue;case'3':this[_0x29b998(0xdd3)+_0x29b998(0x14c2)](_0x4670fc['HqgUy'],_0x153943,this[_0x29b998(0x144e)+_0x29b998(0x404)]||-0xe6*-0x4+-0x2481+-0x20e9*-0x1,!![]);continue;case'4':this['applyResul'+_0x29b998(0xd34)](_0x153943);continue;}break;}},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0xdd3)+'eCoreJS']=function(_0x4fa32f,_0x358b2f,_0x3fcc29,_0x12ab9d){const _0x2e13c5=_0x4258d1,_0x5afe09={'xryHm':function(_0x4fa21a,_0x2ae380){return _0x4fa21a||_0x2ae380;},'Givru':_0x2e13c5(0xa46),'mMQwm':_0x2e13c5(0x874)};if(this[_0x2e13c5(0x5cc)+'er']||this[_0x2e13c5(0x6e2)])return;_0x3fcc29=_0x5afe09[_0x2e13c5(0x3f0)](_0x3fcc29,-0x3ef*0x5+0x9*0x21f+0x94*0x1);const _0x1e956c=_0x3fcc29,_0x548ab4=VisuMZ['BattleCore'][_0x2e13c5(0x424)][_0x2e13c5(0x12c8)],_0x5d2f5e=_0x4fa32f[_0x2e13c5(0xf22)]('');if(_0x548ab4[_0x5d2f5e]){_0x3fcc29=_0x548ab4[_0x5d2f5e]['call'](this,_0x3fcc29,_0x358b2f);if(_0x12ab9d)_0x3fcc29=_0x1e956c;}let _0x2784ea=VisuMZ['BattleCore'][_0x2e13c5(0x66d)+'S'](this['item'](),_0x4fa32f[_0x2e13c5(0xf22)](''));if(VisuMZ[_0x2e13c5(0x337)]['JS'][_0x2784ea]){_0x3fcc29=VisuMZ[_0x2e13c5(0x337)]['JS'][_0x2784ea]['call'](this,this[_0x2e13c5(0x8e9)](),_0x358b2f,this[_0x2e13c5(0x780)](),_0x3fcc29);if(_0x12ab9d)_0x3fcc29=_0x1e956c;}for(const _0x33a478 of this[_0x2e13c5(0x8e9)]()[_0x2e13c5(0x522)+'ts']()){if(!_0x33a478)continue;_0x2784ea=VisuMZ[_0x2e13c5(0x337)][_0x2e13c5(0x66d)+'S'](_0x33a478,_0x4fa32f[_0x2e13c5(0xf22)](_0x5afe09[_0x2e13c5(0x11df)]));if(VisuMZ[_0x2e13c5(0x337)]['JS'][_0x2784ea]){_0x3fcc29=VisuMZ[_0x2e13c5(0x337)]['JS'][_0x2784ea][_0x2e13c5(0xb14)](this,this[_0x2e13c5(0x8e9)](),_0x358b2f,_0x33a478,_0x3fcc29);if(_0x12ab9d)_0x3fcc29=_0x1e956c;}}for(const _0x135911 of _0x358b2f[_0x2e13c5(0x522)+'ts']()){if(!_0x135911)continue;_0x2784ea=VisuMZ[_0x2e13c5(0x337)]['createKeyJ'+'S'](_0x135911,_0x4fa32f[_0x2e13c5(0xf22)](_0x5afe09[_0x2e13c5(0x10d0)]));if(VisuMZ[_0x2e13c5(0x337)]['JS'][_0x2784ea]){_0x3fcc29=VisuMZ['BattleCore']['JS'][_0x2784ea][_0x2e13c5(0xb14)](this,this[_0x2e13c5(0x8e9)](),_0x358b2f,_0x135911,_0x3fcc29);if(_0x12ab9d)_0x3fcc29=_0x1e956c;}}return _0x3fcc29;},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x6ba)+_0x4258d1(0x7bb)]=function(_0x215cc7){const _0x17b7c1=_0x4258d1,_0x2c06b2=this[_0x17b7c1(0x531)+'e']||0x2347+0xd*0x1c9+-0x3a7c,_0x392c99=VisuMZ[_0x17b7c1(0x337)]['Settings'][_0x17b7c1(0x12c8)],_0x520a92=_0x215cc7[_0x17b7c1(0xf22)]('');_0x392c99[_0x520a92]&&_0x392c99[_0x520a92][_0x17b7c1(0xb14)](this,_0x2c06b2);let _0x59ed43=VisuMZ['BattleCore'][_0x17b7c1(0x66d)+'S'](this[_0x17b7c1(0x780)](),_0x215cc7);VisuMZ[_0x17b7c1(0x337)]['JS'][_0x59ed43]&&VisuMZ[_0x17b7c1(0x337)]['JS'][_0x59ed43]['call'](this,this[_0x17b7c1(0x8e9)](),this[_0x17b7c1(0x8e9)](),this[_0x17b7c1(0x780)](),_0x2c06b2);for(const _0x2c43e2 of this[_0x17b7c1(0x8e9)]()['traitObjec'+'ts']()){if(!_0x2c43e2)continue;_0x59ed43=VisuMZ[_0x17b7c1(0x337)][_0x17b7c1(0x66d)+'S'](_0x2c43e2,_0x215cc7),VisuMZ[_0x17b7c1(0x337)]['JS'][_0x59ed43]&&VisuMZ[_0x17b7c1(0x337)]['JS'][_0x59ed43][_0x17b7c1(0xb14)](this,this[_0x17b7c1(0x8e9)](),this['subject'](),_0x2c43e2,_0x2c06b2);}},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x791)]=function(){const _0x82e278=_0x4258d1;return VisuMZ['BattleCore']['Settings'][_0x82e278(0x12c8)][_0x82e278(0x1397)+_0x82e278(0x114f)][_0x82e278(0xb14)](this);},Game_Action[_0x4258d1(0xf38)]['allowRando'+_0x4258d1(0x1616)]=function(){const _0xd21098=_0x4258d1;return VisuMZ[_0xd21098(0x337)][_0xd21098(0x424)][_0xd21098(0x12c8)][_0xd21098(0x3cd)+_0xd21098(0x1616)];},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x3be)+_0x4258d1(0x144c)]=function(){const _0x1c2aa1=_0x4258d1,_0x1d5653={'yvLJV':function(_0xf47a20,_0x481c86){return _0xf47a20===_0x481c86;},'raRAe':'all\x20actors','YPrhW':function(_0x3b5c73,_0x3f9ac5){return _0x3b5c73===_0x3f9ac5;},'ZCGtv':_0x1c2aa1(0x7ce)+'s'};if(_0x1d5653[_0x1c2aa1(0x3b3)](this[_0x1c2aa1(0x518)+'tlerKey'],_0x1d5653[_0x1c2aa1(0x98e)]))return![];if(_0x1d5653['YPrhW'](this[_0x1c2aa1(0x518)+_0x1c2aa1(0x13e3)],_0x1d5653[_0x1c2aa1(0xd1c)]))return![];if(!this[_0x1c2aa1(0x780)]())return![];return this['item']()[_0x1c2aa1(0x278)]['match'](/<JS TARGETS>/i);},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x81a)+'reTargetSc'+_0x4258d1(0xa57)]=function(){const _0x57ed89=_0x4258d1,_0x5d1bbf={'fUjgw':_0x57ed89(0x9f4)+'5','aqXHX':function(_0x5f2ba5,_0x55fe08){return _0x5f2ba5===_0x55fe08;},'hCWQZ':_0x57ed89(0xe69),'xDDsq':function(_0x4dda73,_0x467f0a){return _0x4dda73===_0x467f0a;},'dzGKr':_0x57ed89(0x7ce)+'s','JfUMU':_0x57ed89(0x105f)},_0x4e7890=_0x5d1bbf[_0x57ed89(0xeb5)]['split']('|');let _0x5ef961=0xe1+-0x1*0x8f9+0x818;while(!![]){switch(_0x4e7890[_0x5ef961++]){case'0':if(_0x5d1bbf[_0x57ed89(0x83e)](this[_0x57ed89(0x518)+_0x57ed89(0x13e3)],_0x5d1bbf[_0x57ed89(0x1586)]))return![];continue;case'1':if(!this['_forcing']&&this[_0x57ed89(0x8e9)]()['isConfused']())return![];continue;case'2':if(this['isCustomBa'+_0x57ed89(0x144c)]())return!![];continue;case'3':if(_0x5d1bbf[_0x57ed89(0x56b)](this[_0x57ed89(0x518)+_0x57ed89(0x13e3)],_0x5d1bbf[_0x57ed89(0x140b)]))return![];continue;case'4':if(!this[_0x57ed89(0x780)]())return![];continue;case'5':return _0x5d1bbf[_0x57ed89(0x56b)](typeof this[_0x57ed89(0x780)]()[_0x57ed89(0x1114)],_0x5d1bbf[_0x57ed89(0x71c)]);}break;}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbb8)+_0x4258d1(0xe98)+_0x4258d1(0x155a)]=Game_Action['prototype'][_0x4258d1(0xa79)+_0x4258d1(0x523)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0xa79)+'ent']=function(){const _0x33166a=_0x4258d1,_0x2b6c9b={'GLenv':function(_0x19d882,_0x1901eb){return _0x19d882===_0x1901eb;},'ZmYQB':'all\x20actors','VJnkG':function(_0x119ac0,_0x38d7aa){return _0x119ac0===_0x38d7aa;},'CpHyt':_0x33166a(0x7ce)+'s'};if(_0x2b6c9b['GLenv'](this[_0x33166a(0x518)+_0x33166a(0x13e3)],_0x2b6c9b['ZmYQB']))return![];if(_0x2b6c9b[_0x33166a(0x6b2)](this['_targetBat'+_0x33166a(0x13e3)],_0x2b6c9b[_0x33166a(0x3ef)]))return!![];return this[_0x33166a(0x81a)+'reTargetSc'+_0x33166a(0xa57)]()&&!this[_0x33166a(0x3be)+_0x33166a(0x144c)]()?this[_0x33166a(0xa79)+_0x33166a(0x139b)+'ore']():VisuMZ['BattleCore'][_0x33166a(0xbb8)+_0x33166a(0xe98)+'onent'][_0x33166a(0xb14)](this);},Game_Action['prototype'][_0x4258d1(0xa79)+_0x4258d1(0x139b)+_0x4258d1(0x27b)]=function(){const _0x432fa4=_0x4258d1,_0x317166={'tyLvU':function(_0x7409a6,_0x342849){return _0x7409a6(_0x342849);}},_0x350912=_0x317166[_0x432fa4(0x478)](String,this[_0x432fa4(0x780)]()[_0x432fa4(0x1114)]);if(_0x350912[_0x432fa4(0x79c)](/ANY/i))return!![];return _0x350912[_0x432fa4(0x79c)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x4258d1(0x337)]['Game_Actio'+_0x4258d1(0x1284)+_0x4258d1(0x62c)]=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x1486)+'d'],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x1486)+'d']=function(){const _0x106c86=_0x4258d1,_0x15480c={'Bfduf':function(_0x32a798,_0x1caa37){return _0x32a798===_0x1caa37;},'vgqRK':_0x106c86(0xe69),'aEbpz':_0x106c86(0x7ce)+'s'};if(_0x15480c[_0x106c86(0x246)](this[_0x106c86(0x518)+_0x106c86(0x13e3)],_0x15480c[_0x106c86(0xe32)]))return!![];if(_0x15480c['Bfduf'](this['_targetBat'+_0x106c86(0x13e3)],_0x15480c[_0x106c86(0xde0)]))return![];return this[_0x106c86(0x81a)+_0x106c86(0x23a)+_0x106c86(0xa57)]()&&!this[_0x106c86(0x3be)+_0x106c86(0x144c)]()?this[_0x106c86(0x1486)+'dBattleCor'+'e']():VisuMZ[_0x106c86(0x337)][_0x106c86(0xbb8)+_0x106c86(0x1284)+_0x106c86(0x62c)][_0x106c86(0xb14)](this);},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x1486)+_0x4258d1(0x513)+'e']=function(){const _0x980adb=_0x4258d1,_0x6eadeb={'vAHSL':function(_0x539b2c,_0x3cb5aa){return _0x539b2c(_0x3cb5aa);}},_0x2573ca=_0x6eadeb['vAHSL'](String,this[_0x980adb(0x780)]()['scope']);return _0x2573ca[_0x980adb(0x79c)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x59c)+'e']=function(){const _0x1d91bb=_0x4258d1,_0x47a243={'gMkXK':function(_0x2fa673,_0x459a53){return _0x2fa673(_0x459a53);}};if(this['isBattleCo'+'reTargetSc'+_0x1d91bb(0xa57)]()&&!this[_0x1d91bb(0x3be)+_0x1d91bb(0x144c)]()){const _0x3a03ee=_0x47a243['gMkXK'](String,this[_0x1d91bb(0x780)]()[_0x1d91bb(0x1114)]);return _0x3a03ee[_0x1d91bb(0x79c)](/(?:ENEMY|FOE)/i)&&_0x3a03ee['match'](/OR/i)&&_0x3a03ee[_0x1d91bb(0x79c)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x59c)+_0x4258d1(0x25f)+_0x4258d1(0xe76)]=function(){const _0x252c22=_0x4258d1,_0xcbd905={'SSKao':function(_0x1e4bd9,_0x35e5dc){return _0x1e4bd9(_0x35e5dc);}};if(this[_0x252c22(0x59c)+'e']()){const _0x23758a=_0xcbd905['SSKao'](String,this[_0x252c22(0x780)]()[_0x252c22(0x1114)]);if(_0x23758a['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x59c)+'eFocusOppo'+_0x4258d1(0xe40)]=function(){const _0x2ef79e=_0x4258d1,_0x104078={'wuytj':function(_0x450890,_0x5a9e57){return _0x450890(_0x5a9e57);}};if(this[_0x2ef79e(0x59c)+'e']()){const _0x3a1cbf=_0x104078[_0x2ef79e(0x1688)](String,this[_0x2ef79e(0x780)]()[_0x2ef79e(0x1114)]);if(_0x3a1cbf[_0x2ef79e(0x79c)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbb8)+'n_isForAli'+'veFriend']=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x4af)+_0x4258d1(0xe0f)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x4af)+_0x4258d1(0xe0f)]=function(){const _0x366019=_0x4258d1,_0x2bed97={'FEkWA':function(_0x2416ec,_0x15ff15){return _0x2416ec===_0x15ff15;},'WVGvD':_0x366019(0xe69)};if(_0x2bed97[_0x366019(0x65b)](this['_targetBat'+_0x366019(0x13e3)],_0x2bed97['WVGvD']))return!![];return this[_0x366019(0x81a)+'reTargetSc'+_0x366019(0xa57)]()&&!this[_0x366019(0x3be)+_0x366019(0x144c)]()?this[_0x366019(0x4af)+_0x366019(0x1051)+'leCore']():VisuMZ[_0x366019(0x337)]['Game_Actio'+'n_isForAli'+_0x366019(0x3d3)][_0x366019(0xb14)](this);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbb8)+_0x4258d1(0x1334)+'dFriend']=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x162e)+_0x4258d1(0x13bf)],Game_Action['prototype'][_0x4258d1(0x162e)+_0x4258d1(0x13bf)]=function(){const _0x1e518f=_0x4258d1,_0xb5cdb7={'ycVQr':function(_0x17c60f,_0x3e661e){return _0x17c60f===_0x3e661e;},'pZRsq':'all\x20actors'};if(_0xb5cdb7[_0x1e518f(0xcac)](this['_targetBat'+'tlerKey'],_0xb5cdb7[_0x1e518f(0xe06)]))return VisuMZ['BattleCore']['Game_Actio'+_0x1e518f(0x1334)+'dFriend'][_0x1e518f(0xb14)](this);return VisuMZ['BattleCore'][_0x1e518f(0xbb8)+_0x1e518f(0x1334)+'dFriend']['call'](this);},Game_Action['prototype'][_0x4258d1(0x4af)+_0x4258d1(0x1051)+_0x4258d1(0xf5f)]=function(){const _0x3b7318=_0x4258d1;if(this[_0x3b7318(0x59c)+'e']())return!![];return![];},Game_Action['prototype']['isForNotUs'+'er']=function(){const _0x47d57a=_0x4258d1;return this[_0x47d57a(0x780)]()&&this[_0x47d57a(0x780)]()[_0x47d57a(0x278)][_0x47d57a(0x79c)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x4258d1(0x337)]['Game_Actio'+'n_isForOne']=Game_Action['prototype']['isForOne'],Game_Action['prototype']['isForOne']=function(){const _0x347f0a=_0x4258d1,_0x5ac338={'JkqFN':function(_0x1a41c0,_0x2a487d){return _0x1a41c0===_0x2a487d;},'psXAW':_0x347f0a(0xe69),'ljPOu':'all\x20enemie'+'s'};if(_0x5ac338['JkqFN'](this[_0x347f0a(0x518)+_0x347f0a(0x13e3)],_0x5ac338[_0x347f0a(0x359)]))return![];if(_0x5ac338[_0x347f0a(0x1c4)](this[_0x347f0a(0x518)+_0x347f0a(0x13e3)],_0x5ac338[_0x347f0a(0x15bc)]))return![];return this[_0x347f0a(0x81a)+'reTargetSc'+_0x347f0a(0xa57)]()&&!this[_0x347f0a(0x3be)+'ttleScope']()?this['isForOneBa'+_0x347f0a(0x6df)]():VisuMZ[_0x347f0a(0x337)][_0x347f0a(0xbb8)+_0x347f0a(0xafa)][_0x347f0a(0xb14)](this);},Game_Action[_0x4258d1(0xf38)]['isForOneBa'+_0x4258d1(0x6df)]=function(){const _0x8954e1=_0x4258d1;if(this[_0x8954e1(0x59c)+'e']())return!![];return![];},VisuMZ[_0x4258d1(0x337)]['Game_Actio'+_0x4258d1(0x1430)+_0x4258d1(0x123c)]=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x1255)+'m'],Game_Action['prototype']['isForRando'+'m']=function(){const _0x306a6a=_0x4258d1,_0x206e79={'aIqIV':function(_0x347583,_0xc0aa0e){return _0x347583===_0xc0aa0e;},'zyNNZ':_0x306a6a(0xe69),'fycBJ':_0x306a6a(0x7ce)+'s'};if(_0x206e79[_0x306a6a(0x934)](this['_targetBat'+'tlerKey'],_0x206e79[_0x306a6a(0xd54)]))return![];if(_0x206e79[_0x306a6a(0x934)](this['_targetBat'+_0x306a6a(0x13e3)],_0x206e79[_0x306a6a(0x6d2)]))return![];return this['isBattleCo'+_0x306a6a(0x23a)+_0x306a6a(0xa57)]()&&!this[_0x306a6a(0x3be)+_0x306a6a(0x144c)]()?this[_0x306a6a(0x1255)+_0x306a6a(0x78b)+'e']():VisuMZ[_0x306a6a(0x337)][_0x306a6a(0xbb8)+_0x306a6a(0x1430)+'dom'][_0x306a6a(0xb14)](this);},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x1255)+'mBattleCor'+'e']=function(){const _0x3c6056=_0x4258d1,_0x505d7e={'hzrca':function(_0x362e2d,_0x224a0b){return _0x362e2d(_0x224a0b);}},_0x2674e9=_0x505d7e[_0x3c6056(0x57b)](String,this[_0x3c6056(0x780)]()[_0x3c6056(0x1114)]);return _0x2674e9[_0x3c6056(0x79c)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore'][_0x4258d1(0xbb8)+_0x4258d1(0xf8a)]=Game_Action['prototype'][_0x4258d1(0xe27)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0xe27)]=function(){const _0x15f231=_0x4258d1,_0x3f585c={'MtMRA':function(_0x3aa527,_0x1debbf){return _0x3aa527===_0x1debbf;},'NDXeP':_0x15f231(0xe69),'oESey':'all\x20enemie'+'s'};if(_0x3f585c[_0x15f231(0x20e)](this[_0x15f231(0x518)+_0x15f231(0x13e3)],_0x3f585c[_0x15f231(0x11e8)]))return!![];if(_0x3f585c['MtMRA'](this[_0x15f231(0x518)+_0x15f231(0x13e3)],_0x3f585c[_0x15f231(0x589)]))return!![];return VisuMZ['BattleCore']['Game_Actio'+'n_isForAll'][_0x15f231(0xb14)](this);},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x395)+_0x4258d1(0x113b)+_0x4258d1(0x5c8)]=function(){const _0x450a9a=_0x4258d1;if(!this[_0x450a9a(0x780)]())return![];if(this['isForDeadF'+_0x450a9a(0x13bf)]())return![];return(this[_0x450a9a(0x780)]()[_0x450a9a(0x278)]||'')[_0x450a9a(0x79c)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x4258d1(0x337)]['Game_Actio'+_0x4258d1(0xbe3)+'y']=Game_Action[_0x4258d1(0xf38)]['testApply'],Game_Action['prototype'][_0x4258d1(0x225)]=function(_0x445f40){const _0x42ba41=_0x4258d1,_0x2567c4={'oaWcW':function(_0x12366f,_0x2c7e5a){return _0x12366f===_0x2c7e5a;}};if(this['isForNotUs'+'er']()&&_0x2567c4[_0x42ba41(0x3a1)](_0x445f40,this['subject']()))return![];return VisuMZ[_0x42ba41(0x337)][_0x42ba41(0xbb8)+_0x42ba41(0xbe3)+'y'][_0x42ba41(0xb14)](this,_0x445f40);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbb8)+'n_itemTarg'+_0x4258d1(0x133e)+'es']=Game_Action['prototype']['itemTarget'+_0x4258d1(0x13c4)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x7f5)+_0x4258d1(0x13c4)]=function(){const _0x4fc97e=_0x4258d1,_0x813b23=VisuMZ['BattleCore'][_0x4fc97e(0xbb8)+_0x4fc97e(0x1d8)+_0x4fc97e(0x133e)+'es']['call'](this);if(this['isForNotUs'+'er']())_0x813b23['remove'](this[_0x4fc97e(0x8e9)]());return _0x813b23;},VisuMZ['BattleCore'][_0x4258d1(0xbb8)+_0x4258d1(0x61b)+_0x4258d1(0x14e0)]=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x5e6)+_0x4258d1(0x940)],Game_Action['prototype'][_0x4258d1(0x5e6)+'tion']=function(){const _0x25e7d3=_0x4258d1;return this[_0x25e7d3(0x81a)+_0x25e7d3(0x23a)+_0x25e7d3(0xa57)]()&&!this[_0x25e7d3(0x3be)+_0x25e7d3(0x144c)]()?this[_0x25e7d3(0x5e6)+'tionBattle'+_0x25e7d3(0x5b8)]():VisuMZ[_0x25e7d3(0x337)]['Game_Actio'+_0x25e7d3(0x61b)+_0x25e7d3(0x14e0)][_0x25e7d3(0xb14)](this);},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x5e6)+_0x4258d1(0x492)+_0x4258d1(0x5b8)]=function(){const _0x2c78fa=_0x4258d1,_0x58a0df={'RFQzK':function(_0x3ec40a,_0x468097){return _0x3ec40a(_0x468097);}},_0x3e244c=_0x58a0df[_0x2c78fa(0x14da)](String,this[_0x2c78fa(0x780)]()[_0x2c78fa(0x1114)]);if(_0x3e244c[_0x2c78fa(0x79c)](/RANDOM/i))return![];if(_0x3e244c[_0x2c78fa(0x79c)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x3e244c[_0x2c78fa(0x79c)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x3e244c[_0x2c78fa(0x79c)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x3e244c[_0x2c78fa(0x79c)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x2c78fa(0x337)][_0x2c78fa(0xbb8)+_0x2c78fa(0x61b)+_0x2c78fa(0x14e0)][_0x2c78fa(0xb14)](this);},VisuMZ[_0x4258d1(0x337)]['Game_Actio'+_0x4258d1(0x770)+_0x4258d1(0xa49)]=Game_Action[_0x4258d1(0xf38)]['makeTarget'+'s'],Game_Action['prototype']['makeTarget'+'s']=function(){const _0x1ba639=_0x4258d1;let _0xa5a80d=[];return this[_0x1ba639(0x81a)+_0x1ba639(0x23a)+_0x1ba639(0xa57)]()?this[_0x1ba639(0x3be)+_0x1ba639(0x144c)]()?_0xa5a80d=this[_0x1ba639(0xe63)+'sBattleCor'+_0x1ba639(0xb8c)]():_0xa5a80d=this[_0x1ba639(0xe63)+_0x1ba639(0x9f0)+'e']():_0xa5a80d=VisuMZ[_0x1ba639(0x337)][_0x1ba639(0xbb8)+'n_makeTarg'+_0x1ba639(0xa49)]['call'](this),_0xa5a80d=this[_0x1ba639(0x1c5)+_0x1ba639(0x1121)](_0xa5a80d),_0xa5a80d;},Game_Action[_0x4258d1(0xf38)]['isSubjectV'+_0x4258d1(0x5f4)+'oneSelect']=function(){const _0x687e6e=_0x4258d1;return this[_0x687e6e(0x8e9)]()[_0x687e6e(0x1580)]()&&!this[_0x687e6e(0x8e9)]()[_0x687e6e(0xc51)+'le']();},Game_Action[_0x4258d1(0xf38)]['makeTarget'+'sBattleCor'+_0x4258d1(0xb8c)]=function(){const _0x3b46c3=_0x4258d1,_0x155729={'mUlxV':_0x3b46c3(0xb00)},_0x226c0a=VisuMZ[_0x3b46c3(0x337)][_0x3b46c3(0x66d)+'S'](this[_0x3b46c3(0x780)](),_0x155729['mUlxV']);if(VisuMZ[_0x3b46c3(0x337)]['JS'][_0x226c0a]){targets=VisuMZ[_0x3b46c3(0x337)][_0x3b46c3(0xbb8)+_0x3b46c3(0x770)+_0x3b46c3(0xa49)]['call'](this);const _0xadd50c=VisuMZ[_0x3b46c3(0x337)][_0x3b46c3(0x66d)+'S'](this[_0x3b46c3(0x780)](),_0x155729[_0x3b46c3(0xdaa)]);return targets=VisuMZ[_0x3b46c3(0x337)]['JS'][_0xadd50c][_0x3b46c3(0xb14)](this,this[_0x3b46c3(0x8e9)](),targets),this[_0x3b46c3(0x15c5)+_0x3b46c3(0xa49)](targets);}return this[_0x3b46c3(0xe63)+'sBattleCor'+'e']();},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0xe63)+_0x4258d1(0x9f0)+'e']=function(){const _0x1e85c4=_0x4258d1,_0x4fe95b={'RduxT':function(_0x471df4,_0x1cddee){return _0x471df4(_0x1cddee);},'NzclY':function(_0x113a7d,_0x24d145){return _0x113a7d<_0x24d145;},'ROmHC':_0x1e85c4(0x33b)+'attleAI\x20ne'+'eds\x20to\x20be\x20'+_0x1e85c4(0x689),'YeKIi':_0x1e85c4(0x456)+'or\x20Ally\x20or'+_0x1e85c4(0x1465)+_0x1e85c4(0x9f6)+_0x1e85c4(0xd5e),'IDABP':_0x1e85c4(0x1035)+_0x1e85c4(0x30f)+'of\x20VisuMZ_'+_0x1e85c4(0x5e8)+'re!','oWlXk':function(_0x2b0560,_0x20cca8){return _0x2b0560(_0x20cca8);},'ZWrnI':function(_0x369eef,_0x15b74b){return _0x369eef===_0x15b74b;},'UUTvq':function(_0x5ce5c1,_0x238889){return _0x5ce5c1(_0x238889);},'MDxtg':function(_0x407fb6,_0x30c265){return _0x407fb6(_0x30c265);}};let _0x427f13=[];const _0x1cb491=_0x4fe95b['RduxT'](String,this[_0x1e85c4(0x780)]()[_0x1e85c4(0x1114)]);if(this[_0x1e85c4(0x59c)+'eFocusOppo'+_0x1e85c4(0xe40)]())return this[_0x1e85c4(0x43b)+_0x1e85c4(0x5f4)+'oneSelect']()?(_0x427f13=this['getBattler'+_0x1e85c4(0x2c8)](),this[_0x1e85c4(0x15c5)+_0x1e85c4(0xa49)](_0x427f13)):(this['_targetInd'+'ex']=-(0x1*0x878+-0x164d*0x1+0xdd6*0x1),_0x427f13[_0x1e85c4(0x88f)](...this[_0x1e85c4(0xa08)+_0x1e85c4(0x77b)]()),this[_0x1e85c4(0x15c5)+_0x1e85c4(0xa49)](_0x427f13));if(this[_0x1e85c4(0x59c)+_0x1e85c4(0x25f)+_0x1e85c4(0xe76)]()){if(this[_0x1e85c4(0x43b)+'alidForAny'+_0x1e85c4(0x82b)]())return _0x427f13=this[_0x1e85c4(0x1141)+'KeyTargets'](),this[_0x1e85c4(0x15c5)+'ets'](_0x427f13);else{if(Imported[_0x1e85c4(0x33b)+_0x1e85c4(0x1d4)]){if(_0x4fe95b[_0x1e85c4(0xb66)](VisuMZ[_0x1e85c4(0x12ea)][_0x1e85c4(0x389)],-0x1618+-0x15d2+0x2beb+0.18999999999999995)){let _0x258587='';_0x258587+=_0x4fe95b[_0x1e85c4(0x78d)],_0x258587+=_0x4fe95b[_0x1e85c4(0xeab)],_0x258587+=_0x4fe95b[_0x1e85c4(0x60b)],_0x4fe95b[_0x1e85c4(0x1494)](alert,_0x258587),SceneManager['exit']();}}return this['_targetInd'+'ex']=-(-0x1*-0x9e0+-0x1424+0xef*0xb),_0x427f13['push'](...this['targetsFor'+_0x1e85c4(0x15d1)]()),this[_0x1e85c4(0x15c5)+'ets'](_0x427f13);}}if(_0x1cb491[_0x1e85c4(0x79c)](/(\d+) RANDOM ANY/i)){let _0x4b73ac=_0x4fe95b[_0x1e85c4(0xb80)](Number,RegExp['$1']);while(_0x4b73ac--){const _0x54b1a2=_0x4fe95b[_0x1e85c4(0x1512)](Math['randomInt'](-0x751*-0x1+-0x1e*-0x50+-0x10af),-0x1efd+-0x1176+0x1*0x3073)?this['opponentsU'+_0x1e85c4(0x3c8)]():this[_0x1e85c4(0xf99)+'t']();_0x427f13[_0x1e85c4(0x88f)](_0x54b1a2[_0x1e85c4(0xc1a)+_0x1e85c4(0x3ce)]());}return this[_0x1e85c4(0x15c5)+_0x1e85c4(0xa49)](_0x427f13);}if(_0x1cb491[_0x1e85c4(0x79c)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x5b65f9=_0x4fe95b[_0x1e85c4(0x1624)](Number,RegExp['$1']);while(_0x5b65f9--){_0x427f13[_0x1e85c4(0x88f)](this['opponentsU'+_0x1e85c4(0x3c8)]()[_0x1e85c4(0xc1a)+_0x1e85c4(0x3ce)]());}return this[_0x1e85c4(0x15c5)+_0x1e85c4(0xa49)](_0x427f13);}if(_0x1cb491[_0x1e85c4(0x79c)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x36239b=_0x4fe95b[_0x1e85c4(0x713)](Number,RegExp['$1']);while(_0x36239b--){_0x427f13[_0x1e85c4(0x88f)](this[_0x1e85c4(0xf99)+'t']()[_0x1e85c4(0xc1a)+_0x1e85c4(0x3ce)]());}return this[_0x1e85c4(0x15c5)+_0x1e85c4(0xa49)](_0x427f13);}if(_0x1cb491[_0x1e85c4(0x79c)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x427f13[_0x1e85c4(0x88f)](...this[_0x1e85c4(0xf99)+'t']()[_0x1e85c4(0xe7e)+'rs']()[_0x1e85c4(0x7de)](_0xd8a98=>_0xd8a98!==this[_0x1e85c4(0x8e9)]())),this[_0x1e85c4(0x15c5)+_0x1e85c4(0xa49)](_0x427f13);return VisuMZ[_0x1e85c4(0x337)][_0x1e85c4(0xbb8)+_0x1e85c4(0x770)+_0x1e85c4(0xa49)][_0x1e85c4(0xb14)](this);},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x1448)+_0x4258d1(0xa49)]=function(_0x3cbdb0){const _0x386464=_0x4258d1,_0x4c02f8={'aZWrB':function(_0x591fc8,_0x358602){return _0x591fc8<_0x358602;}},_0x11ebc4=[];for(let _0x1abc65=0x2386+-0x25b2+0x22c;_0x4c02f8['aZWrB'](_0x1abc65,this[_0x386464(0xc71)]());_0x1abc65++){_0x11ebc4['push'](_0x3cbdb0[_0x386464(0xc1a)+_0x386464(0x3ce)]());}return _0x11ebc4;},Game_Action['prototype'][_0x4258d1(0x1c5)+_0x4258d1(0x1121)]=function(_0x31d680){const _0x4e0aa0=_0x4258d1,_0x257b58={'pjfWR':function(_0x4f6f37,_0x4ef02a){return _0x4f6f37>_0x4ef02a;}};if(!this[_0x4e0aa0(0x780)]())return _0x31d680;const _0x47f254=this[_0x4e0aa0(0x780)]()[_0x4e0aa0(0x278)];if(this[_0x4e0aa0(0xb88)+'er']()){this[_0x4e0aa0(0xe27)]()&&_0x31d680[_0x4e0aa0(0x1113)](this[_0x4e0aa0(0x8e9)]());if(_0x31d680[_0x4e0aa0(0x163f)](this['subject']())){const _0x4d73bc=this[_0x4e0aa0(0xf99)+'t']()[_0x4e0aa0(0xe7e)+'rs']()['remove'](this['subject']());if(_0x257b58['pjfWR'](_0x4d73bc[_0x4e0aa0(0x1645)],0x5e4+-0xa1*0xa+0x2*0x33)){_0x4d73bc[_0x4e0aa0(0x13fe)]((_0x408c14,_0x185161)=>_0x408c14['hpRate']()-_0x185161['hpRate']());while(_0x31d680['includes'](this['subject']())){const _0x4cff5f=_0x31d680['indexOf'](this[_0x4e0aa0(0x8e9)]());_0x31d680[_0x4cff5f]=_0x4d73bc[Math[_0x4e0aa0(0x154d)](_0x4d73bc[_0x4e0aa0(0x1645)])];}}else _0x31d680[_0x4e0aa0(0x1113)](this[_0x4e0aa0(0x8e9)]());}}return _0x31d680;},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbb8)+'n_itemEffe'+'ctAddAttac'+_0x4258d1(0x9a6)]=Game_Action['prototype']['itemEffect'+_0x4258d1(0x155b)+_0x4258d1(0x12c3)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x44a)+_0x4258d1(0x155b)+'tate']=function(_0x573082,_0x31b62e){const _0x3d4ac9=_0x4258d1,_0x3a5ac0={'VPSxD':function(_0x1ddfd3,_0x1f008f){return _0x1ddfd3===_0x1f008f;},'KqneX':function(_0x57365d,_0x166442){return _0x57365d<_0x166442;}};VisuMZ[_0x3d4ac9(0x337)][_0x3d4ac9(0xbb8)+_0x3d4ac9(0xc53)+'ctAddAttac'+_0x3d4ac9(0x9a6)][_0x3d4ac9(0xb14)](this,_0x573082,_0x31b62e);if(!_0x573082['isImmortal']())return;for(const _0x333f6d of this['subject']()[_0x3d4ac9(0xfa4)+'es']()){if(_0x3a5ac0[_0x3d4ac9(0x12e5)](_0x333f6d,_0x573082['deathState'+'Id']())){let _0x38c431=_0x31b62e[_0x3d4ac9(0x7e5)];_0x38c431*=_0x573082[_0x3d4ac9(0x69c)](_0x333f6d),_0x38c431*=this[_0x3d4ac9(0x8e9)]()[_0x3d4ac9(0xfa4)+'esRate'](_0x333f6d),_0x38c431*=this[_0x3d4ac9(0x84d)+'ate'](_0x573082),_0x3a5ac0[_0x3d4ac9(0x1049)](Math[_0x3d4ac9(0x108d)](),_0x38c431)&&(_0x573082[_0x3d4ac9(0xdc8)+_0x3d4ac9(0x12a5)]=!![],this[_0x3d4ac9(0xa60)+'s'](_0x573082));}}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbb8)+_0x4258d1(0xc53)+_0x4258d1(0x886)+'lState']=Game_Action['prototype']['itemEffect'+'AddNormalS'+_0x4258d1(0x12c3)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x44a)+_0x4258d1(0xac2)+'tate']=function(_0x29d8a0,_0x4411a2){const _0x3715a1=_0x4258d1,_0x1d080f={'DpmIX':function(_0x117953,_0x3b6912){return _0x117953!==_0x3b6912;},'BMOEg':function(_0x38d833,_0x42a05a){return _0x38d833<_0x42a05a;}};VisuMZ[_0x3715a1(0x337)]['Game_Actio'+'n_itemEffe'+_0x3715a1(0x886)+'lState'][_0x3715a1(0xb14)](this,_0x29d8a0,_0x4411a2);if(!_0x29d8a0['isImmortal']())return;if(_0x1d080f[_0x3715a1(0x1291)](_0x4411a2[_0x3715a1(0xe49)],_0x29d8a0['deathState'+'Id']()))return;let _0x23e533=_0x4411a2['value1'];!this[_0x3715a1(0x1023)+'it']()&&(_0x23e533*=_0x29d8a0['stateRate'](_0x4411a2[_0x3715a1(0xe49)]),_0x23e533*=this[_0x3715a1(0x84d)+_0x3715a1(0x3cb)](_0x29d8a0)),_0x1d080f['BMOEg'](Math[_0x3715a1(0x108d)](),_0x23e533)&&(_0x29d8a0['_deathStat'+_0x3715a1(0x12a5)]=!![],this['makeSucces'+'s'](_0x29d8a0));},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbb8)+_0x4258d1(0x41c)+'bal']=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x5c9)+'l'],Game_Action['prototype'][_0x4258d1(0x5c9)+'l']=function(){const _0x487fda=_0x4258d1;VisuMZ['BattleCore'][_0x487fda(0xbb8)+'n_applyGlo'+_0x487fda(0x12cb)][_0x487fda(0xb14)](this),this[_0x487fda(0x5c9)+_0x487fda(0xc7b)+_0x487fda(0x662)](),this[_0x487fda(0xfac)+_0x487fda(0xd34)]();},Game_Action['prototype'][_0x4258d1(0x5c9)+_0x4258d1(0xc7b)+'ntNotetags']=function(){const _0x5b0a18=_0x4258d1,_0x2be089={'tkJjb':function(_0x43e638,_0x343b2c){return _0x43e638(_0x343b2c);}};if(!SceneManager[_0x5b0a18(0x614)+_0x5b0a18(0x6e5)]())return;const _0x48f696=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x428f38=this['item']()[_0x5b0a18(0x278)][_0x5b0a18(0x79c)](_0x48f696);if(_0x428f38)for(const _0x1729d3 of _0x428f38){if(!_0x1729d3)continue;_0x1729d3[_0x5b0a18(0x79c)](_0x48f696);const _0x492678=_0x2be089[_0x5b0a18(0x202)](String,RegExp['$1'])[_0x5b0a18(0xba9)](',')[_0x5b0a18(0x15f9)](_0x393b83=>String(_0x393b83)[_0x5b0a18(0xbb6)]()),_0x282a23=_0x492678[_0x5b0a18(0x15f9)](_0x26deea=>DataManager[_0x5b0a18(0x14e4)+_0x5b0a18(0x1470)+_0x5b0a18(0x13bb)](_0x26deea));for(const _0x5f513d of _0x282a23){const _0x15de10=$dataCommonEvents[_0x5f513d];_0x15de10&&$gameTemp['reserveCom'+_0x5b0a18(0x8c4)](_0x5f513d);}}},DataManager['getCommonE'+_0x4258d1(0x1470)+'Name']=function(_0x42aa1d){const _0x336c0a=_0x4258d1;_0x42aa1d=_0x42aa1d[_0x336c0a(0x191)+'e']()[_0x336c0a(0xbb6)](),this[_0x336c0a(0xadc)+_0x336c0a(0x7c6)]=this[_0x336c0a(0xadc)+_0x336c0a(0x7c6)]||{};if(this[_0x336c0a(0xadc)+'ntIDs'][_0x42aa1d])return this[_0x336c0a(0xadc)+_0x336c0a(0x7c6)][_0x42aa1d];for(const _0x4f3283 of $dataCommonEvents){if(!_0x4f3283)continue;let _0xf275ef=_0x4f3283[_0x336c0a(0xd40)];_0xf275ef=_0xf275ef[_0x336c0a(0xf58)](/\x1I\[(\d+)\]/gi,''),_0xf275ef=_0xf275ef[_0x336c0a(0xf58)](/\\I\[(\d+)\]/gi,''),this[_0x336c0a(0xadc)+_0x336c0a(0x7c6)][_0xf275ef[_0x336c0a(0x191)+'e']()[_0x336c0a(0xbb6)]()]=_0x4f3283['id'];}return this[_0x336c0a(0xadc)+'ntIDs'][_0x42aa1d]||0x2*0x1137+-0x423+-0x8d*0x37;},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0xfac)+_0x4258d1(0xd34)]=function(){const _0x31757c=_0x4258d1;if(!SceneManager[_0x31757c(0x614)+'tle']())return;const _0x4ccdae=VisuMZ['BattleCore'][_0x31757c(0x424)]['Mechanics'];_0x4ccdae[_0x31757c(0x8da)+'ical']&&$gameSwitches[_0x31757c(0x16af)](_0x4ccdae[_0x31757c(0x8da)+_0x31757c(0x6c3)],![]),_0x4ccdae['SwitchMiss'+_0x31757c(0x126e)]&&$gameSwitches['setValue'](_0x4ccdae['SwitchMiss'+_0x31757c(0x126e)],![]),_0x4ccdae['VariableDm'+'g']&&$gameVariables['setValue'](_0x4ccdae['VariableDm'+'g'],-0x1*-0xc1d+0x1eea+0x1*-0x2b07),_0x4ccdae[_0x31757c(0x7f9)+'al']&&$gameVariables[_0x31757c(0x16af)](_0x4ccdae[_0x31757c(0x7f9)+'al'],-0x2674+0x1909+-0x2af*-0x5);},Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x38d)+_0x4258d1(0xd34)]=function(_0x124e97){const _0x2b5cf3=_0x4258d1,_0x171f2e={'IQisZ':function(_0x10efaf,_0x4d6db8){return _0x10efaf>_0x4d6db8;},'ckVRh':function(_0x5c79e3,_0x3b5121){return _0x5c79e3<_0x3b5121;}};if(!SceneManager[_0x2b5cf3(0x614)+_0x2b5cf3(0x6e5)]())return;if(!_0x124e97)return;const _0x5b98de=_0x124e97['result'](),_0x5c5e8d=VisuMZ[_0x2b5cf3(0x337)][_0x2b5cf3(0x424)][_0x2b5cf3(0x12c8)];_0x5c5e8d[_0x2b5cf3(0x8da)+'ical']&&_0x5b98de['critical']&&$gameSwitches[_0x2b5cf3(0x16af)](_0x5c5e8d[_0x2b5cf3(0x8da)+_0x2b5cf3(0x6c3)],!![]);_0x5c5e8d[_0x2b5cf3(0x1252)+_0x2b5cf3(0x126e)]&&(_0x5b98de[_0x2b5cf3(0x6fd)]||_0x5b98de[_0x2b5cf3(0x9d2)])&&$gameSwitches[_0x2b5cf3(0x16af)](_0x5c5e8d[_0x2b5cf3(0x1252)+_0x2b5cf3(0x126e)],!![]);if(_0x5c5e8d['VariableDm'+'g']){let _0x5a0473=$gameVariables['value'](_0x5c5e8d['VariableDm'+'g']);_0x171f2e[_0x2b5cf3(0x1c3)](_0x5b98de['hpDamage'],0x557*-0x1+-0xafb+0x1052)&&(_0x5a0473+=Math['abs'](_0x5b98de[_0x2b5cf3(0x6d9)])),$gameVariables['setValue'](_0x5c5e8d[_0x2b5cf3(0xfe9)+'g'],_0x5a0473);}if(_0x5c5e8d['VariableHe'+'al']){let _0x189bf6=$gameVariables[_0x2b5cf3(0xb53)](_0x5c5e8d['VariableHe'+'al']);_0x171f2e[_0x2b5cf3(0xe13)](_0x5b98de[_0x2b5cf3(0x6d9)],-0x14a+0x1d*-0x1+0x167)&&(_0x189bf6+=Math[_0x2b5cf3(0x1560)](_0x5b98de[_0x2b5cf3(0x6d9)])),$gameVariables['setValue'](_0x5c5e8d['VariableHe'+'al'],_0x189bf6);}},VisuMZ['BattleCore'][_0x4258d1(0xd65)+'egExp']={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbb8)+'n_executeH'+'pDamage']=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x13f0)+_0x4258d1(0xd5f)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x13f0)+'amage']=function(_0x59da67,_0x3bca3c){const _0x584d42=_0x4258d1,_0x28f07b={'NImNP':function(_0x23f465,_0xae3c69){return _0x23f465>_0xae3c69;}};VisuMZ[_0x584d42(0x337)]['Game_Actio'+_0x584d42(0x1347)+_0x584d42(0x994)][_0x584d42(0xb14)](this,_0x59da67,_0x3bca3c);!this[_0x584d42(0x8b9)]()&&_0x59da67&&_0x28f07b[_0x584d42(0x9dc)](_0x59da67[_0x584d42(0xcfc)]()[_0x584d42(0x6d9)],0x1*-0xf09+0xddc*0x2+-0xcaf)&&this[_0x584d42(0x4b3)+_0x584d42(0x6c8)]('HP',_0x59da67,_0x59da67[_0x584d42(0xcfc)]()['hpDamage']);if(_0x59da67){this[_0x584d42(0x668)+'Damage']=this['_executeHp'+'Damage']||{};const _0x581a69=_0x59da67['battlerKey']();this['_executeHp'+'Damage'][_0x581a69]=_0x3bca3c;}},Game_Action[_0x4258d1(0xf38)]['getLastHpD'+'amage']=function(_0x120115){const _0x607f4e=_0x4258d1;this['_executeHp'+_0x607f4e(0x1683)]=this[_0x607f4e(0x668)+_0x607f4e(0x1683)]||{};const _0x4f1583=_0x120115[_0x607f4e(0xe71)]();return this[_0x607f4e(0x668)+'Damage'][_0x4f1583]||-0x162a+-0x1e36+0x20*0x1a3;},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbb8)+_0x4258d1(0xee8)+_0x4258d1(0x994)]=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x8d7)+_0x4258d1(0xd5f)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x8d7)+_0x4258d1(0xd5f)]=function(_0x1e1ee7,_0x34feef){const _0x187331=_0x4258d1,_0x494631={'ssQOD':function(_0x2ceb96,_0x20028e){return _0x2ceb96>_0x20028e;}};VisuMZ['BattleCore'][_0x187331(0xbb8)+_0x187331(0xee8)+_0x187331(0x994)][_0x187331(0xb14)](this,_0x1e1ee7,_0x34feef),!this[_0x187331(0x8b9)]()&&_0x1e1ee7&&_0x494631[_0x187331(0xe19)](_0x1e1ee7[_0x187331(0xcfc)]()[_0x187331(0x724)],0x771+0x887+-0x8*0x1ff)&&this[_0x187331(0x4b3)+_0x187331(0x6c8)]('MP',_0x1e1ee7,_0x1e1ee7[_0x187331(0xcfc)]()['mpDamage']);},Game_Action['prototype']['performLif'+_0x4258d1(0x6c8)]=function(_0x1deec8,_0x4a10e0,_0x3a0b2d){const _0x10bfdc=_0x4258d1,_0x4d2a2b={'ziLBN':function(_0x3a4e90,_0x389d3d){return _0x3a4e90<=_0x389d3d;},'nFXoH':function(_0x274651,_0x8e1c1d){return _0x274651*_0x8e1c1d;},'jJZTW':function(_0x72fadc,_0x3688df){return _0x72fadc<=_0x3688df;},'GPEVx':function(_0x3e4c0b,_0x2060cc){return _0x3e4c0b===_0x2060cc;},'jwCjU':function(_0x2140ea,_0x39a654){return _0x2140ea*_0x39a654;},'yMkow':function(_0x5734b1,_0x4c2d13){return _0x5734b1*_0x4c2d13;}};_0x1deec8=_0x1deec8[_0x10bfdc(0x191)+'e']()[_0x10bfdc(0xbb6)]();const _0x44b087=this[_0x10bfdc(0xe45)+_0x10bfdc(0x3cb)](_0x1deec8,_0x4a10e0);if(_0x4d2a2b['ziLBN'](_0x44b087,-0x67+0x1ef4*-0x1+0x1f5b))return;const _0x2db7ab=Math['round'](_0x4d2a2b['nFXoH'](_0x3a0b2d,_0x44b087));if(_0x4d2a2b[_0x10bfdc(0x102a)](_0x2db7ab,0x6b9+0x1679+0x1d32*-0x1))return;let _0x5222e9=this[_0x10bfdc(0x8e9)]();if(this[_0x10bfdc(0x3e6)+_0x10bfdc(0x712)])_0x5222e9=this['_reflectio'+_0x10bfdc(0x712)];const _0x5a2b3f=_0x4a10e0[_0x10bfdc(0x613)+'LifeSteal'](_0x1deec8)?-(-0x1*0x1265+-0x9c3*0x2+-0xca4*-0x3):0x4*-0x727+0x140f+-0x88e*-0x1;if(_0x4d2a2b[_0x10bfdc(0x64a)](_0x1deec8,'HP'))_0x5222e9[_0x10bfdc(0xb6b)](_0x4d2a2b[_0x10bfdc(0x74f)](_0x5a2b3f,_0x2db7ab));if(_0x4d2a2b[_0x10bfdc(0x64a)](_0x1deec8,'MP'))_0x5222e9[_0x10bfdc(0x212)](_0x4d2a2b['yMkow'](_0x5a2b3f,_0x2db7ab));},Game_Action[_0x4258d1(0xf38)]['lifeStealR'+_0x4258d1(0x3cb)]=function(_0x29840e,_0x39be69){const _0x5e04c3=_0x4258d1;if(this[_0x5e04c3(0x261)+_0x5e04c3(0x723)](_0x29840e))return 0x1cfb+-0xd12+-0xfe9*0x1;if(this[_0x5e04c3(0x8e9)]()[_0x5e04c3(0x967)+_0x5e04c3(0x723)](_0x29840e))return-0x1838+0x1169+0x6cf;if(_0x39be69[_0x5e04c3(0x15ad)+_0x5e04c3(0x6c8)](_0x29840e))return 0x11dd+-0x7b7*0x3+0x548*0x1;let _0x176e0f=-0x152f+0x1578+-0x49;return _0x176e0f+=this[_0x5e04c3(0x5be)+_0x5e04c3(0x7a6)](_0x29840e),_0x176e0f+=this[_0x5e04c3(0x8e9)]()[_0x5e04c3(0xe45)+_0x5e04c3(0x3cb)](_0x29840e,this[_0x5e04c3(0x780)]()[_0x5e04c3(0x75f)]),_0x176e0f[_0x5e04c3(0x3d5)](0x71*-0x11+-0xeb4+-0x1*-0x1635,0x2*0xceb+-0x138f+-0x92*0xb);},Game_Action['prototype'][_0x4258d1(0x261)+'feSteal']=function(_0x329e96){const _0x2289c0=_0x4258d1,_0x3bd973={'htOLW':function(_0xdb1f5f,_0x27e01b){return _0xdb1f5f===_0x27e01b;}};_0x329e96=_0x329e96[_0x2289c0(0x191)+'e']()['trim']();const _0xb925a8=VisuMZ[_0x2289c0(0x337)]['LifeStealR'+_0x2289c0(0x5ea)],_0x485f43=this[_0x2289c0(0x780)]()[_0x2289c0(0x278)]||'';if(_0x485f43[_0x2289c0(0x79c)](_0xb925a8[_0x2289c0(0xda1)+'Steal']))return!![];if(_0x3bd973[_0x2289c0(0xf3b)](_0x329e96,'HP')&&_0x485f43[_0x2289c0(0x79c)](_0xb925a8[_0x2289c0(0x1461)+'feSteal']))return!![];if(_0x3bd973[_0x2289c0(0xf3b)](_0x329e96,'MP')&&_0x485f43['match'](_0xb925a8[_0x2289c0(0xf78)+_0x2289c0(0x723)]))return!![];return![];},Game_Action['prototype'][_0x4258d1(0x5be)+_0x4258d1(0x7a6)]=function(_0xd3531){const _0x12e443=_0x4258d1,_0x4a3f73={'CxMCH':function(_0x58c1ab,_0x54cf7f){return _0x58c1ab(_0x54cf7f);},'nXqjj':function(_0xef874f,_0x22ba1f){return _0xef874f*_0x22ba1f;},'rbWHs':function(_0x5d4804,_0x5a97b8){return _0x5d4804(_0x5a97b8);},'gMquM':function(_0x479536,_0x400774){return _0x479536!==_0x400774;}},_0x2e4740=VisuMZ['BattleCore'][_0x12e443(0xd65)+_0x12e443(0x5ea)],_0x1ddaa4=this[_0x12e443(0x780)]()[_0x12e443(0x278)]||'';_0xd3531=_0xd3531[_0x12e443(0x191)+'e']()[_0x12e443(0xbb6)]();const _0x6cbdf1=_0x1ddaa4['match'](_0x2e4740[_0x12e443(0x106a)+'em']);if(_0x6cbdf1)for(const _0xe74424 of _0x6cbdf1){_0xe74424[_0x12e443(0x79c)](_0x2e4740[_0x12e443(0x106a)+'em']);const _0x65b96e=_0x4a3f73[_0x12e443(0xd6e)](String,RegExp['$1'])[_0x12e443(0x191)+'e']()[_0x12e443(0xbb6)](),_0x3f16c5=_0x4a3f73[_0x12e443(0xa97)](_0x4a3f73['rbWHs'](Number,RegExp['$2']),0x24a8+-0x256d+-0x1*-0xc5+0.01);if(_0x4a3f73[_0x12e443(0xa01)](_0x65b96e,_0xd3531))continue;return _0x3f16c5;}return-0x13d1+-0x49*0x23+-0x2*-0xee6;},Game_BattlerBase[_0x4258d1(0xf38)]['lifeStealR'+_0x4258d1(0x3cb)]=function(_0x3e672b,_0xc0cd76){const _0x2701fc=_0x4258d1,_0x14dd63={'aDCEb':function(_0x2c5b3a,_0x5c6596){return _0x2c5b3a(_0x5c6596);},'GADTr':function(_0x50111e,_0x301c7f){return _0x50111e*_0x301c7f;},'bPEQa':function(_0x51a9a7,_0x493e0d){return _0x51a9a7(_0x493e0d);},'UDFoW':function(_0x1c4ba8,_0x46114d){return _0x1c4ba8!==_0x46114d;},'cqJfC':function(_0x3caf20,_0x2e1454){return _0x3caf20===_0x2e1454;},'GbIXS':function(_0x576031,_0x5654dc){return _0x576031===_0x5654dc;}},_0x636f5d=VisuMZ[_0x2701fc(0x337)][_0x2701fc(0xd65)+'egExp'];let _0x2900c=0xa47+0xca6+0x1*-0x16ed;_0x3e672b=_0x3e672b[_0x2701fc(0x191)+'e']()[_0x2701fc(0xbb6)]();for(const _0x14e13d of this['traitObjec'+'ts']()){if(!_0x14e13d)continue;const _0x516495=_0x14e13d['note']||'',_0x3aeb73=_0x516495[_0x2701fc(0x79c)](_0x636f5d[_0x2701fc(0x150c)+'rait']);if(_0x3aeb73)for(const _0x357545 of _0x3aeb73){_0x357545['match'](_0x636f5d['lifeStealT'+_0x2701fc(0x9d3)]);const _0x51eaeb=_0x14dd63[_0x2701fc(0x45d)](String,RegExp['$1'])['toUpperCas'+'e']()['trim'](),_0x20b617=_0x14dd63[_0x2701fc(0x45d)](String,RegExp['$2']),_0x4b27ac=_0x14dd63['GADTr'](_0x14dd63[_0x2701fc(0x682)](Number,RegExp['$3']),0x3d*0x28+-0x24a6+0x1b1e+0.01);if(_0x14dd63['UDFoW'](_0x51eaeb,_0x3e672b))continue;if(_0x14dd63[_0x2701fc(0x2d3)](_0xc0cd76,Game_Action[_0x2701fc(0x624)+_0x2701fc(0x80b)])&&_0x20b617['match'](/CERTAIN/i))_0x2900c+=_0x4b27ac;else{if(_0x14dd63[_0x2701fc(0x1596)](_0xc0cd76,Game_Action[_0x2701fc(0xe10)+'YSICAL'])&&_0x20b617[_0x2701fc(0x79c)](/PHYS/i))_0x2900c+=_0x4b27ac;else _0x14dd63[_0x2701fc(0x1596)](_0xc0cd76,Game_Action[_0x2701fc(0xb55)+'GICAL'])&&_0x20b617['match'](/MAGIC/i)&&(_0x2900c+=_0x4b27ac);}}}return _0x2900c;},Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x967)+_0x4258d1(0x723)]=function(_0x13ec88){const _0x5b84ac=_0x4258d1,_0x2400e0={'zCoyr':function(_0xc2470e,_0x435e77){return _0xc2470e===_0x435e77;},'fOZaD':function(_0x3b7be9,_0x40113d){return _0x3b7be9===_0x40113d;}};_0x13ec88=_0x13ec88[_0x5b84ac(0x191)+'e']()[_0x5b84ac(0xbb6)]();const _0x14bb8c=VisuMZ[_0x5b84ac(0x337)][_0x5b84ac(0xd65)+'egExp'];for(const _0x3b6eaa of this[_0x5b84ac(0x522)+'ts']()){if(!_0x3b6eaa)continue;const _0x58c197=_0x3b6eaa[_0x5b84ac(0x278)]||'';if(_0x58c197[_0x5b84ac(0x79c)](_0x14bb8c[_0x5b84ac(0xab3)+_0x5b84ac(0xd52)]))return!![];if(_0x2400e0['zCoyr'](_0x13ec88,'HP')&&_0x58c197[_0x5b84ac(0x79c)](_0x14bb8c['disarmHpLi'+_0x5b84ac(0x723)]))return!![];if(_0x2400e0[_0x5b84ac(0x9d8)](_0x13ec88,'MP')&&_0x58c197['match'](_0x14bb8c[_0x5b84ac(0x223)+_0x5b84ac(0x723)]))return!![];}return![];},Game_BattlerBase[_0x4258d1(0xf38)]['isNegative'+_0x4258d1(0x936)]=function(_0x48ee14){const _0xefe43a=_0x4258d1,_0x1ee217={'BSzGg':function(_0x2e68ef,_0x2c9278){return _0x2e68ef===_0x2c9278;}};_0x48ee14=_0x48ee14[_0xefe43a(0x191)+'e']()[_0xefe43a(0xbb6)]();const _0x986840=VisuMZ[_0xefe43a(0x337)][_0xefe43a(0xd65)+'egExp'];for(const _0x464b80 of this['traitObjec'+'ts']()){if(!_0x464b80)continue;const _0x54ea8d=_0x464b80['note']||'';if(_0x54ea8d[_0xefe43a(0x79c)](_0x986840[_0xefe43a(0xc0c)+_0xefe43a(0x723)]))return!![];if(_0x1ee217[_0xefe43a(0x4c0)](_0x48ee14,'HP')&&_0x54ea8d[_0xefe43a(0x79c)](_0x986840[_0xefe43a(0x8ea)+'LifeSteal']))return!![];if(_0x1ee217[_0xefe43a(0x4c0)](_0x48ee14,'MP')&&_0x54ea8d[_0xefe43a(0x79c)](_0x986840['negativeMp'+'LifeSteal']))return!![];}return![];},Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x15ad)+_0x4258d1(0x6c8)]=function(_0x17b276){const _0x58a318=_0x4258d1,_0x262c58={'NZAjd':function(_0x115924,_0x1ed5c3){return _0x115924===_0x1ed5c3;}};_0x17b276=_0x17b276['toUpperCas'+'e']()[_0x58a318(0xbb6)]();const _0x345f5c=VisuMZ[_0x58a318(0x337)][_0x58a318(0xd65)+'egExp'];for(const _0xf667a3 of this[_0x58a318(0x522)+'ts']()){if(!_0xf667a3)continue;const _0x3eb6fc=_0xf667a3['note']||'';if(_0x3eb6fc[_0x58a318(0x79c)](_0x345f5c[_0x58a318(0x1256)+_0x58a318(0x1272)]))return!![];if(_0x262c58[_0x58a318(0xa36)](_0x17b276,'HP')&&_0x3eb6fc[_0x58a318(0x79c)](_0x345f5c[_0x58a318(0x38f)+'eSteal']))return!![];if(_0x262c58[_0x58a318(0xa36)](_0x17b276,'MP')&&_0x3eb6fc[_0x58a318(0x79c)](_0x345f5c[_0x58a318(0x1f0)+'eSteal']))return!![];}return![];},VisuMZ['BattleCore'][_0x4258d1(0x3d4)+'erBase_ini'+'tMembers']=Game_BattlerBase['prototype'][_0x4258d1(0x104c)+'s'],Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x104c)+'s']=function(){const _0x1fdc1d=_0x4258d1;VisuMZ[_0x1fdc1d(0x337)][_0x1fdc1d(0x3d4)+_0x1fdc1d(0x707)+_0x1fdc1d(0x1489)]['call'](this),this[_0x1fdc1d(0x104c)+_0x1fdc1d(0x9f0)+'e']();},Game_BattlerBase[_0x4258d1(0xf38)]['initMember'+_0x4258d1(0x9f0)+'e']=function(){const _0x1c0965=_0x4258d1;this[_0x1c0965(0x584)]=![];},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x3d4)+_0x4258d1(0x1052)+_0x4258d1(0x16bc)]=Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x164d)],Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x164d)]=function(){const _0x478173=_0x4258d1;this[_0x478173(0x13a4)]={},VisuMZ[_0x478173(0x337)]['Game_Battl'+_0x478173(0x1052)+'resh'][_0x478173(0xb14)](this);},Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x674)+_0x4258d1(0x1661)]=function(_0x4ca2db){const _0x1ad532=_0x4258d1,_0x4d7146={'mopee':function(_0x2f7f22,_0x9e0cc5){return _0x2f7f22!==_0x9e0cc5;}};return this['_cache']=this['_cache']||{},_0x4d7146[_0x1ad532(0xcb2)](this['_cache'][_0x4ca2db],undefined);},Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x408)+_0x4258d1(0x7da)]=function(){const _0x461e36=_0x4258d1,_0x23094c={'LdciF':function(_0x3726bf,_0x3532e0){return _0x3726bf!==_0x3532e0;},'MmFOh':function(_0x543929,_0x2b9b1b){return _0x543929>_0x2b9b1b;},'uoJyo':function(_0x266331,_0x21a629){return _0x266331<=_0x21a629;}};if(_0x23094c[_0x461e36(0x13cc)](this[_0x461e36(0x13a4)][_0x461e36(0x408)+_0x461e36(0x7da)],undefined))return this['_cache'][_0x461e36(0x408)+_0x461e36(0x7da)];const _0x21f855=/<DAMAGE CAP:[ ](\d+)>/i,_0x117137=this[_0x461e36(0x522)+'ts']()[_0x461e36(0x15f9)](_0x37e15f=>_0x37e15f&&_0x37e15f[_0x461e36(0x278)][_0x461e36(0x79c)](_0x21f855)?Number(RegExp['$1']):-0x77+-0x1e6d+0x1ee4);let _0x3164da=_0x23094c['MmFOh'](_0x117137[_0x461e36(0x1645)],-0x1d0*0x13+-0x14e4+0x3754)?Math[_0x461e36(0x503)](..._0x117137):-0x1*-0x1701+0x8*0x273+-0xe33*0x3;if(_0x23094c[_0x461e36(0x64f)](_0x3164da,0x9c1+-0x1588+0xbc7))_0x3164da=VisuMZ['BattleCore']['Settings'][_0x461e36(0x1683)][_0x461e36(0x74e)+_0x461e36(0xefa)];return this[_0x461e36(0x13a4)]['hardDamage'+_0x461e36(0x7da)]=_0x3164da,this[_0x461e36(0x13a4)]['hardDamage'+_0x461e36(0x7da)];},Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x1129)+_0x4258d1(0x766)]=function(){const _0x2a8d2c=_0x4258d1,_0x25c019={'bSUiM':function(_0x4b7a4a,_0x396385){return _0x4b7a4a!==_0x396385;}};if(_0x25c019[_0x2a8d2c(0x15f3)](this['_cache'][_0x2a8d2c(0x1129)+_0x2a8d2c(0x7da)],undefined))return this[_0x2a8d2c(0x13a4)][_0x2a8d2c(0x1129)+'Cap'];let _0x3fdbc6=VisuMZ[_0x2a8d2c(0x337)]['Settings'][_0x2a8d2c(0x1683)][_0x2a8d2c(0xc67)+'tCap'];const _0x1ec4a1=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x45f9f9=this[_0x2a8d2c(0x522)+'ts']()[_0x2a8d2c(0x15f9)](_0x3908c7=>_0x3908c7&&_0x3908c7['note'][_0x2a8d2c(0x79c)](_0x1ec4a1)?Number(RegExp['$1'])/(-0x2013+0x5ea*-0x2+-0x187*-0x1d):-0x1*-0x18c3+0x791+0x4*-0x815);return _0x3fdbc6=_0x45f9f9[_0x2a8d2c(0x145e)]((_0x42f635,_0x4a1a85)=>_0x42f635+_0x4a1a85,_0x3fdbc6),this['_cache'][_0x2a8d2c(0x1129)+'Cap']=_0x3fdbc6,this['_cache'][_0x2a8d2c(0x1129)+'Cap']['clamp'](-0x12e4+0x10e*-0x3+0x75a*0x3+0.01,0x15c7*0x1+-0x1*0x26b0+-0x362*-0x5);},VisuMZ[_0x4258d1(0x337)]['Game_Battl'+'erBase_die']=Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0xd58)],Game_BattlerBase[_0x4258d1(0xf38)]['die']=function(){const _0x33b5c0=_0x4258d1,_0x26a2d3={'dzRsz':_0x33b5c0(0x3f5)};VisuMZ[_0x33b5c0(0x337)]['Game_Battl'+_0x33b5c0(0x8fe)][_0x33b5c0(0xb14)](this),SceneManager[_0x33b5c0(0x614)+_0x33b5c0(0x6e5)]()&&(this['requestMot'+'ion'](_0x26a2d3[_0x33b5c0(0xf2a)]),this['_performDa'+'mageMotion']=undefined);},Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0xc06)]=function(){const _0x39f739=_0x4258d1;if(!SceneManager[_0x39f739(0x614)+_0x39f739(0x6e5)]())return null;if(!SceneManager['_scene'][_0x39f739(0x1b3)])return null;return SceneManager[_0x39f739(0x14b3)]['_spriteset']['findTarget'+_0x39f739(0x594)](this);},Game_BattlerBase[_0x4258d1(0xf38)]['svBattlerA'+_0x4258d1(0xd37)]=function(){const _0x54394f=_0x4258d1;return VisuMZ['BattleCore'][_0x54394f(0x424)][_0x54394f(0x1224)]['AnchorX'];},Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x297)+'nchorY']=function(){const _0x53e70f=_0x4258d1;return VisuMZ[_0x53e70f(0x337)][_0x53e70f(0x424)][_0x53e70f(0x1224)][_0x53e70f(0x937)];},Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0xd33)+_0x4258d1(0x722)+'le']=function(){const _0x24e333=_0x4258d1;return this[_0x24e333(0x1580)]&&this[_0x24e333(0x1580)]()?VisuMZ[_0x24e333(0x337)][_0x24e333(0x424)][_0x24e333(0x1224)][_0x24e333(0xd92)]:VisuMZ[_0x24e333(0x337)][_0x24e333(0x424)][_0x24e333(0xcce)]['Shadow'];},Game_BattlerBase['prototype']['battlerSmo'+_0x4258d1(0x1ec)]=function(){return!![];},Game_BattlerBase[_0x4258d1(0xf38)]['battleUIOf'+_0x4258d1(0x5e5)]=function(){return 0x8*0x485+0x148f+-0x38b7;},Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0xdd9)+_0x4258d1(0xd6c)]=function(){return 0x1*-0xb9d+0xaf7+-0x2*-0x53;},Game_BattlerBase[_0x4258d1(0xf38)]['createBatt'+_0x4258d1(0xb0c)+'X']=function(_0x430a78){const _0x14491f=_0x4258d1,_0x262353={'uQKOJ':function(_0xe0d960,_0x595685){return _0xe0d960(_0x595685);}};if(!_0x430a78)return 0x1d36+0x2643+-0x4379;let _0x206835=0x47d*-0x3+0x1d39*-0x1+0x2ab0;const _0x665369=_0x430a78['note'];return _0x665369[_0x14491f(0x79c)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x206835+=_0x262353[_0x14491f(0x10d6)](Number,RegExp['$1'])),_0x665369[_0x14491f(0x79c)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x206835+=_0x262353[_0x14491f(0x10d6)](Number,RegExp['$1'])),_0x206835;},Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0xa05)+_0x4258d1(0xb0c)+'Y']=function(_0x1a6c20){const _0x271fcb=_0x4258d1,_0x1aef09={'SikeM':function(_0x2d0506,_0x5dba58){return _0x2d0506(_0x5dba58);},'Cdydr':function(_0x51a851,_0x3c832f){return _0x51a851(_0x3c832f);}};if(!_0x1a6c20)return-0x25a7+-0x13e6+0x398d;let _0x55785e=0x1644+0x23b+-0x187f*0x1;const _0x3d2626=_0x1a6c20[_0x271fcb(0x278)];return _0x3d2626[_0x271fcb(0x79c)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x55785e+=_0x1aef09[_0x271fcb(0x844)](Number,RegExp['$1'])),_0x3d2626['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x55785e+=_0x1aef09[_0x271fcb(0x89b)](Number,RegExp['$2'])),_0x55785e;},VisuMZ['BattleCore'][_0x4258d1(0x3d4)+_0x4258d1(0x33f)+_0x4258d1(0x16a2)]=Game_BattlerBase['prototype'][_0x4258d1(0x14f8)+_0x4258d1(0xb0a)],Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x14f8)+'ist']=function(_0x4d2bf5){const _0x5d8b51=_0x4258d1,_0x109afb={'cyYmN':function(_0x30973a,_0x2cdb38){return _0x30973a===_0x2cdb38;}};if(_0x109afb['cyYmN'](_0x4d2bf5,this[_0x5d8b51(0x10da)+'Id']())&&this[_0x5d8b51(0xd4b)]())return!![];return VisuMZ[_0x5d8b51(0x337)][_0x5d8b51(0x3d4)+_0x5d8b51(0x33f)+_0x5d8b51(0x16a2)]['call'](this,_0x4d2bf5);},Game_BattlerBase[_0x4258d1(0xf38)]['isImmortal']=function(){const _0x2f1969=_0x4258d1;return this[_0x2f1969(0x584)];},Game_BattlerBase[_0x4258d1(0xf38)]['setImmorta'+'l']=function(_0x24d28e){const _0x18bcad=_0x4258d1;_0x24d28e?this[_0x18bcad(0x10b2)+'l']():this[_0x18bcad(0xc97)+'rtal']();},Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x10b2)+'l']=function(){const _0x3f3e99=_0x4258d1;if(this[_0x3f3e99(0xfce)]())return;this[_0x3f3e99(0x584)]=!![],this[_0x3f3e99(0xdc8)+'eApplied']=![];},Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0xc97)+'rtal']=function(){const _0x326f32=_0x4258d1,_0x1a2cd7=this[_0x326f32(0x266)]();this['_immortal']=![],_0x1a2cd7&&this[_0x326f32(0xdc8)+'eApplied']&&this[_0x326f32(0xd58)](),this['_deathStat'+_0x326f32(0x12a5)]=![],this[_0x326f32(0x164d)](),this[_0x326f32(0xfce)]()&&_0x1a2cd7&&(this[_0x326f32(0xa20)+_0x326f32(0x131b)](),this[_0x326f32(0x759)+_0x326f32(0x51e)]());},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbb8)+_0x4258d1(0x8a4)+'ts']=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x163c)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x163c)]=function(){const _0x575d48=_0x4258d1;return this['item']()?VisuMZ[_0x575d48(0x337)][_0x575d48(0xbb8)+_0x575d48(0x8a4)+'ts'][_0x575d48(0xb14)](this):0x19d7+-0x3b9*0x2+-0x1265;},VisuMZ['BattleCore'][_0x4258d1(0xbb8)+'n_setAttac'+'k']=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x64e)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x64e)]=function(){const _0x731960=_0x4258d1;this['subject']()&&this[_0x731960(0x8e9)]()['canAttack']()?VisuMZ['BattleCore'][_0x731960(0xbb8)+'n_setAttac'+'k']['call'](this):this['clear']();},VisuMZ[_0x4258d1(0x337)]['Game_Battl'+_0x4258d1(0x757)+'Attack']=Game_BattlerBase['prototype'][_0x4258d1(0xcaf)],Game_BattlerBase['prototype'][_0x4258d1(0xcaf)]=function(){const _0x19707f=_0x4258d1;if(!this['canAttackB'+'attleCore']())return![];return VisuMZ[_0x19707f(0x337)]['Game_Battl'+_0x19707f(0x757)+_0x19707f(0x1396)][_0x19707f(0xb14)](this);},Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x5c6)+'attleCore']=function(){const _0x1548bb=_0x4258d1;for(const _0x3998f2 of this['traitObjec'+'ts']()){if(!_0x3998f2)continue;if(_0x3998f2[_0x1548bb(0x278)][_0x1548bb(0x79c)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ['BattleCore'][_0x4258d1(0xbb8)+_0x4258d1(0xda8)]=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x138a)],Game_Action[_0x4258d1(0xf38)]['setGuard']=function(){const _0x1c47a6=_0x4258d1;this[_0x1c47a6(0x8e9)]()[_0x1c47a6(0x159d)]()&&VisuMZ[_0x1c47a6(0x337)]['Game_Actio'+_0x1c47a6(0xda8)]['call'](this);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x3d4)+_0x4258d1(0x757)+'Guard']=Game_BattlerBase['prototype']['canGuard'],Game_BattlerBase[_0x4258d1(0xf38)]['canGuard']=function(){const _0x9ced61=_0x4258d1;if(!this[_0x9ced61(0xd19)+'ttleCore']())return![];return VisuMZ[_0x9ced61(0x337)][_0x9ced61(0x3d4)+_0x9ced61(0x757)+_0x9ced61(0x1640)]['call'](this);},Game_BattlerBase[_0x4258d1(0xf38)]['canGuardBa'+_0x4258d1(0x6df)]=function(){const _0x11b133=_0x4258d1;for(const _0x5a3bcc of this[_0x11b133(0x522)+'ts']()){if(!_0x5a3bcc)continue;if(_0x5a3bcc[_0x11b133(0x278)]['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x4258d1(0xf38)]['canUseItem'+_0x4258d1(0x68a)]=function(){const _0x23663d=_0x4258d1;for(const _0x83d748 of this[_0x23663d(0x522)+'ts']()){if(!_0x83d748)continue;if(_0x83d748[_0x23663d(0x278)]['match'](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x4258d1(0x337)]['Game_Battl'+_0x4258d1(0xf84)+'tsUsableIt'+'emConditio'+'ns']=Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x12ff)+'eItemCondi'+_0x4258d1(0x14e5)],Game_BattlerBase[_0x4258d1(0xf38)][_0x4258d1(0x12ff)+_0x4258d1(0x10bc)+_0x4258d1(0x14e5)]=function(_0x5bc0b4){const _0x344a81=_0x4258d1,_0x4057b6={'uKfjc':function(_0x4c7529,_0x494553){return _0x4c7529===_0x494553;},'fxSJY':function(_0x482909,_0x4ec52f){return _0x482909===_0x4ec52f;}};if(_0x5bc0b4&&_0x5bc0b4['note'][_0x344a81(0x79c)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x1a1631=this[_0x344a81(0xf99)+'t']()[_0x344a81(0xe7e)+'rs']();if(_0x4057b6[_0x344a81(0xfb5)](_0x1a1631[_0x344a81(0x1645)],0x19f7*-0x1+-0x1d9d+0x11*0x345)&&_0x4057b6[_0x344a81(0x2e9)](_0x1a1631[-0x26e+0x11c2+0x4*-0x3d5],this))return![];}return VisuMZ[_0x344a81(0x337)]['Game_Battl'+_0x344a81(0xf84)+_0x344a81(0x382)+'emConditio'+'ns'][_0x344a81(0xb14)](this,_0x5bc0b4);},Game_Battler['prototype'][_0x4258d1(0x10b9)+_0x4258d1(0x1616)]=function(){const _0x26ea32=_0x4258d1;return VisuMZ['BattleCore'][_0x26ea32(0x424)][_0x26ea32(0x12c8)][_0x26ea32(0x3cd)+_0x26ea32(0x1616)];},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x3d4)+'er_regener'+_0x4258d1(0x716)]=Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x114a)+_0x4258d1(0x1231)],Game_Battler[_0x4258d1(0xf38)]['regenerate'+_0x4258d1(0x1231)]=function(){const _0x317ead=_0x4258d1,_0x319c01={'VGvnx':'4|3|0|5|2|'+'1','YOYWJ':_0x317ead(0x73f)+_0x317ead(0x7ff),'DkGgX':function(_0x252398,_0x1fc0f2){return _0x252398===_0x1fc0f2;},'CDysq':function(_0x5cf746,_0x56bd2d){return _0x5cf746<=_0x56bd2d;},'AUWxw':function(_0x54261c,_0x3fb070){return _0x54261c<=_0x3fb070;},'yTFvI':_0x317ead(0x59d)+_0x317ead(0x110d)},_0x42aa17=_0x319c01['VGvnx']['split']('|');let _0x1ac377=0x1*-0x1517+0x1*-0x16a+0x1681;while(!![]){switch(_0x42aa17[_0x1ac377++]){case'0':this[_0x317ead(0x1509)+_0x317ead(0x11f2)]=Graphics[_0x317ead(0xa1b)];continue;case'1':SceneManager[_0x317ead(0x614)+'tle']()&&(this[_0x317ead(0x114a)+_0x317ead(0x16ba)+_0x317ead(0x27b)](),this[_0x317ead(0x1fc)+_0x317ead(0x705)](_0x319c01[_0x317ead(0x143c)]));continue;case'2':VisuMZ[_0x317ead(0x337)][_0x317ead(0x3d4)+_0x317ead(0xb6d)+_0x317ead(0x716)][_0x317ead(0xb14)](this);continue;case'3':if(SceneManager[_0x317ead(0x614)+'tle']()&&BattleManager[_0x317ead(0x13c5)]()&&_0x319c01[_0x317ead(0x274)](this[_0x317ead(0x1509)+'FrameCount'],Graphics[_0x317ead(0xa1b)]))return;continue;case'4':if(SceneManager[_0x317ead(0x614)+_0x317ead(0x6e5)]()){if(BattleManager[_0x317ead(0x13c5)]()){if(_0x319c01['CDysq'](this['turnCount'](),-0x6a1+-0x14ab+0x2*0xda6))return;}else{if(_0x319c01['AUWxw']($gameTroop[_0x317ead(0xd6b)](),0x2273+-0x1*0x575+-0x6*0x4d5))return;}}continue;case'5':SceneManager[_0x317ead(0x614)+_0x317ead(0x6e5)]()&&this[_0x317ead(0x1fc)+_0x317ead(0x705)](_0x319c01['yTFvI']);continue;}break;}},Game_Battler[_0x4258d1(0xf38)]['regenerate'+'AllBattleC'+_0x4258d1(0x27b)]=function(){const _0xbb260f=_0x4258d1;if(SceneManager[_0xbb260f(0x614)+_0xbb260f(0x6e5)]())for(const _0x1163c3 of this[_0xbb260f(0x522)+'ts']()){if(!_0x1163c3)continue;this[_0xbb260f(0x761)+_0xbb260f(0x8c0)+'eAnimation'](_0x1163c3);}},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x761)+_0x4258d1(0x8c0)+_0x4258d1(0x133f)]=function(_0x39bf39){const _0x169c83=_0x4258d1,_0x51494c={'rKQEg':function(_0x1b26b2,_0x5c1535){return _0x1b26b2(_0x5c1535);}};if(!Imported['VisuMZ_0_C'+_0x169c83(0x138e)])return;if(!SceneManager[_0x169c83(0x614)+_0x169c83(0x6e5)]())return;if(this[_0x169c83(0xfce)]())return;if(this[_0x169c83(0x1022)]())return;if(_0x39bf39[_0x169c83(0x278)][_0x169c83(0x79c)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x263f97=_0x51494c[_0x169c83(0x15ab)](Number,RegExp['$1']);$gameTemp[_0x169c83(0x5c2)+_0x169c83(0x227)]([this],_0x263f97,![],![]);}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x3d4)+'er_startTp'+_0x4258d1(0x7b6)]=Game_Battler[_0x4258d1(0xf38)]['startTpbTu'+'rn'],Game_Battler['prototype']['startTpbTu'+'rn']=function(){const _0x1f0080=_0x4258d1,_0x3f117c={'OFRPR':'PreStartTu'+_0x1f0080(0x986),'yMwuT':_0x1f0080(0x84b)+_0x1f0080(0x1493)};this[_0x1f0080(0x1fc)+_0x1f0080(0x705)](_0x3f117c['OFRPR']),VisuMZ[_0x1f0080(0x337)][_0x1f0080(0x3d4)+'er_startTp'+_0x1f0080(0x7b6)][_0x1f0080(0xb14)](this),this['processBat'+_0x1f0080(0x705)](_0x3f117c[_0x1f0080(0x6c0)]);},VisuMZ['BattleCore'][_0x4258d1(0x3d4)+_0x4258d1(0x983)+'nd']=Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0xd80)],Game_Battler['prototype'][_0x4258d1(0xd80)]=function(){const _0xeec047=_0x4258d1,_0x27ca19={'vvVyr':_0xeec047(0x726)+'JS','AxwKz':'PostEndTur'+_0xeec047(0x1201)};this[_0xeec047(0x1fc)+_0xeec047(0x705)](_0x27ca19[_0xeec047(0x1086)]),VisuMZ['BattleCore']['Game_Battl'+_0xeec047(0x983)+'nd'][_0xeec047(0xb14)](this),VisuMZ[_0xeec047(0x337)]['Settings'][_0xeec047(0x12c8)]['SyncBuffEx'+_0xeec047(0x1032)]&&this[_0xeec047(0x1140)+'sAuto'](),this[_0xeec047(0x1fc)+_0xeec047(0x705)](_0x27ca19[_0xeec047(0x481)]);},Game_Battler['prototype'][_0x4258d1(0x1fc)+'tleCoreJS']=function(_0x19b35b){const _0x39d257=_0x4258d1;if(this['_tempBattl'+'er']||this[_0x39d257(0x6e2)])return;const _0x52bec2=VisuMZ[_0x39d257(0x337)]['Settings']['Mechanics'];if(_0x52bec2[_0x19b35b])_0x52bec2[_0x19b35b][_0x39d257(0xb14)](this);for(const _0x126f9d of this[_0x39d257(0x522)+'ts']()){if(!_0x126f9d)continue;key=VisuMZ[_0x39d257(0x337)][_0x39d257(0x66d)+'S'](_0x126f9d,_0x19b35b),VisuMZ[_0x39d257(0x337)]['JS'][key]&&VisuMZ[_0x39d257(0x337)]['JS'][key][_0x39d257(0xb14)](this,this,this,_0x126f9d,0xd39+0x14b*-0x2+-0xaa3);}},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x15f7)]=function(){const _0x490869=_0x4258d1;return VisuMZ[_0x490869(0x337)][_0x490869(0x424)]['Actor'][_0x490869(0x5d2)]||![];},Game_Battler[_0x4258d1(0xf38)]['isChanting']=function(){const _0x1d5b43=_0x4258d1,_0x5179c8={'PJqAE':function(_0x5030c0,_0x49bd55){return _0x5030c0===_0x49bd55;},'KffIL':'casting'};if(this[_0x1d5b43(0xfec)]()){if(this['chantStyle']()){if(this[_0x1d5b43(0x775)][_0x1d5b43(0x13d2)](_0x6e0a01=>_0x6e0a01[_0x1d5b43(0x780)]()&&_0x6e0a01[_0x1d5b43(0x110e)]()))return!![];}else{if(this[_0x1d5b43(0x775)]['some'](_0x471b69=>_0x471b69[_0x1d5b43(0x780)]()&&_0x471b69[_0x1d5b43(0xef7)+'ll']()))return!![];}}if(BattleManager[_0x1d5b43(0x13c5)]()&&_0x5179c8[_0x1d5b43(0x112d)](this[_0x1d5b43(0x1419)],_0x5179c8[_0x1d5b43(0x1017)]))return this[_0x1d5b43(0x15f7)]()?this[_0x1d5b43(0x195)+_0x1d5b43(0x1485)]()&&this[_0x1d5b43(0x195)+_0x1d5b43(0x1485)]()[_0x1d5b43(0x780)]()&&this[_0x1d5b43(0x195)+'ion']()[_0x1d5b43(0x110e)]():this['currentAct'+_0x1d5b43(0x1485)]()&&this[_0x1d5b43(0x195)+_0x1d5b43(0x1485)]()['item']()&&this[_0x1d5b43(0x195)+_0x1d5b43(0x1485)]()[_0x1d5b43(0xef7)+'ll']();return![];},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x78e)]=function(){const _0x3922c7=_0x4258d1,_0xd1e455={'gjtgs':function(_0x1cd1eb,_0x5e2a3d){return _0x1cd1eb===_0x5e2a3d;},'Wywwk':_0x3922c7(0xb08)};if(BattleManager['isTpb']()&&_0xd1e455['gjtgs'](this[_0x3922c7(0x1419)],_0xd1e455['Wywwk']))return this[_0x3922c7(0x15f7)]()?this[_0x3922c7(0x195)+'ion']()&&this['currentAct'+_0x3922c7(0x1485)]()['item']()&&!this[_0x3922c7(0x195)+'ion']()[_0x3922c7(0x110e)]():this[_0x3922c7(0x195)+_0x3922c7(0x1485)]()&&this[_0x3922c7(0x195)+_0x3922c7(0x1485)]()[_0x3922c7(0x780)]()&&!this[_0x3922c7(0x195)+'ion']()[_0x3922c7(0xef7)+'ll']();return![];},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x3d4)+_0x4258d1(0x119a)+_0x4258d1(0xfc7)]=Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x13da)+_0x4258d1(0x47f)],Game_Battler['prototype'][_0x4258d1(0x13da)+_0x4258d1(0x47f)]=function(){const _0x1fe190=_0x4258d1;VisuMZ[_0x1fe190(0x337)][_0x1fe190(0x3d4)+'er_clearDa'+_0x1fe190(0xfc7)][_0x1fe190(0xb14)](this),this[_0x1fe190(0x69f)+_0x1fe190(0x649)]=[];},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0xa5f)+'pupRequest'+'ed']=function(){const _0x1ae5b4=_0x4258d1,_0x4ecadb={'QEfFT':function(_0x59e5e7,_0x43bb31){return _0x59e5e7>_0x43bb31;}};if(!this[_0x1ae5b4(0x69f)+_0x1ae5b4(0x649)])this[_0x1ae5b4(0x13da)+_0x1ae5b4(0x47f)]();return _0x4ecadb[_0x1ae5b4(0x12ac)](this[_0x1ae5b4(0x69f)+_0x1ae5b4(0x649)]['length'],-0x516+0x14b7*0x1+-0xfa1);},Game_Battler['prototype'][_0x4258d1(0x14d6)+_0x4258d1(0x47f)]=function(){const _0x51fc10=_0x4258d1;if(!SceneManager[_0x51fc10(0x614)+_0x51fc10(0x6e5)]())return;if(BattleManager['shouldHide'+_0x51fc10(0x1372)+_0x51fc10(0x9e8)]())return;if(!this[_0x51fc10(0x69f)+_0x51fc10(0x649)])this[_0x51fc10(0x13da)+_0x51fc10(0x47f)]();this[_0x51fc10(0x12a2)+_0x51fc10(0x15ff)+_0x51fc10(0xb2b)]();const _0x1e0150=this['battler']();if(_0x1e0150)_0x1e0150[_0x51fc10(0x10c0)+_0x51fc10(0x47f)]();},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x12a2)+'rateDamage'+_0x4258d1(0xb2b)]=function(){const _0x257068=_0x4258d1,_0xe7e831={'TDlux':function(_0x2de414,_0x586b5b){return _0x2de414!==_0x586b5b;}},_0x2686b6=this[_0x257068(0xcfc)]();if(_0x2686b6[_0x257068(0x6fd)]||_0x2686b6[_0x257068(0x9d2)]){const _0x9e4026=JsonEx[_0x257068(0x15e4)+'py'](_0x2686b6);_0x9e4026[_0x257068(0xfbf)]=![],_0x9e4026[_0x257068(0x724)]=-0x8d2+-0x4*0x3e3+-0x2*-0xc2f,this[_0x257068(0x69f)+_0x257068(0x649)][_0x257068(0x88f)](_0x9e4026);if(!_0x2686b6[_0x257068(0x6d9)]&&!_0x2686b6[_0x257068(0x724)])return;}if(_0x2686b6['hpAffected']){const _0x2fe46d=JsonEx[_0x257068(0x15e4)+'py'](_0x2686b6);_0x2fe46d[_0x257068(0x6fd)]=![],_0x2fe46d[_0x257068(0x9d2)]=![],_0x2fe46d[_0x257068(0x724)]=-0xd*0xc3+0x2*-0xd8e+0x1*0x2503,this['_damagePop'+_0x257068(0x649)][_0x257068(0x88f)](_0x2fe46d);}if(_0xe7e831[_0x257068(0x12ca)](_0x2686b6['mpDamage'],0x62d*-0x5+0x16d*0x19+0x131*-0x4)){const _0x3960af=JsonEx[_0x257068(0x15e4)+'py'](_0x2686b6);_0x3960af['missed']=![],_0x3960af['evaded']=![],_0x3960af[_0x257068(0xfbf)]=![],this[_0x257068(0x69f)+_0x257068(0x649)][_0x257068(0x88f)](_0x3960af);}},Game_Battler['prototype'][_0x4258d1(0xf45)+_0x4258d1(0x582)]=function(){const _0x5e12d3=_0x4258d1;if(!this[_0x5e12d3(0x69f)+_0x5e12d3(0x649)])this[_0x5e12d3(0x13da)+_0x5e12d3(0x47f)]();return VisuMZ['BattleCore'][_0x5e12d3(0x424)][_0x5e12d3(0x1683)][_0x5e12d3(0x2ee)+'ttom']?this[_0x5e12d3(0x69f)+_0x5e12d3(0x649)][_0x5e12d3(0xa6f)]():this['_damagePop'+_0x5e12d3(0x649)][_0x5e12d3(0x4ca)]();},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x1431)+_0x4258d1(0x295)]=function(_0x162e77,_0x2f99cd){const _0x4be7ba=_0x4258d1,_0x1924ae={'gWixn':_0x4be7ba(0x666)+_0x4be7ba(0xbce),'KvBZf':function(_0x593882,_0x23452f){return _0x593882<=_0x23452f;},'bQxFq':function(_0x5628a4,_0x551383){return _0x5628a4||_0x551383;},'CkBNn':_0x4be7ba(0x12e9)},_0xccccb5=_0x1924ae[_0x4be7ba(0x788)]['split']('|');let _0x1156dc=0xe9*0x25+-0x152*0xa+0x6d3*-0x3;while(!![]){switch(_0xccccb5[_0x1156dc++]){case'0':_0x2f99cd['flashColor']=_0x2f99cd[_0x4be7ba(0xc85)]||[-0x4e8+0x785+0xdf*-0x3,-0x84f*-0x2+-0x41*-0x5f+0x1*-0x28bd,-0x1bb1+-0x20c*0xd+0x364d,-0x10f+-0x1bd5+0x1ce4];continue;case'1':_0x2f99cd['flashDurat'+'ion']=_0x2f99cd[_0x4be7ba(0xd2b)+_0x4be7ba(0x1485)]||-0x908+0x842+0xc6;continue;case'2':if(_0x1924ae[_0x4be7ba(0xe89)](_0x162e77[_0x4be7ba(0x1645)],-0x1709*-0x1+-0x184f+-0xa3*-0x2))return;continue;case'3':_0x2f99cd=_0x1924ae[_0x4be7ba(0x197)](_0x2f99cd,{});continue;case'4':this[_0x4be7ba(0xc06)]()[_0x4be7ba(0x1431)+_0x4be7ba(0x295)](_0x162e77,_0x2f99cd);continue;case'5':if(BattleManager[_0x4be7ba(0x9df)+'BattleEndP'+_0x4be7ba(0x9e8)]())return;continue;case'6':_0x2f99cd[_0x4be7ba(0x506)]=_0x2f99cd[_0x4be7ba(0x506)]||_0x1924ae[_0x4be7ba(0x718)];continue;case'7':if(!SceneManager[_0x4be7ba(0x614)+_0x4be7ba(0x6e5)]())return;continue;case'8':if(!this[_0x4be7ba(0xc06)]())return;continue;}break;}},Game_Battler[_0x4258d1(0xf38)]['setupIconT'+'extPopup']=function(_0x4161fa,_0x2f9992,_0x5ef2a2){const _0x2d777a=_0x4258d1,_0x1b39fc={'FhMlZ':_0x2d777a(0x158d)+_0x2d777a(0x1001),'ZuYdV':_0x2d777a(0x12e9),'ZXDrK':function(_0xc86476,_0xa328fd){return _0xc86476||_0xa328fd;},'TcHSd':function(_0x41f91d,_0x120dbb){return _0x41f91d<=_0x120dbb;}},_0x10397d=_0x1b39fc[_0x2d777a(0x6a1)][_0x2d777a(0xba9)]('|');let _0x42caab=0x95*-0x2e+-0xd6c+0x1e*0x157;while(!![]){switch(_0x10397d[_0x42caab++]){case'0':if(!this['battler']())return;continue;case'1':_0x5ef2a2['textColor']=_0x5ef2a2[_0x2d777a(0x506)]||_0x1b39fc[_0x2d777a(0x1204)];continue;case'2':if(BattleManager['shouldHide'+_0x2d777a(0x1372)+_0x2d777a(0x9e8)]())return;continue;case'3':this[_0x2d777a(0xc06)]()[_0x2d777a(0x12c7)+_0x2d777a(0x519)](_0x4161fa,_0x2f9992,_0x5ef2a2);continue;case'4':_0x5ef2a2=_0x1b39fc[_0x2d777a(0x116e)](_0x5ef2a2,{});continue;case'5':if(_0x1b39fc[_0x2d777a(0x6a9)](_0x2f9992['length'],-0x1f8*0x3+0x2*-0x373+0x2*0x667))return;continue;case'6':_0x5ef2a2[_0x2d777a(0xc85)]=_0x5ef2a2['flashColor']||[0x7*0x31d+-0x2*0x1271+-0x1*-0xf17,-0x47*-0x79+-0x117*0x9+-0x17c0,0xab2+-0xd86+0x2d4,0x14a2+-0x1*0x842+-0xc60];continue;case'7':if(!SceneManager[_0x2d777a(0x614)+'tle']())return;continue;case'8':_0x5ef2a2['flashDurat'+_0x2d777a(0x1485)]=_0x5ef2a2[_0x2d777a(0xd2b)+_0x2d777a(0x1485)]||0x251e+0x16*0x1f+-0x27c8;continue;}break;}},Game_Battler['prototype'][_0x4258d1(0x14f6)+_0x4258d1(0x11ba)]=function(){const _0x2a8401=_0x4258d1;if(this[_0x2a8401(0x1022)]())return![];if(this[_0x2a8401(0x266)]()&&this[_0x2a8401(0x12d0)]())return!![];if(this['isEnemy']()&&this[_0x2a8401(0xb37)+'er']()){if(this[_0x2a8401(0xfce)]()&&this['allowColla'+_0x2a8401(0x553)]())return![];}else{if(this[_0x2a8401(0xfce)]())return![];}return!![];},VisuMZ['BattleCore'][_0x4258d1(0x3d4)+_0x4258d1(0x10b7)+_0x4258d1(0x940)]=Game_Battler[_0x4258d1(0xf38)]['clearMotio'+'n'],Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x2f0)+'n']=function(){const _0x3bd7bb=_0x4258d1;VisuMZ['BattleCore']['Game_Battl'+'er_clearMo'+'tion'][_0x3bd7bb(0xb14)](this),this['clearFreez'+_0x3bd7bb(0x1302)]();},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0xf77)+_0x4258d1(0xcd2)]=function(){return!![];},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x7e0)+_0x4258d1(0x8bf)]=function(){return![];},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x3d4)+_0x4258d1(0xa4f)+'eStart']=Game_Battler[_0x4258d1(0xf38)]['onBattleSt'+_0x4258d1(0x127e)],Game_Battler['prototype'][_0x4258d1(0x6fe)+_0x4258d1(0x127e)]=function(_0x1bc5ed){const _0x264d80=_0x4258d1;VisuMZ['BattleCore'][_0x264d80(0x3d4)+_0x264d80(0xa4f)+'eStart']['call'](this,_0x1bc5ed),this[_0x264d80(0x6fe)+_0x264d80(0x1550)+_0x264d80(0x27b)](_0x1bc5ed),this[_0x264d80(0x13da)+_0x264d80(0x47f)]();},Game_Battler[_0x4258d1(0xf38)]['onBattleSt'+_0x4258d1(0x1550)+_0x4258d1(0x27b)]=function(_0x4cc6cf){const _0xaa621e=_0x4258d1;this[_0xaa621e(0xae9)+_0xaa621e(0xf33)](![]),this[_0xaa621e(0xcbf)+'eX']=undefined,this[_0xaa621e(0xcbf)+'eY']=undefined;},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x3d4)+_0x4258d1(0xa4f)+_0x4258d1(0x1184)]=Game_Battler['prototype'][_0x4258d1(0x1082)+'d'],Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x1082)+'d']=function(){const _0x371bb3=_0x4258d1;VisuMZ['BattleCore'][_0x371bb3(0x3d4)+_0x371bb3(0xa4f)+'eEnd'][_0x371bb3(0xb14)](this),this['onBattleEn'+_0x371bb3(0x513)+'e']();},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x1082)+_0x4258d1(0x513)+'e']=function(){const _0x42f207=_0x4258d1;this[_0x42f207(0xcbf)+'eX']=undefined,this[_0x42f207(0xcbf)+'eY']=undefined;},VisuMZ[_0x4258d1(0x337)]['Game_Battl'+'er_perform'+_0x4258d1(0x839)+'t']=Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0xe11)+'ionStart'],Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0xe11)+'ionStart']=function(_0x314ce2){const _0x3a811a=_0x4258d1;VisuMZ[_0x3a811a(0x337)][_0x3a811a(0x3d4)+_0x3a811a(0x164a)+_0x3a811a(0x839)+'t'][_0x3a811a(0xb14)](this,_0x314ce2);if(!_0x314ce2[_0x3a811a(0x62f)]()){const _0xe20ac4=this['battler']();_0xe20ac4&&_0xe20ac4['stepForwar'+'d']();}this[_0x3a811a(0xae9)+_0x3a811a(0xf33)](![]);},Game_Battler[_0x4258d1(0xf38)]['performAct'+_0x4258d1(0x256)+_0x4258d1(0x1514)]=function(){const _0x436f9d=_0x4258d1,_0x59dc21={'SCKpW':function(_0x4f5621,_0x8d61e9){return _0x4f5621&&_0x8d61e9;}},_0x7c0a3f=this['_flinched'];this[_0x436f9d(0x1024)]=![];if(BattleManager['isActiveTp'+'b']()&&this['isInputtin'+'g']()){const _0x1a52de=this['battler']();if(_0x59dc21[_0x436f9d(0xfdf)](_0x1a52de,_0x7c0a3f))_0x1a52de[_0x436f9d(0x1061)+'d']();return;}const _0x2bf0cf=this['battler']();if(_0x2bf0cf)_0x2bf0cf[_0x436f9d(0xc39)]();this['setBattler'+'Flip'](![]),this[_0x436f9d(0x759)+_0x436f9d(0x51e)]();},Game_Battler['prototype'][_0x4258d1(0xe11)+_0x4258d1(0xb92)]=function(_0xe7b876){const _0x884f9e=_0x4258d1,_0x4a0fa7={'kFCVx':_0x884f9e(0xd64),'jLAzS':_0x884f9e(0x11d7),'WTUlv':'skill','XVqZD':_0x884f9e(0x780)};if(_0xe7b876['isAttack']())this[_0x884f9e(0x409)+_0x884f9e(0x1413)]();else{if(_0xe7b876['isGuard']())this[_0x884f9e(0x759)+_0x884f9e(0x1485)](_0x4a0fa7[_0x884f9e(0x1633)]);else{if(_0xe7b876[_0x884f9e(0x110e)]())this[_0x884f9e(0x759)+_0x884f9e(0x1485)](_0x4a0fa7[_0x884f9e(0x9be)]);else{if(_0xe7b876[_0x884f9e(0x83f)]())[-0xe4b*0x1+0x172+0x2*0x66d,-0x234b*-0x1+0x2e*-0x18+-0x371*0x9,-0x142d+-0x3f+0x1471*0x1,-0x1b62+0x9b0+0xfc*0x12][_0x884f9e(0x163f)](_0xe7b876[_0x884f9e(0x780)]()['damage'][_0x884f9e(0x1064)])?this['performAtt'+_0x884f9e(0x1413)]():this[_0x884f9e(0x759)+'ion'](_0x4a0fa7[_0x884f9e(0x5e4)]);else _0xe7b876['isItem']()&&this[_0x884f9e(0x759)+'ion'](_0x4a0fa7[_0x884f9e(0x235)]);}}}},Game_Battler[_0x4258d1(0xf38)]['getAttackM'+_0x4258d1(0xd7c)]=function(){const _0x63d7db=_0x4258d1;return $dataSystem[_0x63d7db(0x36e)+_0x63d7db(0x995)][0x1d4b*-0x1+-0x1f4c+0x3c97];},Game_Battler[_0x4258d1(0xf38)]['getAttackW'+'eaponAnima'+_0x4258d1(0xf9a)]=function(){const _0x61e226=_0x4258d1,_0x578ddb=this['getAttackM'+_0x61e226(0xd7c)]();return _0x578ddb?_0x578ddb[_0x61e226(0xddf)+_0x61e226(0x8f4)]:0x3*-0x833+0x2*-0xedd+0x1*0x3653;},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x982)+_0x4258d1(0xb32)]=function(_0x56260c){const _0x1f84c2=_0x4258d1,_0x1e4aa1={'CVsRB':function(_0x7c5e6,_0x2805fe){return _0x7c5e6||_0x2805fe;},'XQxnX':_0x1f84c2(0x12b7),'actQT':function(_0x53cd5e,_0x52e314){return _0x53cd5e/_0x52e314;},'ZqmFz':function(_0x296a6f,_0x288fa0){return _0x296a6f+_0x288fa0;},'oqivz':function(_0xc1ab33,_0x55d76b){return _0xc1ab33*_0x55d76b;}};if(!$gameSystem[_0x1f84c2(0x8df)]())return;const _0x1b0b59=this[_0x1f84c2(0xc06)](),_0x282e40=_0x56260c[_0x1f84c2(0xc06)]();if(_0x1e4aa1[_0x1f84c2(0xec5)](!_0x1b0b59,!_0x282e40))return;const _0x288cc0=_0x282e40[_0x1f84c2(0x921)],_0x870055=_0x282e40['_baseY'];this[_0x1f84c2(0x1155)+_0x1f84c2(0x1d6)](_0x288cc0,_0x870055,0x63e+0x1d35+-0x2373,![],_0x1e4aa1['XQxnX'],-(0x1*0x359+0xb09+-0xe61)),_0x1b0b59[_0x1f84c2(0x4ee)+_0x1f84c2(0x940)]();const _0x9e1c75=VisuMZ[_0x1f84c2(0x337)][_0x1f84c2(0x424)][_0x1f84c2(0x1000)+_0x1f84c2(0x37c)];let _0x164fdc=_0x1e4aa1[_0x1f84c2(0x10a8)](_0x1e4aa1[_0x1f84c2(0xe0e)](_0x282e40[_0x1f84c2(0xc2a)],_0x1b0b59[_0x1f84c2(0xc2a)]),0x26b3+-0x3*-0x623+-0x391a);_0x164fdc*=this[_0x1f84c2(0x1580)]()?-0xebe+0x1c1e+-0x15*0xa3:-(-0x46c*-0x2+0x5*0x14b+-0xf4e);let _0x1cbd90=_0x1e4aa1[_0x1f84c2(0xaf7)](_0x9e1c75[_0x1f84c2(0x12c0)+_0x1f84c2(0x1555)],this['isActor']()?-0x9e0+0x1253+0x2e*-0x2f:-(0xf34+-0x5a*-0x55+0x1*-0x2d15));_0x56260c[_0x1f84c2(0x1155)+_0x1f84c2(0x984)](_0x164fdc,_0x1cbd90,0x284+-0x242b*-0x1+-0x26af,![],_0x1e4aa1['XQxnX']),_0x282e40[_0x1f84c2(0x4ee)+_0x1f84c2(0x940)]();},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x759)+_0x4258d1(0x1485)]=function(_0x156fb7){const _0x7c53b4=_0x4258d1,_0x1b5fa2={'XXvCX':_0x7c53b4(0x7b0),'CxMkL':_0x7c53b4(0x65c),'oMJxk':'missile'};if(SceneManager['isSceneBat'+_0x7c53b4(0x6e5)]()){const _0x2ffc5a=this['battler']();_0x2ffc5a&&(_0x2ffc5a[_0x7c53b4(0xf91)+'n'](_0x156fb7),[_0x1b5fa2[_0x7c53b4(0x307)],_0x1b5fa2[_0x7c53b4(0x7a2)],_0x1b5fa2[_0x7c53b4(0x74b)]]['includes'](_0x156fb7)&&this[_0x7c53b4(0x360)+_0x7c53b4(0x1685)+'on']());}this[_0x7c53b4(0x5b3)+_0x7c53b4(0x1302)]();},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x360)+_0x4258d1(0x1685)+'on']=function(){},Game_Battler[_0x4258d1(0xf38)]['startWeapo'+_0x4258d1(0xcc2)]=function(_0x5ab5da){const _0x412a27=_0x4258d1;if(SceneManager[_0x412a27(0x614)+_0x412a27(0x6e5)]()){const _0x365268=this[_0x412a27(0xc06)]();if(_0x365268)_0x365268[_0x412a27(0xbf8)+_0x412a27(0xcc2)](_0x5ab5da);}},Game_Battler[_0x4258d1(0xf38)]['startAttac'+_0x4258d1(0xc07)+_0x4258d1(0x741)]=function(){const _0x1c8a89=_0x4258d1;if(SceneManager[_0x1c8a89(0x614)+_0x1c8a89(0x6e5)]()){const _0x1d42e8=this[_0x1c8a89(0x44d)+'eaponAnima'+_0x1c8a89(0xf9a)]();this[_0x1c8a89(0xfcc)+_0x1c8a89(0xcc2)](_0x1d42e8);}},Game_Battler[_0x4258d1(0xf38)]['performCas'+_0x4258d1(0x12ad)]=function(_0xfe3df1,_0x3d7363){const _0x26182e=_0x4258d1,_0x573f48={'QgvAu':function(_0x1689b8,_0x99e181){return _0x1689b8(_0x99e181);},'gnqlP':function(_0x2b2d58,_0x1c4416){return _0x2b2d58>_0x1c4416;}};if(!_0xfe3df1)return;if(!_0xfe3df1[_0x26182e(0x780)]())return;if(_0xfe3df1[_0x26182e(0x14fd)]())return;if(_0xfe3df1[_0x26182e(0x62f)]())return;if(_0xfe3df1[_0x26182e(0xb39)]())return;if($gameTemp[_0x26182e(0x369)+_0x26182e(0x3fc)])return;let _0x35c262=0x10f*-0x1+0xb5b+-0xa4c;const _0x12b1ea=VisuMZ[_0x26182e(0x337)][_0x26182e(0x424)][_0x26182e(0x1000)+_0x26182e(0x37c)],_0x151bab=_0xfe3df1[_0x26182e(0x780)]()[_0x26182e(0x278)];if(_0x151bab[_0x26182e(0x79c)](/<CAST ANIMATION: (\d+)>/i))_0x35c262=_0x573f48[_0x26182e(0x1539)](Number,RegExp['$1']);else{if(_0x151bab[_0x26182e(0x79c)](/<NO CAST ANIMATION>/i))return;else{if(_0xfe3df1[_0x26182e(0x1023)+'it']())_0x35c262=_0x12b1ea[_0x26182e(0x16b2)+'n'];else{if(_0xfe3df1[_0x26182e(0xd04)]())_0x35c262=_0x12b1ea[_0x26182e(0xd00)+'al'];else _0xfe3df1[_0x26182e(0x110e)]()&&(_0x35c262=_0x12b1ea[_0x26182e(0x13fb)+'l']);}}}_0x573f48[_0x26182e(0x13ed)](_0x35c262,0x24*-0x22+0x7*-0x531+0x291f*0x1)&&$gameTemp['requestAni'+_0x26182e(0x741)]([this],_0x35c262,!!_0x3d7363);},Game_Battler['prototype'][_0x4258d1(0x1179)+'lection']=function(){const _0x1c7000=_0x4258d1,_0x59639a={'hjZBg':function(_0x599a76,_0x37a653){return _0x599a76>_0x37a653;}};SoundManager[_0x1c7000(0x3e7)+_0x1c7000(0x940)]();let _0x123320=VisuMZ[_0x1c7000(0x337)][_0x1c7000(0x424)]['ActionSequ'+'ence'][_0x1c7000(0x12d1)+_0x1c7000(0x741)];_0x59639a['hjZBg'](_0x123320,0x95*-0x1d+0x2531+0x64*-0x34)&&(Imported['VisuMZ_0_C'+_0x1c7000(0x138e)]?$gameTemp['requestFau'+'xAnimation']([this],_0x123320):$gameTemp[_0x1c7000(0xffe)+_0x1c7000(0x741)]([this],_0x123320));},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x6a4)+_0x4258d1(0x116f)]=function(){const _0x4949b5=_0x4258d1,_0x2e425e={'GUzPX':'0|3|4|5|2|'+_0x4949b5(0x1653),'dtnCF':function(_0x42d0bb,_0x5b9e00){return _0x42d0bb>=_0x5b9e00;}},_0x51d4bc=_0x2e425e[_0x4949b5(0x6e0)]['split']('|');let _0x442440=0x5ff*-0x1+-0x21f3+-0x2*-0x13f9;while(!![]){switch(_0x51d4bc[_0x442440++]){case'0':if(!$gameSystem[_0x4949b5(0x8df)]())return![];continue;case'1':if(_0x2e425e[_0x4949b5(0x1357)](this[_0x4949b5(0x9b2)+_0x4949b5(0x4e0)],0x2*0x1079+-0xd31+-0x13c0))return!![];continue;case'2':if(this['isTpbReady']())return!![];continue;case'3':if(!BattleManager[_0x4949b5(0x6a4)+'b']())return![];continue;case'4':if(!this[_0x4949b5(0x266)]())return![];continue;case'5':if(this[_0x4949b5(0x60e)+'g']())return!![];continue;case'6':return![];}break;}},VisuMZ['BattleCore'][_0x4258d1(0x3d4)+'er_perform'+_0x4258d1(0x1683)]=Game_Battler[_0x4258d1(0xf38)]['performDam'+_0x4258d1(0xdda)],Game_Battler[_0x4258d1(0xf38)]['performDam'+_0x4258d1(0xdda)]=function(){const _0x3ae6ee=_0x4258d1;this[_0x3ae6ee(0x6a4)+_0x3ae6ee(0x116f)]()&&(this['_performDa'+_0x3ae6ee(0x1e5)]=!![]),VisuMZ[_0x3ae6ee(0x337)][_0x3ae6ee(0x3d4)+_0x3ae6ee(0x164a)+_0x3ae6ee(0x1683)][_0x3ae6ee(0xb14)](this),this['performFli'+_0x3ae6ee(0x4a2)](),this[_0x3ae6ee(0xe60)+_0x3ae6ee(0x50a)]();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x3d4)+'er_perform'+_0x4258d1(0x821)]=Game_Battler[_0x4258d1(0xf38)]['performMis'+'s'],Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x802)+'s']=function(){const _0x374d40=_0x4258d1;this['isActiveTp'+_0x374d40(0x116f)]()&&(this[_0x374d40(0x11f7)+_0x374d40(0x1e5)]=!![]),VisuMZ[_0x374d40(0x337)][_0x374d40(0x3d4)+_0x374d40(0x164a)+_0x374d40(0x821)]['call'](this),this[_0x374d40(0x1576)+_0x374d40(0x4a2)]();},VisuMZ['BattleCore']['Game_Battl'+'er_perform'+_0x4258d1(0x8d4)]=Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0xcc3)+'sion'],Game_Battler[_0x4258d1(0xf38)]['performEva'+_0x4258d1(0x10ad)]=function(){const _0x31ff99=_0x4258d1;this['isActiveTp'+_0x31ff99(0x116f)]()&&(this[_0x31ff99(0x11f7)+_0x31ff99(0x1e5)]=!![]),VisuMZ[_0x31ff99(0x337)]['Game_Battl'+_0x31ff99(0x164a)+_0x31ff99(0x8d4)]['call'](this),this['performFli'+_0x31ff99(0x4a2)]();},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x1576)+_0x4258d1(0x4a2)]=function(){const _0xe5de37=_0x4258d1;if(!$gameSystem[_0xe5de37(0x8df)]())return;if(this[_0xe5de37(0x1024)])return;this['_flinched']=!![];const _0xc3eb12=this['battler']();if(_0xc3eb12)_0xc3eb12[_0xe5de37(0x11bb)]();},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0xe60)+_0x4258d1(0x50a)]=function(){const _0x3e3a66=_0x4258d1,_0x3b7571={'lyyyH':function(_0x4c2a3f,_0x3b0af6){return _0x4c2a3f<=_0x3b0af6;},'OOadR':function(_0x5687b0,_0x416c74){return _0x5687b0/_0x416c74;},'Hsyzl':function(_0x5d99d6,_0x4cb42f){return _0x5d99d6*_0x4cb42f;}};if(!this[_0x3e3a66(0xf77)+_0x3e3a66(0xcd2)]())return;const _0x44369d=VisuMZ[_0x3e3a66(0x337)][_0x3e3a66(0x424)][_0x3e3a66(0x1224)];if(!(_0x44369d[_0x3e3a66(0x1628)+'h']??![]))return;if(_0x3b7571[_0x3e3a66(0xc9e)](this[_0x3e3a66(0x2d6)+_0x3e3a66(0xdda)],0x1643+0xe80+-0x24c3*0x1))return;const _0x4b6c33=this[_0x3e3a66(0xc06)]();if(_0x4b6c33){const _0x229634=this[_0x3e3a66(0x2d6)+'age'],_0x561bc7=_0x3b7571[_0x3e3a66(0x153d)](_0x229634,this['mhp'])[_0x3e3a66(0x3d5)](-0x1*-0x1615+-0x2047+0xa32+0.8,0xe6e*-0x2+-0x1ad+0x1*0x1e8a),_0x42a667=_0x44369d['ShakeFlinc'+_0x3e3a66(0x10c1)]??0x2*-0x8a1+-0xfbe+0x2130,_0x53b98d=_0x3b7571[_0x3e3a66(0xc0f)](_0x561bc7,_0x42a667);_0x4b6c33[_0x3e3a66(0x8d1)+_0x3e3a66(0x1e6)](_0x53b98d,_0x561bc7);}},Game_Battler[_0x4258d1(0xf38)]['requestMot'+_0x4258d1(0x51e)]=function(){const _0x448025=_0x4258d1,_0x48f351={'KCCMF':_0x448025(0xc24)+'6|5|10|0|1'+'|8','vVapM':function(_0x4524be,_0x17c9c3){return _0x4524be===_0x17c9c3;},'VxDNv':function(_0x1d5f7c,_0x85d86f){return _0x1d5f7c!==_0x85d86f;},'cpLuc':_0x448025(0xdff),'APPmc':function(_0x1dee22,_0x361961){return _0x1dee22===_0x361961;},'dYsxd':_0x448025(0x3f5),'eXwUF':function(_0x474c5a,_0xce3e88){return _0x474c5a===_0xce3e88;},'HTjVm':_0x448025(0xd64),'zeSkn':function(_0x26ed3a,_0x1606a0){return _0x26ed3a===_0x1606a0;},'jFKuc':_0x448025(0x117a),'jIXOb':function(_0x2befac,_0x1c2c51){return _0x2befac!==_0x1c2c51;}},_0x447620=_0x48f351['KCCMF'][_0x448025(0xba9)]('|');let _0x53138f=-0xf78+0x1c48*0x1+-0xcd0;while(!![]){switch(_0x447620[_0x53138f++]){case'0':if(BattleManager['isActiveTp'+'b']()&&_0x48f351[_0x448025(0x10a3)](this,BattleManager['_subject']))return;continue;case'1':if(this[_0x448025(0xc06)]()&&BattleManager[_0x448025(0x60e)+'g']()){this[_0x448025(0xc06)]()['refreshMot'+'ion'](),this[_0x448025(0x5b3)+_0x448025(0x1302)]();return;}continue;case'2':if(this[_0x448025(0xaf5)]()){if(!this[_0x448025(0x861)+_0x448025(0x6d5)+'tion']()&&_0x48f351[_0x448025(0x1244)](this,BattleManager[_0x448025(0xa47)])){if(this[_0x448025(0xc06)]())this[_0x448025(0xc06)]()[_0x448025(0x885)+'ion']();}this[_0x448025(0x5b3)+_0x448025(0x1302)]();return;}continue;case'3':if(_0x48f351['vVapM'](this[_0x448025(0x742)+'e'],_0x48f351['cpLuc']))return;continue;case'4':if(this[_0x448025(0xfce)]()&&_0x48f351['APPmc'](this[_0x448025(0x742)+'e'],_0x48f351['dYsxd']))return;continue;case'5':if(_0x48f351['eXwUF'](this[_0x448025(0x742)+'e'],_0x48f351[_0x448025(0xaff)])&&!BattleManager[_0x448025(0x60e)+'g']())return;continue;case'6':if(_0x48f351[_0x448025(0x25c)](this['_motionTyp'+'e'],_0x48f351[_0x448025(0xef4)])&&!BattleManager['isInputtin'+'g']())return;continue;case'7':if(!!this[_0x448025(0x2e7)+_0x448025(0x14eb)])return;continue;case'8':this[_0x448025(0xc06)]()&&BattleManager[_0x448025(0x6a4)+'b']()&&_0x48f351[_0x448025(0x1244)](this,BattleManager[_0x448025(0xa47)])&&this[_0x448025(0xc06)]()['refreshMot'+_0x448025(0x1485)]();continue;case'9':if(this['isDead']()&&_0x48f351['jIXOb'](this['_motionTyp'+'e'],_0x48f351[_0x448025(0x1209)])){this['requestMot'+_0x448025(0x1485)](_0x48f351[_0x448025(0x1209)]);return;}continue;case'10':this[_0x448025(0x2f0)+'n']();continue;}break;}},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x861)+_0x4258d1(0x6d5)+_0x4258d1(0x940)]=function(){const _0x444aa4=_0x4258d1;if(!this[_0x444aa4(0xb37)+'er']())return![];const _0x3b5ae2=this['battler']();if(!_0x3b5ae2)return![];const _0x428fbd=_0x3b5ae2[_0x444aa4(0x16a0)+_0x444aa4(0x594)];if(!_0x428fbd)return![];const _0xbef107=_0x428fbd[_0x444aa4(0x1449)];return _0xbef107&&!_0xbef107[_0x444aa4(0x725)];},Game_Battler[_0x4258d1(0xf38)]['isBattlerF'+_0x4258d1(0x12df)]=function(){const _0x53d48e=_0x4258d1;return this[_0x53d48e(0x63c)+_0x53d48e(0xb11)];},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0xae9)+_0x4258d1(0xf33)]=function(_0x25311f){const _0x5d3716=_0x4258d1;if(!$gameSystem['isSideView']())return;this[_0x5d3716(0x63c)+_0x5d3716(0xb11)]=_0x25311f;const _0x26d662=this[_0x5d3716(0xc06)]();if(_0x26d662)_0x26d662[_0x5d3716(0xe99)]();},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0xae9)+'FacePoint']=function(_0x443dcd,_0x330ccd,_0x5e14aa){const _0x1a7453=_0x4258d1,_0x3ec1de={'qJUky':function(_0x47dfe3,_0x1f28d1){return _0x47dfe3===_0x1f28d1;},'wnndk':function(_0x1be95f,_0x55dde5){return _0x1be95f>_0x55dde5;},'OwdjU':function(_0x3da9fa,_0x9533fe){return _0x3da9fa<_0x9533fe;}};if(!$gameSystem[_0x1a7453(0x8df)]())return;const _0x128106=this[_0x1a7453(0xc06)]();if(!_0x128106)return;if(_0x3ec1de[_0x1a7453(0x1233)](_0x443dcd,_0x128106['_baseX']))return;let _0x2a9583=![];if(this['isActor']()){if(_0x3ec1de['wnndk'](_0x443dcd,_0x128106[_0x1a7453(0x921)]))_0x2a9583=!![];if(_0x3ec1de[_0x1a7453(0x1251)](_0x443dcd,_0x128106[_0x1a7453(0x921)]))_0x2a9583=![];}else{if(this[_0x1a7453(0xaf5)]()){if(_0x3ec1de['wnndk'](_0x443dcd,_0x128106['_baseX']))_0x2a9583=![];if(_0x3ec1de[_0x1a7453(0x1251)](_0x443dcd,_0x128106[_0x1a7453(0x921)]))_0x2a9583=!![];}};this['setBattler'+_0x1a7453(0xf33)](_0x5e14aa?!_0x2a9583:_0x2a9583),_0x128106[_0x1a7453(0xe99)]();},Game_Battler[_0x4258d1(0xf38)]['moveBattle'+_0x4258d1(0x984)]=function(_0x4f767f,_0x4ca16e,_0x577541,_0xd40a1e,_0x45979a){const _0x2383c6=_0x4258d1,_0x5d4156={'gLZHX':function(_0x5c958e,_0x568409){return _0x5c958e+_0x568409;},'nSpnK':function(_0xe4850a,_0x209008){return _0xe4850a+_0x209008;},'nFhyZ':function(_0x1259cb,_0x3637b4){return _0x1259cb-_0x3637b4;},'RpiLe':function(_0x542761,_0x2f859d){return _0x542761-_0x2f859d;},'EbTJb':function(_0x1249e5,_0x1708a6){return _0x1249e5||_0x1708a6;},'QjwZe':'Linear'};if(!$gameSystem[_0x2383c6(0x8df)]())return;const _0x3149f0=this[_0x2383c6(0xc06)]();if(!_0x3149f0)return;if(_0xd40a1e)this['setBattler'+_0x2383c6(0x396)](_0x5d4156['gLZHX'](_0x4f767f,_0x3149f0[_0x2383c6(0x921)]),_0x5d4156[_0x2383c6(0x1614)](_0x4ca16e,_0x3149f0[_0x2383c6(0x1085)]),![]);_0x4f767f+=_0x5d4156[_0x2383c6(0x6d7)](_0x3149f0['_baseX'],_0x3149f0[_0x2383c6(0x6f0)]),_0x4ca16e+=_0x5d4156[_0x2383c6(0x1337)](_0x3149f0['_baseY'],_0x3149f0['_homeY']),_0x3149f0[_0x2383c6(0xace)](_0x4f767f,_0x4ca16e,_0x577541);if(Imported[_0x2383c6(0x7d7)+_0x2383c6(0x138e)])_0x3149f0[_0x2383c6(0x32a)+_0x2383c6(0xc5e)](_0x5d4156['EbTJb'](_0x45979a,_0x5d4156['QjwZe']));},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x1155)+_0x4258d1(0x1d6)]=function(_0xebcb5d,_0x3ca834,_0x53c49e,_0x3a9356,_0x1637f7,_0xc760b8){const _0x40dec4=_0x4258d1,_0x473d88={'Javyc':function(_0x239533,_0x4e3ea4){return _0x239533===_0x4e3ea4;},'CrAEe':function(_0xdb3680,_0xe7098b){return _0xdb3680(_0xe7098b);},'Lgvoc':function(_0x500f96,_0x2dc1ba){return _0x500f96||_0x2dc1ba;},'sQKPT':function(_0x3ef70d,_0x426931){return _0x3ef70d>_0x426931;},'AKjrj':function(_0x280908,_0xa5fbe7){return _0x280908+_0xa5fbe7;},'cImiN':function(_0xc6b325,_0x2f8b85){return _0xc6b325/_0x2f8b85;},'joZbQ':function(_0x40e5cc,_0x2351ef){return _0x40e5cc<_0x2351ef;},'dSHmH':function(_0x38ff6e,_0x149169){return _0x38ff6e+_0x149169;},'QeCDB':function(_0x567219,_0x3023ca){return _0x567219/_0x3023ca;},'NUmOK':function(_0x10f29b,_0x1462f6){return _0x10f29b||_0x1462f6;},'wUZQk':_0x40dec4(0x12b7)};if(!$gameSystem[_0x40dec4(0x8df)]())return;const _0x34c473=this[_0x40dec4(0xc06)]();if(!_0x34c473)return;if(_0x473d88['Javyc'](_0xebcb5d,Infinity)||_0x473d88[_0x40dec4(0xdec)](_0x3ca834,Infinity))return;if(_0x473d88[_0x40dec4(0x1439)](isNaN,_0xebcb5d)||_0x473d88[_0x40dec4(0x1439)](isNaN,_0x3ca834))return;_0xc760b8=_0x473d88[_0x40dec4(0x5bc)](_0xc760b8,0x1491*0x1+0x244c*-0x1+0xfbb);if(_0x473d88[_0x40dec4(0x3a0)](_0xc760b8,-0x203f+0x65*-0x17+0x52*0x81)){if(_0x473d88['sQKPT'](_0x34c473[_0x40dec4(0x921)],_0xebcb5d))_0xebcb5d+=_0x473d88['AKjrj'](_0x473d88[_0x40dec4(0x82e)](_0x34c473[_0x40dec4(0xc2a)],0xc93+0x2*0x101e+0x2ccd*-0x1),_0xc760b8);if(_0x473d88[_0x40dec4(0x7b3)](_0x34c473[_0x40dec4(0x921)],_0xebcb5d))_0xebcb5d-=_0x473d88[_0x40dec4(0x4c1)](_0x473d88[_0x40dec4(0x238)](_0x34c473['width'],0x7ad+-0x1d38+0x158d),_0xc760b8);}if(_0x3a9356)this[_0x40dec4(0xae9)+_0x40dec4(0x396)](_0xebcb5d,_0x3ca834,![]);_0xebcb5d-=_0x34c473[_0x40dec4(0x6f0)],_0x3ca834-=_0x34c473[_0x40dec4(0xd2e)],_0x34c473[_0x40dec4(0xace)](_0xebcb5d,_0x3ca834,_0x53c49e);if(Imported[_0x40dec4(0x7d7)+_0x40dec4(0x138e)])_0x34c473[_0x40dec4(0x32a)+_0x40dec4(0xc5e)](_0x473d88[_0x40dec4(0xef8)](_0x1637f7,_0x473d88['wUZQk']));},Game_Battler['prototype'][_0x4258d1(0x1155)+'rHomeDista'+_0x4258d1(0x13f3)]=function(_0x10aac4,_0x39eb20,_0x56181a,_0x2a836c,_0x348d75){const _0xa913b3=_0x4258d1,_0x27babb={'xkhew':function(_0x43bc3d,_0x3d01d5){return _0x43bc3d+_0x3d01d5;}};if(!$gameSystem[_0xa913b3(0x8df)]())return;const _0x485d50=this[_0xa913b3(0xc06)]();if(!_0x485d50)return;if(_0x2a836c)this[_0xa913b3(0xae9)+_0xa913b3(0x396)](_0x27babb[_0xa913b3(0x128a)](_0x10aac4,_0x485d50[_0xa913b3(0x921)]),_0x27babb[_0xa913b3(0x128a)](_0x39eb20,_0x485d50['_baseY']),![]);_0x10aac4+=_0x485d50['_homeX'],_0x39eb20+=_0x485d50['_homeY'],_0x485d50[_0xa913b3(0x923)+_0xa913b3(0x56d)](_0x10aac4,_0x39eb20,_0x56181a,_0x348d75),this[_0xa913b3(0xcbf)+'eX']=_0x10aac4,this[_0xa913b3(0xcbf)+'eY']=_0x39eb20;},Game_Battler[_0x4258d1(0xf38)]['moveBattle'+_0x4258d1(0x1044)+'nt']=function(_0x2b6171,_0x46187f,_0x4dc48e,_0x3980d3,_0xcc1d1e,_0x58a610){const _0x30b801=_0x4258d1,_0x56c3fa={'DcRDz':function(_0x49f9a5,_0x3eacb0){return _0x49f9a5||_0x3eacb0;},'RXZck':function(_0x1ac754,_0x2da289){return _0x1ac754>_0x2da289;},'FGCjO':function(_0x3d8ae9,_0x4728a1){return _0x3d8ae9>_0x4728a1;},'QsJVt':function(_0xc0d7da,_0x5888ed){return _0xc0d7da+_0x5888ed;},'MiAxa':function(_0xc5543c,_0x11cf01){return _0xc5543c/_0x11cf01;},'mnZzV':function(_0x4b1e9f,_0x35015d){return _0x4b1e9f<_0x35015d;},'Pmrxl':function(_0x2238e3,_0x10b65d){return _0x2238e3+_0x10b65d;}};if(!$gameSystem['isSideView']())return;const _0x7bb600=this['battler']();if(!_0x7bb600)return;_0x58a610=_0x56c3fa[_0x30b801(0xd35)](_0x58a610,0x4b8*-0x2+-0x10b2+0x1a22);if(_0x56c3fa[_0x30b801(0x34a)](_0x58a610,-0x188a+0x1989*0x1+-0x1*0xff)){if(_0x56c3fa[_0x30b801(0xf9d)](_0x7bb600['_baseX'],_0x2b6171))_0x2b6171+=_0x56c3fa['QsJVt'](_0x56c3fa['MiAxa'](_0x7bb600[_0x30b801(0xc2a)],-0x1d37+0x2*0x11f5+-0x6b1),_0x58a610);if(_0x56c3fa[_0x30b801(0xc83)](_0x7bb600['_baseX'],_0x2b6171))_0x2b6171-=_0x56c3fa[_0x30b801(0x1491)](_0x56c3fa['MiAxa'](_0x7bb600[_0x30b801(0xc2a)],0x3*0x7ae+0x68a+-0x1d92),_0x58a610);}if(_0x3980d3)this[_0x30b801(0xae9)+_0x30b801(0x396)](_0x2b6171,_0x46187f,![]);_0x7bb600[_0x30b801(0x923)+'ove'](_0x2b6171,_0x46187f,_0x4dc48e,_0xcc1d1e),this[_0x30b801(0xcbf)+'eX']=_0x2b6171,this[_0x30b801(0xcbf)+'eY']=_0x46187f;},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x432)+'er']=function(_0x456101,_0xb10869,_0x5b60cc){const _0x1eaa8a=_0x4258d1;if(!$gameSystem[_0x1eaa8a(0x8df)]())return;const _0x1f547b=this['battler']();if(!_0x1f547b)return;_0x1f547b[_0x1eaa8a(0x1227)](_0x456101,_0xb10869,_0x5b60cc);},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0xd21)+'r']=function(_0x21892b,_0xe8dfcf){const _0xc592fe=_0x4258d1;if(!$gameSystem[_0xc592fe(0x8df)]())return;const _0x56e990=this[_0xc592fe(0xc06)]();if(!_0x56e990)return;_0x56e990[_0xc592fe(0x1374)](_0x21892b,_0xe8dfcf);},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x10e1)+'r']=function(_0x34990f,_0x4f5a89,_0x41b933,_0x58afde){const _0x552935=_0x4258d1;if(!$gameSystem[_0x552935(0x8df)]())return;const _0x3d359e=this[_0x552935(0xc06)]();if(!_0x3d359e)return;_0x3d359e['startSpin'](_0x34990f,_0x4f5a89,_0x41b933,_0x58afde);},Game_Battler['prototype'][_0x4258d1(0x9ad)+'r']=function(_0x3ff1b1,_0x22aa84,_0x3d36d3,_0x576ca7){const _0x47c244=_0x4258d1;if(!$gameSystem[_0x47c244(0x8df)]())return;const _0x4ff551=this[_0x47c244(0xc06)]();if(!_0x4ff551)return;this['isActor']()&&(_0x3ff1b1*=-(-0x25d*-0x3+0x705+-0xe1b),_0x22aa84*=-(0x915+-0x484+-0x490)),_0x4ff551['startSkew'](_0x3ff1b1,_0x22aa84,_0x3d36d3,_0x576ca7);},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x12f9)+'r']=function(_0x16572c,_0x4ca5b2,_0x41934f,_0x46b645){const _0x1c6a05=_0x4258d1;if(!$gameSystem[_0x1c6a05(0x8df)]())return;const _0x159e28=this[_0x1c6a05(0xc06)]();if(!_0x159e28)return;_0x159e28[_0x1c6a05(0x7c5)](_0x16572c,_0x4ca5b2,_0x41934f,_0x46b645);},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0xf5c)+_0x4258d1(0xaaa)]=function(_0x43d67d,_0x544b70,_0x2fb224){const _0xa2a741=_0x4258d1;if(!$gameSystem[_0xa2a741(0x8df)]())return;const _0x30a125=this['battler']();if(!_0x30a125)return;_0x30a125[_0xa2a741(0x165b)+'ty'](_0x43d67d,_0x544b70,_0x2fb224);},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x5b3)+'eMotion']=function(){const _0x422637=_0x4258d1,_0x437bf8=!!this[_0x422637(0x2e7)+'ionData'];this[_0x422637(0x2e7)+'ionData']=undefined,_0x437bf8&&(this[_0x422637(0x759)+'ionRefresh'](),this[_0x422637(0x5b3)+_0x422637(0xca5)+_0x422637(0xcee)]());},Game_Battler[_0x4258d1(0xf38)]['clearFreez'+'eMotionFor'+_0x4258d1(0xcee)]=function(){const _0x1b62ee=_0x4258d1;if(!SceneManager[_0x1b62ee(0x614)+'tle']())return;const _0x29ea48=this[_0x1b62ee(0xc06)]();if(!_0x29ea48)return;let _0x57cb51=this[_0x1b62ee(0x1580)]()?_0x29ea48[_0x1b62ee(0x1418)+_0x1b62ee(0xdba)]:_0x29ea48['_svBattler'+'Sprite'][_0x1b62ee(0x1418)+_0x1b62ee(0xdba)];_0x57cb51&&_0x57cb51['setup'](0xe27+-0x1921+0xafa);},Game_Battler['prototype'][_0x4258d1(0xecc)+'on']=function(_0xb0f56b,_0x593215,_0x3e9141){const _0x44d77b=_0x4258d1,_0x393974={'pVHxq':function(_0x491ebb,_0x379b08){return _0x491ebb(_0x379b08);},'XiyUW':_0x44d77b(0x65c),'WXIdf':_0x44d77b(0x7b0),'AqvbH':'missile'};if(this[_0x44d77b(0xaf5)]()&&!this[_0x44d77b(0xb37)+'er']())return;let _0x962856=-0x1c8b+0x1a61+0x22a,_0x1deab2=0x2*-0x98e+0x2*-0x177+-0x193*-0xe;_0xb0f56b['match'](/ATTACK[ ](\d+)/i)&&(_0x1deab2=_0x393974[_0x44d77b(0x14cc)](Number,RegExp['$1']),_0x1deab2--);if(this[_0x44d77b(0x1580)]()){const _0x316429=this[_0x44d77b(0x11da)]();_0x962856=_0x316429[_0x1deab2]?_0x316429[_0x1deab2]['wtypeId']:-0x8*-0x359+0x12*-0x67+-0x138a;}else this[_0x44d77b(0xaf5)]()&&(_0x962856=this[_0x44d77b(0x29f)+_0x44d77b(0xde6)]()[_0x44d77b(0xfd8)]||-0x19d4+0x14e7*0x1+0xd*0x61);const _0x291a59=$dataSystem[_0x44d77b(0x36e)+_0x44d77b(0x995)][_0x962856];_0xb0f56b['match'](/attack/i)&&(_0xb0f56b=[_0x393974[_0x44d77b(0x14d7)],_0x393974[_0x44d77b(0x36d)],_0x393974['AqvbH']][_0x291a59[_0x44d77b(0x1064)]]||_0x393974[_0x44d77b(0x36d)]),this[_0x44d77b(0x2e7)+_0x44d77b(0x14eb)]={'motionType':_0xb0f56b,'weaponImageId':_0x593215?_0x291a59[_0x44d77b(0xddf)+'eId']:-0xcb7+-0xe0f+-0x12a*-0x17,'pattern':_0x3e9141};},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0xdb0)]=function(_0x2b87b4){const _0x2e7bae=_0x4258d1,_0x200050={'VPTTl':function(_0x81731f,_0x15d45a){return _0x81731f===_0x15d45a;}};if(!_0x2b87b4)return![];return _0x200050[_0x2e7bae(0x16b8)](_0x2b87b4[_0x2e7bae(0xf99)+'t'](),this['friendsUni'+'t']());},Game_Battler[_0x4258d1(0xf38)]['isOpponent']=function(_0x39e177){const _0xecfdc1=_0x4258d1,_0x154f67={'khmwx':function(_0x1c2887,_0xb9bf6){return _0x1c2887===_0xb9bf6;}};if(!_0x39e177)return![];return _0x154f67[_0xecfdc1(0x8af)](_0x39e177[_0xecfdc1(0xe85)+'nit'](),this[_0xecfdc1(0xf99)+'t']());},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0xc8a)+'vBattler']=function(){return![];},Game_Actor['prototype'][_0x4258d1(0xc8a)+_0x4258d1(0x33a)]=function(){const _0x312a39=_0x4258d1;return this['battlerNam'+'e']()[_0x312a39(0x79c)](/\$/i);},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0xc8a)+_0x4258d1(0x33a)]=function(){const _0x4dbfca=_0x4258d1;return this['hasSvBattl'+'er']()&&this[_0x4dbfca(0x299)+_0x4dbfca(0x61d)]()[_0x4dbfca(0x79c)](/\$/i);},VisuMZ[_0x4258d1(0x337)]['Game_Actor'+_0x4258d1(0xc77)]=Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0xb3e)],Game_Actor[_0x4258d1(0xf38)]['setup']=function(_0x526f39){const _0x2f0b7d=_0x4258d1;VisuMZ[_0x2f0b7d(0x337)][_0x2f0b7d(0x1142)+_0x2f0b7d(0xc77)]['call'](this,_0x526f39),this[_0x2f0b7d(0x1495)+_0x2f0b7d(0xaf0)]();},Game_Actor['prototype'][_0x4258d1(0x1495)+_0x4258d1(0xaf0)]=function(){const _0x3a4fcc=_0x4258d1,_0xa7d371={'nysXw':function(_0x361751,_0x1d04d1){return _0x361751(_0x1d04d1);}};this['_battlePor'+_0x3a4fcc(0x767)]='',this['actor']()&&this[_0x3a4fcc(0xd12)]()[_0x3a4fcc(0x278)]['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePor'+_0x3a4fcc(0x767)]=_0xa7d371[_0x3a4fcc(0x80e)](String,RegExp['$1']));},Game_Actor['prototype'][_0x4258d1(0x4b2)+'ortraitFil'+_0x4258d1(0x609)]=function(){const _0x30e235=_0x4258d1,_0x367ddb={'jqNTA':function(_0x2cd869,_0x35b571){return _0x2cd869!==_0x35b571;}};if(_0x367ddb[_0x30e235(0x321)](this[_0x30e235(0x4b2)+_0x30e235(0x1340)](),''))return this[_0x30e235(0x4b2)+_0x30e235(0x1340)]();else{if(Imported['VisuMZ_1_M'+'ainMenuCor'+'e']&&_0x367ddb[_0x30e235(0x321)](this[_0x30e235(0x3d0)+'ge'](),''))return this[_0x30e235(0x3d0)+'ge']();}return'';},Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0x4b2)+_0x4258d1(0x1340)]=function(){const _0x31aca8=_0x4258d1,_0x159334={'KLoev':function(_0x595a31,_0x27734d){return _0x595a31===_0x27734d;}};if(_0x159334['KLoev'](this[_0x31aca8(0x2cf)+_0x31aca8(0x767)],undefined))this[_0x31aca8(0x1495)+_0x31aca8(0xaf0)]();return this[_0x31aca8(0x2cf)+_0x31aca8(0x767)];},Game_Actor['prototype'][_0x4258d1(0xb1f)+_0x4258d1(0x1340)]=function(_0x268ee5){const _0x40cc3c=_0x4258d1,_0x199eb7={'iOykZ':function(_0xf81e7e,_0x7b0e39){return _0xf81e7e===_0x7b0e39;}};if(_0x199eb7['iOykZ'](this['_battlePor'+_0x40cc3c(0x767)],undefined))this[_0x40cc3c(0x1495)+_0x40cc3c(0xaf0)]();this[_0x40cc3c(0x2cf)+_0x40cc3c(0x767)]=_0x268ee5;if(SceneManager[_0x40cc3c(0x614)+_0x40cc3c(0x6e5)]()&&$gameParty[_0x40cc3c(0x8ab)+_0x40cc3c(0x1514)]()['includes'](this)){const _0x1f1141=SceneManager[_0x40cc3c(0x14b3)][_0x40cc3c(0x5c1)+_0x40cc3c(0xfdb)];_0x1f1141&&_0x1f1141[_0x40cc3c(0x81f)+_0x40cc3c(0x9d0)](this);}},Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0x14d1)+_0x4258d1(0xf67)]=function(){return!![];},Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0xc51)+'le']=function(){const _0x1ac575=_0x4258d1;if(!this[_0x1ac575(0xbff)]()&&BattleManager[_0x1ac575(0x139c)+'e'])return!![];return Game_Battler['prototype'][_0x1ac575(0xc51)+'le']['call'](this);},VisuMZ[_0x4258d1(0x337)]['Game_Actor'+_0x4258d1(0xbdc)+'nList']=Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0x1599)+_0x4258d1(0xd4e)],Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0x1599)+_0x4258d1(0xd4e)]=function(){const _0x2037dc=_0x4258d1;if(BattleManager[_0x2037dc(0x139c)+'e']&&!ConfigManager[_0x2037dc(0x47d)+'UseSkills'])return this[_0x2037dc(0x1599)+_0x2037dc(0x300)+_0x2037dc(0x6a3)]();else{return VisuMZ[_0x2037dc(0x337)][_0x2037dc(0x1142)+'_makeActio'+_0x2037dc(0x5af)]['call'](this);;}},Game_Actor['prototype'][_0x4258d1(0x1599)+_0x4258d1(0x300)+'tack']=function(){const _0x338119=_0x4258d1,_0x2510aa=[],_0x23228a=new Game_Action(this);return _0x23228a[_0x338119(0x64e)](),_0x2510aa[_0x338119(0x88f)](_0x23228a),_0x2510aa;},Game_Actor['prototype'][_0x4258d1(0xcf6)+_0x4258d1(0x316)]=function(){const _0x10fb17=_0x4258d1,_0x1b6581={'SMqLA':function(_0x21750c,_0x328507){return _0x21750c(_0x328507);}};return this[_0x10fb17(0x1b7)+'ss']()[_0x10fb17(0x278)][_0x10fb17(0x79c)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?_0x1b6581[_0x10fb17(0xe25)](String,RegExp['$1'])[_0x10fb17(0xba9)](/[\r\n]+/):VisuMZ[_0x10fb17(0x337)][_0x10fb17(0x424)][_0x10fb17(0xc18)][_0x10fb17(0xa8e)+_0x10fb17(0xb0a)];},Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0x297)+'nchorX']=function(){const _0x420cf3=_0x4258d1,_0x10c4a3={'XtSPH':function(_0x4222d3,_0x206ba1){return _0x4222d3!==_0x206ba1;},'sDSzq':function(_0x238bd2,_0x40869c){return _0x238bd2(_0x40869c);},'epLWm':function(_0x247970,_0x4bcfeb){return _0x247970(_0x4bcfeb);}};if(_0x10c4a3[_0x420cf3(0xc63)](this[_0x420cf3(0x13a4)][_0x420cf3(0xb54)],undefined))return this[_0x420cf3(0x13a4)][_0x420cf3(0xb54)];return this['actor']()['note'][_0x420cf3(0x79c)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x420cf3(0xb54)]=_0x10c4a3[_0x420cf3(0x1b9)](eval,RegExp['$1']),this[_0x420cf3(0x13a4)][_0x420cf3(0x139d)]=_0x10c4a3[_0x420cf3(0xe44)](eval,RegExp['$2'])):this['_cache'][_0x420cf3(0xb54)]=Game_Battler[_0x420cf3(0xf38)][_0x420cf3(0x297)+'nchorX'][_0x420cf3(0xb14)](this),this[_0x420cf3(0x13a4)][_0x420cf3(0xb54)];},Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0x297)+_0x4258d1(0x8b5)]=function(){const _0x500269=_0x4258d1,_0x1c7eea={'JosgV':function(_0x1a6c19,_0x3bbee8){return _0x1a6c19!==_0x3bbee8;},'GLBBC':function(_0x3b748f,_0x5d561f){return _0x3b748f(_0x5d561f);},'fKJtC':function(_0x1f3608,_0x1973dd){return _0x1f3608(_0x1973dd);}};if(_0x1c7eea['JosgV'](this[_0x500269(0x13a4)][_0x500269(0x139d)],undefined))return this[_0x500269(0x13a4)][_0x500269(0x139d)];return this[_0x500269(0xd12)]()['note'][_0x500269(0x79c)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache']['svAnchorX']=_0x1c7eea[_0x500269(0x11b4)](eval,RegExp['$1']),this['_cache']['svAnchorY']=_0x1c7eea[_0x500269(0x12b0)](eval,RegExp['$2'])):this[_0x500269(0x13a4)][_0x500269(0x139d)]=Game_Battler[_0x500269(0xf38)][_0x500269(0x297)+_0x500269(0x8b5)]['call'](this),this[_0x500269(0x13a4)][_0x500269(0x139d)];},Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0xd33)+_0x4258d1(0x722)+'le']=function(){const _0x1fdb4a=_0x4258d1,_0x5d5576={'knVdO':function(_0x5ca2bc,_0x53949d){return _0x5ca2bc!==_0x53949d;}};if(_0x5d5576[_0x1fdb4a(0x14e9)](this[_0x1fdb4a(0x13a4)][_0x1fdb4a(0x136a)],undefined))return this[_0x1fdb4a(0x13a4)][_0x1fdb4a(0x136a)];if(this[_0x1fdb4a(0xd12)]()[_0x1fdb4a(0x278)]['match'](/<SIDEVIEW SHOW SHADOW>/i))this[_0x1fdb4a(0x13a4)][_0x1fdb4a(0x136a)]=!![];else this[_0x1fdb4a(0xd12)]()[_0x1fdb4a(0x278)][_0x1fdb4a(0x79c)](/<SIDEVIEW HIDE SHADOW>/i)?this['_cache'][_0x1fdb4a(0x136a)]=![]:this[_0x1fdb4a(0x13a4)]['svShadow']=Game_Battler[_0x1fdb4a(0xf38)]['svBattlerS'+'hadowVisib'+'le'][_0x1fdb4a(0xb14)](this);return this['_cache'][_0x1fdb4a(0x136a)];},Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0x6ab)+'othImage']=function(){const _0x36dddc=_0x4258d1;return VisuMZ[_0x36dddc(0x337)][_0x36dddc(0x424)]['Actor'][_0x36dddc(0x12d2)+'e'];},Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0x360)+_0x4258d1(0x1685)+'on']=function(){const _0xb5fe2b=_0x4258d1,_0x1ec802=this[_0xb5fe2b(0x11da)](),_0x3c610c=_0x1ec802[-0x14b9+0x373+-0x1*-0x1146]?_0x1ec802[-0x13e5+0x2a9*-0xe+0x3923][_0xb5fe2b(0xfd8)]:0x21c0+0x28d*0x1+-0x244d,_0x2dda12=$dataSystem[_0xb5fe2b(0x36e)+'ons'][_0x3c610c];_0x2dda12&&this[_0xb5fe2b(0xfcc)+_0xb5fe2b(0xcc2)](_0x2dda12[_0xb5fe2b(0xddf)+_0xb5fe2b(0x8f4)]);},Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0xe11)+_0x4258d1(0x1485)]=function(_0x485ab2){const _0x157ad1=_0x4258d1;Game_Battler[_0x157ad1(0xf38)][_0x157ad1(0xe11)+_0x157ad1(0x1485)][_0x157ad1(0xb14)](this,_0x485ab2),this[_0x157ad1(0xe11)+_0x157ad1(0xb92)](_0x485ab2);},Game_Actor['prototype'][_0x4258d1(0xa4c)+_0x4258d1(0xd7c)]=function(){const _0x1edbe9=_0x4258d1,_0x148e7d=this[_0x1edbe9(0x11da)](),_0xb50e76=_0x148e7d[0x250b+0xc61+-0x316c]?_0x148e7d[-0xc3e+0x739+0x505][_0x1edbe9(0xfd8)]:0x16a*0x2+-0x16c6+-0x6a6*-0x3;return $dataSystem[_0x1edbe9(0x36e)+_0x1edbe9(0x995)][_0xb50e76];},Game_Actor[_0x4258d1(0xf38)]['attackAnim'+_0x4258d1(0x9ce)+'t']=function(_0x2113ff){const _0x162687=_0x4258d1,_0x219a49={'gNaFk':function(_0x378092,_0x583c45){return _0x378092||_0x583c45;}};_0x2113ff=_0x219a49[_0x162687(0x596)](_0x2113ff,0x1168+0x1b26+-0x2c8d),_0x2113ff--;const _0x316146=this[_0x162687(0x11da)]();return _0x316146[_0x2113ff]?_0x316146[_0x2113ff][_0x162687(0x12b1)+'d']:0x17ad+-0x1d88+0x5db;},Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0xa4c)+_0x4258d1(0x6dd)]=function(_0x25dc1e){const _0x2788a7=_0x4258d1,_0xf2995a={'QjRFz':function(_0x47ff84,_0x3866e8){return _0x47ff84||_0x3866e8;}};_0x25dc1e=_0xf2995a[_0x2788a7(0x59a)](_0x25dc1e,-0x17*-0x16d+0xe*0x14c+-0x32f2),_0x25dc1e--;const _0x45b12d=this[_0x2788a7(0x11da)](),_0xfecc39=_0x45b12d[_0x25dc1e]?_0x45b12d[_0x25dc1e][_0x2788a7(0xfd8)]:-0x150f*-0x1+-0x1*-0x443+-0x1952;return $dataSystem['attackMoti'+_0x2788a7(0x995)][_0xfecc39];},Game_Actor['prototype']['performAtt'+_0x4258d1(0xbdd)]=function(_0x41ce15){const _0x317c6f=_0x4258d1,_0x2f3b66={'zMiEN':function(_0x302387,_0x1b3c6c){return _0x302387||_0x1b3c6c;},'AYufZ':function(_0x4251f1,_0x29c464){return _0x4251f1===_0x29c464;},'nTlWi':_0x317c6f(0x65c),'YDMbt':function(_0x1cafc5,_0x17bfd6){return _0x1cafc5===_0x17bfd6;},'RSZNK':_0x317c6f(0x7b0),'uDFhz':function(_0x564796,_0x25f742){return _0x564796===_0x25f742;},'AnAaC':_0x317c6f(0x71b)};_0x41ce15=_0x2f3b66[_0x317c6f(0x33c)](_0x41ce15,-0x3f+0x1*-0xdb9+0xdf9),_0x41ce15--;const _0x447b6d=this[_0x317c6f(0x11da)](),_0x53ca21=_0x447b6d[_0x41ce15]?_0x447b6d[_0x41ce15]['wtypeId']:0x1090+0x3*-0xbf5+0x134f,_0x2bf5ea=$dataSystem[_0x317c6f(0x36e)+_0x317c6f(0x995)][_0x53ca21];if(_0x2bf5ea){if(_0x2f3b66[_0x317c6f(0x250)](_0x2bf5ea[_0x317c6f(0x1064)],0x13bd+-0x3ff+-0xfbe))this[_0x317c6f(0x759)+'ion'](_0x2f3b66[_0x317c6f(0xb4b)]);else{if(_0x2f3b66[_0x317c6f(0x26e)](_0x2bf5ea[_0x317c6f(0x1064)],0x1b64+-0x9e5*0x2+-0x799))this[_0x317c6f(0x759)+'ion'](_0x2f3b66[_0x317c6f(0x9ef)]);else _0x2f3b66[_0x317c6f(0xd8f)](_0x2bf5ea['type'],0x1*-0x2621+-0x24d*-0x3+0x2*0xf9e)&&this['requestMot'+_0x317c6f(0x1485)](_0x2f3b66['AnAaC']);}this['startWeapo'+_0x317c6f(0xcc2)](_0x2bf5ea[_0x317c6f(0xddf)+_0x317c6f(0x8f4)]);}},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0xe78)+'eaponSlot']=function(_0x4fff9d){const _0x5b812d=_0x4258d1,_0x3db5fc={'EPPvR':function(_0xa2ef0d,_0x1599ec){return _0xa2ef0d>_0x1599ec;},'hYQuS':function(_0x45d50c,_0x322de2){return _0x45d50c||_0x322de2;}};if(this[_0x5b812d(0x1580)]()){const _0x16df7b=this[_0x5b812d(0x11da)]();if(_0x3db5fc[_0x5b812d(0x678)](_0x16df7b[_0x5b812d(0x1645)],-0x21ad*-0x1+-0x2623+0x2*0x23b)){const _0x577da0=_0x16df7b[_0x4fff9d];if(_0x577da0)_0x4fff9d=this[_0x5b812d(0x5ca)]()['indexOf'](_0x577da0);}}this[_0x5b812d(0x91b)+_0x5b812d(0xf42)]=_0x3db5fc[_0x5b812d(0x11fb)](_0x4fff9d,-0x11ca+-0x10*-0x11b+0x2*0xd),this[_0x5b812d(0x13a4)]={};},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0xba6)+'WeaponSlot']=function(){const _0x14a35d=_0x4258d1;this[_0x14a35d(0x91b)+_0x14a35d(0xf42)]=this[_0x14a35d(0x91b)+_0x14a35d(0xf42)]||-0x1*0xd8e+0x4e9*-0x3+0x1c49,this[_0x14a35d(0x91b)+'ponSlot']++,this['_cache']={};},Game_Battler[_0x4258d1(0xf38)][_0x4258d1(0x378)+_0x4258d1(0x89f)+'t']=function(){const _0x2bd2dc=_0x4258d1;this[_0x2bd2dc(0x91b)+'ponSlot']=undefined,this[_0x2bd2dc(0x13a4)]={};},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1142)+_0x4258d1(0xd1f)]=Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0x5ca)],Game_Actor['prototype']['equips']=function(){const _0x10e03a=_0x4258d1,_0x50e5f4={'ZUAWm':function(_0x4f82c6,_0x57df6f){return _0x4f82c6!==_0x57df6f;},'CayJD':function(_0x152956,_0x550b5a){return _0x152956<_0x550b5a;},'HQdGW':function(_0x125ec4,_0x4d6754){return _0x125ec4===_0x4d6754;}};let _0x5520c7=VisuMZ['BattleCore']['Game_Actor'+'_equips']['call'](this);if(this['_tempEquip'+_0x10e03a(0xce5)])return _0x5520c7;if(_0x50e5f4[_0x10e03a(0x1631)](this['_activeWea'+'ponSlot'],undefined)){this['_tempEquip'+_0x10e03a(0xce5)]=!![];const _0x2ffc5e=this[_0x10e03a(0x1060)]();for(let _0x5076d9=-0x6*-0x607+0x1230*0x2+-0x488a;_0x50e5f4[_0x10e03a(0x114c)](_0x5076d9,_0x2ffc5e[_0x10e03a(0x1645)]);_0x5076d9++){_0x50e5f4[_0x10e03a(0x4b6)](_0x2ffc5e[_0x5076d9],0x20c*0xe+-0xb95+0x13*-0xe6)&&_0x50e5f4[_0x10e03a(0x1631)](this[_0x10e03a(0x91b)+'ponSlot'],_0x5076d9)&&(_0x5520c7[_0x5076d9]=null);}this['_tempEquip'+_0x10e03a(0xce5)]=undefined;}return _0x5520c7;},Window_BattleLog['prototype']['getDualWie'+_0x4258d1(0x92b)]=function(_0x1d047a){const _0x40f171=_0x4258d1;return _0x1d047a[_0x40f171(0x1580)]()?_0x1d047a[_0x40f171(0x11da)]()['length']||-0x7f*-0x29+-0x11cb+-0x28b:0x1892+0x137c*0x1+-0x2c0d;},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xe78)+_0x4258d1(0xc58)]=function(_0x45b119,_0x235b90){const _0xf3099d=_0x4258d1;_0x45b119&&_0x45b119['isActor']()&&_0x45b119['setActiveW'+'eaponSlot'](_0x235b90),this['callNextMe'+_0xf3099d(0x98a)]();},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x378)+_0x4258d1(0x5ad)]=function(_0xe589ab){const _0x280368=_0x4258d1;_0xe589ab&&_0xe589ab['isActor']()&&_0xe589ab[_0x280368(0x378)+_0x280368(0x89f)+'t'](),this[_0x280368(0x1478)+_0x280368(0x98a)]();},Game_Actor[_0x4258d1(0xf38)]['battleUIOf'+_0x4258d1(0x5e5)]=function(){const _0x158e87=_0x4258d1,_0x3e8992={'LfQPa':_0x158e87(0xdd9)+_0x158e87(0x5e5)};let _0x548ff6=_0x3e8992[_0x158e87(0xbf5)];if(this[_0x158e87(0x674)+'Key'](_0x548ff6))return this[_0x158e87(0x13a4)][_0x548ff6];return this[_0x158e87(0x13a4)][_0x548ff6]=this[_0x158e87(0xa05)+_0x158e87(0xb0c)+'X'](this['actor']()),this[_0x158e87(0x13a4)][_0x548ff6];},Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0xdd9)+_0x4258d1(0xd6c)]=function(){const _0x4886f4=_0x4258d1,_0x4fe0ea={'qrJWX':_0x4886f4(0xdd9)+_0x4886f4(0xd6c)};let _0x6f596a=_0x4fe0ea['qrJWX'];if(this[_0x4886f4(0x674)+_0x4886f4(0x1661)](_0x6f596a))return this[_0x4886f4(0x13a4)][_0x6f596a];return this[_0x4886f4(0x13a4)][_0x6f596a]=this[_0x4886f4(0xa05)+_0x4886f4(0xb0c)+'Y'](this['actor']()),this[_0x4886f4(0x13a4)][_0x6f596a];},VisuMZ[_0x4258d1(0x337)]['Game_Enemy'+'_setup']=Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0xb3e)],Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0xb3e)]=function(_0x1c73cf,_0x232909,_0x2278a6){const _0x3ff8a2=_0x4258d1,_0x4ceb99={'idLdY':'0|3|2|5|4|'+'1'},_0x57d12d=_0x4ceb99[_0x3ff8a2(0xa43)][_0x3ff8a2(0xba9)]('|');let _0x33f2c8=-0xd24+0x1753+-0xa2f;while(!![]){switch(_0x57d12d[_0x33f2c8++]){case'0':_0x1c73cf=DataManager[_0x3ff8a2(0xdbc)+'Ds'](_0x1c73cf);continue;case'1':Imported[_0x3ff8a2(0x59b)+_0x3ff8a2(0x14fa)+_0x3ff8a2(0xd4c)]&&this[_0x3ff8a2(0x10a2)]();continue;case'2':Imported['VisuMZ_1_E'+_0x3ff8a2(0x14fa)+_0x3ff8a2(0xd4c)]&&this[_0x3ff8a2(0xee2)+_0x3ff8a2(0xf97)+'e']();continue;case'3':VisuMZ['BattleCore'][_0x3ff8a2(0x44e)+_0x3ff8a2(0xc77)]['call'](this,_0x1c73cf,_0x232909,_0x2278a6);continue;case'4':this['setupBattl'+_0x3ff8a2(0x1355)]();continue;case'5':this[_0x3ff8a2(0xe5d)+_0x3ff8a2(0x1355)]();continue;}break;}},Game_Enemy['prototype']['clearBattl'+'eCoreData']=function(){const _0x37e9b9=_0x4258d1,_0xd7ea89=VisuMZ[_0x37e9b9(0x337)]['Settings'][_0x37e9b9(0xcce)];this[_0x37e9b9(0x1258)+_0x37e9b9(0x52e)]=_0xd7ea89[_0x37e9b9(0x13df)+_0x37e9b9(0xf2b)],this[_0x37e9b9(0x16a0)+'Data']={},this[_0x37e9b9(0x149d)+_0x37e9b9(0x8e4)+_0x37e9b9(0x100b)]();},Game_Enemy[_0x4258d1(0xf38)]['setupBattl'+_0x4258d1(0x1355)]=function(){const _0x2fedc9=_0x4258d1,_0x57c7fa={'gjUci':function(_0x23a4b6,_0x1b71d5){return _0x23a4b6(_0x1b71d5);},'kxJoL':function(_0x250b8e,_0x4ec53a){return _0x250b8e(_0x4ec53a);},'FwhWP':function(_0x6f9dbf,_0x955ae3){return _0x6f9dbf(_0x955ae3);},'RWsrc':function(_0x32e7df,_0x15b9c7){return _0x32e7df(_0x15b9c7);},'lrurs':'SvBattlerS'+_0x2fedc9(0x1383),'WtZFc':'SvBattlerM'+_0x2fedc9(0x60d),'LlimZ':function(_0x4971dc,_0x40ddf4){return _0x4971dc(_0x40ddf4);},'esIQy':'SvWeaponSo'+_0x2fedc9(0x53e),'YBZdt':_0x2fedc9(0x1526)+_0x2fedc9(0xa65),'FvqRL':_0x2fedc9(0xfe0)+_0x2fedc9(0x1143)+'%2','PRCop':_0x2fedc9(0xfe0)+'leMass-%1-'+'%2'},_0x21c24b=VisuMZ[_0x2fedc9(0x337)]['Settings'][_0x2fedc9(0xcce)],_0x201d60=this[_0x2fedc9(0x2d1)]()[_0x2fedc9(0x278)];this[_0x2fedc9(0x16a0)+_0x2fedc9(0x39e)]={'name':'','wtypeId':_0x21c24b['WtypeId'],'collapse':_0x21c24b[_0x2fedc9(0xa71)+_0x2fedc9(0x553)],'motionIdle':_0x21c24b[_0x2fedc9(0x162c)],'width':_0x21c24b[_0x2fedc9(0x22c)]||-0xaf0+-0x2f+0x1*0xb5f,'height':_0x21c24b[_0x2fedc9(0x156a)]||0x4d+0x20*0xfd+-0x1fad,'anchorX':_0x21c24b[_0x2fedc9(0x24b)]||0x1d5+0x1af*0x17+-0x3a*0xb3,'anchorY':_0x21c24b[_0x2fedc9(0x937)]||-0x13c*-0x18+-0x92*0x17+-0x1082,'shadow':_0x21c24b['Shadow']};_0x201d60['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x2fedc9(0x1258)+_0x2fedc9(0x52e)]=_0x57c7fa[_0x2fedc9(0x612)](Number,RegExp['$1']));const _0x149622=this[_0x2fedc9(0x16a0)+_0x2fedc9(0x39e)];if(_0x201d60[_0x2fedc9(0x79c)](/<SIDEVIEW BATTLER: (.*)>/i))_0x149622[_0x2fedc9(0xd40)]=_0x57c7fa['gjUci'](String,RegExp['$1']);else{if(_0x201d60[_0x2fedc9(0x79c)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x4186a8=_0x57c7fa[_0x2fedc9(0x612)](String,RegExp['$1'])[_0x2fedc9(0xba9)](/[\r\n]+/)[_0x2fedc9(0x1113)]('');_0x149622[_0x2fedc9(0xd40)]=DataManager[_0x2fedc9(0x8b3)+'domizedDat'+'a'](_0x4186a8);}}_0x201d60[_0x2fedc9(0x79c)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x149622['anchorX']=_0x57c7fa[_0x2fedc9(0x248)](eval,RegExp['$1']),_0x149622[_0x2fedc9(0x1598)]=_0x57c7fa[_0x2fedc9(0x248)](eval,RegExp['$2']));if(_0x201d60[_0x2fedc9(0x79c)](/<SIDEVIEW COLLAPSE>/i))_0x149622[_0x2fedc9(0x5a1)]=!![];else _0x201d60[_0x2fedc9(0x79c)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x149622[_0x2fedc9(0x5a1)]=![]);if(_0x201d60[_0x2fedc9(0x79c)](/<SIDEVIEW SHOW SHADOW>/i))_0x149622['shadow']=!![];else _0x201d60[_0x2fedc9(0x79c)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x149622[_0x2fedc9(0x120f)]=![]);if(_0x201d60[_0x2fedc9(0x79c)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x149622[_0x2fedc9(0x9c5)]=_0x57c7fa[_0x2fedc9(0x612)](String,RegExp['$1'])[_0x2fedc9(0x1bc)+'e']()[_0x2fedc9(0xbb6)]();else{if(_0x201d60[_0x2fedc9(0x79c)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x4a0405=_0x57c7fa[_0x2fedc9(0x612)](String,RegExp['$1'])[_0x2fedc9(0xba9)](/[\r\n]+/)[_0x2fedc9(0x1113)]('');_0x149622[_0x2fedc9(0x9c5)]=DataManager['processRan'+_0x2fedc9(0x883)+'a'](_0x4a0405);}}_0x201d60['match'](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x149622[_0x2fedc9(0xc2a)]=_0x57c7fa[_0x2fedc9(0x107b)](Number,RegExp['$1']),_0x149622[_0x2fedc9(0x1594)]=_0x57c7fa[_0x2fedc9(0x612)](Number,RegExp['$2']));if(_0x201d60[_0x2fedc9(0x79c)](/<SIDEVIEW WEAPON: (.*)>/i))_0x149622[_0x2fedc9(0xfd8)]=DataManager[_0x2fedc9(0x14a7)+'WithName'](RegExp['$1']);else{if(_0x201d60[_0x2fedc9(0x79c)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x9ac434=_0x57c7fa['RWsrc'](String,RegExp['$1'])['split'](/[\r\n]+/)[_0x2fedc9(0x1113)](''),_0x1a33de=DataManager[_0x2fedc9(0x8b3)+_0x2fedc9(0x883)+'a'](_0x9ac434);_0x149622[_0x2fedc9(0xfd8)]=DataManager[_0x2fedc9(0x14a7)+_0x2fedc9(0x119d)](_0x1a33de);}}if(Imported[_0x2fedc9(0x59b)+_0x2fedc9(0x14fa)+_0x2fedc9(0xd4c)]){const _0x58d7e0=this['getTraitSe'+'tKeys']();for(const _0x15ab74 of _0x58d7e0){const _0x2e17a4=this[_0x2fedc9(0x3ae)](_0x15ab74)[_0x2fedc9(0x13bb)]['toUpperCas'+'e']()[_0x2fedc9(0xbb6)](),_0x350cf0=_0x15ab74[_0x2fedc9(0x191)+'e']()[_0x2fedc9(0xbb6)]();if(_0x201d60['match'](VisuMZ[_0x2fedc9(0x8dc)+_0x2fedc9(0x7a0)][_0x2fedc9(0x951)][_0x57c7fa[_0x2fedc9(0x5bd)]['format'](_0x350cf0,_0x2e17a4)]))_0x149622[_0x2fedc9(0xd40)]=_0x57c7fa[_0x2fedc9(0x248)](String,RegExp['$1']);else{if(_0x201d60[_0x2fedc9(0x79c)](VisuMZ[_0x2fedc9(0x8dc)+_0x2fedc9(0x7a0)]['RegExp'][_0x57c7fa[_0x2fedc9(0xf59)][_0x2fedc9(0xf22)](_0x350cf0,_0x2e17a4)])){const _0x2badc3=_0x57c7fa[_0x2fedc9(0x8cf)](String,RegExp['$1'])[_0x2fedc9(0xba9)](/[\r\n]+/)[_0x2fedc9(0x1113)]('');_0x149622['name']=DataManager[_0x2fedc9(0x8b3)+_0x2fedc9(0x883)+'a'](_0x2badc3);}}if(_0x201d60['match'](VisuMZ[_0x2fedc9(0x8dc)+_0x2fedc9(0x7a0)][_0x2fedc9(0x951)][_0x57c7fa[_0x2fedc9(0x1457)][_0x2fedc9(0xf22)](_0x350cf0,_0x2e17a4)]))_0x149622[_0x2fedc9(0xfd8)]=DataManager['getWtypeId'+_0x2fedc9(0x119d)](RegExp['$1']);else{if(_0x201d60[_0x2fedc9(0x79c)](VisuMZ[_0x2fedc9(0x8dc)+'tusCore'][_0x2fedc9(0x951)][_0x57c7fa[_0x2fedc9(0x5dc)][_0x2fedc9(0xf22)](_0x350cf0,_0x2e17a4)])){const _0x2e0ffb=_0x57c7fa[_0x2fedc9(0x248)](String,RegExp['$1'])['split'](/[\r\n]+/)[_0x2fedc9(0x1113)](''),_0x16fbe0=DataManager[_0x2fedc9(0x8b3)+'domizedDat'+'a'](_0x2e0ffb);_0x149622[_0x2fedc9(0xfd8)]=DataManager[_0x2fedc9(0x14a7)+'WithName'](_0x16fbe0);}}if(_0x201d60[_0x2fedc9(0x79c)](VisuMZ[_0x2fedc9(0x8dc)+_0x2fedc9(0x7a0)][_0x2fedc9(0x951)][_0x57c7fa[_0x2fedc9(0xdd0)][_0x2fedc9(0xf22)](_0x350cf0,_0x2e17a4)]))_0x149622[_0x2fedc9(0x9c5)]=_0x57c7fa[_0x2fedc9(0x6fc)](String,RegExp['$1'])[_0x2fedc9(0x1bc)+'e']()[_0x2fedc9(0xbb6)]();else{if(_0x201d60[_0x2fedc9(0x79c)](VisuMZ['ElementSta'+_0x2fedc9(0x7a0)][_0x2fedc9(0x951)][_0x57c7fa[_0x2fedc9(0x1146)]['format'](_0x350cf0,_0x2e17a4)])){const _0x27689d=_0x57c7fa[_0x2fedc9(0x8cf)](String,RegExp['$1'])['split'](/[\r\n]+/)[_0x2fedc9(0x1113)]('');_0x149622[_0x2fedc9(0x9c5)]=DataManager[_0x2fedc9(0x8b3)+'domizedDat'+'a'](_0x27689d);}}}}},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x149a)+_0x4258d1(0x617)]=function(){const _0x1f4461=_0x4258d1;return this[_0x1f4461(0x1258)+_0x1f4461(0x52e)]||0x4*0x1ac+0x209f+-0x274f;},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x149a)+_0x4258d1(0xa0e)]=function(){const _0x5db4d8=_0x4258d1;return this['attackAnim'+_0x5db4d8(0x617)]();},Game_Enemy[_0x4258d1(0xf38)]['attackAnim'+_0x4258d1(0x9ce)+'t']=function(_0x142613){const _0x5df618=_0x4258d1;return this[_0x5df618(0x149a)+_0x5df618(0x617)]();},Game_Enemy['prototype'][_0x4258d1(0xf77)+_0x4258d1(0xcd2)]=function(){const _0x34f2be=_0x4258d1;if(this[_0x34f2be(0x2d1)]()[_0x34f2be(0x278)]['match'](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x34f2be(0xf38)][_0x34f2be(0xf77)+_0x34f2be(0xcd2)][_0x34f2be(0xb14)](this);},Game_Enemy['prototype']['isBattlerG'+_0x4258d1(0x8bf)]=function(){const _0x2ee0ca=_0x4258d1;if(this[_0x2ee0ca(0x2d1)]()[_0x2ee0ca(0x278)][_0x2ee0ca(0x79c)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x4258d1(0xf38)]['skills']=function(){const _0x4bdd01=_0x4258d1,_0xb18b4c=[];for(const _0x4b4ff0 of this[_0x4bdd01(0x2d1)]()[_0x4bdd01(0x447)]){const _0x2b5a27=$dataSkills[_0x4b4ff0[_0x4bdd01(0x731)]];if(_0x2b5a27&&!_0xb18b4c[_0x4bdd01(0x163f)](_0x2b5a27))_0xb18b4c[_0x4bdd01(0x88f)](_0x2b5a27);}return _0xb18b4c;},Game_Enemy[_0x4258d1(0xf38)]['battleUIOf'+_0x4258d1(0x5e5)]=function(){const _0x26fa3c=_0x4258d1,_0x587262={'ugHXi':_0x26fa3c(0xdd9)+_0x26fa3c(0x5e5)};let _0x3a909f=_0x587262['ugHXi'];if(this[_0x26fa3c(0x674)+_0x26fa3c(0x1661)](_0x3a909f))return this[_0x26fa3c(0x13a4)][_0x3a909f];return this[_0x26fa3c(0x13a4)][_0x3a909f]=this[_0x26fa3c(0xa05)+'leUIOffset'+'X'](this[_0x26fa3c(0x2d1)]()),this['_cache'][_0x3a909f];},Game_Enemy['prototype'][_0x4258d1(0xdd9)+_0x4258d1(0xd6c)]=function(){const _0x275554=_0x4258d1,_0x35738d={'LWMLq':_0x275554(0xdd9)+'fsetY'};let _0x5add3c=_0x35738d[_0x275554(0x10c7)];if(this[_0x275554(0x674)+'Key'](_0x5add3c))return this[_0x275554(0x13a4)][_0x5add3c];return this[_0x275554(0x13a4)][_0x5add3c]=this[_0x275554(0xa05)+_0x275554(0xb0c)+'Y'](this['enemy']()),this['_cache'][_0x5add3c];},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x29f)+_0x4258d1(0xde6)]=function(){const _0xf54768=_0x4258d1,_0x49f704={'gMnha':function(_0x37bdf,_0x44238f){return _0x37bdf!==_0x44238f;}};if(_0x49f704[_0xf54768(0x630)](this[_0xf54768(0x16a0)+_0xf54768(0x39e)],undefined))return this[_0xf54768(0x16a0)+_0xf54768(0x39e)];return this['setupBattl'+_0xf54768(0x1355)](),this[_0xf54768(0x16a0)+_0xf54768(0x39e)];},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0xb37)+'er']=function(){const _0x2c85c4=_0x4258d1,_0x2156d2={'UwiMt':function(_0x2c5e8c,_0x104ea8){return _0x2c5e8c!==_0x104ea8;}};return _0x2156d2[_0x2c85c4(0xa58)](this['svBattlerD'+_0x2c85c4(0xde6)]()[_0x2c85c4(0xd40)],'');},Game_Enemy['prototype']['svBattlerN'+_0x4258d1(0x61d)]=function(){const _0xe4b9d8=_0x4258d1;return this[_0xe4b9d8(0x29f)+_0xe4b9d8(0xde6)]()[_0xe4b9d8(0xd40)];},Game_Enemy[_0x4258d1(0xf38)]['battlerSmo'+'othImage']=function(){const _0x1ce157=_0x4258d1;return this[_0x1ce157(0xb37)+'er']()?VisuMZ['BattleCore']['Settings']['Actor']['SmoothImag'+'e']:VisuMZ[_0x1ce157(0x337)]['Settings'][_0x1ce157(0xcce)][_0x1ce157(0x12d2)+'e'];},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0xe11)+_0x4258d1(0x1485)]=function(_0x41b671){const _0x417ef8=_0x4258d1;Game_Battler['prototype'][_0x417ef8(0xe11)+'ion'][_0x417ef8(0xb14)](this,_0x41b671);if(this['hasSvBattl'+'er']())this[_0x417ef8(0xe11)+_0x417ef8(0xb92)](_0x41b671);},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x409)+_0x4258d1(0x1413)]=function(){const _0x546868=_0x4258d1,_0x5d3a95={'dguyf':function(_0x4fdadc,_0x1ad40f){return _0x4fdadc===_0x1ad40f;},'txGyi':'thrust','XLZMv':_0x546868(0x7b0),'UvzJn':_0x546868(0x71b)},_0x13fc15=this[_0x546868(0x29f)+_0x546868(0xde6)]()['wtypeId']||0x1284+-0x22d4+0x1050,_0x26d206=$dataSystem[_0x546868(0x36e)+_0x546868(0x995)][_0x13fc15];if(_0x26d206){if(_0x5d3a95['dguyf'](_0x26d206[_0x546868(0x1064)],-0x47*0x2d+-0x24ba+0x39*0xdd))this[_0x546868(0x759)+_0x546868(0x1485)](_0x5d3a95[_0x546868(0x54e)]);else{if(_0x5d3a95[_0x546868(0x929)](_0x26d206['type'],0x3*-0xa11+-0xa65+-0x2899*-0x1))this[_0x546868(0x759)+_0x546868(0x1485)](_0x5d3a95['XLZMv']);else _0x5d3a95['dguyf'](_0x26d206[_0x546868(0x1064)],0x1d46+0xc91*-0x3+0x86f)&&this[_0x546868(0x759)+_0x546868(0x1485)](_0x5d3a95[_0x546868(0xb64)]);}}},Game_Enemy[_0x4258d1(0xf38)]['performWea'+'ponAnimati'+'on']=function(){const _0x54202a=_0x4258d1,_0x35545b=this['svBattlerD'+_0x54202a(0xde6)]()[_0x54202a(0xfd8)]||-0xc1*-0x4+0x19ac+-0x90*0x33,_0x57ebf6=$dataSystem['attackMoti'+'ons'][_0x35545b];_0x57ebf6&&this[_0x54202a(0xfcc)+_0x54202a(0xcc2)](_0x57ebf6[_0x54202a(0xddf)+_0x54202a(0x8f4)]);},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0xa4c)+'otion']=function(){const _0x3fe1cc=_0x4258d1,_0x21d79d=this[_0x3fe1cc(0x29f)+_0x3fe1cc(0xde6)]()[_0x3fe1cc(0xfd8)]||0x2*-0x129f+0x1471*-0x1+0x39af;return $dataSystem[_0x3fe1cc(0x36e)+_0x3fe1cc(0x995)][_0x21d79d];},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0xa4c)+_0x4258d1(0x6dd)]=function(_0x3b0532){const _0x2e1486=_0x4258d1;return this[_0x2e1486(0xa4c)+_0x2e1486(0xd7c)]();},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x1399)+'age']=function(){const _0x407385=_0x4258d1,_0x30b41f={'ooGwn':_0x407385(0xbc0)};Game_Battler[_0x407385(0xf38)][_0x407385(0x1399)+_0x407385(0xdda)][_0x407385(0xb14)](this),this[_0x407385(0x14d1)+'sible']()&&this[_0x407385(0xb37)+'er']()&&this['requestMot'+'ion'](_0x30b41f[_0x407385(0x10a9)]),SoundManager['playEnemyD'+_0x407385(0xd5f)]();},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0xcc3)+_0x4258d1(0x10ad)]=function(){const _0x2c8625=_0x4258d1,_0x4669b1={'VAPNZ':_0x2c8625(0x53c)};Game_Battler[_0x2c8625(0xf38)]['performEva'+_0x2c8625(0x10ad)]['call'](this),this[_0x2c8625(0x759)+_0x2c8625(0x1485)](_0x4669b1[_0x2c8625(0x8d6)]);},Game_Enemy['prototype'][_0x4258d1(0x585)+_0x4258d1(0x4b9)]=function(){const _0x4283e4=_0x4258d1,_0x314d3a={'dmilF':_0x4283e4(0x53c)};Game_Battler[_0x4283e4(0xf38)]['performMag'+_0x4283e4(0x4b9)][_0x4283e4(0xb14)](this),this[_0x4283e4(0x759)+_0x4283e4(0x1485)](_0x314d3a[_0x4283e4(0x3bb)]);},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x933)+'nter']=function(){const _0x459883=_0x4258d1;Game_Battler['prototype'][_0x459883(0x933)+_0x459883(0x541)][_0x459883(0xb14)](this),this['performAtt'+_0x459883(0x1413)]();},Game_Enemy['prototype'][_0x4258d1(0x16b3)+_0x4258d1(0x553)]=function(){const _0x567483=_0x4258d1,_0x2c76cd={'EBsvM':function(_0x1be088,_0xc0d3af){return _0x1be088>=_0xc0d3af;}};if(this[_0x567483(0xb37)+'er']()){if(_0x2c76cd[_0x567483(0xbfc)](this[_0x567483(0x11e9)+'pe'](),-0x25f5*-0x1+-0x2*0x409+-0x4fb*0x6))return!![];return this['svBattlerD'+_0x567483(0xde6)]()['collapse'];}else return!![];},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x297)+_0x4258d1(0xd37)]=function(){const _0x2fdfab=_0x4258d1;return this[_0x2fdfab(0x29f)+_0x2fdfab(0xde6)]()[_0x2fdfab(0x15a3)];},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x297)+_0x4258d1(0x8b5)]=function(){const _0x44c615=_0x4258d1;return this[_0x44c615(0x29f)+_0x44c615(0xde6)]()[_0x44c615(0x1598)];},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0xd33)+'hadowVisib'+'le']=function(){const _0x441829=_0x4258d1;return this[_0x441829(0x29f)+_0x441829(0xde6)]()[_0x441829(0x120f)];},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x44e)+_0x4258d1(0x517)]=Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x4ef)],Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x4ef)]=function(_0x460b77){const _0x1cbe33=_0x4258d1;VisuMZ['BattleCore']['Game_Enemy'+_0x1cbe33(0x517)][_0x1cbe33(0xb14)](this,_0x460b77),this[_0x1cbe33(0xe5d)+_0x1cbe33(0x1355)](),this[_0x1cbe33(0x15f5)+_0x1cbe33(0x1355)]();const _0xefad08=this[_0x1cbe33(0xc06)]();_0xefad08&&(_0xefad08['_battlerNa'+'me']=undefined,_0xefad08[_0x1cbe33(0xae9)](this));},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x149d)+_0x4258d1(0x8e4)+'ity']=function(){const _0x477446=_0x4258d1,_0x1ed537=VisuMZ['BattleCore'][_0x477446(0x424)]['Enemy'];this['_nameTempV'+_0x477446(0x1695)+_0x477446(0x940)]=_0x1ed537[_0x477446(0x142c)+_0x477446(0xd44)]??0x5*0x2c8+-0x83*-0x1a+-0x1b*0x102;},Game_Enemy['prototype'][_0x4258d1(0x10d3)+_0x4258d1(0x13fa)+'ible']=function(){const _0x147350=_0x4258d1,_0x3e04f7={'ATnmN':function(_0x1b6828,_0x1435f0){return _0x1b6828>_0x1435f0;}};return this[_0x147350(0x4f4)+_0x147350(0x1695)+_0x147350(0x940)]&&_0x3e04f7[_0x147350(0x7d4)](this[_0x147350(0x4f4)+_0x147350(0x1695)+_0x147350(0x940)],-0x5a2+0x3db*-0x3+0x1133);},Game_Enemy['prototype'][_0x4258d1(0x8f1)+_0x4258d1(0x6e1)+_0x4258d1(0x11b8)]=function(){const _0x27818f=_0x4258d1,_0x12bd6a={'wMvjh':function(_0x3dd16f,_0x2d4a17){return _0x3dd16f>_0x2d4a17;}};this[_0x27818f(0x4f4)+_0x27818f(0x1695)+_0x27818f(0x940)]&&_0x12bd6a[_0x27818f(0xca7)](this[_0x27818f(0x4f4)+_0x27818f(0x1695)+_0x27818f(0x940)],0x1*-0x237b+-0x153+-0x1*-0x24ce)&&this[_0x27818f(0x4f4)+'isibleDura'+'tion']--;},Game_Enemy[_0x4258d1(0xf38)][_0x4258d1(0xe3f)+_0x4258d1(0x8e4)+_0x4258d1(0x100b)]=function(){const _0x38f6f5=_0x4258d1;this['_nameTempV'+_0x38f6f5(0x1695)+_0x38f6f5(0x940)]=0x1f7e+0x3*0x17f+-0x23fb;},Game_Unit[_0x4258d1(0xf38)][_0x4258d1(0x1fc)+'tleCoreJS']=function(_0x1af30d){const _0x80437=_0x4258d1;for(const _0x576718 of this['members']()){if(_0x576718)_0x576718[_0x80437(0x1fc)+_0x80437(0x705)](_0x1af30d);}},Game_Unit[_0x4258d1(0xf38)]['trueRandom'+_0x4258d1(0x3ce)]=function(){const _0x4d78f2=_0x4258d1,_0x294483=this[_0x4d78f2(0xe7e)+'rs']();return _0x294483[Math[_0x4d78f2(0x154d)](_0x294483[_0x4d78f2(0x1645)])];},VisuMZ[_0x4258d1(0x337)]['Game_Party'+_0x4258d1(0x11b3)]=Game_Party[_0x4258d1(0xf38)][_0x4258d1(0x4c5)],Game_Party[_0x4258d1(0xf38)][_0x4258d1(0x4c5)]=function(_0x51a77a){const _0xf32b63=_0x4258d1;VisuMZ['BattleCore'][_0xf32b63(0x221)+'_addActor'][_0xf32b63(0xb14)](this,_0x51a77a),BattleManager[_0xf32b63(0x16b0)+_0xf32b63(0x123a)]();},VisuMZ['BattleCore'][_0x4258d1(0x221)+_0x4258d1(0x440)+'or']=Game_Party[_0x4258d1(0xf38)]['removeActo'+'r'],Game_Party['prototype'][_0x4258d1(0x12d9)+'r']=function(_0x1e82bc){const _0x4ece7f=_0x4258d1;VisuMZ['BattleCore'][_0x4ece7f(0x221)+'_removeAct'+'or'][_0x4ece7f(0xb14)](this,_0x1e82bc),BattleManager[_0x4ece7f(0x16b0)+'tusWindow']();},VisuMZ['BattleCore'][_0x4258d1(0x14f9)+_0x4258d1(0xc77)]=Game_Troop[_0x4258d1(0xf38)]['setup'],Game_Troop[_0x4258d1(0xf38)][_0x4258d1(0xb3e)]=function(_0x27f129){const _0x383cf9=_0x4258d1;$gameTemp[_0x383cf9(0x348)+_0x383cf9(0x103f)+'SettingsBa'+_0x383cf9(0x6df)](),$gameTemp[_0x383cf9(0xde1)+_0x383cf9(0x103f)+_0x383cf9(0xc6d)+'ttleCore'](_0x27f129),VisuMZ[_0x383cf9(0x337)][_0x383cf9(0x14f9)+_0x383cf9(0xc77)][_0x383cf9(0xb14)](this,_0x27f129),this[_0x383cf9(0xc6e)+'pMembers']();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14f9)+'_expTotal']=Game_Troop[_0x4258d1(0xf38)][_0x4258d1(0x1170)],Game_Troop[_0x4258d1(0xf38)][_0x4258d1(0x1170)]=function(){const _0x14d22e=_0x4258d1;let _0x47de6d=VisuMZ[_0x14d22e(0x337)][_0x14d22e(0x14f9)+_0x14d22e(0x1042)][_0x14d22e(0xb14)](this);return this[_0x14d22e(0xa34)]&&(_0x47de6d*=this['expRate']()),Math[_0x14d22e(0x438)](_0x47de6d);},Game_Troop[_0x4258d1(0xf38)][_0x4258d1(0xa34)]=function(){return 0x28e+-0x7*-0x1aa+0x1*-0xe33;},Game_Troop[_0x4258d1(0xf38)]['extendTroo'+_0x4258d1(0x47c)]=function(){const _0x3a9fdd=_0x4258d1,_0x34b77a=DataManager[_0x3a9fdd(0x13e5)+_0x3a9fdd(0x8d0)](this[_0x3a9fdd(0xe8c)]()['id']);if(_0x34b77a['match'](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0xc44821=RegExp['$1'][_0x3a9fdd(0xba9)](',')[_0x3a9fdd(0x15f9)](_0x8a1f5c=>Number(_0x8a1f5c));this[_0x3a9fdd(0xf41)+_0x3a9fdd(0x83d)+_0x3a9fdd(0x13c8)](),this['processExt'+_0x3a9fdd(0x86d)+_0x3a9fdd(0xbc4)](_0xc44821);}},Game_Troop[_0x4258d1(0xf38)]['checkExten'+_0x4258d1(0x83d)+'atibility']=function(){const _0x40544a=_0x4258d1,_0x1e87ca={'DVwnn':function(_0x1bc3a0,_0x101f6a){return _0x1bc3a0+_0x101f6a;},'DTANX':_0x40544a(0x131c)+_0x40544a(0xb85)+_0x40544a(0x59e)+'\x20to\x20the\x20la'+_0x40544a(0x866),'fBuJQ':_0x40544a(0x163d)+'\x20order\x20to\x20'+_0x40544a(0x699)+'xtend:\x20x>\x20'+'function.','laOFH':function(_0x2d4706,_0x106f0e){return _0x2d4706<_0x106f0e;},'ErzFI':function(_0x20a508,_0x2cca55){return _0x20a508(_0x2cca55);},'LFRYi':'BTB','jgmSO':function(_0x3c612a,_0x2fa785){return _0x3c612a<_0x2fa785;},'jcAkY':_0x40544a(0x26b),'PdSJg':function(_0x297c5f,_0x8eb2a4){return _0x297c5f<_0x8eb2a4;},'oAsUS':_0x40544a(0xc13)};let _0x4545b9=_0x1e87ca[_0x40544a(0x4bc)](_0x1e87ca['DTANX'],'\x0a');_0x4545b9+=_0x1e87ca[_0x40544a(0xb1a)],Imported[_0x40544a(0xd6f)+'attleSyste'+_0x40544a(0x11cc)]&&(_0x1e87ca['laOFH'](VisuMZ[_0x40544a(0x1161)+_0x40544a(0xfde)][_0x40544a(0x389)],0x47*0x6b+0xdd*0xb+0x272b*-0x1+0.1100000000000001)&&(_0x1e87ca[_0x40544a(0xeaa)](alert,_0x4545b9[_0x40544a(0xf22)](_0x1e87ca[_0x40544a(0x13a6)])),SceneManager[_0x40544a(0xfb6)]())),Imported[_0x40544a(0xd6f)+'attleSyste'+_0x40544a(0xfb7)]&&(_0x1e87ca[_0x40544a(0x129d)](VisuMZ['BattleSyst'+_0x40544a(0x118f)][_0x40544a(0x389)],-0x47*-0xd+-0x2356+0x1fbc+0.18999999999999995)&&(_0x1e87ca[_0x40544a(0xeaa)](alert,_0x4545b9[_0x40544a(0xf22)](_0x1e87ca[_0x40544a(0xe61)])),SceneManager[_0x40544a(0xfb6)]())),Imported[_0x40544a(0xd6f)+'attleSyste'+'mSTB']&&(_0x1e87ca[_0x40544a(0x1e4)](VisuMZ[_0x40544a(0x1161)+_0x40544a(0xccf)][_0x40544a(0x389)],0x100a+0xd*-0x2a7+0x3*0x626+0.1499999999999999)&&(_0x1e87ca[_0x40544a(0xeaa)](alert,_0x4545b9[_0x40544a(0xf22)](_0x1e87ca[_0x40544a(0x69e)])),SceneManager[_0x40544a(0xfb6)]()));},Game_Troop[_0x4258d1(0xf38)][_0x4258d1(0x784)+'endTroopMe'+_0x4258d1(0xbc4)]=function(_0x1607e9){const _0x922963=_0x4258d1;this[_0x922963(0x504)+'t']={};for(const _0x2bf5b5 of this[_0x922963(0xdb2)]()){if(!_0x2bf5b5)continue;_0x2bf5b5['setLetter']('');}for(const _0x424cb5 of _0x1607e9){const _0x221fa0=$dataTroops[_0x424cb5];if(_0x221fa0)this[_0x922963(0x8c6)+_0x922963(0xfa9)+_0x922963(0x1514)](_0x221fa0);}this[_0x922963(0x10f1)+_0x922963(0x104b)]();},Game_Troop['prototype'][_0x4258d1(0x8c6)+_0x4258d1(0xfa9)+_0x4258d1(0x1514)]=function(_0x442abe){const _0x3845cb=_0x4258d1;for(const _0x58483f of _0x442abe['members']){if($dataEnemies[_0x58483f['enemyId']]){const _0x226147=_0x58483f['enemyId'],_0x11088a=_0x58483f['x'],_0x486d9d=_0x58483f['y'],_0x3c23d8=new Game_Enemy(_0x226147,_0x11088a,_0x486d9d);_0x58483f[_0x3845cb(0x6e9)]&&_0x3c23d8[_0x3845cb(0x514)](),this[_0x3845cb(0x14cb)][_0x3845cb(0x88f)](_0x3c23d8);}}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x13b4)+'etupBattle'+'back']=Game_Map[_0x4258d1(0xf38)][_0x4258d1(0x15f5)+_0x4258d1(0x83a)],Game_Map['prototype'][_0x4258d1(0x15f5)+_0x4258d1(0x83a)]=function(){const _0x12bbcc=_0x4258d1;VisuMZ[_0x12bbcc(0x337)][_0x12bbcc(0x13b4)+_0x12bbcc(0x1417)+_0x12bbcc(0xb77)][_0x12bbcc(0xb14)](this),this[_0x12bbcc(0x15f5)+_0x12bbcc(0x1313)+_0x12bbcc(0x16aa)]();},Game_Map[_0x4258d1(0xf38)][_0x4258d1(0x15f5)+_0x4258d1(0x1313)+_0x4258d1(0x16aa)]=function(){const _0x5a5fd7=_0x4258d1,_0x7c4987={'VeaRm':function(_0x364914,_0x2ac0db){return _0x364914(_0x2ac0db);},'VNhXD':function(_0x4faacd,_0x4f28ae){return _0x4faacd(_0x4f28ae);},'jSyAs':function(_0x10f71e,_0x38ff0f){return _0x10f71e===_0x38ff0f;},'NVbQY':function(_0x25269e,_0x1011a2){return _0x25269e(_0x1011a2);}};this[_0x5a5fd7(0xb9c)+'tleback1']={},this[_0x5a5fd7(0xb9c)+_0x5a5fd7(0x136d)]={};if(!$dataMap)return;const _0x33dfba=$dataMap['note'];if(!_0x33dfba)return;const _0xff9294=_0x33dfba['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0xff9294)for(const _0x23a9d6 of _0xff9294){_0x23a9d6[_0x5a5fd7(0x79c)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x2ce2c9=_0x7c4987[_0x5a5fd7(0x948)](Number,RegExp['$1']),_0x2294f0=_0x7c4987['VNhXD'](Number,RegExp['$2']),_0x520387=_0x7c4987[_0x5a5fd7(0x56f)](_0x2294f0,-0xffc+0x2478+-0x147b)?this[_0x5a5fd7(0xb9c)+_0x5a5fd7(0xc04)]:this['_regionBat'+_0x5a5fd7(0x136d)],_0x500925=_0x7c4987[_0x5a5fd7(0x117f)](String,RegExp['$3']);_0x520387[_0x2ce2c9]=_0x500925;}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xd32)+'attleback1'+_0x4258d1(0x13bb)]=Game_Map[_0x4258d1(0xf38)][_0x4258d1(0xb93)+_0x4258d1(0xe5a)],Game_Map[_0x4258d1(0xf38)][_0x4258d1(0xb93)+_0x4258d1(0xe5a)]=function(){const _0x546fc1=_0x4258d1;if(!BattleManager[_0x546fc1(0xbe9)+'st']()){const _0x49a286=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x546fc1(0xb9c)+_0x546fc1(0xc04)]&&this[_0x546fc1(0xb9c)+_0x546fc1(0xc04)][_0x49a286])return this[_0x546fc1(0xb9c)+_0x546fc1(0xc04)][_0x49a286];}return VisuMZ[_0x546fc1(0x337)][_0x546fc1(0xd32)+_0x546fc1(0x1173)+_0x546fc1(0x13bb)][_0x546fc1(0xb14)](this);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xd32)+'attleback2'+'Name']=Game_Map[_0x4258d1(0xf38)][_0x4258d1(0xb93)+_0x4258d1(0x549)],Game_Map['prototype'][_0x4258d1(0xb93)+_0x4258d1(0x549)]=function(){const _0x250d26=_0x4258d1;if(!BattleManager[_0x250d26(0xbe9)+'st']()){const _0x2ff927=$gamePlayer[_0x250d26(0x187)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x250d26(0xb9c)+_0x250d26(0xc04)]&&this[_0x250d26(0xb9c)+'tleback2'][_0x2ff927])return this['_regionBat'+_0x250d26(0x136d)][_0x2ff927];}return VisuMZ[_0x250d26(0x337)][_0x250d26(0xd32)+_0x250d26(0x7d9)+_0x250d26(0x13bb)][_0x250d26(0xb14)](this);},VisuMZ[_0x4258d1(0x337)]['Game_Map_e'+_0x4258d1(0x1e0)+'st']=Game_Map[_0x4258d1(0xf38)][_0x4258d1(0x1b1)+_0x4258d1(0xb0a)],Game_Map[_0x4258d1(0xf38)][_0x4258d1(0x1b1)+_0x4258d1(0xb0a)]=function(){const _0x7fbd1e=_0x4258d1;let _0x3def89=JsonEx[_0x7fbd1e(0x15e4)+'py'](VisuMZ[_0x7fbd1e(0x337)][_0x7fbd1e(0xb09)+'ncounterLi'+'st']['call'](this));return VisuMZ[_0x7fbd1e(0x337)]['ShuffleArr'+'ay'](_0x3def89);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x23c)+'ay']=function(_0x3e760a){const _0x32bc6e=_0x4258d1,_0x5b0ffa={'oaqhE':function(_0x1d62c2,_0x4b954b){return _0x1d62c2-_0x4b954b;},'PpFkh':function(_0x574165,_0x283ca7){return _0x574165>_0x283ca7;},'fzqCs':function(_0x50c3c3,_0x15fbdb){return _0x50c3c3*_0x15fbdb;},'UjbXH':function(_0x392a89,_0x9d7725){return _0x392a89+_0x9d7725;}};var _0x255ea8,_0x49c5e1,_0x2285e7;for(_0x2285e7=_0x5b0ffa[_0x32bc6e(0x128d)](_0x3e760a[_0x32bc6e(0x1645)],0x1cfb+-0x59*-0x4+-0x17*0x152);_0x5b0ffa[_0x32bc6e(0x39f)](_0x2285e7,0x13ea+0x1225*0x1+0x260f*-0x1);_0x2285e7--){_0x255ea8=Math[_0x32bc6e(0x76f)](_0x5b0ffa['fzqCs'](Math[_0x32bc6e(0x108d)](),_0x5b0ffa[_0x32bc6e(0x155c)](_0x2285e7,0x1304*0x2+-0x6eb+-0x1f1c))),_0x49c5e1=_0x3e760a[_0x2285e7],_0x3e760a[_0x2285e7]=_0x3e760a[_0x255ea8],_0x3e760a[_0x255ea8]=_0x49c5e1;}return _0x3e760a;},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xa1f)+_0x4258d1(0x130b)+_0x4258d1(0xf36)]=Game_Interpreter[_0x4258d1(0xf38)][_0x4258d1(0xac3)],Game_Interpreter['prototype']['command357']=function(_0x958b4a){const _0x367854=_0x4258d1;return $gameTemp['setLastPlu'+'ginCommand'+_0x367854(0x1456)+'r'](this),VisuMZ[_0x367854(0x337)]['Game_Inter'+'preter_Plu'+_0x367854(0xf36)]['call'](this,_0x958b4a);},VisuMZ[_0x4258d1(0x337)]['Game_Inter'+_0x4258d1(0x81d)+_0x4258d1(0x14b7)+'e']=Game_Interpreter[_0x4258d1(0xf38)]['updateWait'+'Mode'],Game_Interpreter['prototype'][_0x4258d1(0x5e3)+_0x4258d1(0x164e)]=function(){const _0x235d48=_0x4258d1,_0x209ef1={'MFKiR':'battleAngl'+'e','IEliH':function(_0xea977d,_0x4a18a8){return _0xea977d>_0x4a18a8;},'yaufy':_0x235d48(0xedc)+'ation','LYWVk':_0x235d48(0x106d)+_0x235d48(0x907),'TyLKX':'battleCame'+'ra','RVIkr':_0x235d48(0x9e6)+'ct','EagGX':'battleFloa'+'t','jYOXp':_0x235d48(0x12fa),'BCvzT':_0x235d48(0xc11),'JMTma':_0x235d48(0x462),'GvCyl':'battleOpac'+_0x235d48(0x100b),'HMyOu':'battleGrow','bHasz':_0x235d48(0xb60)+'teSkew','PVnMi':_0x235d48(0xbeb)+'ectiles','FozPI':_0x235d48(0x1005),'PTYAT':'battleSpin','RjjBS':_0x235d48(0x445),'QkpcT':function(_0x22908e,_0x5d8fd4){return _0x22908e>_0x5d8fd4;},'XjmfH':_0x235d48(0x13db)+_0x235d48(0xf50),'ePobB':_0x235d48(0x13db)+_0x235d48(0xc44)};if(SceneManager[_0x235d48(0x614)+'tle']())switch(this['_waitMode']){case _0x209ef1['MFKiR']:if(Imported[_0x235d48(0x1403)+_0x235d48(0x90e)+'a']){if(_0x209ef1['IEliH']($gameScreen['battleCame'+_0x235d48(0x452)]()[_0x235d48(0x1609)+_0x235d48(0x1485)],0x3*-0x63+0x472+-0x1d*0x1d))return!![];this[_0x235d48(0xec8)]='';}break;case _0x209ef1[_0x235d48(0xd84)]:if(BattleManager['_spriteset']['isAnimatio'+'nPlaying']())return!![];this[_0x235d48(0xec8)]='';break;case _0x209ef1[_0x235d48(0xacc)]:if(BattleManager[_0x235d48(0x1b3)][_0x235d48(0x657)+'eBalloonPl'+'aying']())return!![];this[_0x235d48(0xec8)]='';break;case _0x209ef1[_0x235d48(0x9e9)]:if(Imported[_0x235d48(0x1403)+_0x235d48(0x90e)+'a']){if(_0x209ef1[_0x235d48(0x72d)]($gameScreen[_0x235d48(0x911)+_0x235d48(0x452)]()[_0x235d48(0x241)+_0x235d48(0x940)],-0xc1b+0x5*0x25d+0x1*0x4a))return!![];if(_0x209ef1[_0x235d48(0x72d)]($gameScreen[_0x235d48(0x911)+_0x235d48(0x452)]()['cameraOffs'+'etDuration'],-0x1a9e+0x1d7c+-0x2de))return!![];this[_0x235d48(0xec8)]='';}break;case _0x209ef1['RVIkr']:if(BattleManager[_0x235d48(0x1b3)][_0x235d48(0x915)+'g']())return!![];this['_waitMode']='';break;case _0x209ef1['EagGX']:if(BattleManager[_0x235d48(0x1b3)][_0x235d48(0x972)+_0x235d48(0x23e)]())return!![];this[_0x235d48(0xec8)]='';break;case _0x209ef1[_0x235d48(0x279)]:if(BattleManager[_0x235d48(0x1b3)][_0x235d48(0x2a8)+_0x235d48(0x6b8)]())return!![];this['_waitMode']='';break;case _0x209ef1[_0x235d48(0x11c9)]:if(BattleManager['_logWindow'][_0x235d48(0xae8)]())return!![];this[_0x235d48(0xec8)]='';break;case _0x209ef1[_0x235d48(0x14c5)]:if(BattleManager[_0x235d48(0x1b3)][_0x235d48(0x122d)+'ving']())return!![];this['_waitMode']='';break;case _0x209ef1[_0x235d48(0xedb)]:if(BattleManager[_0x235d48(0x1b3)]['isAnyoneCh'+_0x235d48(0x1617)+_0x235d48(0x100b)]())return!![];this[_0x235d48(0xec8)]='';break;case _0x209ef1[_0x235d48(0x4e9)]:if(BattleManager[_0x235d48(0x1b3)][_0x235d48(0x1339)+_0x235d48(0x1587)]())return!![];this[_0x235d48(0xec8)]='';break;case _0x209ef1[_0x235d48(0x856)]:if(BattleManager[_0x235d48(0x1b3)]['isAnyoneSk'+_0x235d48(0x2d9)]())return!![];this['_waitMode']='';break;case _0x209ef1[_0x235d48(0x147c)]:if(Imported[_0x235d48(0x1403)+_0x235d48(0x12ae)+_0x235d48(0xede)]){if(BattleManager[_0x235d48(0x1b3)][_0x235d48(0x11e6)+_0x235d48(0x1036)+'nt']())return!![];this[_0x235d48(0xec8)]='';}break;case _0x209ef1[_0x235d48(0xdcd)]:if(Imported[_0x235d48(0x1403)+_0x235d48(0x90e)+'a']){if(_0x209ef1[_0x235d48(0x72d)]($gameScreen['battleCame'+_0x235d48(0x452)]()['skewDurati'+'on'],-0xee6*-0x1+0x2401+-0x32e7))return!![];this[_0x235d48(0xec8)]='';}break;case _0x209ef1[_0x235d48(0x927)]:if(BattleManager['_spriteset']['isAnyoneSp'+_0x235d48(0xcea)]())return!![];this['_waitMode']='';break;case _0x209ef1['RjjBS']:if(Imported['VisuMZ_3_A'+'ctSeqCamer'+'a']){if(_0x209ef1[_0x235d48(0x1e8)]($gameScreen[_0x235d48(0x911)+'raData']()[_0x235d48(0x15f0)+'on'],0x1694+0x1136*0x2+-0x3900))return!![];this[_0x235d48(0xec8)]='';}break;case _0x209ef1[_0x235d48(0x121d)]:if(Imported[_0x235d48(0x1403)+_0x235d48(0x60f)+'t']){if(BattleManager[_0x235d48(0x1b3)][_0x235d48(0xefc)+_0x235d48(0xadb)+_0x235d48(0xd10)]){if(BattleManager[_0x235d48(0x1b3)][_0x235d48(0xefc)+_0x235d48(0xadb)+_0x235d48(0xd10)]())return!![];this[_0x235d48(0xec8)]=_0x209ef1[_0x235d48(0xeb0)];}else this['_waitMode']='';break;}break;case _0x209ef1[_0x235d48(0xeb0)]:if(Imported[_0x235d48(0x1403)+_0x235d48(0x60f)+'t']){if(BattleManager[_0x235d48(0x1b3)][_0x235d48(0xefc)+_0x235d48(0xf35)+_0x235d48(0x623)]())return!![];this[_0x235d48(0xec8)]='';}break;}return VisuMZ['BattleCore'][_0x235d48(0xa1f)+_0x235d48(0x81d)+_0x235d48(0x14b7)+'e'][_0x235d48(0xb14)](this);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xa1f)+_0x4258d1(0x11d4)+_0x4258d1(0x592)]=Game_Interpreter[_0x4258d1(0xf38)][_0x4258d1(0xfd6)],Game_Interpreter['prototype'][_0x4258d1(0xfd6)]=function(_0x324c6a){const _0x563c0b=_0x4258d1;return!$gameParty[_0x563c0b(0x917)]()?this[_0x563c0b(0xfd6)+_0x563c0b(0xb4a)+_0x563c0b(0x66e)](_0x324c6a):VisuMZ['BattleCore'][_0x563c0b(0xa1f)+'preter_com'+_0x563c0b(0x592)][_0x563c0b(0xb14)](this,_0x324c6a);},Game_Interpreter[_0x4258d1(0xf38)][_0x4258d1(0xfd6)+'1']=function(_0x14ba17){const _0x576969=_0x4258d1;return VisuMZ['BattleCore'][_0x576969(0xa1f)+_0x576969(0x11d4)+_0x576969(0x592)][_0x576969(0xb14)](this,_0x14ba17),BattleManager['setEventCa'+_0x576969(0xf98)](_0xdf9c13=>{const _0xe1f8b2=_0x576969;this[_0xe1f8b2(0x10a6)][this[_0xe1f8b2(0xc48)]]=_0xdf9c13;}),!![];},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1325)+_0x4258d1(0x1346)+_0x4258d1(0x1500)]=function(_0x103f0b){const _0x55dcfc=_0x4258d1,_0x442873={'wTKnj':function(_0x2d470f,_0x1392a0){return _0x2d470f<=_0x1392a0;}},_0x43989a=$dataCommonEvents[_0x103f0b];if(!_0x43989a)return![];if(_0x442873[_0x55dcfc(0x6d4)](_0x43989a[_0x55dcfc(0x7fe)]['length'],-0x2029+-0x24d8+0x323*0x16))return![];return!![];},Game_Interpreter[_0x4258d1(0xf38)][_0x4258d1(0xfd6)+_0x4258d1(0xb4a)+_0x4258d1(0x66e)]=function(_0x4aca86){const _0x2d9d90=_0x4258d1,_0x45afe9={'XPJLQ':function(_0x315f55,_0x3e0e84){return _0x315f55+_0x3e0e84;}},_0xa0f160=VisuMZ[_0x2d9d90(0x337)]['Settings'][_0x2d9d90(0x12c8)],_0x36fcf2=_0xa0f160[_0x2d9d90(0x10ff)+_0x2d9d90(0x6cb)],_0x1862d3=$dataCommonEvents[_0x36fcf2];if(_0x1862d3&&VisuMZ['BattleCore'][_0x2d9d90(0x1325)+'ttleEventV'+_0x2d9d90(0x1500)](_0x36fcf2)){const _0x4c1b37=this[_0x2d9d90(0x1508)+'tMap']()?this[_0x2d9d90(0x4c6)]:0xc8a+0x1*-0x474+-0x816,_0x1a3e6d=_0x1862d3['list'];this[_0x2d9d90(0x11e7)](_0x1a3e6d,_0x4c1b37),this[_0x2d9d90(0xd88)]=JsonEx[_0x2d9d90(0x15e4)+'py'](this['_list']);const _0xfbe612={'code':0xbc3,'indent':this[_0x2d9d90(0xc48)],'parameters':JsonEx[_0x2d9d90(0x15e4)+'py'](_0x4aca86)};return this[_0x2d9d90(0xd88)][_0x2d9d90(0x643)](_0x45afe9[_0x2d9d90(0xf39)](this[_0x2d9d90(0x1077)],-0xfb4+0x425+0x28*0x4a),-0xa10+0x14a2+-0xa92,_0xfbe612),!![];}else return VisuMZ[_0x2d9d90(0x337)][_0x2d9d90(0xa1f)+'preter_com'+_0x2d9d90(0x592)][_0x2d9d90(0xb14)](this,_0x4aca86);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbf2)+_0x4258d1(0x475)+_0x4258d1(0xc21)]=BattleManager[_0x4258d1(0x1326)+'r'],BattleManager['onEncounte'+'r']=function(){const _0x9894e6=_0x4258d1;VisuMZ['BattleCore'][_0x9894e6(0xbf2)+_0x9894e6(0x475)+_0x9894e6(0xc21)]['call'](this),this[_0x9894e6(0x1326)+_0x9894e6(0x1531)+'e']();},BattleManager['onEncounte'+_0x4258d1(0x1531)+'e']=function(){const _0x11b1d0=_0x4258d1,_0xb76be8={'BsXxX':function(_0x28ec9d,_0x4c2fec){return _0x28ec9d>_0x4c2fec;}},_0x252afb=VisuMZ['BattleCore']['Settings'][_0x11b1d0(0x12c8)],_0x56d289=_0x252afb[_0x11b1d0(0x10ff)+_0x11b1d0(0x6cb)];_0x56d289&&VisuMZ['BattleCore'][_0x11b1d0(0x1325)+_0x11b1d0(0x1346)+_0x11b1d0(0x1500)](_0x56d289)&&(this[_0x11b1d0(0x3bc)+_0x11b1d0(0xf0f)+'rtEvent']=!![],$gameTemp['reserveCom'+'monEvent'](_0x252afb[_0x11b1d0(0x10ff)+_0x11b1d0(0x6cb)]),$gameMap[_0x11b1d0(0x11a6)+_0x11b1d0(0x12b2)](),$gameMap[_0x11b1d0(0x697)+'er']['_preBattle'+_0x11b1d0(0x483)+'t']=!![]),_0xb76be8[_0x11b1d0(0xb35)](_0x252afb[_0x11b1d0(0xb02)+'t'],0xa1d+0x64*0x44+-0x24ad)&&(this[_0x11b1d0(0x2b3)]=!![]);},VisuMZ['BattleCore'][_0x4258d1(0x567)+_0x4258d1(0xf57)+'Menu']=Scene_Map[_0x4258d1(0xf38)][_0x4258d1(0xf57)+_0x4258d1(0xe51)],Scene_Map[_0x4258d1(0xf38)][_0x4258d1(0xf57)+_0x4258d1(0xe51)]=function(){const _0x351ddf=_0x4258d1;if(BattleManager[_0x351ddf(0x3bc)+_0x351ddf(0xf0f)+_0x351ddf(0x168e)])return;VisuMZ[_0x351ddf(0x337)][_0x351ddf(0x567)+_0x351ddf(0xf57)+_0x351ddf(0xe51)]['call'](this);},VisuMZ[_0x4258d1(0x337)]['Scene_Map_'+_0x4258d1(0xa07)+'le']=Scene_Map[_0x4258d1(0xf38)][_0x4258d1(0xa07)+'le'],Scene_Map[_0x4258d1(0xf38)]['launchBatt'+'le']=function(){const _0x25e4a4=_0x4258d1;BattleManager[_0x25e4a4(0x3bc)+'eBattleSta'+_0x25e4a4(0x168e)]?this['battleCore'+_0x25e4a4(0x2ac)+_0x25e4a4(0x99e)]():VisuMZ[_0x25e4a4(0x337)][_0x25e4a4(0x567)+_0x25e4a4(0xa07)+'le'][_0x25e4a4(0xb14)](this);},Scene_Map['prototype'][_0x4258d1(0x7b4)+'PreBattleC'+_0x4258d1(0x99e)]=function(){const _0x5e6c2f=_0x4258d1;this[_0x5e6c2f(0x62e)]=!![];},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbad)+_0x4258d1(0xaeb)+_0x4258d1(0x578)]=SceneManager['isSceneCha'+_0x4258d1(0x1e7)],SceneManager[_0x4258d1(0x1253)+_0x4258d1(0x1e7)]=function(){const _0x445295=_0x4258d1;if(BattleManager[_0x445295(0x3bc)+_0x445295(0xf0f)+_0x445295(0x168e)])return![];return VisuMZ['BattleCore']['SceneManag'+_0x445295(0xaeb)+_0x445295(0x578)][_0x445295(0xb14)](this);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xa1f)+_0x4258d1(0x56c)+_0x4258d1(0x12de)]=Game_Interpreter[_0x4258d1(0xf38)][_0x4258d1(0x35c)],Game_Interpreter[_0x4258d1(0xf38)][_0x4258d1(0x35c)]=function(){const _0x43fe38=_0x4258d1;VisuMZ[_0x43fe38(0x337)][_0x43fe38(0xa1f)+_0x43fe38(0x56c)+_0x43fe38(0x12de)][_0x43fe38(0xb14)](this),this[_0x43fe38(0x405)+'CommonEven'+'t']&&(this['_preBattle'+_0x43fe38(0x483)+'t']=undefined,SceneManager[_0x43fe38(0x14b3)]['battleCore'+_0x43fe38(0x471)+_0x43fe38(0x136e)]());},Scene_Map['prototype']['battleCore'+_0x4258d1(0x471)+_0x4258d1(0x136e)]=function(){const _0x1e2336=_0x4258d1;BattleManager[_0x1e2336(0x3bc)+_0x1e2336(0xf0f)+_0x1e2336(0x168e)]=undefined,BattleManager['_battleCor'+_0x1e2336(0x15ae)+_0x1e2336(0x13ad)]=!![],this[_0x1e2336(0x655)]();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x567)+_0x4258d1(0xca3)+_0x4258d1(0xc8f)]=Scene_Map[_0x4258d1(0xf38)][_0x4258d1(0xca3)],Scene_Map['prototype']['initialize']=function(){const _0x323686=_0x4258d1;VisuMZ[_0x323686(0x337)]['Scene_Map_'+'initialize'+'After'][_0x323686(0xb14)](this),BattleManager['_battleCor'+_0x323686(0x15ae)+_0x323686(0x13ad)]&&(this[_0x323686(0x62e)]=!![],BattleManager['_battleCor'+_0x323686(0x15ae)+'umeAfter']=undefined);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x567)+_0x4258d1(0xca3)]=Scene_Map[_0x4258d1(0xf38)][_0x4258d1(0xca3)],Scene_Map[_0x4258d1(0xf38)]['initialize']=function(){const _0x2ae2c7=_0x4258d1;VisuMZ[_0x2ae2c7(0x337)][_0x2ae2c7(0x567)+_0x2ae2c7(0xca3)][_0x2ae2c7(0xb14)](this),$gameTemp[_0x2ae2c7(0x348)+_0x2ae2c7(0x103f)+_0x2ae2c7(0xc6d)+'ttleCore']();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1320)+_0x4258d1(0x1575)+'Item']=Scene_ItemBase[_0x4258d1(0xf38)]['applyItem'],Scene_ItemBase[_0x4258d1(0xf38)][_0x4258d1(0x1425)]=function(){const _0x1c6aa9=_0x4258d1;VisuMZ['BattleCore'][_0x1c6aa9(0x1320)+_0x1c6aa9(0x1575)+_0x1c6aa9(0x1691)]['call'](this);if(this[_0x1c6aa9(0x780)]()['note'][_0x1c6aa9(0x79c)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x1c6aa9(0x780)]()[_0x1c6aa9(0x278)][_0x1c6aa9(0x79c)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x1c6aa9(0xadc)+_0x1c6aa9(0x58f)]=[]),DataManager[_0x1c6aa9(0x115b)+_0x1c6aa9(0xafe)+_0x1c6aa9(0x4b1)+_0x1c6aa9(0x75d)+'ct'](this[_0x1c6aa9(0x780)]())&&($gameTemp['_commonEve'+_0x1c6aa9(0x58f)]=[]);},VisuMZ['BattleCore']['Scene_Opti'+_0x4258d1(0x12a6)+_0x4258d1(0x14d8)]=Scene_Options[_0x4258d1(0xf38)]['maxCommand'+'s'],Scene_Options['prototype'][_0x4258d1(0x433)+'s']=function(){const _0x11a292=_0x4258d1;let _0x1bb780=VisuMZ[_0x11a292(0x337)]['Scene_Opti'+_0x11a292(0x12a6)+_0x11a292(0x14d8)][_0x11a292(0xb14)](this);const _0xefd66e=VisuMZ[_0x11a292(0x337)]['Settings'];if(_0xefd66e[_0x11a292(0xe46)][_0x11a292(0x130a)]&&_0xefd66e[_0x11a292(0xe46)]['AdjustRect'])_0x1bb780+=-0x25c0+-0x119a+0x375c;if(_0xefd66e['HpGauge'][_0x11a292(0x130a)]&&_0xefd66e['HpGauge'][_0x11a292(0x12b4)])_0x1bb780+=0x1636+-0xe13*-0x1+-0x2448;return _0x1bb780;},VisuMZ[_0x4258d1(0x337)]['Scene_Batt'+'le_initial'+_0x4258d1(0x1168)]=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xca3)],Scene_Battle['prototype'][_0x4258d1(0xca3)]=function(){const _0x596868=_0x4258d1;VisuMZ[_0x596868(0x337)]['Scene_Batt'+_0x596868(0xaab)+_0x596868(0x1168)][_0x596868(0xb14)](this),this[_0x596868(0x12d3)+_0x596868(0x3c0)+_0x596868(0x49b)]();},VisuMZ[_0x4258d1(0x337)]['Scene_Batt'+_0x4258d1(0x373)]=Scene_Battle[_0x4258d1(0xf38)]['start'],Scene_Battle['prototype'][_0x4258d1(0x70e)]=function(){const _0x5badc2=_0x4258d1;SceneManager[_0x5badc2(0xbc9)+_0x5badc2(0xfb0)+_0x5badc2(0x9d7)+_0x5badc2(0xf88)]()?(Scene_Message[_0x5badc2(0xf38)][_0x5badc2(0x70e)][_0x5badc2(0xb14)](this),this[_0x5badc2(0x1b3)]&&this[_0x5badc2(0x1b3)][_0x5badc2(0x164c)](),BattleManager[_0x5badc2(0xab0)+_0x5badc2(0x8a3)+_0x5badc2(0x1224)]&&BattleManager[_0x5badc2(0xb57)+_0x5badc2(0x110c)]()):(VisuMZ[_0x5badc2(0x337)][_0x5badc2(0x1547)+_0x5badc2(0x373)][_0x5badc2(0xb14)](this),$gameTroop['onBattleSt'+_0x5badc2(0xba4)+_0x5badc2(0xc98)]());},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+'le_stop']=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x655)],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x655)]=function(){const _0x4a6b3a=_0x4258d1;SceneManager[_0x4a6b3a(0x13bc)+_0x4a6b3a(0x15ee)+_0x4a6b3a(0x3b0)+'e']()?Scene_Message['prototype']['stop'][_0x4a6b3a(0xb14)](this):VisuMZ[_0x4a6b3a(0x337)][_0x4a6b3a(0x1547)+'le_stop'][_0x4a6b3a(0xb14)](this);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+_0x4258d1(0x10f2)+'te']=Scene_Battle[_0x4258d1(0xf38)]['terminate'],Scene_Battle[_0x4258d1(0xf38)]['terminate']=function(){const _0x1df4b2=_0x4258d1;SceneManager['isNextScen'+_0x1df4b2(0x15ee)+'nsitionabl'+'e']()?Scene_Message[_0x1df4b2(0xf38)][_0x1df4b2(0x35c)][_0x1df4b2(0xb14)](this):VisuMZ[_0x1df4b2(0x337)][_0x1df4b2(0x1547)+_0x1df4b2(0x10f2)+'te'][_0x1df4b2(0xb14)](this),$gameTemp[_0x1df4b2(0xe5d)+_0x1df4b2(0x690)](),this[_0x1df4b2(0x12d3)+_0x1df4b2(0x3c0)+_0x1df4b2(0x49b)]();},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xdfb)+_0x4258d1(0x3de)]=function(){const _0x1c077f=_0x4258d1,_0x33ae82={'qoyvf':function(_0x5755c4,_0x1fa3ad){return _0x5755c4!==_0x1fa3ad;},'KSrtO':function(_0xc8f25a,_0xd12ce8){return _0xc8f25a===_0xd12ce8;},'JGLsR':_0x1c077f(0x83c)};if(ConfigManager[_0x1c077f(0x615)+'e']&&_0x33ae82[_0x1c077f(0xfe2)](ConfigManager['uiInputPos'+_0x1c077f(0x9fb)],undefined))return ConfigManager[_0x1c077f(0x85f)+'ition'];else{if(_0x33ae82['KSrtO'](this[_0x1c077f(0x6d1)+_0x1c077f(0x1100)](),_0x33ae82[_0x1c077f(0x10df)]))return![];else{return Scene_Message[_0x1c077f(0xf38)][_0x1c077f(0xdfb)+'utMode']['call'](this);;}}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+_0x4258d1(0xc91)+_0x4258d1(0x1354)]=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x18b)+_0x4258d1(0x3e0)],Scene_Battle['prototype'][_0x4258d1(0x18b)+_0x4258d1(0x3e0)]=function(){const _0x161b78=_0x4258d1;this[_0x161b78(0x11a4)+'yNameConta'+_0x161b78(0x169c)](),VisuMZ['BattleCore'][_0x161b78(0x1547)+_0x161b78(0xc91)+_0x161b78(0x1354)]['call'](this),this[_0x161b78(0xac9)+_0x161b78(0x86e)+'ow']();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+'le_createE'+_0x4258d1(0xc61)]=Scene_Battle['prototype'][_0x4258d1(0x11a4)+_0x4258d1(0x2cc)],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x11a4)+_0x4258d1(0x2cc)]=function(){const _0x126e2b=_0x4258d1;VisuMZ['BattleCore'][_0x126e2b(0x1547)+_0x126e2b(0xf6f)+_0x126e2b(0xc61)][_0x126e2b(0xb14)](this),this[_0x126e2b(0x148f)+_0x126e2b(0x7eb)+_0x126e2b(0x31e)]();},Scene_Battle['prototype'][_0x4258d1(0x148f)+_0x4258d1(0x7eb)+_0x4258d1(0x31e)]=function(){const _0x5b1d0d=_0x4258d1;this['createMult'+_0x5b1d0d(0x7eb)+'dow'](!![]),this[_0x5b1d0d(0x148f)+'iTargetWin'+'dow'](![]);},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x1216)+'tWindowRec'+'t']=function(_0x1b0d47){const _0x117d17=_0x4258d1,_0x2be7a8={'lbMtr':function(_0x573450,_0x4e3df8){return _0x573450-_0x4e3df8;},'SKDOC':_0x117d17(0x93d)+'ui'},_0x7dbadd=Window_BattleMultiTarget[_0x117d17(0x1395)],_0x341b0a=this[_0x117d17(0xdce)+_0x117d17(0x156a)](0x191*0xc+0x12b4+-0x257f,!![]);let _0x54112c=_0x1b0d47?_0x2be7a8[_0x117d17(0x364)](Graphics[_0x117d17(0x1309)],_0x7dbadd):-0x243+0x10c9+-0x152*0xb;_0x54112c+=_0x1b0d47?Window_BattleMultiTarget[_0x117d17(0xcaa)+_0x117d17(0xcfa)]:Window_BattleMultiTarget[_0x117d17(0x988)+_0x117d17(0xcfa)];const _0x26564a=[_0x2be7a8[_0x117d17(0xfbb)]]['includes'](this[_0x117d17(0x6d1)+_0x117d17(0x1100)]())?-0x1165+-0x59b+0x1700*0x1:this[_0x117d17(0x5c1)+_0x117d17(0xfdb)]['height'];let _0x1648e2=_0x2be7a8['lbMtr'](_0x2be7a8[_0x117d17(0x364)](Graphics['boxHeight'],_0x26564a),_0x341b0a);return _0x1648e2+=_0x1b0d47?Window_BattleMultiTarget[_0x117d17(0xcaa)+_0x117d17(0xc1b)]:Window_BattleMultiTarget[_0x117d17(0x988)+_0x117d17(0xc1b)],new Rectangle(_0x54112c,_0x1648e2,_0x7dbadd,_0x341b0a);},Scene_Battle[_0x4258d1(0xf38)]['createMult'+_0x4258d1(0x7eb)+_0x4258d1(0xfdb)]=function(_0x208288){const _0xfb4e94=_0x4258d1,_0x3ca8f0=this['multiTarge'+_0xfb4e94(0xcd7)+'t'](_0x208288),_0x248f0e=new Window_BattleMultiTarget(_0x3ca8f0,_0x208288);this['addWindow'](_0x248f0e),_0x208288?this['_actorMult'+'iTargetWin'+'dow']=_0x248f0e:this[_0xfb4e94(0x719)+'iTargetWin'+_0xfb4e94(0xfdb)]=_0x248f0e;},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+_0x4258d1(0x631)+'ancelButto'+'n']=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xbc1)+_0x4258d1(0x879)],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xbc1)+_0x4258d1(0x879)]=function(){const _0x617091=_0x4258d1,_0x34556d={'LRmpv':function(_0x39dceb,_0x38b1f4){return _0x39dceb===_0x38b1f4;},'yLFUM':_0x617091(0x83c)};VisuMZ[_0x617091(0x337)]['Scene_Batt'+_0x617091(0x631)+'ancelButto'+'n'][_0x617091(0xb14)](this),_0x34556d[_0x617091(0x957)](this[_0x617091(0x6d1)+_0x617091(0x1100)](),_0x34556d['yLFUM'])&&this[_0x617091(0xa21)+_0x617091(0x1106)+_0x617091(0x663)+'yle']();},Scene_Battle[_0x4258d1(0xf38)]['setVisible'+'UI']=function(_0xfaef04){const _0x2dd9dc=_0x4258d1,_0x1dc7d6={'QIPyo':function(_0x37d6a4,_0x363479){return _0x37d6a4/_0x363479;},'VXbLL':function(_0x4beb9e,_0xa53a35){return _0x4beb9e-_0xa53a35;},'moUBe':function(_0x59bb46,_0x426c78){return _0x59bb46-_0x426c78;},'tvvYV':function(_0x19cc3a,_0x139e50){return _0x19cc3a*_0x139e50;},'PqtTv':function(_0x11743c,_0x8e4920){return _0x11743c*_0x8e4920;}};_0xfaef04?(this[_0x2dd9dc(0x50f)+'er']['x']=_0x1dc7d6[_0x2dd9dc(0xb2e)](_0x1dc7d6[_0x2dd9dc(0xa7d)](Graphics[_0x2dd9dc(0xc2a)],Graphics['boxWidth']),0x1605+-0x2*0x4bf+-0xc85),this[_0x2dd9dc(0x50f)+'er']['y']=_0x1dc7d6[_0x2dd9dc(0xb2e)](_0x1dc7d6[_0x2dd9dc(0x74c)](Graphics['height'],Graphics[_0x2dd9dc(0x744)]),-0x290+0x2dc+-0x4a)):(this[_0x2dd9dc(0x50f)+'er']['x']=_0x1dc7d6['tvvYV'](Graphics[_0x2dd9dc(0xc2a)],-0x1367*-0x1+0x89f*-0x1+-0xabe),this[_0x2dd9dc(0x50f)+'er']['y']=_0x1dc7d6[_0x2dd9dc(0xf93)](Graphics[_0x2dd9dc(0x1594)],0xbc+0x1*0x12f5+0x27*-0x81));},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+_0x4258d1(0x15cb)+_0x4258d1(0x108f)]=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xad6)+_0x4258d1(0x68a)],Scene_Battle[_0x4258d1(0xf38)]['selectNext'+'Command']=function(){const _0x211cb8=_0x4258d1,_0xd7715f={'UEhof':function(_0x234639,_0x677961){return _0x234639===_0x677961;},'POBXq':function(_0x44c4f3,_0x2a7790){return _0x44c4f3===_0x2a7790;}},_0x461cda=BattleManager['actor']();VisuMZ[_0x211cb8(0x337)]['Scene_Batt'+_0x211cb8(0x15cb)+_0x211cb8(0x108f)][_0x211cb8(0xb14)](this);if(_0x461cda){if(_0xd7715f[_0x211cb8(0x1eb)](_0x461cda,BattleManager[_0x211cb8(0xd12)]()))return;if(_0xd7715f['POBXq'](_0x461cda,BattleManager['_subject']))return;if(_0x461cda[_0x211cb8(0xc06)]())_0x461cda[_0x211cb8(0xc06)]()[_0x211cb8(0xc39)]();}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+'le_selectP'+_0x4258d1(0x63e)+_0x4258d1(0xa76)]=Scene_Battle[_0x4258d1(0xf38)]['selectPrev'+'iousComman'+'d'],Scene_Battle[_0x4258d1(0xf38)]['selectPrev'+_0x4258d1(0x535)+'d']=function(){const _0x201d12=_0x4258d1,_0x115270=BattleManager[_0x201d12(0xd12)]();if(_0x115270&&_0x115270[_0x201d12(0xc06)])_0x115270['battler']()[_0x201d12(0xc39)]();VisuMZ['BattleCore'][_0x201d12(0x1547)+'le_selectP'+_0x201d12(0x63e)+_0x201d12(0xa76)][_0x201d12(0xb14)](this);},VisuMZ['BattleCore']['Scene_Batt'+_0x4258d1(0x111c)+_0x4258d1(0x659)]=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x641)+_0x4258d1(0x72f)],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x641)+_0x4258d1(0x72f)]=function(){const _0x5c382d=_0x4258d1;if(VisuMZ[_0x5c382d(0x337)][_0x5c382d(0x424)]['BattleLog']['BattleLogR'+_0x5c382d(0xe9a)])return VisuMZ[_0x5c382d(0x337)]['Settings'][_0x5c382d(0xc0e)]['BattleLogR'+_0x5c382d(0xe9a)][_0x5c382d(0xb14)](this);return VisuMZ[_0x5c382d(0x337)]['Scene_Batt'+_0x5c382d(0x111c)+_0x5c382d(0x659)]['call'](this);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+_0x4258d1(0xc29)+'artyComman'+_0x4258d1(0xc46)]=Scene_Battle['prototype'][_0x4258d1(0x1076)+_0x4258d1(0x1549)+_0x4258d1(0xb19)],Scene_Battle['prototype'][_0x4258d1(0x1076)+_0x4258d1(0x1549)+_0x4258d1(0xb19)]=function(){const _0x5f05eb=_0x4258d1;VisuMZ[_0x5f05eb(0x337)][_0x5f05eb(0x1547)+'le_createP'+_0x5f05eb(0x232)+_0x5f05eb(0xc46)][_0x5f05eb(0xb14)](this),this['createPart'+_0x5f05eb(0x1549)+'ndowBattle'+_0x5f05eb(0x5b8)]();},Scene_Battle[_0x4258d1(0xf38)]['createPart'+'yCommandWi'+_0x4258d1(0x313)+_0x4258d1(0x5b8)]=function(){const _0x3dc6eb=_0x4258d1,_0x58d317={'uvfVu':_0x3dc6eb(0x47d),'QKPkX':_0x3dc6eb(0x6b0),'hdkby':'portrait'},_0xc1de38=this[_0x3dc6eb(0x154e)+_0x3dc6eb(0x5e0)];_0xc1de38['setHandler'](_0x58d317[_0x3dc6eb(0xb40)],this[_0x3dc6eb(0x5d9)+'oBattle'][_0x3dc6eb(0x144f)](this)),_0xc1de38[_0x3dc6eb(0xce6)](_0x58d317[_0x3dc6eb(0x393)],this[_0x3dc6eb(0x26d)+'ions'][_0x3dc6eb(0x144f)](this));const _0x404183=this[_0x3dc6eb(0x6d1)+_0x3dc6eb(0x1100)]();switch(_0x404183){case'xp':case _0x58d317[_0x3dc6eb(0x912)]:return this[_0x3dc6eb(0x154e)+_0x3dc6eb(0x5e0)][_0x3dc6eb(0x8b4)+'undType'](0x1*0x1aa+0x24ad+0x132b*-0x2);break;}},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x5d9)+_0x4258d1(0x3dc)]=function(){const _0x2bd2f8=_0x4258d1;BattleManager[_0x2bd2f8(0x139c)+'e']=!![],$gameParty[_0x2bd2f8(0x1599)+'s'](),this[_0x2bd2f8(0xad6)+'Command'](),BattleManager[_0x2bd2f8(0x13c5)]()&&(BattleManager[_0x2bd2f8(0x15e6)]=![]);},Scene_Battle['prototype'][_0x4258d1(0x26d)+_0x4258d1(0x763)]=function(){const _0x4ffab2=_0x4258d1,_0x2f7d73={'pzGbB':_0x4ffab2(0xe3c)};this['isQueueOpt'+_0x4ffab2(0x11d0)]()?(this[_0x4ffab2(0xe05)+_0x4ffab2(0x1195)]=!![],this[_0x4ffab2(0x579)][_0x4ffab2(0x88f)](_0x2f7d73[_0x4ffab2(0xfd9)],VisuMZ[_0x4ffab2(0x337)][_0x4ffab2(0x424)][_0x4ffab2(0xde5)][_0x4ffab2(0x7f4)+_0x4ffab2(0x76d)+_0x4ffab2(0xdda)])):this[_0x4ffab2(0xf05)+'s']();},Scene_Battle[_0x4258d1(0xf38)]['isQueueOpt'+_0x4258d1(0x11d0)]=function(){const _0x433015=_0x4258d1;return BattleManager[_0x433015(0x6a4)+'b']();},Scene_Battle['prototype'][_0x4258d1(0xf05)+'s']=function(){const _0x134e07=_0x4258d1,_0x30b311={'VgxGP':_0x134e07(0x1304)+'4'},_0x511885=_0x30b311['VgxGP'][_0x134e07(0xba9)]('|');let _0x4ea709=-0x1e54+-0x153e*-0x1+0x916;while(!![]){switch(_0x511885[_0x4ea709++]){case'0':this[_0x134e07(0x1b3)]['update']();continue;case'1':SceneManager[_0x134e07(0x88f)](Scene_Options);continue;case'2':if(BattleManager[_0x134e07(0xbe9)+'st']())($dataSystem[_0x134e07(0xb93)+_0x134e07(0xe5a)]||$dataSystem[_0x134e07(0xb93)+_0x134e07(0x549)])&&SceneManager[_0x134e07(0xb44)+_0x134e07(0xb7a)]();else($gameMap['battleback'+_0x134e07(0xe5a)]()||$gameMap[_0x134e07(0xb93)+_0x134e07(0x549)]())&&SceneManager['snapForBac'+_0x134e07(0xb7a)]();continue;case'3':this[_0x134e07(0xe05)+_0x134e07(0x1195)]=![];continue;case'4':BattleManager[_0x134e07(0x13c5)]()&&(BattleManager['_tpbSceneC'+'hangeCache'+_0x134e07(0x1224)]=BattleManager[_0x134e07(0xd12)]());continue;case'5':this[_0x134e07(0x50f)+'er'][_0x134e07(0x13af)]=![];continue;}break;}},VisuMZ['BattleCore'][_0x4258d1(0x1547)+_0x4258d1(0xf1e)+_0x4258d1(0x11a2)+'ss']=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x1363)+_0x4258d1(0x3f2)],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x1363)+_0x4258d1(0x3f2)]=function(){const _0x4f7afb=_0x4258d1;VisuMZ[_0x4f7afb(0x337)][_0x4f7afb(0x1547)+_0x4f7afb(0xf1e)+'attleProce'+'ss'][_0x4f7afb(0xb14)](this);if(this[_0x4f7afb(0xe05)+_0x4f7afb(0x1195)]&&!BattleManager[_0x4f7afb(0xa47)])this[_0x4f7afb(0xf05)+'s']();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+'le_update']=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x164c)],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x164c)]=function(){const _0x341e67=_0x4258d1;VisuMZ['BattleCore'][_0x341e67(0x1547)+_0x341e67(0x1ab)][_0x341e67(0xb14)](this),this['updateOnce'+'ParallelIn'+'terpreters']();},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xac9)+_0x4258d1(0x86e)+'ow']=function(){const _0x2e6a40=_0x4258d1,_0x3b4d08=this[_0x2e6a40(0x47d)+_0x2e6a40(0xd09)]();this[_0x2e6a40(0x139c)+_0x2e6a40(0x3db)]=new Window_AutoBattleCancel(_0x3b4d08),this[_0x2e6a40(0x139c)+_0x2e6a40(0x3db)][_0x2e6a40(0x514)](),this[_0x2e6a40(0xd0b)](this[_0x2e6a40(0x139c)+_0x2e6a40(0x3db)]);},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x47d)+'WindowRect']=function(){const _0x4abe92=_0x4258d1;return VisuMZ['BattleCore'][_0x4abe92(0x424)][_0x4abe92(0xe46)]['AutoBattle'+_0x4abe92(0x285)][_0x4abe92(0xb14)](this);},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x12d3)+_0x4258d1(0x3c0)+_0x4258d1(0x49b)]=function(){const _0x5b54f4=_0x4258d1;this[_0x5b54f4(0x1186)+_0x5b54f4(0xc59)+'eters']=[];},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xdac)+_0x4258d1(0xebb)+_0x4258d1(0x3c9)]=function(){const _0x185291=_0x4258d1;if(!this[_0x185291(0x1186)+_0x185291(0xc59)+_0x185291(0x516)])return;for(const _0x294f60 of this[_0x185291(0x1186)+_0x185291(0xc59)+_0x185291(0x516)]){_0x294f60&&_0x294f60['update']();}},Scene_Battle[_0x4258d1(0xf38)]['playOncePa'+'rallelInte'+'rpreter']=function(_0x4fc290){const _0x280786=_0x4258d1,_0x2b23b3=$dataCommonEvents[_0x4fc290];if(!_0x2b23b3)return;const _0x57bf39=new Game_BattleOnceParallelInterpreter();this['addOncePar'+_0x280786(0x7ea)+_0x280786(0x1636)](_0x57bf39),_0x57bf39[_0x280786(0x14e1)+_0x280786(0xff4)](_0x4fc290);},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x1ae)+_0x4258d1(0x7ea)+_0x4258d1(0x1636)]=function(_0x58f38e){const _0x1f0642=_0x4258d1;this['_onceParal'+_0x1f0642(0xc59)+_0x1f0642(0x516)]=this['_onceParal'+_0x1f0642(0xc59)+_0x1f0642(0x516)]||[],this['_onceParal'+'lelInterpr'+_0x1f0642(0x516)][_0x1f0642(0x88f)](_0x58f38e);},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x1154)+_0x4258d1(0xebb)+_0x4258d1(0x473)]=function(_0x36529e){const _0x2c2048=_0x4258d1;this[_0x2c2048(0x1186)+_0x2c2048(0xc59)+_0x2c2048(0x516)]=this[_0x2c2048(0x1186)+_0x2c2048(0xc59)+'eters']||[],this[_0x2c2048(0x1186)+_0x2c2048(0xc59)+_0x2c2048(0x516)]['remove'](_0x36529e);},Game_Troop[_0x4258d1(0xf38)]['onBattleSt'+_0x4258d1(0xba4)+'allels']=function(){const _0x33b640=_0x4258d1;for(const _0x125750 of this['troop']()[_0x33b640(0xf8d)]){if(!this[_0x33b640(0x15e8)+'veOncePara'+_0x33b640(0x48b)](_0x125750))continue;SceneManager[_0x33b640(0x14b3)][_0x33b640(0x157f)+_0x33b640(0x460)+_0x33b640(0x545)](_0x125750);}},Game_Troop[_0x4258d1(0xf38)][_0x4258d1(0x15e8)+_0x4258d1(0x406)+_0x4258d1(0x48b)]=function(_0x12baaa){const _0x72c8dd=_0x4258d1;if(!_0x12baaa)return;for(const _0x57f72c of _0x12baaa[_0x72c8dd(0x7fe)]){if([0x5b*-0x35+0x589+0xfb*0xe,-0x24db+0x1d76+0x8fd][_0x72c8dd(0x163f)](_0x57f72c[_0x72c8dd(0xca9)])){const _0x302013=_0x57f72c[_0x72c8dd(0x1267)][0xa7d+-0x3*0x19+0x3a*-0x2d];if(_0x302013['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x4258d1(0xf38)]['playOncePa'+'rallelTroo'+_0x4258d1(0x545)]=function(_0x395ae3){const _0x2e98db=_0x4258d1;if(!_0x395ae3)return;const _0x18593b=new Game_BattleOnceParallelInterpreter();this[_0x2e98db(0x1ae)+_0x2e98db(0x7ea)+_0x2e98db(0x1636)](_0x18593b),_0x18593b['setTroopPa'+'ge'](_0x395ae3);};function Game_BattleOnceParallelInterpreter(){const _0x2688ad=_0x4258d1;this[_0x2688ad(0xca3)](...arguments);}Game_BattleOnceParallelInterpreter['prototype']=Object[_0x4258d1(0x100d)](Game_Interpreter[_0x4258d1(0xf38)]),Game_BattleOnceParallelInterpreter['prototype'][_0x4258d1(0xcab)+'r']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype']['setCommonE'+'vent']=function(_0x5dc45d){const _0x487d98=_0x4258d1,_0x91afbf=$dataCommonEvents[_0x5dc45d];_0x91afbf?this[_0x487d98(0xb3e)](_0x91afbf[_0x487d98(0x7fe)],-0x56+0x28f+-0x239*0x1):this[_0x487d98(0x35c)]();},Game_BattleOnceParallelInterpreter[_0x4258d1(0xf38)]['terminate']=function(){const _0x53912e=_0x4258d1;if(!SceneManager[_0x53912e(0x614)+_0x53912e(0x6e5)]())return;SceneManager['_scene'][_0x53912e(0x1154)+_0x53912e(0xebb)+_0x53912e(0x473)](this),Game_Interpreter[_0x53912e(0xf38)]['terminate']['call'](this);},Game_BattleOnceParallelInterpreter['prototype'][_0x4258d1(0x3d9)+'ge']=function(_0x48a16f){const _0x2e7457=_0x4258d1;_0x48a16f?this['setup'](_0x48a16f[_0x2e7457(0x7fe)],-0x8ad*-0x3+0x70a+-0x2111):this[_0x2e7457(0x35c)]();},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xe36)+_0x4258d1(0x826)+_0x4258d1(0x209)]=function(){const _0x5aa32f=_0x4258d1;return VisuMZ['BattleCore'][_0x5aa32f(0x424)][_0x5aa32f(0xde5)][_0x5aa32f(0x1289)+'tyCmd'];},VisuMZ[_0x4258d1(0x337)]['Scene_Batt'+_0x4258d1(0x14c0)+_0x4258d1(0xed1)+'Selection']=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x257)+_0x4258d1(0x9f7)+_0x4258d1(0x14e0)],Scene_Battle[_0x4258d1(0xf38)]['startParty'+_0x4258d1(0x9f7)+'ection']=function(){const _0x277895=_0x4258d1;this[_0x277895(0xe36)+'mandWindow'+'Disabled']()?this[_0x277895(0x4f0)+_0x277895(0xfa0)+_0x277895(0xee7)+'n']():VisuMZ[_0x277895(0x337)][_0x277895(0x1547)+_0x277895(0x14c0)+'rtyCommand'+_0x277895(0x434)]['call'](this);},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x4f0)+_0x4258d1(0xfa0)+_0x4258d1(0xee7)+'n']=function(){const _0xfdb6dc=_0x4258d1;if(BattleManager[_0xfdb6dc(0x26a)]())this[_0xfdb6dc(0xad6)+_0xfdb6dc(0x68a)]();else BattleManager['isTpb']()&&VisuMZ[_0xfdb6dc(0x337)][_0xfdb6dc(0x1547)+_0xfdb6dc(0x14c0)+_0xfdb6dc(0xed1)+_0xfdb6dc(0x434)][_0xfdb6dc(0xb14)](this);},VisuMZ['BattleCore'][_0x4258d1(0x1547)+_0x4258d1(0x2c4)+_0x4258d1(0x9c3)]=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x7be)+'ht'],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x7be)+'ht']=function(){const _0x57634d=_0x4258d1;BattleManager[_0x57634d(0x13c5)]()?(this['tpbCommand'+_0x57634d(0x9c3)](),this[_0x57634d(0x1416)+'CommandSel'+_0x57634d(0x14e0)]()):VisuMZ[_0x57634d(0x337)][_0x57634d(0x1547)+'le_command'+_0x57634d(0x9c3)][_0x57634d(0xb14)](this);},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xe9d)+_0x4258d1(0x9c3)]=function(){const _0x8440ac=_0x4258d1,_0x45d054={'Qccbr':_0x8440ac(0xff0)};if(!VisuMZ[_0x8440ac(0x337)]['TpbActiveC'+_0x8440ac(0x913)+'ed'])return;if(Imported[_0x8440ac(0xd6f)+_0x8440ac(0xa8d)+_0x8440ac(0xfb7)]&&BattleManager[_0x8440ac(0x105d)]())return;const _0x3fc728=$gameParty[_0x8440ac(0xe7e)+'rs']()[_0x8440ac(0x7de)](_0xd11e40=>_0xd11e40[_0x8440ac(0xa5d)+'ed']()&&_0xd11e40['canInput']());BattleManager[_0x8440ac(0x15e2)+_0x8440ac(0x168d)]=_0x3fc728[0x4c5*0x3+-0x10aa+0x25b]||null,BattleManager[_0x8440ac(0x15e2)+_0x8440ac(0x168d)]&&BattleManager['_currentAc'+'tor'][_0x8440ac(0xeaf)+_0x8440ac(0x12c3)](_0x45d054['Qccbr']);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+_0x4258d1(0x2c4)+_0x4258d1(0x9a4)]=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x11fc)+_0x4258d1(0xca6)],Scene_Battle['prototype']['commandEsc'+'ape']=function(){const _0x27d57c=_0x4258d1;VisuMZ[_0x27d57c(0x337)][_0x27d57c(0x1547)+_0x27d57c(0x2c4)+_0x27d57c(0x9a4)][_0x27d57c(0xb14)](this);if(!BattleManager[_0x27d57c(0x13c5)]())BattleManager[_0x27d57c(0x15e2)+_0x27d57c(0x168d)]=null;},VisuMZ[_0x4258d1(0x337)]['Scene_Batt'+_0x4258d1(0xc91)+_0x4258d1(0xd81)+'dWindow']=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x118e)+_0x4258d1(0x1528)+'ndow'],Scene_Battle['prototype']['createActo'+_0x4258d1(0x1528)+_0x4258d1(0xb19)]=function(){const _0x4c6dd6=_0x4258d1;VisuMZ[_0x4c6dd6(0x337)][_0x4c6dd6(0x1547)+_0x4c6dd6(0xc91)+_0x4c6dd6(0xd81)+'dWindow'][_0x4c6dd6(0xb14)](this),this['createActo'+_0x4c6dd6(0x1528)+'ndowBattle'+_0x4c6dd6(0x5b8)]();},Scene_Battle['prototype'][_0x4258d1(0x118e)+_0x4258d1(0x1528)+_0x4258d1(0x313)+_0x4258d1(0x5b8)]=function(){const _0x5a22b1=_0x4258d1,_0x5b5bce={'zgpLt':_0x5a22b1(0x117a),'yINZn':_0x5a22b1(0x47d),'kxZtR':_0x5a22b1(0xc86)+'l','hjEOb':_0x5a22b1(0x2bc)},_0x28752a=this['_actorComm'+_0x5a22b1(0x5e0)];_0x28752a['setHandler'](_0x5b5bce[_0x5a22b1(0x11e4)],this['actorComma'+_0x5a22b1(0x8e0)]['bind'](this)),_0x28752a[_0x5a22b1(0xce6)](_0x5b5bce[_0x5a22b1(0x55e)],this[_0x5a22b1(0xd4f)+_0x5a22b1(0xa0a)+'le']['bind'](this)),_0x28752a[_0x5a22b1(0xce6)](_0x5b5bce[_0x5a22b1(0x15d9)],this[_0x5a22b1(0xd4f)+'ndSingleSk'+_0x5a22b1(0x11de)]['bind'](this)),BattleManager[_0x5a22b1(0x13c5)]()&&(this[_0x5a22b1(0xe36)+_0x5a22b1(0x826)+_0x5a22b1(0x209)]()?delete _0x28752a[_0x5a22b1(0x1447)][_0x5b5bce['hjEOb']]:_0x28752a[_0x5a22b1(0xce6)](_0x5b5bce[_0x5a22b1(0xa7e)],this[_0x5a22b1(0xd4f)+'ndCancelTP'+'B']['bind'](this)));},Scene_Battle['prototype'][_0x4258d1(0xd4f)+_0x4258d1(0x8e0)]=function(){const _0x50900a=_0x4258d1;this[_0x50900a(0x11fc)+'ape']();},Scene_Battle[_0x4258d1(0xf38)]['actorComma'+_0x4258d1(0xa0a)+'le']=function(){const _0xd33add=_0x4258d1;BattleManager['actor']()[_0xd33add(0xc23)+'ttleAction'+'s'](),BattleManager[_0xd33add(0x145a)+_0xd33add(0xe9f)](),BattleManager[_0xd33add(0xad6)+_0xd33add(0x1224)](),this[_0xd33add(0x8d2)+_0xd33add(0xc96)]();},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xd4f)+'ndSingleSk'+_0x4258d1(0x11de)]=function(){const _0x244431=_0x4258d1,_0x98d2f2=BattleManager[_0x244431(0x1420)+_0x244431(0x333)](),_0x24a6b7=this[_0x244431(0x568)+_0x244431(0x5e0)][_0x244431(0x116a)]();_0x98d2f2['setSkill'](_0x24a6b7),BattleManager['actor']()[_0x244431(0x786)+_0x244431(0xfae)]($dataSkills[_0x24a6b7]),this[_0x244431(0xfca)+_0x244431(0x940)]();},Scene_Battle[_0x4258d1(0xf38)]['actorComma'+'ndCancelTP'+'B']=function(){const _0x217fd6=_0x4258d1;this[_0x217fd6(0xe52)+'itchCondit'+_0x217fd6(0xa4e)]()?this['performTpb'+_0x217fd6(0x9a7)+_0x217fd6(0xb74)]():this[_0x217fd6(0x92d)+_0x217fd6(0x52d)+_0x217fd6(0x9b1)]();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1507)+_0x4258d1(0x913)+'ed']=![],Scene_Battle['prototype']['tpbActorSw'+'itchCondit'+_0x4258d1(0xa4e)]=function(){const _0x515d24=_0x4258d1,_0x1463f3={'ZNDJC':function(_0x597e1e,_0x411391){return _0x597e1e>_0x411391;},'mYgrI':function(_0x49f47b,_0x401adc){return _0x49f47b!==_0x401adc;},'TNWCJ':function(_0x3c5ae1,_0x3c1e6b){return _0x3c5ae1-_0x3c1e6b;}};if(Imported[_0x515d24(0xd6f)+'attleSyste'+'mCTB']&&BattleManager[_0x515d24(0x105d)]())return![];else{if(!VisuMZ['BattleCore'][_0x515d24(0x1507)+'hangeEnabl'+'ed'])return![];const _0x326b6e=$gameParty['aliveMembe'+'rs']()[_0x515d24(0x7de)](_0xb58eea=>_0xb58eea['isTpbCharg'+'ed']()&&_0xb58eea[_0x515d24(0x7e9)]());return _0x1463f3[_0x515d24(0x123f)](_0x326b6e[_0x515d24(0x1645)],-0x1*0x1237+-0xc*0x62+-0x1*-0x16cf)&&_0x1463f3[_0x515d24(0x464)](BattleManager[_0x515d24(0xd12)](),_0x326b6e[_0x1463f3[_0x515d24(0x935)](_0x326b6e[_0x515d24(0x1645)],-0x2262+0x25be+-0x35b)]);}},Scene_Battle[_0x4258d1(0xf38)]['performTpb'+'ActiveChec'+_0x4258d1(0xb74)]=function(){const _0xc1ac22=_0x4258d1,_0x7666cb={'WQsKp':function(_0x3674f0,_0x9acd90){return _0x3674f0+_0x9acd90;},'SsRrF':function(_0x42cf50,_0x37957d){return _0x42cf50||_0x37957d;},'dTnhP':'inputting','rzwHi':_0xc1ac22(0x9fc)},_0x387e1a=BattleManager[_0xc1ac22(0xd12)](),_0x400b7e=_0x387e1a[_0xc1ac22(0xc06)]();if(_0x400b7e)_0x400b7e['stepBack']();const _0x3d4cbc=$gameParty[_0xc1ac22(0xe7e)+'rs']()['filter'](_0x5a652f=>_0x5a652f[_0xc1ac22(0xa5d)+'ed']()&&_0x5a652f[_0xc1ac22(0x7e9)]()),_0x5688a6=_0x3d4cbc[_0xc1ac22(0xfd7)](_0x387e1a),_0x410c6c=_0x3d4cbc[_0x7666cb['WQsKp'](_0x5688a6,-0x583+0x41*-0x1+-0x5c5*-0x1)];BattleManager[_0xc1ac22(0x15e2)+_0xc1ac22(0x168d)]=_0x7666cb['SsRrF'](_0x410c6c,null);if(_0x410c6c)_0x410c6c[_0xc1ac22(0xeaf)+_0xc1ac22(0x12c3)](_0x7666cb['dTnhP']);_0x387e1a[_0xc1ac22(0xeaf)+_0xc1ac22(0x12c3)](_0x7666cb['rzwHi']),this[_0xc1ac22(0x8d2)+_0xc1ac22(0xc96)]();},Scene_Battle[_0x4258d1(0xf38)]['processAct'+'orCommandC'+_0x4258d1(0x9b1)]=function(){const _0x202239=_0x4258d1,_0x16ebf2={'mhibL':'undecided'};this[_0x202239(0x154e)+'andWindow'][_0x202239(0xb3e)](),this[_0x202239(0x568)+_0x202239(0x5e0)][_0x202239(0x8a9)]();if(!VisuMZ[_0x202239(0x337)]['TpbActiveC'+'hangeEnabl'+'ed'])return;if(Imported['VisuMZ_2_B'+'attleSyste'+_0x202239(0xfb7)]&&BattleManager[_0x202239(0x105d)]())return;if(BattleManager[_0x202239(0x15e2)+_0x202239(0x168d)]){BattleManager[_0x202239(0x15e2)+_0x202239(0x168d)][_0x202239(0xeaf)+_0x202239(0x12c3)](_0x16ebf2['mhibL']);const _0x4a07f5=BattleManager['_currentAc'+_0x202239(0x168d)][_0x202239(0xc06)]();if(_0x4a07f5)_0x4a07f5[_0x202239(0xc39)]();}BattleManager['_currentAc'+_0x202239(0x168d)]=null;},VisuMZ['BattleCore'][_0x4258d1(0x1547)+_0x4258d1(0x57c)+_0x4258d1(0x56a)]=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x468)+_0x4258d1(0x7b8)],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x468)+_0x4258d1(0x7b8)]=function(){const _0x232ab3=_0x4258d1;VisuMZ[_0x232ab3(0x337)]['Scene_Batt'+_0x232ab3(0x57c)+_0x232ab3(0x56a)][_0x232ab3(0xb14)](this),this['createHelp'+_0x232ab3(0xb3f)+_0x232ab3(0xf5f)]();},Scene_Battle['prototype'][_0x4258d1(0x468)+_0x4258d1(0xb3f)+_0x4258d1(0xf5f)]=function(){const _0x36e702=_0x4258d1;this[_0x36e702(0x568)+_0x36e702(0x5e0)][_0x36e702(0x3c3)+'dow'](this['_helpWindo'+'w']),this[_0x36e702(0x154e)+_0x36e702(0x5e0)][_0x36e702(0x3c3)+_0x36e702(0xfdb)](this[_0x36e702(0x560)+'w']);},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x6d1)+_0x4258d1(0x1100)]=function(){const _0x5c417a=_0x4258d1,_0xf0969f={'FCxRM':'4|2|5|3|0|'+'1','QIhAa':function(_0x1f3a79,_0x544f15){return _0x1f3a79===_0x544f15;},'exHrA':_0x5c417a(0x93d)+'ui','ZGLOP':_0x5c417a(0x1601),'xzWwc':function(_0x395adc,_0x5748cf){return _0x395adc===_0x5748cf;},'NIVxB':_0x5c417a(0x442)+'i','uqhfv':function(_0x4ab40c,_0x5cb5bb){return _0x4ab40c!==_0x5cb5bb;}},_0x4dc249=_0xf0969f[_0x5c417a(0x14c4)][_0x5c417a(0xba9)]('|');let _0x2f7e65=-0x6e8+0x177f+0x89*-0x1f;while(!![]){switch(_0x4dc249[_0x2f7e65++]){case'0':_0xf0969f[_0x5c417a(0x9b4)](this[_0x5c417a(0xdcc)+'outStyle'],_0xf0969f[_0x5c417a(0x7d2)])&&!Imported[_0x5c417a(0x6db)+_0x5c417a(0x10e9)+'ttleUI']&&(this['_battleLay'+'outStyle']=_0xf0969f[_0x5c417a(0xba0)]);continue;case'1':return this[_0x5c417a(0xdcc)+'outStyle'];case'2':if(this[_0x5c417a(0xdcc)+'outStyle'])return this[_0x5c417a(0xdcc)+_0x5c417a(0x55c)];continue;case'3':_0xf0969f[_0x5c417a(0xc0d)](this[_0x5c417a(0xdcc)+_0x5c417a(0x55c)],_0xf0969f['NIVxB'])&&!Imported[_0x5c417a(0x19e)+'ideviewBat'+_0x5c417a(0x1435)]&&(this[_0x5c417a(0xdcc)+_0x5c417a(0x55c)]=_0xf0969f['ZGLOP']);continue;case'4':if(_0xf0969f[_0x5c417a(0xff3)]($gameTemp[_0x5c417a(0x810)+_0x5c417a(0x234)],undefined))return $gameTemp[_0x5c417a(0x810)+_0x5c417a(0x234)];continue;case'5':this[_0x5c417a(0xdcc)+_0x5c417a(0x55c)]=VisuMZ['BattleCore'][_0x5c417a(0x424)]['BattleLayo'+'ut'][_0x5c417a(0xa30)][_0x5c417a(0x1bc)+'e']()[_0x5c417a(0xbb6)]();continue;}break;}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+_0x4258d1(0xd15)+_0x4258d1(0x6ad)]=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x8b7)+_0x4258d1(0x156a)],Scene_Battle['prototype']['windowArea'+_0x4258d1(0x156a)]=function(){const _0x20d0b0=_0x4258d1,_0x39edbb={'ldRCh':_0x20d0b0(0x7fe)},_0x5b5455=this[_0x20d0b0(0x6d1)+'utStyle']();switch(_0x5b5455){case _0x39edbb[_0x20d0b0(0xd3f)]:return this[_0x20d0b0(0xdce)+_0x20d0b0(0x156a)](Math[_0x20d0b0(0x503)](0x1f0+-0x689*0x1+-0x2*-0x24d,$gameParty[_0x20d0b0(0xb34)+_0x20d0b0(0xf63)]()),!![]);break;default:return VisuMZ[_0x20d0b0(0x337)][_0x20d0b0(0x1547)+'le_windowA'+'reaHeight'][_0x20d0b0(0xb14)](this);break;}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+_0x4258d1(0x376)+_0x4258d1(0x13d9)]=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x105c)+_0x4258d1(0x285)],Scene_Battle[_0x4258d1(0xf38)]['helpWindow'+_0x4258d1(0x285)]=function(){const _0x3e7694=_0x4258d1,_0x558a53={'ERlHJ':_0x3e7694(0x83c),'AXqGt':_0x3e7694(0x1601),'GesnW':_0x3e7694(0x7fe),'plNUH':_0x3e7694(0x14b6)},_0x2bff29=this[_0x3e7694(0x6d1)+_0x3e7694(0x1100)]();switch(_0x2bff29){case _0x558a53[_0x3e7694(0xcad)]:return this[_0x3e7694(0x105c)+_0x3e7694(0x14ff)+_0x3e7694(0xa30)]();break;case _0x558a53[_0x3e7694(0xf51)]:case _0x558a53[_0x3e7694(0x150b)]:case'xp':case _0x558a53[_0x3e7694(0x4e3)]:default:return VisuMZ[_0x3e7694(0x337)][_0x3e7694(0x1547)+'le_helpWin'+_0x3e7694(0x13d9)][_0x3e7694(0xb14)](this);break;}},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xd95)+_0x4258d1(0x659)]=function(){const _0x29090c=_0x4258d1,_0x21b9a4={'ooVcp':_0x29090c(0x14b6),'iUtOa':_0x29090c(0x83c),'xZBmq':_0x29090c(0x1601),'fOonr':_0x29090c(0x7fe)},_0x3301d4=this['battleLayo'+_0x29090c(0x1100)]();switch(_0x3301d4){case'xp':case _0x21b9a4[_0x29090c(0x6d6)]:return this[_0x29090c(0xd95)+_0x29090c(0x3c6)+_0x29090c(0xbf0)]();break;case _0x21b9a4[_0x29090c(0xe30)]:return this[_0x29090c(0xd95)+_0x29090c(0x120b)+_0x29090c(0x1505)]();break;case _0x21b9a4['xZBmq']:case _0x21b9a4['fOonr']:default:return this['statusWind'+'owRectDefa'+_0x29090c(0x644)]();break;}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+_0x4258d1(0xf3e)+_0x4258d1(0x15cf)+_0x4258d1(0x15ef)]=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xd50)+_0x4258d1(0xe73)+'ct'],Scene_Battle['prototype'][_0x4258d1(0xd50)+'ndWindowRe'+'ct']=function(){const _0x5e6f0a=_0x4258d1,_0x384971={'IfOSm':_0x5e6f0a(0x14b6),'fJQaq':_0x5e6f0a(0x83c),'DpUdN':_0x5e6f0a(0x1601),'EhpAU':_0x5e6f0a(0x7fe)},_0xf3ffa2=this['battleLayo'+_0x5e6f0a(0x1100)]();switch(_0xf3ffa2){case'xp':case _0x384971[_0x5e6f0a(0x14aa)]:return this[_0x5e6f0a(0xd50)+_0x5e6f0a(0xe73)+_0x5e6f0a(0xbec)]();break;case _0x384971[_0x5e6f0a(0xe50)]:return this[_0x5e6f0a(0xd50)+_0x5e6f0a(0xe73)+_0x5e6f0a(0xb05)+_0x5e6f0a(0xbf0)]();case _0x384971[_0x5e6f0a(0xeb8)]:case _0x384971[_0x5e6f0a(0x1014)]:default:return this[_0x5e6f0a(0xd50)+'ndWindowRe'+'ctDefaultS'+_0x5e6f0a(0xda6)]();break;}},Scene_Battle[_0x4258d1(0xf38)]['partyComma'+_0x4258d1(0xe73)+_0x4258d1(0x1132)+_0x4258d1(0xda6)]=function(){const _0x1a0fc6=_0x4258d1,_0x236c1d={'rTYIR':function(_0x26ed22,_0x55df45){return _0x26ed22-_0x55df45;}},_0x3f62b9=VisuMZ[_0x1a0fc6(0x337)][_0x1a0fc6(0x424)][_0x1a0fc6(0xdeb)+'ut'],_0x1bc473=_0x3f62b9[_0x1a0fc6(0x4ae)+'th']||0x33*0x99+0x4*0x3a5+-0x2c4f,_0x3d479d=this[_0x1a0fc6(0x8b7)+_0x1a0fc6(0x156a)](),_0x1923f3=this['isRightInp'+_0x1a0fc6(0x3de)]()?_0x236c1d['rTYIR'](Graphics[_0x1a0fc6(0x1309)],_0x1bc473):0x2059*-0x1+-0x1baf+0x3c08,_0x217e20=_0x236c1d[_0x1a0fc6(0x112e)](Graphics[_0x1a0fc6(0x744)],_0x3d479d);return new Rectangle(_0x1923f3,_0x217e20,_0x1bc473,_0x3d479d);},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xd4f)+_0x4258d1(0xe73)+'ct']=function(){const _0x356424=_0x4258d1;return this[_0x356424(0xd50)+_0x356424(0xe73)+'ct']();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+'le_updateS'+_0x4258d1(0x37b)+'wPosition']=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x822)+_0x4258d1(0x1316)+'sition'],Scene_Battle[_0x4258d1(0xf38)]['updateStat'+_0x4258d1(0x1316)+_0x4258d1(0x9e2)]=function(){const _0x512466=_0x4258d1,_0x1b2a2e={'sMhyO':_0x512466(0x14b6),'Ahpjd':_0x512466(0x83c),'qZAns':_0x512466(0x1601),'bJEGb':_0x512466(0x7fe)},_0x14e504=this[_0x512466(0x6d1)+'utStyle']();switch(_0x14e504){case'xp':case _0x1b2a2e[_0x512466(0x54f)]:case _0x1b2a2e[_0x512466(0xb91)]:break;case _0x1b2a2e[_0x512466(0x120a)]:case _0x1b2a2e[_0x512466(0xf26)]:default:VisuMZ[_0x512466(0x337)][_0x512466(0x1547)+_0x512466(0xed3)+_0x512466(0x37b)+_0x512466(0x97c)][_0x512466(0xb14)](this);break;}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+_0x4258d1(0x993)+_0x4258d1(0x7d0)+'on']=Scene_Battle['prototype'][_0x4258d1(0x1416)+_0x4258d1(0x434)],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x1416)+_0x4258d1(0x434)]=function(){const _0x2e43a7=_0x4258d1;VisuMZ[_0x2e43a7(0x337)]['Scene_Batt'+_0x2e43a7(0x993)+'torSelecti'+'on'][_0x2e43a7(0xb14)](this),this[_0x2e43a7(0xe63)+_0x2e43a7(0xd79)+'oreVisible']();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+_0x4258d1(0xd08)+'emySelecti'+'on']=Scene_Battle['prototype']['startEnemy'+_0x4258d1(0x434)],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x158b)+_0x4258d1(0x434)]=function(){const _0x33c038=_0x4258d1;VisuMZ[_0x33c038(0x337)][_0x33c038(0x1547)+_0x33c038(0xd08)+_0x33c038(0x1517)+'on'][_0x33c038(0xb14)](this),this[_0x33c038(0x1684)+'ow'][_0x33c038(0x31a)](),this[_0x33c038(0xe63)+_0x33c038(0xd79)+'oreVisible']();},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xe63)+_0x4258d1(0xd79)+_0x4258d1(0xf79)]=function(){const _0x4f947e=_0x4258d1,_0x579786={'wwQQN':_0x4f947e(0x14b6),'CAqgG':_0x4f947e(0x83c),'KgWOe':function(_0x4dbd1a,_0x140449){return _0x4dbd1a===_0x140449;}},_0xa8f47a=this['battleLayo'+_0x4f947e(0x1100)]();['xp',_0x579786[_0x4f947e(0x290)],_0x579786[_0x4f947e(0xf76)]]['includes'](_0xa8f47a)&&this[_0x4f947e(0x568)+_0x4f947e(0x5e0)][_0x4f947e(0x8a9)](),(_0x579786['KgWOe'](_0xa8f47a,_0x579786[_0x4f947e(0xf76)])||this[_0x4f947e(0x12c4)+_0x4f947e(0x94f)+_0x4f947e(0xd17)]())&&(this[_0x4f947e(0x114b)+'ow'][_0x4f947e(0x8a9)](),this[_0x4f947e(0x1174)+'w'][_0x4f947e(0x8a9)]());},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+_0x4258d1(0x1335)+'Ok']=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x211)],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x211)]=function(){const _0x7fe37b=_0x4258d1;VisuMZ[_0x7fe37b(0x337)][_0x7fe37b(0x1547)+_0x7fe37b(0x1335)+'Ok']['call'](this),this[_0x7fe37b(0x310)+_0x7fe37b(0x10e0)+_0x7fe37b(0x2b0)]();},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x792)+_0x4258d1(0x71f)]=function(){const _0x2fb9ef=_0x4258d1,_0x5bdd5d={'YZtrr':_0x2fb9ef(0x3a8),'Swtvx':_0x2fb9ef(0xd64),'Nhrbx':'singleSkil'+'l'};return[_0x5bdd5d[_0x2fb9ef(0x117b)],_0x5bdd5d[_0x2fb9ef(0xb01)],_0x5bdd5d[_0x2fb9ef(0x1245)]]['includes'](this[_0x2fb9ef(0x568)+_0x2fb9ef(0x5e0)][_0x2fb9ef(0x3fa)+_0x2fb9ef(0x284)]());},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+'le_onActor'+_0x4258d1(0xd5d)]=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x8f3)+_0x4258d1(0x1062)],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x8f3)+'cel']=function(){const _0x2a0965=_0x4258d1;this['isNonSubme'+_0x2a0965(0x71f)]()?(this[_0x2a0965(0x5c1)+_0x2a0965(0xfdb)][_0x2a0965(0x361)](),this[_0x2a0965(0x977)+'ow'][_0x2a0965(0x514)](),this[_0x2a0965(0x568)+'andWindow']['activate']()):VisuMZ[_0x2a0965(0x337)][_0x2a0965(0x1547)+_0x2a0965(0x1335)+'Cancel'][_0x2a0965(0xb14)](this),this[_0x2a0965(0x1286)+_0x2a0965(0xe57)+_0x2a0965(0x277)+'y']();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+_0x4258d1(0xca0)+'Ok']=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x4bf)],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x4bf)]=function(){const _0x1cb3b0=_0x4258d1,_0x58b1e5=BattleManager['inputtingA'+_0x1cb3b0(0x333)]();_0x58b1e5[_0x1cb3b0(0x53f)+'attlerKey'](this[_0x1cb3b0(0x1684)+'ow'][_0x1cb3b0(0x2d1)]()),this['_enemyWind'+'ow'][_0x1cb3b0(0x1625)+_0x1cb3b0(0x14a3)+'ow'](),VisuMZ[_0x1cb3b0(0x337)][_0x1cb3b0(0x1547)+'le_onEnemy'+'Ok'][_0x1cb3b0(0xb14)](this),this[_0x1cb3b0(0x310)+_0x1cb3b0(0x10e0)+'ibility']();},VisuMZ['BattleCore'][_0x4258d1(0x1547)+_0x4258d1(0xca0)+'Cancel']=Scene_Battle['prototype'][_0x4258d1(0xd94)+_0x4258d1(0x1062)],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xd94)+_0x4258d1(0x1062)]=function(){const _0x194942=_0x4258d1;this[_0x194942(0x792)+'nuCancel']()?(this[_0x194942(0x5c1)+_0x194942(0xfdb)][_0x194942(0x361)](),this[_0x194942(0x1684)+'ow'][_0x194942(0x514)](),this[_0x194942(0x568)+_0x194942(0x5e0)][_0x194942(0x1be)]()):VisuMZ['BattleCore'][_0x194942(0x1547)+'le_onEnemy'+_0x194942(0xd5d)][_0x194942(0xb14)](this),this['cancelTarg'+_0x194942(0xe57)+_0x194942(0x277)+'y'](),this[_0x194942(0x1684)+'ow']['closeBattl'+'eActorWind'+'ow']();},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x310)+_0x4258d1(0x10e0)+_0x4258d1(0x2b0)]=function(){const _0x14ea09=_0x4258d1,_0x1d81c8={'KeXVL':function(_0x4561b9,_0x27f82e){return _0x4561b9===_0x27f82e;},'lvLSs':'border'},_0x460426=this[_0x14ea09(0x6d1)+'utStyle']();(_0x1d81c8[_0x14ea09(0xdb9)](_0x460426,_0x1d81c8[_0x14ea09(0x1cf)])||this['isSkillIte'+_0x14ea09(0x94f)+'ddle']())&&(this[_0x14ea09(0x114b)+'ow'][_0x14ea09(0x31b)](),this[_0x14ea09(0x114b)+'ow'][_0x14ea09(0xc19)]&&this[_0x14ea09(0x114b)+'ow'][_0x14ea09(0x361)](),this[_0x14ea09(0x1174)+'w'][_0x14ea09(0x31b)](),this[_0x14ea09(0x1174)+'w'][_0x14ea09(0xc19)]&&this[_0x14ea09(0x1174)+'w'][_0x14ea09(0x361)]());},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x1286)+_0x4258d1(0xe57)+'nVisibilit'+'y']=function(){const _0x37041a=_0x4258d1,_0x55afde={'qbWkX':_0x37041a(0x14b6),'keUcN':_0x37041a(0x83c)},_0x427533=this[_0x37041a(0x6d1)+_0x37041a(0x1100)]();['xp',_0x55afde['qbWkX'],_0x55afde[_0x37041a(0x2d2)]]['includes'](_0x427533)&&this[_0x37041a(0x568)+_0x37041a(0x5e0)][_0x37041a(0x31b)](),this[_0x37041a(0x310)+'lectionVis'+_0x37041a(0x2b0)]();},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xd95)+_0x4258d1(0x166a)+'ultStyle']=function(){const _0x3ae38e=_0x4258d1,_0x345f74={'Cjgbb':function(_0x2fbe93,_0x337a5b){return _0x2fbe93-_0x337a5b;},'uNFSt':function(_0x5b878d,_0x5c7c4f){return _0x5b878d+_0x5c7c4f;},'MYTiK':function(_0x51ec1f,_0x48a275){return _0x51ec1f-_0x48a275;},'eYoWJ':function(_0x1755c5,_0x1cf062){return _0x1755c5+_0x1cf062;}},_0x5efafc=VisuMZ[_0x3ae38e(0x337)][_0x3ae38e(0x424)][_0x3ae38e(0xdeb)+'ut'],_0x2ab97a=Window_BattleStatus[_0x3ae38e(0xf38)][_0x3ae38e(0xb48)+'t'](),_0x5739fa=_0x345f74[_0x3ae38e(0x13e0)](Graphics['boxWidth'],_0x5efafc['CommandWid'+'th']||0x13d+0xfb9+-0x33e*0x5),_0x356b80=_0x345f74[_0x3ae38e(0xa4d)](this[_0x3ae38e(0x8b7)+'Height'](),_0x2ab97a),_0x209ccc=this[_0x3ae38e(0xdfb)+_0x3ae38e(0x3de)]()?0x9ae+0x1d7e+0x17*-0x1b4:_0x345f74[_0x3ae38e(0xdf5)](Graphics['boxWidth'],_0x5739fa),_0x15d002=_0x345f74['eYoWJ'](_0x345f74[_0x3ae38e(0x13e0)](Graphics[_0x3ae38e(0x744)],_0x356b80),_0x2ab97a);return new Rectangle(_0x209ccc,_0x15d002,_0x5739fa,_0x356b80);},Scene_Battle[_0x4258d1(0xf38)]['statusWind'+'owRectXPSt'+_0x4258d1(0xbf0)]=function(){const _0x58204d=_0x4258d1,_0x1245e2={'xthQB':function(_0x1db183,_0x59170b){return _0x1db183+_0x59170b;},'zkkEW':function(_0x42a04e,_0xffac3e){return _0x42a04e+_0xffac3e;},'zqZvr':function(_0x1fabf7,_0x592ad8){return _0x1fabf7-_0x592ad8;}},_0x1e54bf=Window_BattleStatus[_0x58204d(0xf38)][_0x58204d(0xb48)+'t'](),_0x13a491=Graphics['boxWidth'],_0x3773dd=_0x1245e2[_0x58204d(0xbc6)](this['windowArea'+_0x58204d(0x156a)](),_0x1e54bf),_0x2a04c2=0x2086+0x5*0x22e+-0x2b6c,_0x1b11aa=_0x1245e2[_0x58204d(0x5c7)](_0x1245e2[_0x58204d(0x10c9)](Graphics[_0x58204d(0x744)],_0x3773dd),_0x1e54bf);return new Rectangle(_0x2a04c2,_0x1b11aa,_0x13a491,_0x3773dd);},Scene_Battle[_0x4258d1(0xf38)]['partyComma'+_0x4258d1(0xe73)+_0x4258d1(0xbec)]=function(){const _0x1d5b60=_0x4258d1,_0x315e46={'ofmxa':function(_0x552b8a,_0x4fe947){return _0x552b8a/_0x4fe947;},'lPRDa':function(_0xc6532b,_0x5b427b){return _0xc6532b/_0x5b427b;},'dPFyB':function(_0x2f4ddd,_0x1d37f8){return _0x2f4ddd-_0x1d37f8;},'ynRWF':function(_0x58e4ec,_0x1627f0){return _0x58e4ec-_0x1627f0;},'EQMVr':function(_0x2c0148,_0x1b176b){return _0x2c0148-_0x1b176b;}},_0x251548=_0x315e46['ofmxa'](Graphics['boxWidth'],-0x447+0x1462+-0x1019),_0x3c63b5=this['calcWindow'+_0x1d5b60(0x156a)](VisuMZ['BattleCore'][_0x1d5b60(0x424)][_0x1d5b60(0xdeb)+'ut']['XPActorCom'+_0x1d5b60(0x13e6)],!![]),_0x264b3e=Math[_0x1d5b60(0xdea)](_0x315e46['lPRDa'](_0x315e46[_0x1d5b60(0xbae)](Graphics[_0x1d5b60(0x1309)],_0x251548),0x16a*0xa+-0x1484+0x56*0x13)),_0x5480d9=_0x315e46[_0x1d5b60(0x38e)](_0x315e46[_0x1d5b60(0xcfe)](Graphics[_0x1d5b60(0x744)],_0x3c63b5),this[_0x1d5b60(0xd95)+_0x1d5b60(0x3c6)+_0x1d5b60(0xbf0)]()['height']);return new Rectangle(_0x264b3e,_0x5480d9,_0x251548,_0x3c63b5);},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x105c)+_0x4258d1(0x14ff)+_0x4258d1(0xa30)]=function(){const _0x3fed51=_0x4258d1,_0x3f79b6={'PGXcq':function(_0x53e1fa,_0x54fc9d){return _0x53e1fa/_0x54fc9d;},'qOiuC':function(_0x3978aa,_0x21586f){return _0x3978aa-_0x21586f;},'DtUVH':function(_0x1ae1f2,_0x89cc23){return _0x1ae1f2/_0x89cc23;}},_0x5ce8f1=Graphics[_0x3fed51(0xc2a)],_0x10ac0d=Math['round'](_0x3f79b6['PGXcq'](_0x3f79b6[_0x3fed51(0x5b7)](Graphics['boxWidth'],_0x5ce8f1),-0x2e0+-0x1*0x4d5+0x7b7)),_0x54a752=this[_0x3fed51(0x115a)+'ight'](),_0x4816c8=_0x3f79b6['DtUVH'](_0x3f79b6[_0x3fed51(0x5b7)](Graphics['height'],Graphics[_0x3fed51(0x744)]),-(-0x12d1+0x574+0xd5f));return new Rectangle(_0x10ac0d,_0x4816c8,_0x5ce8f1,_0x54a752);},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xd95)+'owRectBord'+_0x4258d1(0x1505)]=function(){const _0x4e5859=_0x4258d1,_0x5ad62c={'FkNSA':function(_0x29b8fd,_0x5eb4bf){return _0x29b8fd/_0x5eb4bf;},'lyBgj':function(_0x3d842f,_0x326b31){return _0x3d842f-_0x326b31;},'uZeYl':function(_0x344f55,_0x23c0e1){return _0x344f55+_0x23c0e1;},'ngcBs':function(_0x2c14ae,_0x5bba93){return _0x2c14ae-_0x5bba93;},'JiODg':function(_0x5f53cd,_0x25b75f){return _0x5f53cd/_0x25b75f;}},_0x4cfacf=Graphics[_0x4e5859(0xc2a)],_0x2b0f70=Math[_0x4e5859(0xdea)](_0x5ad62c['FkNSA'](_0x5ad62c['lyBgj'](Graphics[_0x4e5859(0x1309)],_0x4cfacf),0x51*0x5f+-0x273+-0x1b9a)),_0x51aa6a=this[_0x4e5859(0xdce)+_0x4e5859(0x156a)](-0x1111+-0x6*-0x18c+0x7cd,!![]),_0x26a662=_0x5ad62c['uZeYl'](_0x5ad62c['ngcBs'](Graphics[_0x4e5859(0x744)],_0x51aa6a),_0x5ad62c['JiODg'](_0x5ad62c[_0x4e5859(0xa68)](Graphics[_0x4e5859(0x1594)],Graphics[_0x4e5859(0x744)]),0x1*0x162+-0x2654+0x24f4));return new Rectangle(_0x2b0f70,_0x26a662,_0x4cfacf,_0x51aa6a);},Scene_Battle['prototype'][_0x4258d1(0xd50)+_0x4258d1(0xe73)+_0x4258d1(0xb05)+_0x4258d1(0xbf0)]=function(){const _0xaaf3eb=_0x4258d1,_0x38e0af={'uQmKO':function(_0x116458,_0x1cb357){return _0x116458/_0x1cb357;},'UlvXo':function(_0x337b81,_0x44deaa){return _0x337b81-_0x44deaa;},'igXpT':function(_0x1a81a4,_0x3b6882){return _0x1a81a4+_0x3b6882;},'ctTBa':function(_0x41349f,_0x265932){return _0x41349f/_0x265932;}},_0x19973f=Math[_0xaaf3eb(0x76f)](_0x38e0af['uQmKO'](Graphics[_0xaaf3eb(0xc2a)],0x7b6*0x1+-0x107c+-0xd*-0xad)),_0x597348=this['isRightInp'+_0xaaf3eb(0x3de)]()?_0x38e0af[_0xaaf3eb(0x3ba)](_0x38e0af['uQmKO'](_0x38e0af['igXpT'](Graphics[_0xaaf3eb(0xc2a)],Graphics[_0xaaf3eb(0x1309)]),0x1f65+-0x217b+0x1*0x218),_0x19973f):_0x38e0af[_0xaaf3eb(0x95a)](_0x38e0af[_0xaaf3eb(0x3ba)](Graphics[_0xaaf3eb(0xc2a)],Graphics[_0xaaf3eb(0x1309)]),-(0x57c+0x602*-0x4+0x128e)),_0x14d2bb=this[_0xaaf3eb(0x105c)+_0xaaf3eb(0x14ff)+_0xaaf3eb(0xa30)](),_0x241749=_0x38e0af[_0xaaf3eb(0x693)](_0x14d2bb['y'],_0x14d2bb[_0xaaf3eb(0x1594)]),_0x69d4a5=this['statusWind'+_0xaaf3eb(0x120b)+_0xaaf3eb(0x1505)](),_0x3af6c3=_0x38e0af[_0xaaf3eb(0x3ba)](_0x69d4a5['y'],_0x241749);return new Rectangle(_0x597348,_0x241749,_0x19973f,_0x3af6c3);},Scene_Battle[_0x4258d1(0xf38)]['skillItemW'+_0x4258d1(0x11bc)+_0x4258d1(0x8cb)]=function(){const _0xc7b5dd=_0x4258d1,_0x5dbd18={'MGEBI':function(_0x129310,_0x38c029){return _0x129310/_0x38c029;},'eBBts':function(_0x4cc90a,_0x3d70db){return _0x4cc90a/_0x3d70db;},'RHZNj':function(_0x2d48aa,_0x350540){return _0x2d48aa-_0x350540;}},_0x4e231d=Math[_0xc7b5dd(0x438)](_0x5dbd18[_0xc7b5dd(0x9cd)](Graphics[_0xc7b5dd(0xc2a)],0xb5*0xc+0x2651+-0x2eca)),_0x280237=Math[_0xc7b5dd(0xdea)](_0x5dbd18['eBBts'](_0x5dbd18[_0xc7b5dd(0x11ac)](Graphics[_0xc7b5dd(0x1309)],_0x4e231d),0xcf*-0x5+-0x1a6+0x5b3)),_0x23ca6f=this['partyComma'+_0xc7b5dd(0xe73)+'ctBorderSt'+'yle'](),_0xa91d8e=_0x23ca6f['y'],_0x5c403c=_0x23ca6f['height'];return new Rectangle(_0x280237,_0xa91d8e,_0x4e231d,_0x5c403c);},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0xa21)+_0x4258d1(0x1106)+'onBorderSt'+_0x4258d1(0xbf0)]=function(){const _0x304ff7=_0x4258d1,_0xa56350={'lrcyA':function(_0x422fb1,_0x1d4869){return _0x422fb1+_0x1d4869;},'MJSzz':function(_0x578d4,_0x54ca25){return _0x578d4===_0x54ca25;},'cphvN':_0x304ff7(0x83c),'azNWN':function(_0x2a7d6f,_0x56e34f){return _0x2a7d6f-_0x56e34f;},'WBQGb':function(_0x436a2b,_0x1c46cc){return _0x436a2b/_0x1c46cc;}};this[_0x304ff7(0x15b2)+'ton']['y']=_0xa56350[_0x304ff7(0x245)](this[_0x304ff7(0x560)+'w']['y'],this[_0x304ff7(0x560)+'w'][_0x304ff7(0x1594)]),this[_0x304ff7(0xdfb)+_0x304ff7(0x3de)]()?_0xa56350[_0x304ff7(0x49a)](this[_0x304ff7(0x6d1)+_0x304ff7(0x1100)](),_0xa56350[_0x304ff7(0xddd)])?this[_0x304ff7(0x15b2)+_0x304ff7(0x132a)]['x']=0x4d2+-0x22e2*-0x1+-0x27ac:this[_0x304ff7(0x15b2)+_0x304ff7(0x132a)]['x']=_0xa56350['azNWN'](-this[_0x304ff7(0x15b2)+_0x304ff7(0x132a)][_0x304ff7(0xc2a)],-0x67e+-0x1310+0x1992):this[_0x304ff7(0x15b2)+_0x304ff7(0x132a)]['x']=_0xa56350[_0x304ff7(0x1f7)](_0xa56350[_0x304ff7(0x1f7)](_0xa56350[_0x304ff7(0x1f7)](Graphics[_0x304ff7(0xc2a)],_0xa56350[_0x304ff7(0x13ee)](_0xa56350['azNWN'](Graphics[_0x304ff7(0xc2a)],Graphics[_0x304ff7(0x1309)]),-0xa7f+-0x5d3*-0x2+-0x1*0x125)),this[_0x304ff7(0x15b2)+_0x304ff7(0x132a)][_0x304ff7(0xc2a)]),-0x253d+0x2f5*0x7+0x108e);},VisuMZ['BattleCore']['Scene_Batt'+_0x4258d1(0xb82)+_0x4258d1(0x5d4)]=Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x14ef)+'wRect'],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x14ef)+_0x4258d1(0x15ef)]=function(){const _0x1cdbfd=_0x4258d1,_0x2e25d5={'UgEsn':function(_0x1f95ab,_0x5828ad){return _0x1f95ab===_0x5828ad;},'DfRsw':_0x1cdbfd(0x83c)};if(_0x2e25d5[_0x1cdbfd(0xe84)](this[_0x1cdbfd(0x6d1)+_0x1cdbfd(0x1100)](),_0x2e25d5['DfRsw']))return this[_0x1cdbfd(0xcd4)+_0x1cdbfd(0x11bc)+_0x1cdbfd(0x8cb)]();else return this[_0x1cdbfd(0x12c4)+_0x1cdbfd(0x94f)+'ddle']()?this[_0x1cdbfd(0xcd4)+_0x1cdbfd(0xa29)+'iddle']():VisuMZ[_0x1cdbfd(0x337)][_0x1cdbfd(0x1547)+_0x1cdbfd(0xb82)+_0x1cdbfd(0x5d4)][_0x1cdbfd(0xb14)](this);},VisuMZ['BattleCore'][_0x4258d1(0x1547)+_0x4258d1(0x169e)+_0x4258d1(0x13d9)]=Scene_Battle['prototype']['itemWindow'+_0x4258d1(0x285)],Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x1282)+_0x4258d1(0x285)]=function(){const _0x441e8a=_0x4258d1,_0xb91535={'KqUMd':function(_0x53f122,_0x38a59c){return _0x53f122===_0x38a59c;},'LthqP':_0x441e8a(0x83c)};if(_0xb91535[_0x441e8a(0xe6a)](this[_0x441e8a(0x6d1)+'utStyle'](),_0xb91535['LthqP']))return this['skillItemW'+_0x441e8a(0x11bc)+'orderStyle']();else return this[_0x441e8a(0x12c4)+_0x441e8a(0x94f)+_0x441e8a(0xd17)]()?this[_0x441e8a(0xcd4)+_0x441e8a(0xa29)+_0x441e8a(0x19d)]():VisuMZ[_0x441e8a(0x337)][_0x441e8a(0x1547)+_0x441e8a(0x169e)+_0x441e8a(0x13d9)][_0x441e8a(0xb14)](this);},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x12c4)+_0x4258d1(0x94f)+_0x4258d1(0xd17)]=function(){const _0x31e70f=_0x4258d1;return VisuMZ[_0x31e70f(0x337)][_0x31e70f(0x424)][_0x31e70f(0xdeb)+'ut'][_0x31e70f(0x558)+_0x31e70f(0x1e1)+'t'];},Scene_Battle[_0x4258d1(0xf38)]['skillItemW'+_0x4258d1(0xa29)+'iddle']=function(){const _0x5444e2=_0x4258d1,_0x50b83d={'BSAvS':function(_0x230c3f,_0x5672d5){return _0x230c3f+_0x5672d5;},'UJxJP':function(_0x60957e,_0x3558f4){return _0x60957e*_0x3558f4;},'wDAig':function(_0x55ebc3,_0x305a5f){return _0x55ebc3-_0x305a5f;},'ZHnPW':function(_0x430f39,_0x4c944a){return _0x430f39-_0x4c944a;}},_0x2afa27=_0x50b83d['BSAvS'](_0x50b83d[_0x5444e2(0x76e)](Sprite_Button['prototype']['blockWidth'](),0x190c+-0xd17+-0xbf3),-0x2596*0x1+-0x546+0xe0*0x31);let _0x5c4d7b=_0x50b83d[_0x5444e2(0x654)](Graphics['boxWidth'],_0x2afa27);Imported['VisuMZ_0_C'+'oreEngine']&&SceneManager[_0x5444e2(0x946)+_0x5444e2(0x10fc)]()&&(_0x5c4d7b+=_0x2afa27);const _0x553fe0=this[_0x5444e2(0x11a9)+_0x5444e2(0xc80)](),_0x21dd9e=_0x50b83d[_0x5444e2(0x132f)](_0x50b83d[_0x5444e2(0x654)](_0x50b83d[_0x5444e2(0x165a)](Graphics['boxHeight'],_0x553fe0),this['statusWind'+_0x5444e2(0x659)]()[_0x5444e2(0x1594)]),Window_BattleStatus[_0x5444e2(0xf38)]['extraHeigh'+'t']()),_0x13a300=-0x1*-0x369+-0x690+0x327;return new Rectangle(_0x13a300,_0x553fe0,_0x5c4d7b,_0x21dd9e);},Scene_Battle['prototype'][_0x4258d1(0x11a4)+_0x4258d1(0xd9a)+_0x4258d1(0x169c)]=function(){const _0x461e26=_0x4258d1,_0x57441e={'TrDHH':function(_0x3a882e,_0x501f35){return _0x3a882e<_0x501f35;}};if(!VisuMZ['BattleCore'][_0x461e26(0x424)][_0x461e26(0xcce)]['NameLegacy'])return;this['_enemyName'+_0x461e26(0x68e)]=new Sprite(),this[_0x461e26(0x601)+_0x461e26(0x68e)]['x']=this['_windowLay'+'er']['x'],this[_0x461e26(0x601)+'Container']['y']=this[_0x461e26(0x50f)+'er']['y'];const _0x695970=this[_0x461e26(0xe4e)][_0x461e26(0xfd7)](this[_0x461e26(0x50f)+'er']);this[_0x461e26(0x1cb)](this['_enemyName'+'Container'],_0x695970);for(let _0xaae6f4=0x7d4+-0xc04+0x430;_0x57441e[_0x461e26(0xaa3)](_0xaae6f4,-0x3*-0x543+-0x185d+-0x1d*-0x4c);_0xaae6f4++){const _0xeba513=new Window_EnemyName(_0xaae6f4);this[_0x461e26(0x601)+_0x461e26(0x68e)][_0x461e26(0xd0b)](_0xeba513);}},Sprite_Battler[_0x4258d1(0x6ca)+'ed']=VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)]['Actor'][_0x4258d1(0x1a3)+'d'],VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x527)+_0x4258d1(0x140f)+_0x4258d1(0xf63)]=Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x104c)+'s'],Sprite_Battler[_0x4258d1(0xf38)]['initMember'+'s']=function(){const _0x12d455=_0x4258d1,_0x4cd438={'NNuqp':function(_0x20eb22,_0x57c888){return _0x20eb22===_0x57c888;}};VisuMZ[_0x12d455(0x337)]['Sprite_Bat'+_0x12d455(0x140f)+'embers'][_0x12d455(0xb14)](this),this[_0x12d455(0x104c)+'sBattleCor'+'e']();if(_0x4cd438['NNuqp'](this[_0x12d455(0xcab)+'r'],Sprite_Enemy))this['createShad'+_0x12d455(0x8fa)]();this[_0x12d455(0x4e6)+_0x12d455(0xb83)+'te']();},Sprite_Battler[_0x4258d1(0xf38)]['initMember'+_0x4258d1(0x9f0)+'e']=function(){const _0x49bf9b=_0x4258d1,_0xaaaa79={'fWnlw':_0x49bf9b(0x2da)+_0x49bf9b(0x62d)+'|25|23|41|'+'0|20|22|40'+_0x49bf9b(0x102b)+'0|17|32|16'+'|34|29|19|'+_0x49bf9b(0xc42)+_0x49bf9b(0x130f)+_0x49bf9b(0xc68)+_0x49bf9b(0xb3a)+_0x49bf9b(0x661),'vKrjD':_0x49bf9b(0x12b7)},_0x4d0dad=_0xaaaa79[_0x49bf9b(0xa7b)][_0x49bf9b(0xba9)]('|');let _0x568d1c=-0x2194+-0x11e7+0x337b;while(!![]){switch(_0x4d0dad[_0x568d1c++]){case'0':this[_0x49bf9b(0xc1c)+_0x49bf9b(0xfa7)]=0x81*-0x2b+0x208c+-0x9e2;continue;case'1':this[_0x49bf9b(0x1265)+'chPower']=0x221+0x140c+0x1*-0x162d;continue;case'2':this[_0x49bf9b(0x880)+_0x49bf9b(0x940)]=-0x270c+0x11b6+0x1556;continue;case'3':this[_0x49bf9b(0x9af)+_0x49bf9b(0x3c1)]=0x4ef*-0x7+-0xb43*-0x3+-0x30*-0x4;continue;case'4':this[_0x49bf9b(0x1021)+_0x49bf9b(0x940)]=0x466*-0x5+-0x833*0x2+-0x12*-0x222;continue;case'5':this['_growDurat'+_0x49bf9b(0x1485)]=-0x1*-0x16f7+-0x663+-0x1094;continue;case'6':this[_0x49bf9b(0x921)]=-0x1856*0x1+-0x126+0x197c;continue;case'7':this[_0x49bf9b(0xa03)+'ht']=0x2273*0x1+-0x1*0x16d9+-0xb9a;continue;case'8':this[_0x49bf9b(0x303)+'eX']=0x1ec0+-0x20d1+0x17*0x17;continue;case'9':this['_targetGro'+'wX']=-0x122e+0x3d1+-0x2*-0x72f;continue;case'10':this[_0x49bf9b(0x281)+'ng']=_0xaaaa79['vKrjD'];continue;case'11':this['_growY']=0xb30*-0x3+-0xe62+-0x19*-0x1eb;continue;case'12':this['_shakeFlin'+'chDuration']=0xbb2+0x52c+-0x10de;continue;case'13':this[_0x49bf9b(0x11e0)+'le']=-0x27c+0x155+0x127*0x1;continue;case'14':this[_0x49bf9b(0x1002)+_0x49bf9b(0x1422)]=0x217e*0x1+0x75f*0x1+-0x28dd;continue;case'15':this[_0x49bf9b(0x130d)+'gle']=-0x1773+-0x7a1+0x1f14;continue;case'16':this[_0x49bf9b(0x1f1)]=0x1*-0x26e7+0xdd6+0x85b*0x3;continue;case'17':this[_0x49bf9b(0xe29)+'ng']=_0xaaaa79[_0x49bf9b(0x4b7)];continue;case'18':this[_0x49bf9b(0xae4)+_0x49bf9b(0x3c1)]=-0x17f2+0x1a60+-0x137*0x2;continue;case'19':this[_0x49bf9b(0x909)+'wY']=-0x79*0x2f+0x375+0x157*0xe;continue;case'20':this['_opacityDu'+'ration']=0x1904+-0x50c+-0x13f8;continue;case'21':this['_growX']=0x1c7b+-0x493+-0x17e7;continue;case'22':this['_opacityWh'+'oleDuratio'+'n']=0x129c+0x1a71+-0x2d0d;continue;case'23':this[_0x49bf9b(0xe77)+'ion']=0x6b1*0x5+0x1c4f+-0x3dc4;continue;case'24':this[_0x49bf9b(0xf3c)+'t']=0x1*0x1bd7+0x17f1+-0x33c8;continue;case'25':this[_0x49bf9b(0x10f9)+_0x49bf9b(0x1544)]=-0x595*-0x3+-0x1a00+-0x941*-0x1;continue;case'26':this[_0x49bf9b(0x4cd)+'g']=_0xaaaa79[_0x49bf9b(0x4b7)];continue;case'27':this[_0x49bf9b(0x4ab)+'wY']=0x289*0xb+0x5c5+-0x21a7;continue;case'28':this[_0x49bf9b(0x303)+'eY']=0x20b1*0x1+0x775*0x3+0x1*-0x3710;continue;case'29':this[_0x49bf9b(0x909)+'wX']=-0x1485+-0x18e3+-0x2*-0x16b4;continue;case'30':this[_0x49bf9b(0x1a9)+'eDuration']=-0x1372+-0xabd*0x2+-0x369*-0xc;continue;case'31':this['_growWhole'+_0x49bf9b(0x3c1)]=-0xe*-0x3d+0x1848+-0x1b9e;continue;case'32':this[_0x49bf9b(0x581)+'rtOnFinish']=!![];continue;case'33':this[_0x49bf9b(0x14d4)+'ion']=-0x1ca2+0x24cf+0x5b*-0x17;continue;case'34':this[_0x49bf9b(0xeff)]=-0x577*-0x1+0x757*-0x2+0x7*0x151;continue;case'35':this[_0x49bf9b(0x9fe)+'X']=-0x22*0x1a+0x1b66+-0x17f1;continue;case'36':this[_0x49bf9b(0x566)+'g']=_0xaaaa79[_0x49bf9b(0x4b7)];continue;case'37':this[_0x49bf9b(0x850)+'g']=_0xaaaa79[_0x49bf9b(0x4b7)];continue;case'38':this['_targetFlo'+'atHeight']=-0x1876+-0x17f5+0x1*0x306b;continue;case'39':this[_0x49bf9b(0x1085)]=-0xd9*-0x16+-0x1b81*0x1+-0x8db*-0x1;continue;case'40':this[_0x49bf9b(0x1648)+_0x49bf9b(0x8a0)]=_0xaaaa79[_0x49bf9b(0x4b7)];continue;case'41':this[_0x49bf9b(0xc40)+_0x49bf9b(0x3c1)]=-0x1163+-0x181c+-0x297f*-0x1;continue;case'42':this['_homeDurat'+'ion']=-0x1f1b+0x56f+0x19ac;continue;}break;}},Sprite_Battler[_0x4258d1(0xf38)]['createShad'+_0x4258d1(0x8fa)]=function(){const _0x18cb69=_0x4258d1,_0xab61d9={'mYQAC':_0x18cb69(0x837)+'1|3|0','zwjlS':'Shadow2'},_0x12bd6c=_0xab61d9[_0x18cb69(0x1105)]['split']('|');let _0x36e6fb=-0x1*-0x5c9+-0x3*0x6b9+0xe62;while(!![]){switch(_0x12bd6c[_0x36e6fb++]){case'0':this[_0x18cb69(0xd0b)](this[_0x18cb69(0xec0)+_0x18cb69(0xdba)]);continue;case'1':this[_0x18cb69(0xec0)+_0x18cb69(0xdba)]['y']=-(-0xf7+-0xb7d+-0x3a*-0x37);continue;case'2':this['_shadowSpr'+_0x18cb69(0xdba)][_0x18cb69(0x5dd)]=ImageManager['loadSystem'](_0xab61d9[_0x18cb69(0xeae)]);continue;case'3':this[_0x18cb69(0xec0)+'ite'][_0x18cb69(0x13af)]=![];continue;case'4':this['_shadowSpr'+_0x18cb69(0xdba)]['anchor']['y']=-0x2*0xb5+-0x1a71*0x1+-0x1bdb*-0x1+0.5;continue;case'5':this[_0x18cb69(0xec0)+'ite']=new Sprite();continue;case'6':this[_0x18cb69(0xec0)+_0x18cb69(0xdba)][_0x18cb69(0x12af)]['x']=0x5a4+-0x15c4*-0x1+-0x1b68+0.5;continue;case'7':this['_shadowSpr'+_0x18cb69(0xdba)][_0x18cb69(0x5dd)][_0x18cb69(0xa2d)]=VisuMZ['BattleCore'][_0x18cb69(0x424)]['Actor'][_0x18cb69(0x12d2)+'e'];continue;}break;}},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x4e6)+_0x4258d1(0xb83)+'te']=function(){const _0x440f6c=_0x4258d1;this[_0x440f6c(0x1208)+_0x440f6c(0x72b)]=new Sprite(),this[_0x440f6c(0x1208)+_0x440f6c(0x72b)][_0x440f6c(0x12af)]['x']=-0x2*0x1+0x179f+-0x1d1*0xd+0.5,this[_0x440f6c(0x1208)+_0x440f6c(0x72b)][_0x440f6c(0x12af)]['y']=-0x20f*0x2+0x337*-0x3+-0xdc3*-0x1+0.5,this[_0x440f6c(0xd0b)](this[_0x440f6c(0x1208)+'nSprite']);},Sprite_Battler[_0x4258d1(0xf38)]['_updateCol'+'orFilter']=function(){const _0x3b495f=_0x4258d1;if(this['getDragonb'+_0x3b495f(0x5d6)]&&this[_0x3b495f(0x19b)+_0x3b495f(0x5d6)]()){Sprite['prototype']['_updateCol'+'orFilter']['call'](this);return;}const _0x2ed615=this[_0x3b495f(0x1208)+_0x3b495f(0x72b)];if(!_0x2ed615)return;!_0x2ed615[_0x3b495f(0x5c3)+'er']&&_0x2ed615[_0x3b495f(0x12d5)+'orFilter'](),_0x2ed615['_colorFilt'+'er'][_0x3b495f(0xb27)](this[_0x3b495f(0xe2f)]),_0x2ed615[_0x3b495f(0x5c3)+'er'][_0x3b495f(0x126b)+_0x3b495f(0x446)](this[_0x3b495f(0x160a)+'r']),_0x2ed615['_colorFilt'+'er'][_0x3b495f(0x3f8)+'ne'](this[_0x3b495f(0x65f)]);},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0xce0)+_0x4258d1(0xc84)+_0x4258d1(0xdf7)+'e']=function(){const _0xcc33a=_0x4258d1;if(!this[_0xcc33a(0x1208)+'nSprite'])return;if(this['_shadowSpr'+_0xcc33a(0xdba)]){const _0x3e1426=this[_0xcc33a(0x288)+_0xcc33a(0x1466)](this[_0xcc33a(0x1208)+_0xcc33a(0x72b)]);this[_0xcc33a(0x1cb)](this[_0xcc33a(0xec0)+_0xcc33a(0xdba)],_0x3e1426),this[_0xcc33a(0xe48)+'owVisibili'+'ty']();}this[_0xcc33a(0x16a0)+_0xcc33a(0x594)]&&this['_distortio'+'nSprite'][_0xcc33a(0xd0b)](this[_0xcc33a(0x16a0)+_0xcc33a(0x594)]),this[_0xcc33a(0x1418)+_0xcc33a(0xdba)]&&this['_distortio'+'nSprite'][_0xcc33a(0xd0b)](this['_weaponSpr'+_0xcc33a(0xdba)]),this['_mainSprit'+'e']&&this[_0xcc33a(0x1208)+_0xcc33a(0x72b)]['addChild'](this[_0xcc33a(0x125a)+'e']),this[_0xcc33a(0x739)+_0xcc33a(0xc56)+'te']&&this[_0xcc33a(0x1208)+'nSprite'][_0xcc33a(0xd0b)](this[_0xcc33a(0x739)+'mationSpri'+'te']),this['_dragonbon'+_0xcc33a(0x214)+'ntainer']&&this[_0xcc33a(0x1208)+_0xcc33a(0x72b)][_0xcc33a(0xd0b)](this[_0xcc33a(0x158a)+'esSpriteCo'+_0xcc33a(0xd3d)]);},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0xe48)+'owVisibili'+'ty']=function(){const _0x7108d=_0x4258d1;if(!this[_0x7108d(0xec0)+_0x7108d(0xdba)])return;if(this[_0x7108d(0xe4f)]&&this['_battler'][_0x7108d(0xd33)+_0x7108d(0x722)+'le']()){const _0x5496f9=this[_0x7108d(0xec0)+_0x7108d(0xdba)][_0x7108d(0x5dd)];this[_0x7108d(0xec0)+_0x7108d(0xdba)][_0x7108d(0xfc6)](-0x2307+0x1*-0x8a1+0x2ba8,0x21*0x2b+0x413*0x1+-0x1*0x99e,_0x5496f9[_0x7108d(0xc2a)],_0x5496f9[_0x7108d(0x1594)]);}else this[_0x7108d(0xec0)+_0x7108d(0xdba)][_0x7108d(0xfc6)](-0x15c6+0x1a52+-0x6*0xc2,-0x1*0x7ca+0xf4f+0x37*-0x23,0x20c0+-0x5*0x9e+-0x1daa,-0x215d+-0x730+0x288d);},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x1635)+'ainer']=function(){const _0x328b6f=_0x4258d1;return SceneManager[_0x328b6f(0x614)+_0x328b6f(0x6e5)]()?SceneManager[_0x328b6f(0x14b3)][_0x328b6f(0x1b3)][_0x328b6f(0xf87)+'tainer']:this[_0x328b6f(0xad3)];},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x1431)+'opup']=function(_0x52464b,_0x58aa21){const _0x395f79=_0x4258d1;if(!this[_0x395f79(0xe4f)][_0x395f79(0x14d1)+_0x395f79(0xf67)]())return;if(BattleManager['shouldHide'+'BattleEndP'+'opups']())return;const _0x36eacb=VisuMZ[_0x395f79(0x337)]['Settings']['Damage'],_0x463ae4=new Sprite_Damage();_0x463ae4['_duration']=_0x36eacb[_0x395f79(0x5bb)+_0x395f79(0x1485)],this[_0x395f79(0xef5)+'Sprites'](_0x463ae4),_0x463ae4['setupTextP'+_0x395f79(0x295)](_0x52464b,_0x58aa21),this['addDamageS'+_0x395f79(0xa61)](_0x463ae4);},Sprite_Battler['prototype']['setupIconT'+_0x4258d1(0x519)]=function(_0x5ca4b0,_0x2fade7,_0x5b509e){const _0x4aee1b=_0x4258d1;if(!this['_battler']['isSpriteVi'+_0x4aee1b(0xf67)]())return;if(BattleManager[_0x4aee1b(0x9df)+'BattleEndP'+_0x4aee1b(0x9e8)]())return;const _0x405a60=VisuMZ[_0x4aee1b(0x337)][_0x4aee1b(0x424)][_0x4aee1b(0x1683)],_0x8a8729=new Sprite_Damage();_0x8a8729[_0x4aee1b(0x362)]=_0x405a60[_0x4aee1b(0x5bb)+_0x4aee1b(0x1485)],this[_0x4aee1b(0xef5)+_0x4aee1b(0x94a)](_0x8a8729),_0x8a8729[_0x4aee1b(0x12c7)+_0x4aee1b(0x519)](_0x5ca4b0,_0x2fade7,_0x5b509e),this['addDamageS'+_0x4aee1b(0xa61)](_0x8a8729);},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x10c0)+'ePopup']=function(){const _0x35df26=_0x4258d1;if(!this[_0x35df26(0xe4f)][_0x35df26(0xa5f)+'pupRequest'+'ed']())return;while(this[_0x35df26(0xe4f)][_0x35df26(0xa5f)+'pupRequest'+'ed']()){this[_0x35df26(0xe4f)][_0x35df26(0x14d1)+_0x35df26(0xf67)]()&&this['createDama'+_0x35df26(0x864)]();}this[_0x35df26(0xe4f)][_0x35df26(0x13da)+_0x35df26(0x47f)](),this[_0x35df26(0xe4f)][_0x35df26(0xad5)+'t']();},Sprite_Battler[_0x4258d1(0xf38)]['createDama'+_0x4258d1(0x864)]=function(){const _0x251719=_0x4258d1;if(BattleManager[_0x251719(0x9df)+_0x251719(0x1372)+_0x251719(0x9e8)]())return;const _0x45454e=VisuMZ[_0x251719(0x337)][_0x251719(0x424)][_0x251719(0x1683)],_0x3c4b7a=new Sprite_Damage();_0x3c4b7a[_0x251719(0x362)]=_0x45454e[_0x251719(0x5bb)+_0x251719(0x1485)],this[_0x251719(0xef5)+_0x251719(0x94a)](_0x3c4b7a),_0x3c4b7a[_0x251719(0xb3e)](this[_0x251719(0xe4f)]),_0x3c4b7a['setupBattl'+_0x251719(0x16aa)](this[_0x251719(0xe4f)]),this[_0x251719(0x602)+_0x251719(0xa61)](_0x3c4b7a);},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x602)+'prite']=function(_0x34c22b){const _0x487cc5=_0x4258d1;this[_0x487cc5(0x1c0)][_0x487cc5(0x88f)](_0x34c22b);if(this[_0x487cc5(0xfdc)+_0x487cc5(0x3bf)+_0x487cc5(0x2e4)]()){const _0x40bbad=SceneManager[_0x487cc5(0x14b3)][_0x487cc5(0x5c1)+_0x487cc5(0xfdb)];if(_0x40bbad)_0x40bbad[_0x487cc5(0x602)+_0x487cc5(0xa61)](_0x34c22b,this[_0x487cc5(0xe4f)]);}else{this[_0x487cc5(0x1635)+_0x487cc5(0xf1a)]()[_0x487cc5(0xd0b)](_0x34c22b);if(SceneManager[_0x487cc5(0x9ed)+_0x487cc5(0x145d)]())_0x34c22b[_0x487cc5(0xfcb)]['x']=-(0x1*-0x1379+-0x1d1f+0x13f*0x27);}},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0xfdc)+_0x4258d1(0x3bf)+_0x4258d1(0x2e4)]=function(){const _0x2c4d12=_0x4258d1,_0x5e412c={'mswdI':function(_0x465c96,_0x31da73){return _0x465c96===_0x31da73;},'ZMJAN':_0x2c4d12(0x14b6)};return!$gameSystem[_0x2c4d12(0x8df)]()&&this[_0x2c4d12(0xe4f)]&&this[_0x2c4d12(0xe4f)]['isActor']();return!$gameSystem[_0x2c4d12(0x8df)]()&&this[_0x2c4d12(0xe4f)]&&this[_0x2c4d12(0xe4f)][_0x2c4d12(0x1580)]()&&_0x5e412c[_0x2c4d12(0x486)](Window_BattleStatus[_0x2c4d12(0xf38)][_0x2c4d12(0x6d1)+'utStyle'](),_0x5e412c['ZMJAN']);},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0xef5)+'Sprites']=function(_0x109f7b){const _0x3e2548=_0x4258d1,_0x353ee4={'VipEE':function(_0x427847,_0x5628f7){return _0x427847*_0x5628f7;},'yJWIp':function(_0x19212f,_0x42350d){return _0x19212f-_0x42350d;},'RZysd':function(_0x2a49b9,_0x4b6fef){return _0x2a49b9+_0x4b6fef;}};this['alignBattl'+_0x3e2548(0x185)+_0x3e2548(0x14fb)](_0x109f7b,!![]);const _0x2c1499=VisuMZ[_0x3e2548(0x337)][_0x3e2548(0x424)][_0x3e2548(0x1683)],_0x416bc1=SceneManager['isBattleFl'+_0x3e2548(0x145d)]()?-(0x1ff0+-0x97*0x32+-0x271):-0x10b7*0x1+0x186b+-0x7b3;if(_0x2c1499[_0x3e2548(0x2ee)+'ttom'])for(const _0x57c623 of this[_0x3e2548(0x1c0)]){_0x57c623['x']+=_0x353ee4[_0x3e2548(0xfa1)](_0x2c1499[_0x3e2548(0xcb1)+'X'],_0x416bc1),_0x57c623['y']+=_0x2c1499[_0x3e2548(0xcb1)+'Y'];}else{const _0x25ae7e=this['_damages'][_0x353ee4[_0x3e2548(0xdfa)](this[_0x3e2548(0x1c0)][_0x3e2548(0x1645)],-0x88c+-0x943+0x11d0)];_0x25ae7e&&(_0x109f7b['x']=_0x353ee4[_0x3e2548(0x60a)](_0x25ae7e['x'],_0x353ee4[_0x3e2548(0xfa1)](_0x2c1499[_0x3e2548(0xcb1)+'X'],_0x416bc1)),_0x109f7b['y']=_0x353ee4[_0x3e2548(0x60a)](_0x25ae7e['y'],_0x2c1499[_0x3e2548(0xcb1)+'Y']));}},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x108a)+_0x4258d1(0x185)+_0x4258d1(0x14fb)]=function(_0x25945e,_0x8c4129){const _0x2681df=_0x4258d1,_0x3756ae={'ZWSQD':function(_0x52ea85,_0x5e0e1d){return _0x52ea85===_0x5e0e1d;},'GtebB':function(_0x2054e5,_0x3da06c){return _0x2054e5-_0x3da06c;},'oRyUc':function(_0xfb6506,_0x3408ed){return _0xfb6506/_0x3408ed;},'xRuqq':function(_0x20c0d1,_0x1be464){return _0x20c0d1*_0x1be464;},'AKrTY':function(_0x5a7944,_0x24c298){return _0x5a7944+_0x24c298;},'CqpFe':function(_0x1960b8,_0x26a46e){return _0x1960b8+_0x26a46e;},'sLnhy':function(_0x192787,_0x411f31){return _0x192787+_0x411f31;},'NuhFW':function(_0x80a585,_0x1d22eb){return _0x80a585*_0x1d22eb;},'IDYEu':function(_0x780531,_0x345e05){return _0x780531+_0x345e05;}},_0x165592=SceneManager[_0x2681df(0x9ed)+'ipped']()?-(0xd59+-0xa47+0x311*-0x1):-0x38*0x6+-0x1c31+0x2*0xec1;let _0x237414=this['_baseX'];_0x237414+=this[_0x2681df(0x961)+_0x2681df(0x777)]();let _0x3a9095=this['_baseY'];const _0x4ab569=this[_0x2681df(0x1208)+_0x2681df(0x72b)][_0x2681df(0xfcb)]['y'];_0x3a9095+=this['extraPosit'+_0x2681df(0x21e)]();const _0x33d985=SceneManager[_0x2681df(0x14b3)][_0x2681df(0x5c1)+_0x2681df(0xfdb)];if(_0x33d985&&_0x3756ae[_0x2681df(0x13a9)](this[_0x2681df(0xad3)],_0x33d985)){_0x237414+=_0x3756ae[_0x2681df(0x317)](_0x33d985['x'],this[_0x2681df(0x832)+_0x2681df(0x15fb)]());const _0x3ccd98=_0x3756ae['oRyUc'](_0x3756ae[_0x2681df(0xeb9)](_0x33d985[_0x2681df(0xbc7)](),0x1919+0x2*-0xeb9+0x45c),0x2109+-0x1861+0x2*-0x452);_0x3a9095=_0x3756ae[_0x2681df(0x16ae)](_0x33d985['y'],_0x3ccd98),_0x3a9095=Math[_0x2681df(0xd3a)](_0x3a9095,_0x3756ae['CqpFe'](_0x3756ae[_0x2681df(0x317)](_0x3756ae['sLnhy'](_0x33d985['y'],this['y']),this[_0x2681df(0x1594)]),_0x3ccd98));}_0x25945e['x']=Math[_0x2681df(0xdea)](_0x3756ae['CqpFe'](_0x237414,_0x3756ae[_0x2681df(0x14c6)](this[_0x2681df(0x832)+'etX'](),_0x165592))),_0x25945e['y']=Math[_0x2681df(0xdea)](_0x3756ae[_0x2681df(0xc12)](_0x3a9095,this[_0x2681df(0x832)+_0x2681df(0xa1a)]()));},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x527)+_0x4258d1(0x9a5)+'eOffsetX']=Sprite_Battler['prototype']['damageOffs'+_0x4258d1(0x15fb)],Sprite_Battler['prototype'][_0x4258d1(0x832)+_0x4258d1(0x15fb)]=function(){const _0x795650=_0x4258d1,_0x4bdfc3={'DkmQp':function(_0x27e5d3,_0x26750c){return _0x27e5d3+_0x26750c;}};let _0x23a708=VisuMZ['BattleCore'][_0x795650(0x527)+'tler_damag'+_0x795650(0x8e7)][_0x795650(0xb14)](this),_0x4be7a5=VisuMZ[_0x795650(0x337)][_0x795650(0x424)]['Damage'][_0x795650(0x1573)+'tX']||0x20a5+0x602+-0x26a7;return Math['round'](_0x4bdfc3[_0x795650(0x16be)](_0x23a708,_0x4be7a5));},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x527)+_0x4258d1(0x9a5)+_0x4258d1(0x3df)]=Sprite_Battler['prototype'][_0x4258d1(0x832)+'etY'],Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x832)+_0x4258d1(0xa1a)]=function(){const _0x24742c=_0x4258d1,_0x4907c2={'Tfosk':_0x24742c(0x1094),'EdmIi':function(_0xd50b9e,_0x3aa8cb){return _0xd50b9e*_0x3aa8cb;},'tKFAJ':_0x24742c(0x450),'jTPCd':function(_0x1dcaa8,_0x515199){return _0x1dcaa8*_0x515199;},'IAqWO':function(_0x9b5931,_0x303ea2){return _0x9b5931+_0x303ea2;}};let _0x1a2317=VisuMZ[_0x24742c(0x337)][_0x24742c(0x527)+_0x24742c(0x9a5)+'eOffsetY'][_0x24742c(0xb14)](this);switch(VisuMZ[_0x24742c(0x337)][_0x24742c(0x424)][_0x24742c(0x1683)][_0x24742c(0xba8)+_0x24742c(0x1485)]){case _0x4907c2[_0x24742c(0xf73)]:_0x1a2317-=_0x4907c2[_0x24742c(0xf89)](this[_0x24742c(0x1594)],this[_0x24742c(0xfcb)]['y']);break;case _0x4907c2[_0x24742c(0x10b5)]:_0x1a2317-=_0x4907c2[_0x24742c(0xf89)](_0x4907c2[_0x24742c(0x48a)](this[_0x24742c(0x1594)],this[_0x24742c(0xfcb)]['y']),0x39*0x35+-0x2b*0x54+-0x24f*-0x1+0.5);break;}let _0x72e7f5=VisuMZ[_0x24742c(0x337)][_0x24742c(0x424)][_0x24742c(0x1683)]['PopupOffse'+'tY']||-0x20cb+-0x845*0x3+0x399a;return Math['round'](_0x4907c2[_0x24742c(0x14b4)](_0x1a2317,_0x72e7f5));},Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0x832)+'etX']=function(){const _0x534795=_0x4258d1;return Sprite_Battler[_0x534795(0xf38)][_0x534795(0x832)+_0x534795(0x15fb)][_0x534795(0xb14)](this);},Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0x832)+'etY']=function(){const _0x82d819=_0x4258d1;return Sprite_Battler[_0x82d819(0xf38)][_0x82d819(0x832)+_0x82d819(0xa1a)][_0x82d819(0xb14)](this);},Sprite_Battler['prototype'][_0x4258d1(0xf11)+_0x4258d1(0xc43)]=function(_0x2bb632){const _0x1d3886=_0x4258d1;this[_0x1d3886(0xfdc)+_0x1d3886(0x3bf)+_0x1d3886(0x2e4)]()?SceneManager[_0x1d3886(0x14b3)][_0x1d3886(0x5c1)+_0x1d3886(0xfdb)][_0x1d3886(0x7a7)+_0x1d3886(0x864)](_0x2bb632):(this[_0x1d3886(0x1635)+_0x1d3886(0xf1a)]()[_0x1d3886(0x35b)+'d'](_0x2bb632),this[_0x1d3886(0x1c0)]['remove'](_0x2bb632),_0x2bb632[_0x1d3886(0x7dd)]());},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x527)+_0x4258d1(0x12e8)+'me']=Sprite_Battler['prototype']['setHome'],Sprite_Battler['prototype'][_0x4258d1(0x7fd)]=function(_0x34168a,_0x1def20){const _0xc3bb35=_0x4258d1,_0x56eedd={'ecqNZ':function(_0x4eb497,_0x5a101b){return _0x4eb497===_0x5a101b;},'mbnfY':function(_0x39bc61,_0xaa8d3){return _0x39bc61===_0xaa8d3;},'OqZnR':'Linear'},_0x12cc8c=VisuMZ['BattleCore'][_0xc3bb35(0x424)];if(_0x56eedd['ecqNZ'](this[_0xc3bb35(0xcab)+'r'],Sprite_Actor))_0x34168a+=_0x12cc8c[_0xc3bb35(0x1224)][_0xc3bb35(0x1521)]||0x12*0x20b+0x19e1+-0x3ea7,_0x1def20+=_0x12cc8c['Actor'][_0xc3bb35(0x114e)]||0x1072*0x1+0x5*0xfb+-0x1559;else _0x56eedd[_0xc3bb35(0x90b)](this[_0xc3bb35(0xcab)+'r'],Sprite_Enemy)&&(_0x34168a+=_0x12cc8c[_0xc3bb35(0xcce)]['OffsetX']||0x1*0x2525+-0xfb5*-0x1+0x52*-0xa5,_0x1def20+=_0x12cc8c[_0xc3bb35(0xcce)][_0xc3bb35(0x114e)]||0x1d5*-0x14+-0x6*0x2dc+0x35cc);this[_0xc3bb35(0xe4f)]&&(_0x34168a=this[_0xc3bb35(0xe4f)][_0xc3bb35(0xcbf)+'eX']??_0x34168a,_0x1def20=this[_0xc3bb35(0xe4f)][_0xc3bb35(0xcbf)+'eY']??_0x1def20),VisuMZ[_0xc3bb35(0x337)][_0xc3bb35(0x527)+'tler_setHo'+'me'][_0xc3bb35(0xb14)](this,_0x34168a,_0x1def20),this[_0xc3bb35(0x303)+'eX']=this[_0xc3bb35(0x6f0)],this[_0xc3bb35(0x303)+'eY']=this['_homeY'],this[_0xc3bb35(0xaa7)+_0xc3bb35(0x1485)]=0x224e+0x1*0x409+-0x2657,this[_0xc3bb35(0xae4)+_0xc3bb35(0x3c1)]=-0x3f5*-0x4+0x5e*-0x35+-0xa*-0x5d,this['_homeEasin'+'g']=_0x56eedd[_0xc3bb35(0x23b)];},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x527)+_0x4258d1(0x1348)+'e']=Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x164c)],Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x164c)]=function(){const _0x424351=_0x4258d1;VisuMZ[_0x424351(0x337)][_0x424351(0x527)+_0x424351(0x1348)+'e'][_0x424351(0xb14)](this),!this[_0x424351(0xe4f)]&&this[_0x424351(0x1072)+'rite']&&(this[_0x424351(0x1072)+_0x424351(0x2af)][_0x424351(0x13af)]=![]);},VisuMZ['BattleCore']['Sprite_Bat'+_0x4258d1(0x1348)+'eMain']=Sprite_Battler['prototype'][_0x4258d1(0x3c2)],Sprite_Battler[_0x4258d1(0xf38)]['updateMain']=function(){const _0x3ade0b=_0x4258d1,_0x5d2ac3={'ZfDtw':_0x3ade0b(0x1503)+'6|7|5','SdvQo':function(_0x30e01c,_0x51e89d){return _0x30e01c===_0x51e89d;}},_0x25e8b7=_0x5d2ac3[_0x3ade0b(0x665)][_0x3ade0b(0xba9)]('|');let _0x2669c1=-0x1659+-0x5*-0x47e+-0x1d*0x1;while(!![]){switch(_0x25e8b7[_0x2669c1++]){case'0':this['updateSpin']();continue;case'1':this[_0x3ade0b(0xe99)]();continue;case'2':this['updateScal'+'e']();continue;case'3':VisuMZ[_0x3ade0b(0x337)][_0x3ade0b(0x527)+_0x3ade0b(0x1348)+'eMain'][_0x3ade0b(0xb14)](this);continue;case'4':this['updateSkew']();continue;case'5':if(_0x5d2ac3[_0x3ade0b(0x9ca)](this[_0x3ade0b(0xcab)+'r'],Sprite_Enemy))this['updateShad'+'ow']();continue;case'6':this['updateHpGa'+_0x3ade0b(0xec4)+'n']();continue;case'7':this[_0x3ade0b(0x422)+'eFlinch']();continue;}break;}},VisuMZ[_0x4258d1(0x337)]['Sprite_Bat'+'tler_updat'+'ePosition']=Sprite_Battler['prototype'][_0x4258d1(0x4ee)+'tion'],Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x4ee)+_0x4258d1(0x940)]=function(){const _0x2103c3=_0x4258d1;this[_0x2103c3(0x13de)+_0x2103c3(0xcd2)](),VisuMZ[_0x2103c3(0x337)][_0x2103c3(0x527)+_0x2103c3(0x1348)+_0x2103c3(0xf40)][_0x2103c3(0xb14)](this),this['updatePosi'+'tionBattle'+_0x2103c3(0x5b8)](),this[_0x2103c3(0x342)+'ity']();},Sprite_Battler['prototype'][_0x4258d1(0xd24)+_0x4258d1(0x1262)+'t']=function(){const _0x26e34e=_0x4258d1,_0x279b26={'MxJGD':function(_0x3b738c,_0x574442){return _0x3b738c<_0x574442;},'vWDoC':function(_0x4b6a28,_0x3b8810){return _0x4b6a28%_0x3b8810;},'HFHOL':function(_0x416741,_0x2a997f){return _0x416741>_0x2a997f;}},_0x5b4b45=this[_0x26e34e(0x10f3)]();if(this[_0x26e34e(0xe4f)]['isSelected']())this['_selection'+'EffectCoun'+'t']++,_0x279b26['MxJGD'](_0x279b26['vWDoC'](Graphics[_0x26e34e(0xa1b)],0x284+-0x1*-0xb2d+0xd93*-0x1),0x7eb*0x4+-0x130c+-0xc91)?_0x5b4b45[_0x26e34e(0x126b)+_0x26e34e(0x446)]([0xefc+0x1*0x83+-0xe80,0x248f+-0x244*-0x2+0x503*-0x8,0x1d*-0x2b+-0xccb+0x12a9*0x1,0x1ae+0x4b9*0x1+0x3*-0x20d]):_0x5b4b45[_0x26e34e(0x126b)+_0x26e34e(0x446)]([-0xae+0x2a*0x67+-0x3*0x568,0x9ce+-0x860+-0x3d*0x6,0x17a1+0x1173*0x1+0x2914*-0x1,-0x1b9e+0xb6f+-0x3*-0x565]);else _0x279b26[_0x26e34e(0x11e3)](this[_0x26e34e(0x805)+_0x26e34e(0xe22)+'t'],0x1*-0x20d6+-0x5*0x95+-0x23bf*-0x1)&&(this[_0x26e34e(0x805)+_0x26e34e(0xe22)+'t']=0x191a+0x65*-0x11+-0x1265,_0x5b4b45[_0x26e34e(0x126b)+'lor']([-0x217+0x1db5+0x1b9e*-0x1,-0x1d2*0x7+0x13c+0x3*0x3d6,0x16d6+0x840+0x2*-0xf8b,0x1439+-0xb*-0x72+-0x191f]));},Sprite_Battler['prototype'][_0x4258d1(0x14dd)+_0x4258d1(0xcd2)]=function(_0x325e02,_0x56c3ea){const _0x309269=_0x4258d1,_0x55839c={'MyeuL':function(_0x2568d1,_0x3e7cd6){return _0x2568d1===_0x3e7cd6;},'tkwHI':function(_0x3bef41,_0x30dae6){return _0x3bef41-_0x30dae6;},'qLobr':function(_0x53dd16,_0x7367e){return _0x53dd16-_0x7367e;}},_0x3cfbb6=VisuMZ[_0x309269(0x337)][_0x309269(0x424)];if(_0x55839c[_0x309269(0xae1)](this[_0x309269(0xcab)+'r'],Sprite_Actor))_0x325e02+=_0x3cfbb6[_0x309269(0x1224)][_0x309269(0x1521)]||-0x14*-0x44+-0xed1*-0x1+0x1421*-0x1,_0x56c3ea+=_0x3cfbb6[_0x309269(0x1224)][_0x309269(0x114e)]||0x20eb*0x1+-0x5*-0x3ef+-0x3496;else _0x55839c[_0x309269(0xae1)](this[_0x309269(0xcab)+'r'],Sprite_Enemy)&&(_0x325e02+=_0x3cfbb6['Enemy'][_0x309269(0x1521)]||-0xb56+0x1e90+-0x133a,_0x56c3ea+=_0x3cfbb6[_0x309269(0xcce)][_0x309269(0x114e)]||-0x1f7f*-0x1+-0x2*0xc7+0x5fd*-0x5);const _0x2c952c=_0x55839c[_0x309269(0x4c2)](_0x325e02,this[_0x309269(0x6f0)]),_0x466a79=_0x55839c[_0x309269(0x1401)](_0x56c3ea,this[_0x309269(0xd2e)]);this[_0x309269(0x6f0)]=_0x325e02,this[_0x309269(0xd2e)]=_0x56c3ea,this[_0x309269(0x1428)]-=_0x2c952c,this['_offsetY']-=_0x466a79,this[_0x309269(0x976)+'setX']-=_0x2c952c,this[_0x309269(0x976)+'setY']-=_0x466a79,this[_0x309269(0x4ee)+'tion']();},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x923)+_0x4258d1(0x56d)]=function(_0x292eeb,_0x550655,_0x24aeff,_0x47824d){const _0x571ffa=_0x4258d1,_0x3c77b3={'Qrdrt':function(_0x1178dd,_0x27e96b){return _0x1178dd===_0x27e96b;},'vgJja':function(_0x40514c,_0x52a8dc){return _0x40514c===_0x52a8dc;},'iJRaP':function(_0x2b3343,_0x2de443){return _0x2b3343!==_0x2de443;},'EsbfY':_0x571ffa(0x1110)+'2','aBnai':function(_0x163d3a,_0xedcc26){return _0x163d3a<=_0xedcc26;}},_0x330c33=VisuMZ[_0x571ffa(0x337)][_0x571ffa(0x424)];if(_0x3c77b3[_0x571ffa(0xa40)](this[_0x571ffa(0xcab)+'r'],Sprite_Actor))_0x292eeb+=_0x330c33['Actor'][_0x571ffa(0x1521)]||0x15c7+0x1e7+0x7*-0x362,_0x550655+=_0x330c33[_0x571ffa(0x1224)][_0x571ffa(0x114e)]||-0x151e+-0x1*-0x1187+0x1*0x397;else _0x3c77b3[_0x571ffa(0x15f4)](this[_0x571ffa(0xcab)+'r'],Sprite_Enemy)&&(_0x292eeb+=_0x330c33[_0x571ffa(0xcce)]['OffsetX']||0x1*0x1b9+0x12fb+-0x14b4,_0x550655+=_0x330c33[_0x571ffa(0xcce)][_0x571ffa(0x114e)]||-0x1594*0x1+0x3*0x21d+0xf3d);if(_0x3c77b3[_0x571ffa(0x1199)](this[_0x571ffa(0x303)+'eX'],_0x292eeb)||_0x3c77b3[_0x571ffa(0x1199)](this[_0x571ffa(0x303)+'eY'],_0x550655)){const _0x69325b=_0x3c77b3[_0x571ffa(0x650)]['split']('|');let _0x179b6e=0xa94+-0x1831+0x2b9*0x5;while(!![]){switch(_0x69325b[_0x179b6e++]){case'0':this[_0x571ffa(0x303)+'eX']=_0x292eeb;continue;case'1':this[_0x571ffa(0xaa7)+_0x571ffa(0x1485)]=_0x24aeff;continue;case'2':_0x3c77b3[_0x571ffa(0xb62)](_0x24aeff,0x15eb+-0x1*-0x12f7+-0x28e2)&&this[_0x571ffa(0x1658)+_0x571ffa(0xed6)]();continue;case'3':this[_0x571ffa(0x4cd)+'g']=_0x47824d;continue;case'4':this[_0x571ffa(0x303)+'eY']=_0x550655;continue;case'5':this[_0x571ffa(0xae4)+_0x571ffa(0x3c1)]=_0x24aeff;continue;}break;}}},Sprite_Battler['prototype'][_0x4258d1(0x13de)+_0x4258d1(0xcd2)]=function(){const _0x57bef9=_0x4258d1,_0x53de02={'ITICs':function(_0x58c9a8,_0x1d394b){return _0x58c9a8<=_0x1d394b;},'JBnaE':function(_0x10c360,_0x4c5c72){return _0x10c360/_0x4c5c72;},'IPsAE':function(_0x2b21a8,_0xcde755){return _0x2b21a8+_0xcde755;},'TgnWm':function(_0x581c8e,_0xc476f8){return _0x581c8e*_0xc476f8;},'OBnaB':function(_0xdabb99,_0x83d840){return _0xdabb99-_0x83d840;},'SiDxk':function(_0x18697a,_0x10dec8){return _0x18697a*_0x10dec8;},'brBAt':function(_0x5830f6,_0x4b50d0){return _0x5830f6<=_0x4b50d0;}};if(_0x53de02['ITICs'](this['_homeDurat'+_0x57bef9(0x1485)],0xf72+0x9eb+-0x195d))return;const _0x4db65c=this[_0x57bef9(0xaa7)+_0x57bef9(0x1485)],_0x2cbec2=this['_homeWhole'+_0x57bef9(0x3c1)],_0x29f705=this[_0x57bef9(0x4cd)+'g'];Imported['VisuMZ_0_C'+_0x57bef9(0x138e)]?(this['_homeX']=this[_0x57bef9(0x1664)+'g'](this[_0x57bef9(0x6f0)],this[_0x57bef9(0x303)+'eX'],_0x4db65c,_0x2cbec2,_0x29f705),this[_0x57bef9(0xd2e)]=this['applyEasin'+'g'](this[_0x57bef9(0xd2e)],this[_0x57bef9(0x303)+'eY'],_0x4db65c,_0x2cbec2,_0x29f705)):(this['_homeX']=_0x53de02['JBnaE'](_0x53de02[_0x57bef9(0x4a4)](_0x53de02[_0x57bef9(0xdc0)](this[_0x57bef9(0x6f0)],_0x53de02[_0x57bef9(0x1639)](_0x4db65c,-0x1c6e+0x2665+-0x9f6)),this['_targetHom'+'eX']),_0x4db65c),this[_0x57bef9(0xd2e)]=_0x53de02['JBnaE'](_0x53de02[_0x57bef9(0x4a4)](_0x53de02[_0x57bef9(0xcf5)](this['_homeY'],_0x53de02[_0x57bef9(0x1639)](_0x4db65c,-0xb11*0x1+-0x7ff+0x1311)),this[_0x57bef9(0x303)+'eY']),_0x4db65c));this[_0x57bef9(0xaa7)+'ion']--;if(_0x53de02[_0x57bef9(0x1048)](this[_0x57bef9(0xaa7)+_0x57bef9(0x1485)],0x25a0+0x1*0x254f+-0x4aef))this[_0x57bef9(0x1658)+_0x57bef9(0xed6)]();},Sprite_Battler['prototype']['onHomeMove'+'End']=function(){const _0x532ed4=_0x4258d1;this[_0x532ed4(0x6f0)]=this['_targetHom'+'eX'],this[_0x532ed4(0xd2e)]=this[_0x532ed4(0x303)+'eY'];},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x4ee)+'tionBattle'+_0x4258d1(0x5b8)]=function(){const _0xa97cff=_0x4258d1,_0x1bec1e={'nbwnJ':_0xa97cff(0xd75)+_0xa97cff(0x1144)},_0xd94196=_0x1bec1e[_0xa97cff(0xd43)][_0xa97cff(0xba9)]('|');let _0x47a5cb=-0x1*-0x13de+-0x1507+-0xb*-0x1b;while(!![]){switch(_0xd94196[_0x47a5cb++]){case'0':this['_baseX']=this['x'];continue;case'1':this['y']+=this[_0xa97cff(0x961)+_0xa97cff(0x1134)]();continue;case'2':this['y']+=this['extraPosit'+_0xa97cff(0x21e)]();continue;case'3':this['_baseY']=this['y'];continue;case'4':this[_0xa97cff(0xe38)]();continue;case'5':this['x']=Math['floor'](this['x']);continue;case'6':this['x']+=this[_0xa97cff(0x961)+'ionX']();continue;case'7':this['y']=Math['floor'](this['y']);continue;case'8':this[_0xa97cff(0xaed)+'t']();continue;}break;}},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x961)+_0x4258d1(0x777)]=function(){let _0x37a99e=-0x247d+0xe78+-0x1*-0x1605;return _0x37a99e;},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x961)+_0x4258d1(0x21e)]=function(){const _0xbe0ec0=_0x4258d1;let _0x38d791=-0x1*-0x2557+0x4*0xbc+-0x2847;return this['_battler']&&!this[_0xbe0ec0(0xe4f)][_0xbe0ec0(0x7e0)+'rounded']()&&(_0x38d791-=this[_0xbe0ec0(0xa03)+'ht'],_0x38d791-=this[_0xbe0ec0(0xf3c)+'t']),_0x38d791;},Sprite_Battler['prototype']['extraPosit'+_0x4258d1(0x1134)]=function(){const _0x372873=_0x4258d1,_0x44dd50={'YHJul':function(_0x125a5e,_0x266624){return _0x125a5e!==_0x266624;},'quXLJ':function(_0x2472d9,_0x12f900){return _0x2472d9*_0x12f900;},'fCygR':function(_0x311f76,_0x1ce6c7){return _0x311f76-_0x1ce6c7;}};let _0x47c3ab=-0xe21*0x1+-0x18*0x72+0x18d1;if(this[_0x372873(0x1208)+_0x372873(0x72b)]&&_0x44dd50[_0x372873(0x996)](this[_0x372873(0xcab)+'r'],Sprite_SvEnemy)){const _0x5db6d9=this[_0x372873(0x1208)+_0x372873(0x72b)][_0x372873(0xfcb)]['y'];_0x47c3ab-=_0x44dd50[_0x372873(0x68f)](_0x44dd50[_0x372873(0x13f2)](_0x5db6d9,-0x1600+0x26b3+0x1*-0x10b2),this['height']);}return _0x47c3ab;},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0xe99)]=function(){const _0x157fbc=_0x4258d1,_0x1e93bf={'uRJjZ':function(_0x4b5fac,_0x5a1ddb){return _0x4b5fac*_0x5a1ddb;}},_0x1d6b8d=this[_0x157fbc(0xe4f)]&&this[_0x157fbc(0xe4f)]['isBattlerF'+_0x157fbc(0x12df)]();this[_0x157fbc(0x9fe)+'X']=_0x1e93bf[_0x157fbc(0xbe8)](_0x1d6b8d?-(-0xc98+0xaea+-0x1*-0x1af):-0x11*0x1+0x5*-0x7ae+0x2678,Math['abs'](this['scale']['x']));},Sprite_Battler['prototype'][_0x4258d1(0x1227)]=function(_0x1ff05e,_0xe58220,_0x4c4768){const _0x431029=_0x4258d1,_0x1387f8={'YANfQ':_0x431029(0x1386)+_0x431029(0x117d),'uvjeV':function(_0x5705dc,_0xa6d591){return _0x5705dc||_0xa6d591;},'oyYRY':_0x431029(0x12b7),'WEXAC':function(_0x30bc1e,_0x45cdc4){return _0x30bc1e===_0x45cdc4;},'yOFxQ':function(_0x3a2569,_0x4cde3d){return _0x3a2569<=_0x4cde3d;}},_0x254f63=_0x1387f8[_0x431029(0x1135)][_0x431029(0xba9)]('|');let _0x2047d2=-0x247c+0x1095+-0x3fb*-0x5;while(!![]){switch(_0x254f63[_0x2047d2++]){case'0':this[_0x431029(0x1002)+_0x431029(0x1422)]=_0xe58220;continue;case'1':this['_targetFlo'+_0x431029(0x152a)]=_0x1ff05e;continue;case'2':this[_0x431029(0x880)+_0x431029(0x940)]=_0xe58220;continue;case'3':this[_0x431029(0x281)+'ng']=_0x1387f8[_0x431029(0xc6f)](_0x4c4768,_0x1387f8[_0x431029(0x686)]);continue;case'4':if(_0x1387f8[_0x431029(0x13dc)](this[_0x431029(0x2f7)+_0x431029(0x152a)],_0x1ff05e))return;continue;case'5':if(!this[_0x431029(0x16ad)]())return;continue;case'6':if(_0x1387f8['yOFxQ'](_0xe58220,-0x439+0x31*-0x84+0x1d7d))this['_floatHeig'+'ht']=_0x1ff05e;continue;}break;}},Sprite_Battler[_0x4258d1(0xf38)]['updateFloa'+'t']=function(){const _0x302dad=_0x4258d1,_0xe8face={'cRjPU':function(_0x47f12d,_0x5adc7e){return _0x47f12d<=_0x5adc7e;},'Mjvae':function(_0x1c65f7,_0x1c9ee8){return _0x1c65f7/_0x1c9ee8;},'ChjED':function(_0x3bd2d3,_0x9fc58){return _0x3bd2d3+_0x9fc58;},'lticL':function(_0x16b6f8,_0x42508d){return _0x16b6f8*_0x42508d;},'VLEPY':function(_0x52f3de,_0xe3bbb9){return _0x52f3de-_0xe3bbb9;},'qGkyK':function(_0xfa8e3a,_0x1f7c08){return _0xfa8e3a<=_0x1f7c08;}};if(_0xe8face[_0x302dad(0x3af)](this[_0x302dad(0x880)+_0x302dad(0x940)],0xb73+0xbd0+-0x5*0x4a7))return;const _0x52c0f2=this[_0x302dad(0x880)+_0x302dad(0x940)],_0x1885d1=this[_0x302dad(0x1002)+_0x302dad(0x1422)],_0x4580ae=this[_0x302dad(0x281)+'ng'];Imported[_0x302dad(0x7d7)+'oreEngine']?this['_floatHeig'+'ht']=this['applyEasin'+'g'](this[_0x302dad(0xa03)+'ht'],this[_0x302dad(0x2f7)+_0x302dad(0x152a)],_0x52c0f2,_0x1885d1,_0x4580ae):this[_0x302dad(0xa03)+'ht']=_0xe8face[_0x302dad(0xa13)](_0xe8face['ChjED'](_0xe8face[_0x302dad(0x459)](this[_0x302dad(0xa03)+'ht'],_0xe8face[_0x302dad(0xf03)](_0x52c0f2,-0x3f1+-0x1e34+0x2226)),this[_0x302dad(0x2f7)+_0x302dad(0x152a)]),_0x52c0f2);this['_floatDura'+'tion']--;if(_0xe8face[_0x302dad(0xb1d)](this[_0x302dad(0x880)+'tion'],-0x7*-0x431+-0x7a*0x45+0x38b))this[_0x302dad(0xc57)]();},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0xc57)]=function(){const _0x2019f0=_0x4258d1;this[_0x2019f0(0xa03)+'ht']=this[_0x2019f0(0x2f7)+_0x2019f0(0x152a)];},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x8ff)]=function(){const _0x598738=_0x4258d1,_0x1f4411={'SLgkW':function(_0x1c40e9,_0x1ea5d8){return _0x1c40e9>_0x1ea5d8;}};return _0x1f4411['SLgkW'](this[_0x598738(0x880)+_0x598738(0x940)],0x1*-0x1273+-0x2302*0x1+0x7a3*0x7);},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x1374)]=function(_0x28e0cf,_0x59c5ac){const _0x1d7717=_0x4258d1,_0x31b5be={'PvQtP':_0x1d7717(0x159f),'jJNtQ':function(_0x3ee922,_0x15153f){return _0x3ee922<=_0x15153f;}},_0x50db45=_0x31b5be['PvQtP'][_0x1d7717(0xba9)]('|');let _0x5186ff=-0x1393+0x60*0x16+-0xb53*-0x1;while(!![]){switch(_0x50db45[_0x5186ff++]){case'0':this[_0x1d7717(0xc40)+_0x1d7717(0x3c1)]=_0x59c5ac;continue;case'1':this[_0x1d7717(0xe77)+_0x1d7717(0x1485)]=_0x59c5ac;continue;case'2':this[_0x1d7717(0x10f9)+_0x1d7717(0x1544)]=_0x28e0cf;continue;case'3':if(!this[_0x1d7717(0x16ad)]())return;continue;case'4':if(_0x31b5be[_0x1d7717(0xe7a)](_0x59c5ac,-0xbb*-0xf+0xa4*-0x3a+0x1a33))return;continue;}break;}},Sprite_Battler['prototype']['updateJump']=function(){const _0x2d0430=_0x4258d1,_0x5424c0={'oNEFV':function(_0x531b0f,_0x1f3cab){return _0x531b0f<=_0x1f3cab;},'DBiax':function(_0x590c15,_0x1ea1bf){return _0x590c15-_0x1ea1bf;},'xCdIB':function(_0x572740,_0x16349e){return _0x572740/_0x16349e;},'bUllr':function(_0x194a26,_0x1e2d02){return _0x194a26/_0x1e2d02;},'whPKS':function(_0x27b893,_0x3f08df){return _0x27b893+_0x3f08df;},'OGPrd':function(_0x19ada0,_0x211011){return _0x19ada0*_0x211011;},'vraFp':function(_0x1cd19c,_0x3d3501){return _0x1cd19c<=_0x3d3501;}};if(_0x5424c0[_0x2d0430(0x144a)](this[_0x2d0430(0xe77)+_0x2d0430(0x1485)],0x1*-0x1c76+-0x4fc+0x2172))return;const _0x173311=_0x5424c0[_0x2d0430(0x496)](this['_jumpWhole'+'Duration'],this[_0x2d0430(0xe77)+_0x2d0430(0x1485)]),_0x3b8bf5=_0x5424c0['xCdIB'](this[_0x2d0430(0xc40)+_0x2d0430(0x3c1)],-0x1*-0x2424+0x5*0x11e+-0x29b8),_0x378e84=this[_0x2d0430(0x10f9)+_0x2d0430(0x1544)],_0x5bd335=_0x5424c0['bUllr'](-_0x378e84,Math['pow'](_0x3b8bf5,-0x14*-0x53+0x1163+-0x95*0x29));this[_0x2d0430(0xf3c)+'t']=_0x5424c0['whPKS'](_0x5424c0[_0x2d0430(0x3e8)](_0x5bd335,Math[_0x2d0430(0xeba)](_0x5424c0['DBiax'](_0x173311,_0x3b8bf5),0x1*-0x2203+0x1903*-0x1+0x1d84*0x2)),_0x378e84),this[_0x2d0430(0xe77)+_0x2d0430(0x1485)]--;if(_0x5424c0['vraFp'](this[_0x2d0430(0xe77)+_0x2d0430(0x1485)],-0x3*0xa37+0x207c+-0x1d7))return this['onJumpEnd']();},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x143b)]=function(){this['_jumpHeigh'+'t']=0xa1*-0x1a+0x1*0x2533+-0x251*0x9;},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x2cb)]=function(){const _0x3a11d5=_0x4258d1,_0x57c1ef={'txdnU':function(_0x490052,_0x55fb88){return _0x490052>_0x55fb88;}};return _0x57c1ef[_0x3a11d5(0x892)](this['_jumpDurat'+_0x3a11d5(0x1485)],-0xbc*0x31+-0x1939+0x3d35);},Sprite_Battler['prototype']['startOpaci'+'ty']=function(_0x23b32b,_0x342f52,_0x46e964){const _0x5016f9=_0x4258d1,_0x395f1a={'fywJT':_0x5016f9(0x1541)+'5','umHLy':function(_0x2ab846,_0x349c9f){return _0x2ab846||_0x349c9f;},'kPMaY':_0x5016f9(0x12b7),'ekMgK':function(_0x52778d,_0x5ac7eb){return _0x52778d===_0x5ac7eb;},'bPhpy':function(_0x90996,_0x27343d){return _0x90996<=_0x27343d;}},_0x5a1892=_0x395f1a[_0x5016f9(0xd0d)]['split']('|');let _0x36b871=0x1*0x268+-0x7f*-0x2f+0x893*-0x3;while(!![]){switch(_0x5a1892[_0x36b871++]){case'0':this[_0x5016f9(0xc1c)+_0x5016f9(0xfa7)]=_0x23b32b;continue;case'1':this[_0x5016f9(0x1644)+_0x5016f9(0x737)]=_0x342f52;continue;case'2':this['_opacityEa'+_0x5016f9(0x8a0)]=_0x395f1a[_0x5016f9(0x86f)](_0x46e964,_0x395f1a['kPMaY']);continue;case'3':if(_0x395f1a[_0x5016f9(0xdee)](this[_0x5016f9(0xc1c)+_0x5016f9(0xfa7)],_0x23b32b))return;continue;case'4':this[_0x5016f9(0xa3c)+'oleDuratio'+'n']=_0x342f52;continue;case'5':if(_0x395f1a['bPhpy'](_0x342f52,0x6b7+0x19*0x149+-0x26d8))this[_0x5016f9(0x4c8)]=_0x23b32b;continue;}break;}},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x342)+'ity']=function(){const _0x431b19=_0x4258d1,_0x112d02={'MRqht':function(_0x1123b9,_0x39b3c6){return _0x1123b9===_0x39b3c6;},'AhVer':_0x431b19(0xa9a)+_0x431b19(0xdb6),'dBxKT':function(_0x54fd9,_0x289808){return _0x54fd9<=_0x289808;},'wkeMS':function(_0x588545,_0x2b2320){return _0x588545/_0x2b2320;},'dVhMW':function(_0x74526b,_0x2aecc4){return _0x74526b+_0x2aecc4;},'DArYu':function(_0x42c36e,_0xde8a7f){return _0x42c36e*_0xde8a7f;},'uTZKN':function(_0x1eac76,_0x41fdf3){return _0x1eac76-_0x41fdf3;},'lwiqU':function(_0x52a194,_0x2169b4){return _0x52a194<=_0x2169b4;}};if(_0x112d02[_0x431b19(0x320)](this[_0x431b19(0xcab)+'r'][_0x431b19(0xd40)],_0x112d02[_0x431b19(0x1d2)]))return;if(_0x112d02[_0x431b19(0xcc6)](this[_0x431b19(0x1644)+_0x431b19(0x737)],-0x12e+-0xf56*0x1+0x1084))return;const _0x12b9db=this[_0x431b19(0x1644)+_0x431b19(0x737)],_0x4c3a27=this[_0x431b19(0xa3c)+'oleDuratio'+'n'],_0x262082=this[_0x431b19(0x1648)+'sing'];Imported[_0x431b19(0x7d7)+_0x431b19(0x138e)]?this['opacity']=this[_0x431b19(0x1664)+'g'](this['opacity'],this[_0x431b19(0xc1c)+_0x431b19(0xfa7)],_0x12b9db,_0x4c3a27,_0x262082):this[_0x431b19(0x4c8)]=_0x112d02['wkeMS'](_0x112d02['dVhMW'](_0x112d02[_0x431b19(0x7f6)](this[_0x431b19(0x4c8)],_0x112d02[_0x431b19(0xc69)](_0x12b9db,0x103*-0xf+0x2699+0x6d*-0x37)),this[_0x431b19(0xc1c)+_0x431b19(0xfa7)]),_0x12b9db);this[_0x431b19(0x1644)+_0x431b19(0x737)]--;if(_0x112d02[_0x431b19(0xe90)](this[_0x431b19(0x1644)+_0x431b19(0x737)],-0x1b9d+0xa69+0x1134))this[_0x431b19(0x51c)+'nd']();},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x51c)+'nd']=function(){const _0x364353=_0x4258d1;this[_0x364353(0x4c8)]=this[_0x364353(0xc1c)+_0x364353(0xfa7)];},Sprite_Battler['prototype']['isChanging'+_0x4258d1(0x13e7)]=function(){const _0x3d78f0=_0x4258d1,_0x156f99={'SBLEU':function(_0x7a1303,_0x4e70c2){return _0x7a1303>_0x4e70c2;}};return _0x156f99[_0x3d78f0(0xe8e)](this[_0x3d78f0(0x1644)+'ration'],0x4*0x8e1+0x1ee+-0x12b9*0x2);},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0xe48)+'ow']=function(){const _0x1d0b49=_0x4258d1;this[_0x1d0b49(0xec0)+_0x1d0b49(0xdba)]['visible']=this[_0x1d0b49(0xe4f)][_0x1d0b49(0xb37)+'er'](),this[_0x1d0b49(0xe48)+'owPosition']();},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0xe48)+_0x4258d1(0x63b)]=function(){const _0x349826=_0x4258d1,_0x2738ba={'zLcwA':function(_0x350576,_0x500964){return _0x350576-_0x500964;}};if(!this[_0x349826(0xec0)+_0x349826(0xdba)])return;this[_0x349826(0xec0)+_0x349826(0xdba)]['y']=_0x2738ba[_0x349826(0xf4e)](_0x2738ba[_0x349826(0xf4e)](this['_baseY'],this['y']),-0x1*0x7bf+-0x4*-0x2d3+-0x38b);},Sprite_Battler[_0x4258d1(0xf38)]['updateShad'+'owScale']=function(){const _0x3e2034=_0x4258d1;if(!this[_0x3e2034(0xe4f)])return;this[_0x3e2034(0x155e)+_0x3e2034(0x4be)]=this[_0x3e2034(0xe4f)][_0x3e2034(0x21c)+'dowScaleX'](),this[_0x3e2034(0x155e)+_0x3e2034(0xa6a)]=this['_battler'][_0x3e2034(0x21c)+'dowScaleY']();},Game_BattlerBase['prototype'][_0x4258d1(0x21c)+'dowScaleX']=function(){const _0x124b48=_0x4258d1,_0x5ddcf2={'OPmYv':function(_0x1b8376,_0x44790f){return _0x1b8376*_0x44790f;},'pgcuf':function(_0x477150,_0x59aec4){return _0x477150(_0x59aec4);},'gugwt':function(_0x221ffa,_0x50f7ab){return _0x221ffa(_0x50f7ab);}},_0x488c68=this[_0x124b48(0x1580)]()?this['actor']():this['enemy']();if(_0x488c68){const _0x30f728=_0x488c68[_0x124b48(0x278)];if(_0x30f728['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x5ddcf2[_0x124b48(0xe96)](_0x5ddcf2[_0x124b48(0x830)](Number,RegExp['$1']),-0x13fb+-0x2d1*0x5+0x2210+0.01);else{if(_0x30f728[_0x124b48(0x79c)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x5ddcf2[_0x124b48(0xc2c)](Number,RegExp['$1'])||0x98*0x10+0x955*-0x2+0x92a;}}return 0x8fb+-0x1*0x154+-0x7a6;},Game_BattlerBase['prototype'][_0x4258d1(0x21c)+_0x4258d1(0x831)]=function(){const _0x4ed4f2=_0x4258d1,_0x20865d={'AHKef':function(_0x2c370f,_0x12fd4a){return _0x2c370f*_0x12fd4a;},'zGXUn':function(_0x3e37b3,_0x6633b7){return _0x3e37b3(_0x6633b7);},'nLJEl':function(_0x1ed042,_0x1a9ca0){return _0x1ed042(_0x1a9ca0);}},_0x1e302b=this[_0x4ed4f2(0x1580)]()?this[_0x4ed4f2(0xd12)]():this['enemy']();if(_0x1e302b){const _0x4b3f10=_0x1e302b['note'];if(_0x4b3f10[_0x4ed4f2(0x79c)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x20865d['AHKef'](_0x20865d[_0x4ed4f2(0x1553)](Number,RegExp['$1']),-0x1c6d*-0x1+-0x8e5+-0x1388+0.01);else{if(_0x4b3f10[_0x4ed4f2(0x79c)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x20865d[_0x4ed4f2(0x16b7)](Number,RegExp['$1'])||0x1417+0x1*0xe9b+-0x22b2;}}return-0x995+-0x5*-0x3be+-0x124*0x8;},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x328)+'e']=function(){const _0x1aefc3=_0x4258d1,_0x33916e={'wYcyr':function(_0x28fe8f,_0x5f0bda){return _0x28fe8f===_0x5f0bda;}};if(_0x33916e['wYcyr'](this[_0x1aefc3(0xcab)+'r'],Sprite_SvEnemy))return;this['updateGrow'](),this[_0x1aefc3(0x1009)+_0x1aefc3(0xeb1)]();},Sprite_Battler['prototype'][_0x4258d1(0x1009)+_0x4258d1(0xeb1)]=function(){const _0x5aebc4=_0x4258d1,_0x198bed=this['_distortio'+'nSprite'];_0x198bed&&(_0x198bed['scale']['x']=this[_0x5aebc4(0x10f3)+_0x5aebc4(0x122a)](),_0x198bed[_0x5aebc4(0xfcb)]['y']=this[_0x5aebc4(0x10f3)+'ScaleY']());},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x10f3)+_0x4258d1(0x122a)]=function(){const _0x33a9b8=_0x4258d1;let _0x4ca9d9=-0xbb0+-0x21c3+0x4*0xb5d;return _0x4ca9d9*=this[_0x33a9b8(0x9fe)+'X'],_0x4ca9d9*=this[_0x33a9b8(0xd86)],_0x4ca9d9;},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x10f3)+_0x4258d1(0x2ef)]=function(){const _0x51f26d=_0x4258d1,_0x4c4118={'kdisU':function(_0x112982,_0x53f88b){return _0x112982*_0x53f88b;}};return _0x4c4118[_0x51f26d(0x13bd)](0x21*0x96+0x1c9e+-0x2ff3*0x1,this[_0x51f26d(0x1537)]);},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x10f3)+_0x4258d1(0x22c)]=function(){const _0xe63c4e=_0x4258d1,_0x3797d0={'xfXVz':function(_0x16af61,_0x44f7da){return _0x16af61*_0x44f7da;}};return _0x3797d0[_0xe63c4e(0x9c1)](this[_0xe63c4e(0xc2a)],this[_0xe63c4e(0x10f3)+_0xe63c4e(0x122a)]());},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x10f3)+_0x4258d1(0x156a)]=function(){const _0x577624=_0x4258d1,_0x1682bd={'xjkqB':function(_0x357f7f,_0x4ee2ff){return _0x357f7f*_0x4ee2ff;}};return _0x1682bd[_0x577624(0x11bf)](this[_0x577624(0x1594)],this[_0x577624(0x10f3)+_0x577624(0x2ef)]());},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x7c5)]=function(_0x2cda66,_0x1c573f,_0x2c60f0,_0x891b93){const _0x437e26=_0x4258d1,_0x24972f={'upuwq':_0x437e26(0x3f9)+_0x437e26(0x88b),'xwixn':function(_0x429309,_0x52f0ad){return _0x429309<=_0x52f0ad;},'OqcXW':function(_0x3e3ac7,_0x1f9e36){return _0x3e3ac7||_0x1f9e36;},'LLhKv':_0x437e26(0x12b7),'UpAPK':function(_0x41102b,_0x31d5e7){return _0x41102b===_0x31d5e7;}},_0x24751c=_0x24972f[_0x437e26(0xbf1)][_0x437e26(0xba9)]('|');let _0xb3874b=0x4d*0x4d+-0x26e9+0xfc0;while(!![]){switch(_0x24751c[_0xb3874b++]){case'0':if(!this[_0x437e26(0x16ad)]())return;continue;case'1':this[_0x437e26(0x4ab)+'wY']=_0x1c573f;continue;case'2':_0x24972f[_0x437e26(0x1390)](_0x2c60f0,0x1a16+0x18ce+-0x32e4)&&(this['_growX']=this[_0x437e26(0x4ab)+'wX'],this[_0x437e26(0x1537)]=this['_targetGro'+'wY']);continue;case'3':this[_0x437e26(0x96f)+'ion']=_0x2c60f0;continue;case'4':if(!this[_0x437e26(0x1208)+_0x437e26(0x72b)])return;continue;case'5':this[_0x437e26(0x850)+'g']=_0x24972f[_0x437e26(0x42d)](_0x891b93,_0x24972f[_0x437e26(0x1637)]);continue;case'6':if(_0x24972f[_0x437e26(0xf83)](this[_0x437e26(0x4ab)+'wX'],_0x2cda66)&&_0x24972f[_0x437e26(0xf83)](this[_0x437e26(0x4ab)+'wY'],_0x1c573f))return;continue;case'7':this['_targetGro'+'wX']=_0x2cda66;continue;case'8':this[_0x437e26(0x356)+_0x437e26(0x3c1)]=_0x2c60f0;continue;}break;}},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x9cc)]=function(){const _0x11b427=_0x4258d1,_0x18455d={'tWzVo':function(_0x309e76,_0x29c6c7){return _0x309e76<=_0x29c6c7;},'HUxqS':function(_0x211bc0,_0x1f7fa1){return _0x211bc0/_0x1f7fa1;},'aQqCv':function(_0x4e6a99,_0x165f88){return _0x4e6a99+_0x165f88;},'ISGuh':function(_0x52b195,_0x38bcbe){return _0x52b195*_0x38bcbe;},'lSFbn':function(_0x377c68,_0x120b0f){return _0x377c68-_0x120b0f;},'BKUHI':function(_0x2bb84,_0x272996){return _0x2bb84+_0x272996;}};if(_0x18455d[_0x11b427(0xa2a)](this[_0x11b427(0x96f)+_0x11b427(0x1485)],0x73+-0x5d5*0x2+0xb37*0x1))return;if(!this[_0x11b427(0x1208)+'nSprite'])return;const _0x1e2c13=this[_0x11b427(0x96f)+_0x11b427(0x1485)],_0x1542c8=this['_growWhole'+'Duration'],_0xc3d650=this['_growEasin'+'g'];Imported[_0x11b427(0x7d7)+_0x11b427(0x138e)]?(this['_growX']=this[_0x11b427(0x1664)+'g'](this[_0x11b427(0xd86)],this[_0x11b427(0x4ab)+'wX'],_0x1e2c13,_0x1542c8,_0xc3d650),this[_0x11b427(0x1537)]=this[_0x11b427(0x1664)+'g'](this[_0x11b427(0x1537)],this[_0x11b427(0x4ab)+'wY'],_0x1e2c13,_0x1542c8,_0xc3d650)):(this[_0x11b427(0xd86)]=_0x18455d[_0x11b427(0x1d1)](_0x18455d[_0x11b427(0xb18)](_0x18455d[_0x11b427(0x6ac)](this[_0x11b427(0xd86)],_0x18455d[_0x11b427(0x11e5)](_0x1e2c13,0xe39+0x2ad*0x8+-0x23a0)),this[_0x11b427(0x4ab)+'wX']),_0x1e2c13),this[_0x11b427(0x1537)]=_0x18455d['HUxqS'](_0x18455d[_0x11b427(0xe5f)](_0x18455d['ISGuh'](this[_0x11b427(0x1537)],_0x18455d[_0x11b427(0x11e5)](_0x1e2c13,-0x3b*0x50+0x1418+-0x1a7)),this[_0x11b427(0x4ab)+'wY']),_0x1e2c13));this[_0x11b427(0x96f)+'ion']--;if(_0x18455d[_0x11b427(0xa2a)](this[_0x11b427(0x96f)+_0x11b427(0x1485)],-0x1*0x22d+-0x1fe9+0x2216))this[_0x11b427(0x168b)]();},Sprite_Battler['prototype']['onGrowEnd']=function(){const _0x297800=_0x4258d1;this[_0x297800(0xd86)]=this['_targetGro'+'wX'],this['_growY']=this[_0x297800(0x4ab)+'wY'];},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0xb06)]=function(){const _0x5b24af=_0x4258d1,_0xd15b65={'rQQRu':function(_0x409885,_0x11bcb2){return _0x409885>_0x11bcb2;}};return _0xd15b65[_0x5b24af(0xf0a)](this[_0x5b24af(0x96f)+_0x5b24af(0x1485)],0x7a*0x2f+0x19a9+0x9*-0x557);},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x569)]=function(_0x34f376,_0x12cf1c,_0x279463,_0x4107cb){const _0x5ad8a8=_0x4258d1,_0xf0222e={'ilgdM':_0x5ad8a8(0x9b0)+'0|2|5|6','Ymgbn':function(_0x2cfd7d,_0x13402e){return _0x2cfd7d||_0x13402e;},'orfpg':_0x5ad8a8(0x12b7),'wzwzo':function(_0x26e06e,_0x10a11c){return _0x26e06e<=_0x10a11c;},'QviPd':function(_0x111438,_0x1e38c5){return _0x111438===_0x1e38c5;},'cJHTu':function(_0x6e076e,_0x522da9){return _0x6e076e===_0x522da9;}},_0x28f8c1=_0xf0222e['ilgdM'][_0x5ad8a8(0xba9)]('|');let _0x45161e=0x1a09+-0x1d80+0x377;while(!![]){switch(_0x28f8c1[_0x45161e++]){case'0':this['_skewDurat'+_0x5ad8a8(0x1485)]=_0x279463;continue;case'1':if(!this['canMove']())return;continue;case'2':this[_0x5ad8a8(0x9af)+'Duration']=_0x279463;continue;case'3':this[_0x5ad8a8(0x909)+'wY']=_0x12cf1c;continue;case'4':if(!this['_distortio'+'nSprite'])return;continue;case'5':this[_0x5ad8a8(0x566)+'g']=_0xf0222e[_0x5ad8a8(0xb20)](_0x4107cb,_0xf0222e[_0x5ad8a8(0x10a4)]);continue;case'6':_0xf0222e[_0x5ad8a8(0x8f5)](_0x279463,-0x6b9*-0x1+-0x60d+0x1*-0xac)&&(this[_0x5ad8a8(0x1208)+_0x5ad8a8(0x72b)][_0x5ad8a8(0x1310)]['x']=this['_targetSke'+'wX'],this[_0x5ad8a8(0x1208)+_0x5ad8a8(0x72b)]['skew']['y']=this['_targetSke'+'wY']);continue;case'7':this['_targetSke'+'wX']=_0x34f376;continue;case'8':if(_0xf0222e['QviPd'](this['_targetSke'+'wX'],_0x34f376)&&_0xf0222e[_0x5ad8a8(0xcf7)](this['_targetSke'+'wY'],_0x12cf1c))return;continue;}break;}},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x1ac)]=function(){const _0x3eee37=_0x4258d1,_0x42f00a={'ubVME':function(_0x36a122,_0x5df171){return _0x36a122<=_0x5df171;},'XneOn':function(_0x556a1c,_0x4e79a7){return _0x556a1c/_0x4e79a7;},'lPYnO':function(_0x3d5616,_0x535942){return _0x3d5616+_0x535942;},'TPgpG':function(_0x9bfdf0,_0x2e5bd){return _0x9bfdf0*_0x2e5bd;},'klkhl':function(_0x9bd823,_0x533272){return _0x9bd823-_0x533272;},'VjIAE':function(_0x45e561,_0x515191){return _0x45e561/_0x515191;},'rDVnJ':function(_0x3ae7d9,_0x145fff){return _0x3ae7d9+_0x145fff;},'rrIQE':function(_0x348594,_0xf95cfa){return _0x348594*_0xf95cfa;}};if(_0x42f00a[_0x3eee37(0x8f7)](this[_0x3eee37(0x14d4)+_0x3eee37(0x1485)],-0x1e77+0xa79+0x13fe))return;if(!this[_0x3eee37(0x1208)+_0x3eee37(0x72b)])return;const _0x2d31a6=this[_0x3eee37(0x14d4)+_0x3eee37(0x1485)],_0x59fce0=this[_0x3eee37(0x9af)+_0x3eee37(0x3c1)],_0x19d306=this[_0x3eee37(0x566)+'g'],_0x428729=this[_0x3eee37(0x1208)+_0x3eee37(0x72b)];Imported['VisuMZ_0_C'+_0x3eee37(0x138e)]?(_0x428729[_0x3eee37(0x1310)]['x']=this['applyEasin'+'g'](_0x428729[_0x3eee37(0x1310)]['x'],this[_0x3eee37(0x909)+'wX'],_0x2d31a6,_0x59fce0,_0x19d306),_0x428729[_0x3eee37(0x1310)]['y']=this[_0x3eee37(0x1664)+'g'](_0x428729[_0x3eee37(0x1310)]['y'],this[_0x3eee37(0x909)+'wY'],_0x2d31a6,_0x59fce0,_0x19d306)):(_0x428729[_0x3eee37(0x1310)]['x']=_0x42f00a[_0x3eee37(0x8bd)](_0x42f00a[_0x3eee37(0xd39)](_0x42f00a[_0x3eee37(0xa67)](_0x428729[_0x3eee37(0x1310)]['x'],_0x42f00a[_0x3eee37(0x1da)](_0x2d31a6,-0x47f*0x1+0x59*-0x5b+0x2423)),this[_0x3eee37(0x909)+'wX']),_0x2d31a6),_0x428729['skew']['y']=_0x42f00a[_0x3eee37(0xeea)](_0x42f00a[_0x3eee37(0x70a)](_0x42f00a[_0x3eee37(0x494)](_0x428729['skew']['y'],_0x42f00a[_0x3eee37(0x1da)](_0x2d31a6,0xdb+0x1f29+-0x2003)),this[_0x3eee37(0x909)+'wY']),_0x2d31a6));this[_0x3eee37(0x14d4)+_0x3eee37(0x1485)]--;if(_0x42f00a[_0x3eee37(0x8f7)](this[_0x3eee37(0x14d4)+'ion'],0x263*-0x5+0x2*-0x623+0x1835))this[_0x3eee37(0x1655)]();},Sprite_Battler[_0x4258d1(0xf38)]['onSkewEnd']=function(){const _0xd82b04=_0x4258d1;this[_0xd82b04(0x1208)+_0xd82b04(0x72b)][_0xd82b04(0x1310)]['x']=this[_0xd82b04(0x909)+'wX'],this[_0xd82b04(0x1208)+_0xd82b04(0x72b)]['skew']['y']=this[_0xd82b04(0x909)+'wY'];},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x12a7)]=function(){const _0x4613a6=_0x4258d1,_0x3d5a52={'QReKJ':function(_0x575bf1,_0xacab38){return _0x575bf1>_0xacab38;}};return _0x3d5a52['QReKJ'](this[_0x4613a6(0x14d4)+'ion'],0x2610+-0x1*-0x225b+-0x486b);},Sprite_Battler['prototype'][_0x4258d1(0x4d1)]=function(_0xafc346,_0x5d7d1d,_0x356efe,_0x55b0bb){const _0xceae17=_0x4258d1,_0x2a6a43={'SYdKq':_0xceae17(0x133d)+_0xceae17(0x1585),'AaSwD':function(_0x11a887,_0x3aec59){return _0x11a887<=_0x3aec59;},'UoGcU':function(_0x246991,_0x4cc3c1){return _0x246991||_0x4cc3c1;},'CLMUq':_0xceae17(0x12b7),'htcSX':function(_0x5c9ece,_0xf09ccd){return _0x5c9ece===_0xf09ccd;},'NzReH':function(_0x32cc37,_0x252d2c){return _0x32cc37===_0x252d2c;}},_0x45167e=_0x2a6a43[_0xceae17(0xb84)][_0xceae17(0xba9)]('|');let _0x3111b4=-0xcf7+0x6f2+-0x17*-0x43;while(!![]){switch(_0x45167e[_0x3111b4++]){case'0':this[_0xceae17(0x1a9)+_0xceae17(0x1422)]=_0x5d7d1d;continue;case'1':_0x2a6a43[_0xceae17(0x1378)](_0x5d7d1d,-0x36a*0x4+0x5*-0x9e+0x10be)&&(this['_currentAn'+_0xceae17(0xfd1)]=_0xafc346,this['_angleReve'+_0xceae17(0x121c)]&&(this[_0xceae17(0x11e0)+'le']=0x2*0xae5+0x12ce+-0x513*0x8,this[_0xceae17(0x130d)+_0xceae17(0xfd1)]=-0x72*0x38+-0x186a+0x315a));continue;case'2':this[_0xceae17(0xe29)+'ng']=_0x2a6a43[_0xceae17(0xe4d)](_0x356efe,_0x2a6a43['CLMUq']);continue;case'3':this['_angleReve'+_0xceae17(0x121c)]=_0x55b0bb;continue;case'4':if(!this[_0xceae17(0x1208)+_0xceae17(0x72b)])return;continue;case'5':this[_0xceae17(0x11e0)+'le']=_0xafc346;continue;case'6':this[_0xceae17(0x1021)+_0xceae17(0x940)]=_0x5d7d1d;continue;case'7':_0x2a6a43[_0xceae17(0x254)](this[_0xceae17(0x581)+_0xceae17(0x121c)],undefined)&&(this[_0xceae17(0x581)+_0xceae17(0x121c)]=!![]);continue;case'8':if(_0x2a6a43[_0xceae17(0x8d9)](this[_0xceae17(0x11e0)+'le'],_0xafc346))return;continue;case'9':if(!this[_0xceae17(0x16ad)]())return;continue;}break;}},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x15ca)]=function(){const _0x3c3b7f=_0x4258d1;this['updateAngl'+_0x3c3b7f(0xa66)+'ons'](),this[_0x3c3b7f(0x1622)+_0x3c3b7f(0xde7)]();},Sprite_Battler['prototype']['updateAngl'+_0x4258d1(0xa66)+_0x4258d1(0x995)]=function(){const _0x51cd99=_0x4258d1,_0x17a532={'jypVO':function(_0xd70138,_0x803ecc){return _0xd70138<=_0x803ecc;},'pgXEf':function(_0x1369e9,_0x23a0b2){return _0x1369e9/_0x23a0b2;},'udKFZ':function(_0x1ef82c,_0x3d62f2){return _0x1ef82c+_0x3d62f2;},'uyTNd':function(_0xb73c5c,_0x352672){return _0xb73c5c*_0x352672;},'MTaVe':function(_0x4a0382,_0x1a34f7){return _0x4a0382-_0x1a34f7;},'Ypfdi':function(_0x399187,_0x5e0631){return _0x399187<=_0x5e0631;}};if(_0x17a532[_0x51cd99(0x1101)](this[_0x51cd99(0x1021)+_0x51cd99(0x940)],-0x86c+0xcb1+0x1*-0x445))return;const _0xae0fa1=this[_0x51cd99(0x1021)+_0x51cd99(0x940)],_0x1feea1=this['_angleWhol'+_0x51cd99(0x1422)],_0x1c312c=this[_0x51cd99(0xe29)+'ng'];Imported[_0x51cd99(0x7d7)+_0x51cd99(0x138e)]?this['_currentAn'+_0x51cd99(0xfd1)]=this[_0x51cd99(0x1664)+'g'](this[_0x51cd99(0x130d)+_0x51cd99(0xfd1)],this[_0x51cd99(0x11e0)+'le'],_0xae0fa1,_0x1feea1,_0x1c312c):this[_0x51cd99(0x130d)+_0x51cd99(0xfd1)]=_0x17a532[_0x51cd99(0x1027)](_0x17a532[_0x51cd99(0x111f)](_0x17a532[_0x51cd99(0x1519)](this[_0x51cd99(0x130d)+_0x51cd99(0xfd1)],_0x17a532[_0x51cd99(0x5ec)](_0xae0fa1,0x16ed*0x1+-0x269*0xb+0x397*0x1)),this[_0x51cd99(0x11e0)+'le']),_0xae0fa1);this[_0x51cd99(0x1021)+_0x51cd99(0x940)]--;if(_0x17a532[_0x51cd99(0x138f)](this[_0x51cd99(0x1021)+'tion'],0x161*0x13+-0xf62+-0x39b*0x3))this[_0x51cd99(0xaa1)]();},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0xaa1)]=function(){const _0x14ab7f=_0x4258d1;this[_0x14ab7f(0x130d)+_0x14ab7f(0xfd1)]=this[_0x14ab7f(0x11e0)+'le'],this[_0x14ab7f(0x581)+_0x14ab7f(0x121c)]&&(this['_targetAng'+'le']=0x2*0x16+-0x23db+0x1*0x23af,this[_0x14ab7f(0x130d)+'gle']=0x6*-0x1e7+0xa4d*-0x1+0x15b7);},Sprite_Battler[_0x4258d1(0xf38)]['isSpinning']=function(){const _0x55a6e5=_0x4258d1,_0x2096b5={'eoGnA':function(_0x42569c,_0xbf2de0){return _0x42569c>_0xbf2de0;}};return _0x2096b5[_0x55a6e5(0xb87)](this[_0x55a6e5(0x1021)+'tion'],0x2582+-0x2546+-0x1e*0x2);},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x1622)+'Change']=function(){const _0x3b3805=_0x4258d1,_0x34ee71={'ByHor':function(_0x395c1d,_0xddaa61){return _0x395c1d*_0xddaa61;},'MpbLA':function(_0x2a9b8b,_0x58933f){return _0x2a9b8b*_0x58933f;},'yHtSd':function(_0x4a031d,_0x55ade4){return _0x4a031d*_0x55ade4;},'ZpBKk':function(_0x485df8,_0x45053e){return _0x485df8-_0x45053e;},'LJLMs':function(_0x1234e6,_0x2bdbbc){return _0x1234e6*_0x2bdbbc;}};if(!this['_distortio'+_0x3b3805(0x72b)])return;const _0x2faad7=this[_0x3b3805(0x130d)+'gle'],_0x4f81dd=this[_0x3b3805(0xfcb)]['x'],_0x3c3a55=this[_0x3b3805(0xe4f)][_0x3b3805(0x1580)]()?-(0x13*0x61+0x27+-0x759):-0x163f+0x65b+0xfe5*0x1;this[_0x3b3805(0x1208)+_0x3b3805(0x72b)][_0x3b3805(0x1687)]=_0x34ee71[_0x3b3805(0x61c)](_0x34ee71[_0x3b3805(0x43c)](_0x2faad7,_0x4f81dd),_0x3c3a55);const _0x52f16f=this['_distortio'+'nSprite']['scale']['y'];this[_0x3b3805(0x1208)+_0x3b3805(0x72b)]['y']=_0x34ee71[_0x3b3805(0x141c)](_0x34ee71[_0x3b3805(0x61c)](this['height'],-(0x1382+-0x267+-0x1d*0x97+0.5)),_0x34ee71[_0x3b3805(0x626)](0x81f+-0x2*0x1363+0x1ea9,_0x52f16f)),this[_0x3b3805(0x1208)+_0x3b3805(0x72b)]['y']=Math[_0x3b3805(0x438)](this[_0x3b3805(0x1208)+_0x3b3805(0x72b)]['y']);const _0x5ef104=[this[_0x3b3805(0x125a)+'e'],this['_svBattler'+_0x3b3805(0x594)],this[_0x3b3805(0x158a)+_0x3b3805(0x214)+'ntainer']];for(const _0x3e7f80 of _0x5ef104){if(!_0x3e7f80)continue;_0x3e7f80['y']=_0x34ee71['MpbLA'](this['height'],0x12cb+-0x1817+0x54c+0.5);}this[_0x3b3805(0xec0)+'ite']&&(this[_0x3b3805(0x155e)+_0x3b3805(0x4be)]=this[_0x3b3805(0x155e)+_0x3b3805(0x4be)]??-0x15fa+0x1*-0x15eb+-0x1*-0x2be6,this[_0x3b3805(0x155e)+_0x3b3805(0xa6a)]=this[_0x3b3805(0x155e)+_0x3b3805(0xa6a)]??0x8*-0x189+0x8cd+-0x2*-0x1be,this['_shadowSpr'+_0x3b3805(0xdba)][_0x3b3805(0xfcb)]['x']=_0x34ee71['LJLMs'](this[_0x3b3805(0x1208)+_0x3b3805(0x72b)]['scale']['x'],this['_shadowSca'+_0x3b3805(0x4be)]),this['_shadowSpr'+'ite'][_0x3b3805(0xfcb)]['y']=_0x34ee71[_0x3b3805(0x1087)](this[_0x3b3805(0x1208)+_0x3b3805(0x72b)][_0x3b3805(0xfcb)]['y'],this[_0x3b3805(0x155e)+_0x3b3805(0xa6a)]));},VisuMZ[_0x4258d1(0x337)]['Sprite_Act'+_0x4258d1(0x1242)+_0x4258d1(0xdbe)]=Sprite_Actor[_0x4258d1(0xf38)]['createStat'+'eSprite'],Sprite_Actor['prototype'][_0x4258d1(0xac8)+_0x4258d1(0x14fb)]=function(){const _0x11811b=_0x4258d1;VisuMZ[_0x11811b(0x337)][_0x11811b(0x52b)+_0x11811b(0x1242)+_0x11811b(0xdbe)]['call'](this),VisuMZ[_0x11811b(0x337)][_0x11811b(0x424)][_0x11811b(0x428)]['ShowActorG'+_0x11811b(0x146b)]&&this[_0x11811b(0x113f)+_0x11811b(0xbb2)]();},VisuMZ['BattleCore']['Sprite_Ene'+'my_createS'+_0x4258d1(0x1463)+_0x4258d1(0x2af)]=Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0xac8)+'eIconSprit'+'e'],Sprite_Enemy['prototype']['createStat'+_0x4258d1(0x1193)+'e']=function(){const _0x246a7f=_0x4258d1;VisuMZ[_0x246a7f(0x337)][_0x246a7f(0x424)]['HpGauge'][_0x246a7f(0x1572)+_0x246a7f(0x146b)]&&this[_0x246a7f(0x113f)+_0x246a7f(0xbb2)](),VisuMZ[_0x246a7f(0x337)][_0x246a7f(0xbd1)+'my_createS'+'tateIconSp'+'rite'][_0x246a7f(0xb14)](this);},Sprite_Battler['prototype'][_0x4258d1(0x113f)+'ugeSprite']=function(){const _0x46adf8=_0x4258d1,_0x2d09f7={'HjOdn':function(_0x4a8985,_0x39a22f){return _0x4a8985===_0x39a22f;}};if(!ConfigManager[_0x46adf8(0xc1f)+_0x46adf8(0xe6d)])return;if(_0x2d09f7[_0x46adf8(0x14ea)](this['constructo'+'r'],Sprite_SvEnemy))return;const _0x4c1bd6=VisuMZ[_0x46adf8(0x337)][_0x46adf8(0x424)][_0x46adf8(0x428)],_0x313800=new Sprite_HpGauge();_0x313800[_0x46adf8(0x12af)]['x']=_0x4c1bd6[_0x46adf8(0x24b)],_0x313800['anchor']['y']=_0x4c1bd6['AnchorY'],_0x313800[_0x46adf8(0xfcb)]['x']=_0x313800[_0x46adf8(0xfcb)]['y']=_0x4c1bd6[_0x46adf8(0xa59)],this[_0x46adf8(0x1072)+_0x46adf8(0x2af)]=_0x313800,this[_0x46adf8(0xd0b)](this[_0x46adf8(0x1072)+_0x46adf8(0x2af)]),Spriteset_Battle[_0x46adf8(0xdf9)+'UI']&&BattleManager[_0x46adf8(0x1593)+_0x46adf8(0x2ad)+'r'](this[_0x46adf8(0x1072)+_0x46adf8(0x2af)]);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x527)+_0x4258d1(0x367)+'ttler']=Sprite_Battler['prototype'][_0x4258d1(0xae9)],Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0xae9)]=function(_0x124cca){const _0xf0cd13=_0x4258d1,_0x1dd480={'asIfO':function(_0x4abe94,_0x204537){return _0x4abe94!==_0x204537;}},_0x1f902f=this[_0xf0cd13(0xe4f)];VisuMZ[_0xf0cd13(0x337)][_0xf0cd13(0x527)+_0xf0cd13(0x367)+_0xf0cd13(0x355)][_0xf0cd13(0xb14)](this,_0x124cca),this[_0xf0cd13(0x40d)+_0xf0cd13(0x864)](_0x124cca);if(_0x1dd480[_0xf0cd13(0xdc9)](_0x1f902f,_0x124cca))this['updateShad'+_0xf0cd13(0x13ef)]();},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x40d)+_0x4258d1(0x864)]=function(_0x30102f){const _0x6bec5a=_0x4258d1,_0x2e9d55={'EEHzt':function(_0x3fe5c6,_0x1c445c){return _0x3fe5c6===_0x1c445c;}};if(!_0x30102f)return;if(!this[_0x6bec5a(0x1072)+_0x6bec5a(0x2af)])return;if(_0x30102f[_0x6bec5a(0x1580)]()){}else{if(_0x30102f[_0x6bec5a(0xaf5)]()){if(_0x2e9d55[_0x6bec5a(0x3b7)](this['constructo'+'r'],Sprite_SvEnemy)&&!_0x30102f[_0x6bec5a(0xb37)+'er']())return;}}this[_0x6bec5a(0x1072)+_0x6bec5a(0x2af)][_0x6bec5a(0xb3e)](_0x30102f,'hp');},Sprite_Battler[_0x4258d1(0xf38)]['hasStaticS'+'vBattler']=function(){const _0x610fac=_0x4258d1;return this['_battler']&&this[_0x610fac(0xe4f)][_0x610fac(0xc8a)+_0x610fac(0x33a)]();},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x822)+_0x4258d1(0x325)+_0x4258d1(0x141d)]=function(){const _0x2d9b7f=_0x4258d1,_0x31480c={'sXeit':function(_0x50e231,_0x5524af){return _0x50e231-_0x5524af;}},_0x18f13c=this[_0x2d9b7f(0x125a)+'e'][_0x2d9b7f(0x5dd)];if(!_0x18f13c)return;const _0x3c5eb2=_0x18f13c[_0x2d9b7f(0xc2a)];let _0x394c9a=_0x18f13c[_0x2d9b7f(0x1594)];if(this[_0x2d9b7f(0xe4f)][_0x2d9b7f(0xfce)]()){if(this[_0x2d9b7f(0x743)])_0x394c9a=Math[_0x2d9b7f(0x503)](0x1*-0xffb+-0x3*-0x3a6+-0x1*-0x509,_0x31480c[_0x2d9b7f(0x1f6)](this[_0x2d9b7f(0x743)][_0x2d9b7f(0x1594)],-0x1a14+0x1cf9+-0x2e1));}this[_0x2d9b7f(0x125a)+'e'][_0x2d9b7f(0xfc6)](-0xbef+0x6a7+0x548,0x2ea*-0x9+0x24fc+0x12*-0x99,_0x3c5eb2,_0x394c9a),this[_0x2d9b7f(0xfc6)](-0x14f3+0x1e66*-0x1+-0x37*-0xef,0x78*-0x50+-0xc5*-0x1+0x24bb,_0x3c5eb2,_0x394c9a);},Sprite_Battler['prototype'][_0x4258d1(0x7c3)+'ugePositio'+'n']=function(){const _0x3005fd=_0x4258d1,_0x227316={'sEESH':function(_0x56e298,_0x57b7c9){return _0x56e298+_0x57b7c9;}};if(!this[_0x3005fd(0xe4f)])return;if(!this['_hpGaugeSp'+_0x3005fd(0x2af)])return;const _0x404adf=VisuMZ[_0x3005fd(0x337)][_0x3005fd(0x424)]['HpGauge'],_0x5d8293=this[_0x3005fd(0x1072)+_0x3005fd(0x2af)];_0x5d8293[_0x3005fd(0x13af)]=this[_0x3005fd(0x1381)+_0x3005fd(0x680)+_0x3005fd(0x12bc)]();const _0x1a6add=_0x404adf['OffsetX'],_0x544726=_0x404adf[_0x3005fd(0x114e)];_0x5d8293['x']=_0x1a6add,_0x5d8293['x']+=this[_0x3005fd(0xe4f)][_0x3005fd(0xdd9)+_0x3005fd(0x5e5)](),_0x5d8293['y']=_0x227316[_0x3005fd(0x16b1)](-this[_0x3005fd(0x1594)],_0x544726),_0x5d8293['y']+=this[_0x3005fd(0xe4f)]['battleUIOf'+_0x3005fd(0xd6c)](),Spriteset_Battle[_0x3005fd(0xdf9)+'UI']&&SceneManager[_0x3005fd(0x14b3)][_0x3005fd(0x1b3)]&&(_0x5d8293['x']+=this['x'],_0x5d8293['y']+=this['y']);},Sprite_Battler['prototype'][_0x4258d1(0x1381)+_0x4258d1(0x680)+_0x4258d1(0x12bc)]=function(){const _0x53ce23=_0x4258d1,_0x3d54f3={'HWhmb':function(_0x4f210d,_0x39c272){return _0x4f210d<=_0x39c272;}};if(!this['_battler'])return![];if(this['_battler']['isActor']())return!![];if(this[_0x53ce23(0xe4f)][_0x53ce23(0x1022)]())return![];if(_0x3d54f3[_0x53ce23(0x10b0)](this['opacity'],0x24ff+0x1fc+-0x26fb))return![];const _0x39e2f9=this[_0x53ce23(0xe4f)]['enemy']()[_0x53ce23(0x278)];if(_0x39e2f9[_0x53ce23(0x79c)](/<SHOW HP GAUGE>/i))return!![];if(_0x39e2f9[_0x53ce23(0x79c)](/<HIDE HP GAUGE>/i))return![];const _0x19ebb6=VisuMZ[_0x53ce23(0x337)][_0x53ce23(0x424)][_0x53ce23(0x428)];if(_0x19ebb6['RequiresDe'+_0x53ce23(0x4f7)]){if(_0x19ebb6[_0x53ce23(0x140a)+'s']&&BattleManager['isBattleTe'+'st']())return!![];if(this[_0x53ce23(0xe4f)][_0x53ce23(0x11ca)+_0x53ce23(0x150e)+_0x53ce23(0x5b4)])return![];return this[_0x53ce23(0xe4f)][_0x53ce23(0x748)+_0x53ce23(0x38c)+'e']();}return!![];},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x527)+_0x4258d1(0x575)+'ing']=Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x7db)],Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x7db)]=function(){const _0x2c9360=_0x4258d1,_0x27aef9={'wZNiq':function(_0x90db32,_0x466f79){return _0x90db32>_0x466f79;}};if(!this[_0x2c9360(0xe4f)])return![];if(_0x27aef9['wZNiq'](this[_0x2c9360(0xaa7)+_0x2c9360(0x1485)],0xdf5+-0x1027+-0x2*-0x119))return!![];return VisuMZ[_0x2c9360(0x337)][_0x2c9360(0x527)+_0x2c9360(0x575)+_0x2c9360(0x623)]['call'](this);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x527)+_0x4258d1(0x6cd)+_0x4258d1(0xcd2)]=Sprite_Battler[_0x4258d1(0xf38)]['startMove'],Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0xace)]=function(_0x51d097,_0x1e6488,_0x389595){const _0x4c1667=_0x4258d1;this[_0x4c1667(0x16ad)]()&&VisuMZ[_0x4c1667(0x337)][_0x4c1667(0x527)+_0x4c1667(0x6cd)+_0x4c1667(0xcd2)]['call'](this,_0x51d097,_0x1e6488,_0x389595);},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x16ad)]=function(){const _0x25fbed=_0x4258d1;if(this[_0x25fbed(0xe4f)]&&this['_battler'][_0x25fbed(0xfce)]())return![];if(this['_battler']&&!this['_battler'][_0x25fbed(0xf77)+_0x25fbed(0xcd2)]())return![];return $gameSystem['isSideView']();},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x1061)+'d']=function(){},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0xc39)]=function(){const _0x123070=_0x4258d1;this[_0x123070(0xace)](-0x26ba+-0x1330+0x39ea,0x1bbc+0x239f*0x1+-0x3f5b,0x7*0x189+0x2139+-0x2bec);},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x11c0)]=function(){},Sprite_Battler['prototype'][_0x4258d1(0x11bb)]=function(){const _0x499f02=_0x4258d1,_0xf4e48c={'PkHNc':function(_0x161dbc,_0x36be8b){return _0x161dbc+_0x36be8b;},'wKEVK':function(_0x1d42a1,_0x4973ff){return _0x1d42a1-_0x4973ff;},'IkJxF':function(_0xa8121c,_0x201a87){return _0xa8121c*_0x201a87;},'czOBI':function(_0x2b8669,_0x4369a6){return _0x2b8669-_0x4369a6;},'pNsoh':function(_0x278751,_0x168f21){return _0x278751*_0x168f21;}},_0x369fea=VisuMZ[_0x499f02(0x337)][_0x499f02(0x424)][_0x499f02(0x1224)],_0x335e76=this['_battler']&&this[_0x499f02(0xe4f)][_0x499f02(0x1580)]()?0x1c9d+-0xc23+-0x1079:-(-0x1bf3+-0x2b8*0xb+-0x17*-0x284),_0x1c9292=_0xf4e48c[_0x499f02(0x12e7)](_0xf4e48c['wKEVK'](this[_0x499f02(0x921)],this[_0x499f02(0x6f0)]),_0xf4e48c[_0x499f02(0xd78)](_0x335e76,_0x369fea['FlinchDist'+_0x499f02(0x4a7)])),_0x53b78c=_0xf4e48c[_0x499f02(0x12e7)](_0xf4e48c[_0x499f02(0xa27)](this[_0x499f02(0x1085)],this['_homeY']),_0xf4e48c[_0x499f02(0xebc)](_0x335e76,_0x369fea['FlinchDist'+'anceY'])),_0x2fd20e=_0x369fea['FlinchDura'+_0x499f02(0x940)];this['startMove'](_0x1c9292,_0x53b78c,_0x2fd20e);},Sprite_Battler['prototype']['startShake'+_0x4258d1(0x1e6)]=function(_0x4054f9,_0xccea1b){const _0x122138=_0x4258d1,_0x5f33aa={'mfBvS':function(_0x4bcb0a,_0x47f644){return _0x4bcb0a*_0x47f644;}},_0x1aed3e=VisuMZ['BattleCore'][_0x122138(0x424)]['Actor'];this['_shakeFlin'+_0x122138(0x156f)]=Math[_0x122138(0x438)](_0x5f33aa['mfBvS'](_0x1aed3e['ShakeFlinc'+_0x122138(0x642)]??0x11*0x20e+0x1*0x786+-0x2a5c,_0xccea1b)),this[_0x122138(0x1265)+'chPower']=Math[_0x122138(0x503)](this[_0x122138(0x1265)+_0x122138(0x4bd)],_0x4054f9);},Sprite_Battler[_0x4258d1(0xf38)][_0x4258d1(0x422)+_0x4258d1(0x773)]=function(){const _0x1a9a39=_0x4258d1,_0x5d4728={'BKJwb':function(_0x3108d3,_0x58bd2a){return _0x3108d3>_0x58bd2a;},'BRgSD':function(_0x5c9e16,_0xe07230){return _0x5c9e16/_0xe07230;},'WYBtb':function(_0x4cdccb,_0x3c95e7){return _0x4cdccb*_0x3c95e7;},'BxDGy':function(_0x37caea,_0x4bb26b){return _0x37caea-_0x4bb26b;},'rbYLH':function(_0x261fc3,_0x5e16fe){return _0x261fc3<=_0x5e16fe;},'YULMj':function(_0x18e8da,_0x324724){return _0x18e8da*_0x324724;},'uuerc':function(_0x52031d,_0x576a9f){return _0x52031d<_0x576a9f;},'zfjjx':function(_0x154e30,_0x3a339e){return _0x154e30!==_0x3a339e;},'OfHmG':function(_0x123a37,_0x1a8b39){return _0x123a37*_0x1a8b39;},'IdTHu':function(_0x1b0d50,_0x4028d8){return _0x1b0d50<_0x4028d8;}},_0xf2c281=VisuMZ[_0x1a9a39(0x337)][_0x1a9a39(0x424)]['Actor'];if(!(_0xf2c281[_0x1a9a39(0x1628)+'h']??![]))return;if(_0x5d4728[_0x1a9a39(0xde2)](this[_0x1a9a39(0x1265)+_0x1a9a39(0x156f)],0xcc9+-0x1686*0x1+0x9bd)){const _0x500d3a=this[_0x1a9a39(0x1265)+_0x1a9a39(0x156f)];this['_shakeFlin'+_0x1a9a39(0x4bd)]=_0x5d4728[_0x1a9a39(0x135b)](_0x5d4728[_0x1a9a39(0xe94)](this[_0x1a9a39(0x1265)+_0x1a9a39(0x4bd)],_0x5d4728[_0x1a9a39(0x89e)](_0x500d3a,0xccd+0x1*-0xff7+0x32b)),_0x500d3a),this[_0x1a9a39(0x1265)+_0x1a9a39(0x156f)]--,_0x5d4728['rbYLH'](this[_0x1a9a39(0x1265)+'chDuration'],-0x4d3*0x2+0x1fe6+0x1*-0x1640)&&(this[_0x1a9a39(0x1265)+_0x1a9a39(0x4bd)]=-0x24b2+0x1*-0x1417+0x38c9*0x1);}_0x5d4728[_0x1a9a39(0xde2)](this[_0x1a9a39(0x1265)+_0x1a9a39(0x4bd)],0x1ac8*0x1+0x2594+-0x405c)?(this[_0x1a9a39(0x125a)+'e']['x']=_0x5d4728['YULMj'](Math[_0x1a9a39(0x154d)](this['_shakeFlin'+'chPower']),_0x5d4728[_0x1a9a39(0xc92)](Math[_0x1a9a39(0x108d)](),-0x489*-0x3+-0xb89*-0x1+-0x1924+0.5)?-(0x1c30+0x1ce7*-0x1+0xb8):0x21ea+0x253c*0x1+-0x4725),_0x5d4728[_0x1a9a39(0x414)](this[_0x1a9a39(0x1085)],this['y'])&&(this[_0x1a9a39(0x125a)+'e']['y']=_0x5d4728[_0x1a9a39(0x7e8)](this[_0x1a9a39(0x1594)],-0x11c0+0x4*-0x820+0x3240+0.5),this[_0x1a9a39(0x125a)+'e']['y']+=_0x5d4728[_0x1a9a39(0x1263)](Math['randomInt'](this['_shakeFlin'+_0x1a9a39(0x4bd)]),_0x5d4728[_0x1a9a39(0xc78)](Math[_0x1a9a39(0x108d)](),-0x11*-0x35+-0x81b+0x24b*0x2+0.5)?-(-0x2ab+-0x5fb*-0x1+-0x34f):-0x15f1+-0x99b+0x29*0xc5))):(this[_0x1a9a39(0x125a)+'e']['x']=-0x16d+0x1*-0xe36+0x1*0xfa3,this[_0x1a9a39(0x125a)+'e']['y']=_0x5d4728['YULMj'](this[_0x1a9a39(0x1594)],0x17a0+-0x10e2*0x2+0x2c*0x3b+0.5));},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x52b)+_0x4258d1(0xb75)+_0x4258d1(0x87c)]=Sprite_Actor['prototype'][_0x4258d1(0x104c)+'s'],Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0x104c)+'s']=function(){const _0x2fe126=_0x4258d1;VisuMZ[_0x2fe126(0x337)][_0x2fe126(0x52b)+_0x2fe126(0xb75)+_0x2fe126(0x87c)][_0x2fe126(0xb14)](this),this[_0x2fe126(0xce0)+_0x2fe126(0xc84)+_0x2fe126(0xdf7)+'e']();},Sprite_Actor[_0x4258d1(0xf38)]['mainSprite']=function(){const _0x659ae7=_0x4258d1;return this[_0x659ae7(0x1208)+_0x659ae7(0x72b)]||this[_0x659ae7(0x125a)+'e']||this;},VisuMZ[_0x4258d1(0x337)]['Sprite_Act'+_0x4258d1(0x7b9)+'tartPositi'+'on']=Sprite_Actor[_0x4258d1(0xf38)]['moveToStar'+_0x4258d1(0xd8a)],Sprite_Actor['prototype'][_0x4258d1(0x58d)+_0x4258d1(0xd8a)]=function(){},Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0x58d)+_0x4258d1(0x12fd)+'attleCore']=function(_0x44221d){const _0x5200f1=_0x4258d1;if(SceneManager['isPrevious'+_0x5200f1(0xfb0)+_0x5200f1(0x9d7)+_0x5200f1(0xf88)]())return;if(!_0x44221d)return;if(!_0x44221d[_0x5200f1(0x16ad)]())return;VisuMZ[_0x5200f1(0x337)]['Sprite_Act'+'or_moveToS'+_0x5200f1(0xb71)+'on'][_0x5200f1(0xb14)](this);},VisuMZ[_0x4258d1(0x337)]['Sprite_Act'+_0x4258d1(0x7b7)+_0x4258d1(0x477)]=Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0x1564)+'me'],Sprite_Actor['prototype'][_0x4258d1(0x1564)+'me']=function(_0x4b494f){const _0x3a3c50=_0x4258d1;VisuMZ[_0x3a3c50(0x337)][_0x3a3c50(0x424)][_0x3a3c50(0x1224)][_0x3a3c50(0x13ec)]?VisuMZ['BattleCore'][_0x3a3c50(0x424)][_0x3a3c50(0x1224)]['HomePosJS']['call'](this,_0x4b494f):VisuMZ[_0x3a3c50(0x337)][_0x3a3c50(0x52b)+_0x3a3c50(0x7b7)+_0x3a3c50(0x477)][_0x3a3c50(0xb14)](this,_0x4b494f);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x52b)+_0x4258d1(0xd2a)+_0x4258d1(0xab7)]=Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0xae9)],Sprite_Actor['prototype'][_0x4258d1(0xae9)]=function(_0x1fa535){const _0x34ca4d=_0x4258d1;VisuMZ['BattleCore'][_0x34ca4d(0x52b)+'or_setBatt'+_0x34ca4d(0xab7)][_0x34ca4d(0xb14)](this,_0x1fa535),this[_0x34ca4d(0xae9)+_0x34ca4d(0x337)](_0x1fa535);},Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0xae9)+'BattleCore']=function(_0x2a5621){const _0xaed05f=_0x4258d1,_0x39f7c6={'kkPbS':_0xaed05f(0xf2c)},_0x3a086e=_0x39f7c6[_0xaed05f(0xce8)]['split']('|');let _0x59cace=0x950+-0x2701+-0x1db1*-0x1;while(!![]){switch(_0x3a086e[_0x59cace++]){case'0':if(!this[_0xaed05f(0x125a)+'e'])return;continue;case'1':this[_0xaed05f(0x125a)+'e'][_0xaed05f(0x12af)]['x']=this[_0xaed05f(0xf9c)]['svBattlerA'+_0xaed05f(0xd37)]();continue;case'2':if(!_0x2a5621)return;continue;case'3':this[_0xaed05f(0x125a)+'e'][_0xaed05f(0x12af)]['y']=this['_actor'][_0xaed05f(0x297)+_0xaed05f(0x8b5)]();continue;case'4':this[_0xaed05f(0xe48)+'owVisibili'+'ty']();continue;}break;}},VisuMZ['BattleCore'][_0x4258d1(0x52b)+_0x4258d1(0x63a)]=Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0x164c)],Sprite_Actor['prototype'][_0x4258d1(0x164c)]=function(){const _0x32609f=_0x4258d1;VisuMZ[_0x32609f(0x337)][_0x32609f(0x52b)+'or_update'][_0x32609f(0xb14)](this),this['_actor']&&(this[_0x32609f(0x822)+_0x32609f(0x14fb)](),this[_0x32609f(0x8e2)+_0x32609f(0x267)]());},VisuMZ['BattleCore'][_0x4258d1(0x52b)+_0x4258d1(0x31f)+'itmap']=Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0x7b1)+'ap'],Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0x7b1)+'ap']=function(){const _0x3b0036=_0x4258d1,_0x72bfdf={'WFbeJ':function(_0x563b72,_0x3c534a){return _0x563b72!==_0x3c534a;}};VisuMZ[_0x3b0036(0x337)][_0x3b0036(0x52b)+_0x3b0036(0x31f)+_0x3b0036(0x12cc)][_0x3b0036(0xb14)](this),this['_mainSprit'+'e']&&this[_0x3b0036(0x125a)+'e']['bitmap']&&this[_0x3b0036(0xe4f)]&&(_0x72bfdf[_0x3b0036(0x968)](this[_0x3b0036(0x125a)+'e'][_0x3b0036(0x5dd)][_0x3b0036(0xa2d)],this['_battler'][_0x3b0036(0x6ab)+_0x3b0036(0x1ec)]())&&(this[_0x3b0036(0x125a)+'e']['bitmap']['smooth']=this[_0x3b0036(0xe4f)]['battlerSmo'+_0x3b0036(0x1ec)]()));},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x52b)+_0x4258d1(0x1125)+'hadow']=Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0xe48)+'ow'],Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0xe48)+'ow']=function(){const _0x361338=_0x4258d1;VisuMZ['BattleCore'][_0x361338(0x52b)+_0x361338(0x1125)+_0x361338(0x1081)][_0x361338(0xb14)](this),this['updateShad'+'owBattleCo'+'re']();},Sprite_Actor['prototype'][_0x4258d1(0xe48)+_0x4258d1(0xc50)+'re']=function(){const _0x10a688=_0x4258d1;if(!this[_0x10a688(0x125a)+'e'])return;if(!this[_0x10a688(0xec0)+_0x10a688(0xdba)])return;this[_0x10a688(0xe48)+_0x10a688(0x9bc)+'ty'](),this[_0x10a688(0xe48)+_0x10a688(0x63b)]();},Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0x822)+_0x4258d1(0x14fb)]=function(){const _0x2be16=_0x4258d1,_0x2e1646={'LuLmD':function(_0x4d7a90,_0x4e03fb){return _0x4d7a90/_0x4e03fb;},'PRvyU':function(_0x44bdfe,_0x54b2e5){return _0x44bdfe+_0x54b2e5;},'Muadv':function(_0x45922e,_0x299d43){return _0x45922e-_0x299d43;}};{this[_0x2be16(0x868)+'te'][_0x2be16(0xfcb)]['x']=_0x2e1646[_0x2be16(0xf07)](0x1309+-0x457*-0x1+0x1f*-0xc1,this[_0x2be16(0xfcb)]['x']||0x1*-0x24bf+0x8*0x118+0x1bff+0.001),this[_0x2be16(0x868)+'te'][_0x2be16(0xfcb)]['y']=_0x2e1646[_0x2be16(0xf07)](-0x88a+-0x3*-0xc97+-0x1d3a,this[_0x2be16(0xfcb)]['y']||0x2ed*-0x1+-0x5da+0x8c7+0.001);}{this[_0x2be16(0x868)+'te']['x']=-0x6b*0xc+-0x6a*0xa+0x928,this[_0x2be16(0x868)+'te']['y']=_0x2e1646[_0x2be16(0xa11)](_0x2e1646[_0x2be16(0xbbe)](-this[_0x2be16(0x1594)],0x12a*0x1+0x1*0x8d1+-0x1d*0x57),0x1c*0x163+0x207f+-0x46f3);const _0x118048=VisuMZ[_0x2be16(0x337)][_0x2be16(0x424)]['Actor'];this[_0x2be16(0x868)+'te']['x']+=_0x118048[_0x2be16(0x10d7)+_0x2be16(0x5d8)]??-0xcce+0x15d*-0x5+-0x1*-0x139f,this[_0x2be16(0x868)+'te']['y']+=_0x118048[_0x2be16(0x10d7)+_0x2be16(0x13b3)]??-0x1*0x1375+-0x1917+0x1646*0x2;}},Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0x8e2)+_0x4258d1(0x267)]=function(){const _0x3a7145=_0x4258d1,_0x372fd9={'htLix':function(_0x7b6b21,_0x4ca8a1){return _0x7b6b21===_0x4ca8a1;},'MvEDR':_0x3a7145(0x1601),'mullC':_0x3a7145(0x7fe),'tWVUL':'portrait','hgpDc':_0x3a7145(0x83c)};if(!$gameSystem[_0x3a7145(0x8df)]()&&_0x372fd9[_0x3a7145(0x138c)](this['constructo'+'r'],Sprite_Actor)){const _0x31a690=Scene_Battle[_0x3a7145(0xf38)][_0x3a7145(0x6d1)+_0x3a7145(0x1100)]();[_0x372fd9[_0x3a7145(0x113a)],_0x372fd9['mullC'],_0x372fd9[_0x3a7145(0x4d2)],_0x372fd9[_0x3a7145(0xe08)]][_0x3a7145(0x163f)](_0x31a690)&&(this[_0x3a7145(0x4c8)]=-0xd*0x17b+-0x11e0+0x251f);}},Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0x885)+_0x4258d1(0x1485)]=function(){const _0x2377a7=_0x4258d1,_0x49ef5a={'mEVph':_0x2377a7(0xddb),'ubrcF':function(_0xacbe00,_0x2823a2){return _0xacbe00===_0x2823a2;},'qAKtr':_0x2377a7(0x3f5),'CIqhA':function(_0x3c02ac,_0x57d121){return _0x3c02ac===_0x57d121;},'ZTQzE':_0x2377a7(0x1152),'nJSmD':_0x2377a7(0x117a),'oWHqn':_0x2377a7(0x58e),'buiuv':'chant','sDYXv':'guard','MYlyo':_0x2377a7(0x1083),'mqpjb':_0x2377a7(0xe55)},_0x2fc24b=this['_actor'];if(_0x2fc24b){if(_0x2fc24b[_0x2377a7(0x11f7)+_0x2377a7(0x1e5)])return;const _0x375dfe=_0x2fc24b[_0x2377a7(0xd26)+_0x2377a7(0xa81)]();if(_0x2fc24b['isInputtin'+'g']()||_0x2fc24b[_0x2377a7(0xa91)]())this['startMotio'+'n'](_0x49ef5a[_0x2377a7(0xa7a)]);else{if(_0x49ef5a[_0x2377a7(0x474)](_0x375dfe,0x2333+0x75*0x2c+-0x374c))this['startMotio'+'n'](_0x49ef5a['qAKtr']);else{if(_0x49ef5a[_0x2377a7(0xb1e)](_0x375dfe,0x9ae+0x1a38+0x8f9*-0x4))this[_0x2377a7(0xd0c)+'n'](_0x49ef5a['ZTQzE']);else{if(this[_0x2377a7(0x836)+_0x2377a7(0x14fb)])this[_0x2377a7(0xd0c)+'n'](_0x49ef5a['nJSmD']);else{if(_0x2fc24b[_0x2377a7(0x78e)]())this['startMotio'+'n'](_0x49ef5a[_0x2377a7(0x926)]);else{if(_0x2fc24b[_0x2377a7(0xc54)]())this['startMotio'+'n'](_0x49ef5a[_0x2377a7(0x293)]);else{if(_0x2fc24b['isGuard']()||_0x2fc24b[_0x2377a7(0xca8)+_0x2377a7(0x973)]())this[_0x2377a7(0xd0c)+'n'](_0x49ef5a[_0x2377a7(0x1623)]);else{if(_0x49ef5a[_0x2377a7(0xb1e)](_0x375dfe,-0x2318*-0x1+-0x26f8+0x14b*0x3))this[_0x2377a7(0xd0c)+'n'](_0x49ef5a[_0x2377a7(0x502)]);else{if(_0x2fc24b[_0x2377a7(0x32c)]())this[_0x2377a7(0xd0c)+'n'](_0x49ef5a[_0x2377a7(0x127d)]);else{if(_0x2fc24b['isUndecide'+'d']())this[_0x2377a7(0xd0c)+'n'](_0x49ef5a['mEVph']);else _0x2fc24b['currentAct'+_0x2377a7(0x1485)]()?this['startMotio'+'n'](_0x49ef5a[_0x2377a7(0x926)]):this[_0x2377a7(0xd0c)+'n'](_0x49ef5a[_0x2377a7(0xa7a)]);}}}}}}}}}}},Sprite_Actor['prototype'][_0x4258d1(0x11c0)]=function(){const _0x5af62d=_0x4258d1,_0x1f500a={'lNptI':function(_0xcca749,_0x426518){return _0xcca749*_0x426518;},'VPmZA':function(_0x47561c,_0x5a3929){return _0x47561c*_0x5a3929;}},_0x452b3d=0x461+-0x226e*0x1+0x1*0x1e17,_0x1049f9=_0x1f500a[_0x5af62d(0x247)](0x166d+0xd9*0x3+-0x17cc,_0x452b3d),_0x53705c=_0x1f500a['VPmZA'](0x23f9+-0x913+0x1*-0x1ac8,_0x452b3d);this[_0x5af62d(0xace)](_0x1049f9,0x4e*-0x12+0x1787+-0x120b,_0x53705c);},Sprite_Actor[_0x4258d1(0xf38)]['onMoveEnd']=function(){const _0x150491=_0x4258d1;Sprite_Battler['prototype'][_0x150491(0x1698)]['call'](this);},Sprite_Actor['prototype'][_0x4258d1(0x621)+'d']=function(){const _0x848798=_0x4258d1;return Sprite_Battler[_0x848798(0x6ca)+'ed'];},Sprite_Weapon['prototype'][_0x4258d1(0x1120)+_0x4258d1(0x2e4)]=function(){const _0xb026d1=_0x4258d1;return Sprite_Battler[_0xb026d1(0x6ca)+'ed'];},Sprite_Actor['prototype']['setupMotio'+'n']=function(){},Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0x98c)+_0x4258d1(0xcc2)]=function(){},Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0x1569)+_0x4258d1(0x61f)]=function(){const _0x9835a7=_0x4258d1,_0x6e47f2={'hTzYX':function(_0x2d1544,_0x280c97){return _0x2d1544>=_0x280c97;},'fuoBJ':function(_0x3957bf,_0x3c098e){return _0x3957bf%_0x3c098e;},'aunFk':function(_0x5392dc,_0x4b66cb){return _0x5392dc+_0x4b66cb;},'euNzc':function(_0x4505ff,_0x5ce376){return _0x4505ff<_0x5ce376;}};if(this['_motion']&&_0x6e47f2[_0x9835a7(0xe1b)](++this[_0x9835a7(0x1345)+'nt'],this[_0x9835a7(0x621)+'d']())){if(this[_0x9835a7(0x1449)][_0x9835a7(0x725)])this[_0x9835a7(0xee3)]=_0x6e47f2[_0x9835a7(0x1aa)](_0x6e47f2[_0x9835a7(0x54d)](this[_0x9835a7(0xee3)],0x23ac+0xc*-0x7f+-0x1*0x1db7),-0x139a+-0x1c7a+0x3018);else{if(_0x6e47f2[_0x9835a7(0x20a)](this[_0x9835a7(0xee3)],-0xe2+-0x1c85+0x1d69))this['_pattern']++;else{const _0x138636=this['_actor'];if(_0x138636)_0x138636[_0x9835a7(0x11f7)+_0x9835a7(0x1e5)]=undefined;this[_0x9835a7(0x885)+_0x9835a7(0x1485)]();}}this[_0x9835a7(0x1345)+'nt']=0x1f22+-0x3d*-0x1d+-0x1*0x260b;}},Sprite_Actor[_0x4258d1(0xf38)]['forceMotio'+'n']=function(_0x2118b0){const _0x4dde37=_0x4258d1,_0x56f21e={'nbDFf':_0x4dde37(0x3f5)};if(this['_battler']&&this[_0x4dde37(0xe4f)][_0x4dde37(0xfce)]()){this[_0x4dde37(0x1449)]=Sprite_Actor[_0x4dde37(0x536)][_0x56f21e[_0x4dde37(0x45b)]];return;}const _0x2e68ca=Sprite_Actor[_0x4dde37(0x536)][_0x2118b0];this[_0x4dde37(0x1449)]=_0x2e68ca,this['_motionCou'+'nt']=-0x2e7*-0xb+0x1f4a+-0x3f37*0x1,this[_0x4dde37(0xee3)]=-0x14*-0xbf+-0x21f9+0x130d*0x1;},Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0xbf8)+_0x4258d1(0xcc2)]=function(_0x1c4db7){const _0x23f45f=_0x4258d1;if(this['hasStaticS'+_0x23f45f(0x33a)]())return;this['adjustWeap'+'onSpriteOf'+_0x23f45f(0xbb4)](),this[_0x23f45f(0x1418)+_0x23f45f(0xdba)]['setup'](_0x1c4db7),this[_0x23f45f(0xf9c)]['clearWeapo'+_0x23f45f(0xcc2)]();},Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0xe86)+_0x4258d1(0x29b)+_0x4258d1(0xbb4)]=function(){const _0x3c777b=_0x4258d1,_0x456d8d={'psWBI':function(_0x2125dd,_0x50dc52){return _0x2125dd*_0x50dc52;}};let _0x5cc0f1=-(0xd*-0x8b+0x2*0x776+-0x7cd),_0x5384b1=_0x456d8d[_0x3c777b(0x19f)](this[_0x3c777b(0x1594)],-0xb3*0x17+-0x153*0x8+0x1aad+0.5);const _0x2085e2=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x28f6da=this[_0x3c777b(0xe4f)][_0x3c777b(0x522)+'ts']()['map'](_0x29d950=>_0x29d950&&_0x29d950['note'][_0x3c777b(0x79c)](_0x2085e2)?Number(RegExp['$1']):-0x867+0xf83+-0x71c),_0x5e3e0a=this['_battler'][_0x3c777b(0x522)+'ts']()[_0x3c777b(0x15f9)](_0x12b9ef=>_0x12b9ef&&_0x12b9ef[_0x3c777b(0x278)][_0x3c777b(0x79c)](_0x2085e2)?Number(RegExp['$2']):-0x13*0x202+-0x4fb*-0x3+0x1735);_0x5cc0f1=_0x28f6da[_0x3c777b(0x145e)]((_0x5aaeaa,_0x505d1b)=>_0x5aaeaa+_0x505d1b,_0x5cc0f1),_0x5384b1=_0x5e3e0a[_0x3c777b(0x145e)]((_0xdb00e8,_0x44c5e1)=>_0xdb00e8+_0x44c5e1,_0x5384b1),this[_0x3c777b(0x1418)+'ite']['x']=_0x5cc0f1,this[_0x3c777b(0x1418)+_0x3c777b(0xdba)]['y']=_0x5384b1,this[_0x3c777b(0x1418)+_0x3c777b(0xdba)][_0x3c777b(0x164c)]();},Sprite_Weapon[_0x4258d1(0xf38)][_0x4258d1(0xb3e)]=function(_0x24583e){const _0xb32e15=_0x4258d1,_0x3e7719={'Lrwxy':_0xb32e15(0x2a2)},_0x256202=_0x3e7719[_0xb32e15(0xe04)][_0xb32e15(0xba9)]('|');let _0x36e626=0xccc+0x2c*0xb+-0xeb0;while(!![]){switch(_0x256202[_0x36e626++]){case'0':this[_0xb32e15(0xee3)]=-0x462*-0x2+0x26ac+-0x3f4*0xc;continue;case'1':this[_0xb32e15(0x1534)]();continue;case'2':this[_0xb32e15(0x998)+'Count']=-(0xe84*0x1+-0x94d*-0x2+-0x7*0x4bb);continue;case'3':this['updateFram'+'e']();continue;case'4':this[_0xb32e15(0x4ce)+'geId']=_0x24583e;continue;}break;}},Sprite_Actor['prototype'][_0x4258d1(0x87a)+_0x4258d1(0x137f)]=function(){},Sprite_Actor[_0x4258d1(0xf38)]['stepForwar'+'d']=function(){const _0x35d374=_0x4258d1,_0x4ec4a8=VisuMZ[_0x35d374(0x337)][_0x35d374(0x424)]['ActionSequ'+_0x35d374(0x37c)],_0x330ce=_0x4ec4a8['StepDistan'+_0x35d374(0xcef)],_0x460eed=_0x4ec4a8[_0x35d374(0x12c0)+'ceY'],_0x477f08=_0x4ec4a8[_0x35d374(0x6e8)+'on'];this[_0x35d374(0xace)](-_0x330ce,-_0x460eed,_0x477f08);},VisuMZ[_0x4258d1(0x337)]['Sprite_Act'+_0x4258d1(0x529)+'rame']=Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0x421)+'e'],Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0x421)+'e']=function(){const _0x385bd0=_0x4258d1;this[_0x385bd0(0xc8a)+_0x385bd0(0x33a)]()?this[_0x385bd0(0x822)+_0x385bd0(0x325)+_0x385bd0(0x141d)]():(this[_0x385bd0(0xcd1)+_0x385bd0(0x147f)+_0x385bd0(0x1dc)](),VisuMZ['BattleCore'][_0x385bd0(0x52b)+_0x385bd0(0x529)+_0x385bd0(0x11d1)][_0x385bd0(0xb14)](this));},Sprite_Actor[_0x4258d1(0xf38)][_0x4258d1(0xcd1)+_0x4258d1(0x147f)+_0x4258d1(0x1dc)]=function(){const _0x3c3b36=_0x4258d1;if(this['_battler']&&this[_0x3c3b36(0xe4f)][_0x3c3b36(0x2e7)+'ionData']){const _0x35e58d=this[_0x3c3b36(0xe4f)][_0x3c3b36(0x2e7)+_0x3c3b36(0x14eb)];this[_0x3c3b36(0x1449)]=Sprite_Actor[_0x3c3b36(0x536)][_0x35e58d[_0x3c3b36(0x100f)]],this[_0x3c3b36(0xee3)]=_0x35e58d[_0x3c3b36(0xbd0)];const _0xc0665c=this[_0x3c3b36(0x1418)+_0x3c3b36(0xdba)];_0xc0665c[_0x3c3b36(0x4de)+'e'](_0x35e58d[_0x3c3b36(0xddf)+_0x3c3b36(0x8f4)],_0x35e58d[_0x3c3b36(0xbd0)]),this[_0x3c3b36(0xe86)+_0x3c3b36(0x29b)+_0x3c3b36(0xbb4)]();}},Sprite_Weapon[_0x4258d1(0xf38)][_0x4258d1(0x4de)+'e']=function(_0x3a64fb,_0x44d3ac){const _0x55bdbd=_0x4258d1,_0x400ccc={'DPdCD':_0x55bdbd(0x1196)},_0x38e978=_0x400ccc['DPdCD'][_0x55bdbd(0xba9)]('|');let _0x32f7b5=-0x1117+0x45*0x8f+-0x1574;while(!![]){switch(_0x38e978[_0x32f7b5++]){case'0':this['updateFram'+'e']();continue;case'1':this[_0x55bdbd(0xee3)]=_0x44d3ac;continue;case'2':this[_0x55bdbd(0x1534)]();continue;case'3':this[_0x55bdbd(0x4ce)+'geId']=_0x3a64fb;continue;case'4':this['_animation'+_0x55bdbd(0x451)]=-Infinity;continue;}break;}},Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x104c)+'s']=function(){const _0xce32d9=_0x4258d1,_0x574015={'cuFbF':_0xce32d9(0x1600)+_0xce32d9(0x7b2)},_0x15ccce=_0x574015[_0xce32d9(0xeed)]['split']('|');let _0x4637b2=0x624+-0x233e+0x1d1a;while(!![]){switch(_0x15ccce[_0x4637b2++]){case'0':this[_0xce32d9(0xac8)+_0xce32d9(0x1193)+'e']();continue;case'1':this[_0xce32d9(0x2bb)+'e']=-0x2201+0x36d+0x2*0xf4a;continue;case'2':Sprite_Battler['prototype']['initMember'+'s'][_0xce32d9(0xb14)](this);continue;case'3':this[_0xce32d9(0x41a)]=null;continue;case'4':this[_0xce32d9(0x237)+'Sprite']();continue;case'5':this[_0xce32d9(0x859)+'e']=null;continue;case'6':this[_0xce32d9(0xb22)]=![];continue;case'7':this[_0xce32d9(0x6af)+_0xce32d9(0xf2b)]=0x1d69+-0xe90+-0x3*0x4f3;continue;case'8':this['_shake']=-0x61+0x17b3+-0x7c6*0x3;continue;case'9':this[_0xce32d9(0x1523)+'me']='';continue;}break;}},VisuMZ['BattleCore'][_0x4258d1(0xbd1)+_0x4258d1(0x14a0)]=Sprite_Enemy[_0x4258d1(0xf38)]['update'],Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x164c)]=function(){const _0x1fc329=_0x4258d1;VisuMZ[_0x1fc329(0x337)][_0x1fc329(0xbd1)+_0x1fc329(0x14a0)][_0x1fc329(0xb14)](this),this[_0x1fc329(0xe48)+'owVisibili'+'ty'](),this[_0x1fc329(0x8f1)+_0x1fc329(0x6e1)+_0x1fc329(0x11b8)]();},Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x237)+_0x4258d1(0x594)]=function(){const _0x471edf=_0x4258d1,_0x110df1={'YjGsn':_0x471edf(0x2a2)},_0x48b05f=_0x110df1['YjGsn']['split']('|');let _0x2800f4=0x286+-0x1e71*-0x1+0x1*-0x20f7;while(!![]){switch(_0x48b05f[_0x2800f4++]){case'0':this[_0x471edf(0x125a)+'e'][_0x471edf(0x12af)]['y']=0x1d98+0x77*-0x16+0x1*-0x135d;continue;case'1':this[_0x471edf(0xd0b)](this[_0x471edf(0x125a)+'e']);continue;case'2':this['_mainSprit'+'e'][_0x471edf(0x12af)]['x']=-0x3b6*-0x7+0x1725+-0x5*0x9d3+0.5;continue;case'3':this[_0x471edf(0xce0)+_0x471edf(0xc84)+_0x471edf(0xdf7)+'e']();continue;case'4':this['_mainSprit'+'e']=new Sprite();continue;}break;}},Sprite_Enemy[_0x4258d1(0xf38)]['mainSprite']=function(){const _0x1eaefb=_0x4258d1;return this['_distortio'+_0x1eaefb(0x72b)]||this[_0x1eaefb(0x125a)+'e']||this;},Sprite_Enemy[_0x4258d1(0xf38)]['loadBitmap']=function(_0x262d7f){const _0x575ec4=_0x4258d1;this['bitmap']=new Bitmap(0x948+-0x5*0xa3+-0x3*0x208,-0x2*0x584+0x1*-0x57b+0x1084);if(this[_0x575ec4(0xb37)+'er']()){const _0x2fc4c1=this[_0x575ec4(0x41a)][_0x575ec4(0x29f)+_0x575ec4(0xde6)]();this[_0x575ec4(0x5dd)]=new Bitmap(_0x2fc4c1['width'],_0x2fc4c1['height']),this[_0x575ec4(0x125a)+'e'][_0x575ec4(0x5dd)]=new Bitmap(0x2*0x11c5+0x37*0x12+-0x2767,-0x2b*0xb7+-0x17a*0x12+0x3952);}else{if($gameSystem[_0x575ec4(0x8df)]()){const _0x37de7c=ImageManager[_0x575ec4(0x96b)+'y'](_0x262d7f);_0x37de7c[_0x575ec4(0xf75)+'tener'](this[_0x575ec4(0x412)+_0x575ec4(0x1102)+_0x575ec4(0x29c)]['bind'](this,_0x37de7c));}else{const _0x2ad552=ImageManager[_0x575ec4(0x141b)](_0x262d7f);_0x2ad552[_0x575ec4(0xf75)+_0x575ec4(0x632)](this[_0x575ec4(0x412)+_0x575ec4(0x1102)+'oad'][_0x575ec4(0x144f)](this,_0x2ad552));}}},Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x412)+_0x4258d1(0x1102)+_0x4258d1(0x29c)]=function(_0x2ac2ec){const _0x15b9d8=_0x4258d1;this[_0x15b9d8(0x125a)+'e'][_0x15b9d8(0x5dd)]=_0x2ac2ec,this[_0x15b9d8(0x5dd)]=new Bitmap(_0x2ac2ec['width'],_0x2ac2ec[_0x15b9d8(0x1594)]);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbd1)+_0x4258d1(0x96a)]=Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0xb27)],Sprite_Enemy[_0x4258d1(0xf38)]['setHue']=function(_0x40f9d8){const _0x1cddbd=_0x4258d1;this[_0x1cddbd(0x125a)+'e']&&this[_0x1cddbd(0x125a)+'e']['setHue'](_0x40f9d8);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbd1)+_0x4258d1(0x4b0)+_0x4258d1(0x2b0)]=Sprite_Enemy[_0x4258d1(0xf38)]['initVisibi'+_0x4258d1(0x11b8)],Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x1128)+'lity']=function(){const _0x509204=_0x4258d1;this[_0x509204(0x16b3)+_0x509204(0x553)]()?VisuMZ[_0x509204(0x337)][_0x509204(0xbd1)+'my_initVis'+_0x509204(0x2b0)]['call'](this):(this[_0x509204(0xb22)]=!this[_0x509204(0x41a)]['isHidden'](),!this[_0x509204(0xb22)]&&(this[_0x509204(0x4c8)]=-0x195f+0xa*-0x3d5+0x3fb1));},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbd1)+_0x4258d1(0x525)+'ollapse']=Sprite_Enemy[_0x4258d1(0xf38)]['updateColl'+_0x4258d1(0xef9)],Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x431)+_0x4258d1(0xef9)]=function(){const _0xde7edc=_0x4258d1;if(this['allowColla'+_0xde7edc(0x553)]())VisuMZ['BattleCore'][_0xde7edc(0xbd1)+_0xde7edc(0x525)+'ollapse'][_0xde7edc(0xb14)](this);},Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x421)+'e']=function(){const _0x422f04=_0x4258d1,_0x32e5a8={'qBzuO':function(_0x12c626,_0x4c6878){return _0x12c626===_0x4c6878;},'AlPzZ':'bossCollap'+'se'};Sprite_Battler['prototype']['updateFram'+'e'][_0x422f04(0xb14)](this);const _0x54a4df=this[_0x422f04(0x10f3)]()||this;if(!_0x54a4df)return;!_0x54a4df[_0x422f04(0x5dd)]&&(_0x54a4df[_0x422f04(0x5dd)]=new Bitmap(this[_0x422f04(0xc2a)]||0x1*-0x22ad+0xa4d*-0x1+0x2cfb,this[_0x422f04(0x1594)]||0x1*-0xb01+0xbd*0x6+0x694));if(_0x32e5a8[_0x422f04(0x5cf)](this[_0x422f04(0x859)+'e'],_0x32e5a8[_0x422f04(0x99f)]))this[_0x422f04(0x125a)+'e'][_0x422f04(0xfc6)](0x1680+-0xfc0+-0x6c0,0x1*-0x10b9+0x20ee+-0x567*0x3,this[_0x422f04(0x125a)+'e'][_0x422f04(0xc2a)]||0xb*0x25+0x1332+0x118*-0x13,this['_effectDur'+_0x422f04(0xf2b)]);else{let _0x2ced91=0x91*0x37+-0x2*-0xec3+-0x2*0x1e56;if(_0x54a4df&&_0x54a4df[_0x422f04(0x5dd)])_0x2ced91=_0x54a4df[_0x422f04(0x5dd)][_0x422f04(0xc2a)];let _0x2f4417=-0x472+-0x1770+0x1be3;if(this[_0x422f04(0x5dd)])_0x2f4417=this[_0x422f04(0x5dd)]['height'];_0x54a4df[_0x422f04(0xfc6)](0xaab+-0xfd*0x1a+0xf07,0x181*0xc+-0x1*0x17ff+0x5f3,_0x2ced91,_0x2f4417);}},VisuMZ[_0x4258d1(0x337)]['Sprite_Ene'+_0x4258d1(0x1078)+_0x4258d1(0x126a)+'e']=Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x1468)+'Collapse'],Sprite_Enemy[_0x4258d1(0xf38)]['updateBoss'+_0x4258d1(0x1590)]=function(){const _0x2ab520=_0x4258d1;if(this[_0x2ab520(0x16b3)+'pse']())VisuMZ[_0x2ab520(0x337)][_0x2ab520(0xbd1)+'my_updateB'+_0x2ab520(0x126a)+'e'][_0x2ab520(0xb14)](this);},Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x7db)]=function(){const _0x3e6eb5=_0x4258d1;return Sprite_Battler[_0x3e6eb5(0xf38)]['isMoving'][_0x3e6eb5(0xb14)](this);},VisuMZ[_0x4258d1(0x337)]['Sprite_Ene'+_0x4258d1(0xda4)+'tateSprite']=Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x822)+_0x4258d1(0x14fb)],Sprite_Enemy['prototype'][_0x4258d1(0x822)+_0x4258d1(0x14fb)]=function(){const _0x400c4b=_0x4258d1;VisuMZ[_0x400c4b(0x337)]['Sprite_Ene'+'my_updateS'+_0x400c4b(0xdbe)]['call'](this),this[_0x400c4b(0x822)+_0x400c4b(0xc9d)+_0x400c4b(0x16bb)]();},Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x822)+'eSpriteBat'+'tleCore']=function(){const _0x50996a=_0x4258d1,_0x38c9a0={'wvrlq':function(_0x204678,_0x4378e4){return _0x204678-_0x4378e4;},'YYXwA':function(_0x11fa96,_0x1a7509){return _0x11fa96-_0x1a7509;},'QiJEg':function(_0x160375,_0x3ea6b7){return _0x160375/_0x3ea6b7;},'QuDep':function(_0xfd7819,_0x3a2085){return _0xfd7819/_0x3a2085;},'qoZxF':function(_0x4748b7,_0x51cda9){return _0x4748b7/_0x51cda9;}},_0x14801f=VisuMZ['BattleCore'][_0x50996a(0x424)][_0x50996a(0xcce)];if(_0x14801f[_0x50996a(0xaa6)+_0x50996a(0x88c)]&&!_0x14801f[_0x50996a(0x833)]){this['_stateIcon'+'Sprite']['opacity']=-0x17cc+0x621+0x11ab;return;}this[_0x50996a(0x756)+_0x50996a(0x594)]['x']=-0x1*0x432+-0x7*0x108+-0x1e7*-0x6,this['_stateIcon'+_0x50996a(0x594)]['x']+=this[_0x50996a(0xe4f)][_0x50996a(0xdd9)+_0x50996a(0x5e5)]();let _0x3cd552=-0x36a+0x1*-0xedb+-0x1*-0x1246;if(this['bitmap'])_0x3cd552=this['bitmap'][_0x50996a(0x1594)];this[_0x50996a(0x756)+_0x50996a(0x594)]['y']=_0x38c9a0[_0x50996a(0x2cd)](_0x38c9a0['YYXwA'](-_0x3cd552,this[_0x50996a(0x756)+_0x50996a(0x594)]['height']),-0x1d3*-0x3+-0x1b9b+0x1626),this['_stateIcon'+_0x50996a(0x594)]['y']+=this[_0x50996a(0xe4f)][_0x50996a(0xdd9)+_0x50996a(0xd6c)](),this['_stateIcon'+'Sprite'][_0x50996a(0xfcb)]['x']=_0x38c9a0['QiJEg'](-0x11a*-0xd+-0xc12+-0x23f,this[_0x50996a(0xfcb)]['x']||-0x35*0x48+0x35*-0x9+0x1b*0x9f+0.001),this[_0x50996a(0x756)+_0x50996a(0x594)][_0x50996a(0xfcb)]['y']=_0x38c9a0[_0x50996a(0x1605)](-0xe59+0x1f82*-0x1+0x2ddc,this['scale']['y']||0xa5f*-0x3+-0x1d96+0x3cb3+0.001),this[_0x50996a(0xb37)+'er']()&&(this['_svBattler'+_0x50996a(0x594)][_0x50996a(0x868)+'te']['scale']['x']=_0x38c9a0[_0x50996a(0xdc4)](-(-0x1a88+-0x452*-0x1+0x1637),this[_0x50996a(0xfcb)]['x']||0x62e*-0x4+0x12*-0x1a5+0x3652+0.001),this[_0x50996a(0x16a0)+_0x50996a(0x594)]['_stateSpri'+'te'][_0x50996a(0xfcb)]['y']=_0x38c9a0[_0x50996a(0x14c1)](0x2130+0x26f*0xd+-0x40d2,this[_0x50996a(0xfcb)]['y']||-0x1d1c+-0x13d+0x1e59+0.001));},Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x8f1)+'TempVisibi'+_0x4258d1(0x11b8)]=function(){const _0xccf7e=_0x4258d1;this[_0xccf7e(0xe4f)]&&this[_0xccf7e(0xe4f)][_0xccf7e(0x8f1)+_0xccf7e(0x6e1)+'lity']();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xbd1)+_0x4258d1(0x111a)+'ler']=Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0xae9)],Sprite_Enemy['prototype'][_0x4258d1(0xae9)]=function(_0x2cf639){const _0x4cf00f=_0x4258d1;VisuMZ['BattleCore'][_0x4cf00f(0xbd1)+_0x4cf00f(0x111a)+_0x4cf00f(0xab7)][_0x4cf00f(0xb14)](this,_0x2cf639),this[_0x4cf00f(0xeac)+'erSprite'](_0x2cf639);},Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0xeac)+_0x4258d1(0x118a)]=function(_0x539b35){const _0x4eaa71=_0x4258d1;!this['_svBattler'+_0x4eaa71(0x594)]&&(this['_svBattler'+_0x4eaa71(0x594)]=new Sprite_SvEnemy(_0x539b35),this[_0x4eaa71(0xce0)+'tesToDisto'+_0x4eaa71(0xdf7)+'e']()),this['_svBattler'+_0x4eaa71(0x594)][_0x4eaa71(0xae9)](_0x539b35);},Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0xb37)+'er']=function(){const _0x165349=_0x4258d1;return this[_0x165349(0x41a)]&&this[_0x165349(0x41a)][_0x165349(0xb37)+'er']();},Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x16b3)+_0x4258d1(0x553)]=function(){const _0x54ad56=_0x4258d1;return this[_0x54ad56(0xb37)+'er']()?this[_0x54ad56(0x41a)][_0x54ad56(0x16b3)+_0x54ad56(0x553)]():!![];},Sprite_Enemy[_0x4258d1(0xf38)]['refreshMot'+'ion']=function(){const _0x2fa1b3=_0x4258d1;this[_0x2fa1b3(0xb37)+'er']()&&this[_0x2fa1b3(0x16a0)+_0x2fa1b3(0x594)][_0x2fa1b3(0x885)+_0x2fa1b3(0x1485)]();},Sprite_Enemy['prototype'][_0x4258d1(0xf91)+'n']=function(_0x45795b){const _0x1daca7=_0x4258d1;if(this['hasSvBattl'+'er']())this[_0x1daca7(0x16a0)+_0x1daca7(0x594)][_0x1daca7(0xf91)+'n'](_0x45795b);},Sprite_Enemy['prototype'][_0x4258d1(0xbf8)+_0x4258d1(0xcc2)]=function(_0x4ed705){const _0x39e610=_0x4258d1;if(this[_0x39e610(0xb37)+'er']())this[_0x39e610(0x16a0)+_0x39e610(0x594)][_0x39e610(0xbf8)+_0x39e610(0xcc2)](_0x4ed705);},Sprite_Enemy[_0x4258d1(0xf38)][_0x4258d1(0x1061)+'d']=function(){const _0x123bc2=_0x4258d1,_0x2a6e23=VisuMZ[_0x123bc2(0x337)][_0x123bc2(0x424)][_0x123bc2(0x1000)+_0x123bc2(0x37c)],_0x16f5bd=_0x2a6e23[_0x123bc2(0x12c0)+_0x123bc2(0xcef)],_0x5f5d23=_0x2a6e23[_0x123bc2(0x12c0)+'ceY'],_0x1330de=_0x2a6e23[_0x123bc2(0x6e8)+'on'];this[_0x123bc2(0xace)](_0x16f5bd,_0x5f5d23,_0x1330de);};function _0x30a3(_0x25384d,_0x2fff50){const _0x2b7e44=_0x498c();return _0x30a3=function(_0x3b2c0b,_0x1f62c4){_0x3b2c0b=_0x3b2c0b-(0x1*0x740+0x1*-0x1643+0x1086);let _0x14ceea=_0x2b7e44[_0x3b2c0b];return _0x14ceea;},_0x30a3(_0x25384d,_0x2fff50);}function _0x498c(){const _0x4cc077=['zGXUn','command339','ceY','XoiHr','eWindowDra','nkFGH','mfzXq','onent','AddAttackS','UjbXH','EAAww','_shadowSca','showPortra','abs','drawItemSt','tStateOrig','requestRef','setActorHo','EEdJp','resize','aHOWS','ectiles','updateMoti','Height','ejNyM','performMov','orCommand_','ED\x205','chDuration','arRedFlat','aying','ShowEnemyG','PopupOffse','ement_Batt','Base_apply','performFli','jsCritRate','atJS','tainer','vwPGe','ement_Jump','mation_Bal','tleActor_p','mPTB','playOncePa','isActor','BsCII','_drawTextB','actionSpli','EnableDama','0|2|3|7|1','hCWQZ','owing','isSTB','hJWla','_dragonbon','startEnemy','_lines','7|2|0|5|4|','stPointsCh','ParseSkill','Collapse','nput','ainMenuCor','addChildTo','height','isMeleeSin','GbIXS','lCmbU','anchorY','makeAction','pauseInjec','hVIDh','hXOEV','canGuard','isClicked','3|4|2|1|0','nPortraitT','QmQel','_action','anchorX','ttlePortra','displayTpD','target','_createEff','text','EIgvx','Item-%1-%2','rKQEg','windowPadd','isGuardLif','eBattleRes','PMtvU','VwExl','andName','_cancelBut','CriticalCo','ToPoint','gleTargetA','ChargeRate','fWIKM','buffAdd','UFsRF','hwOSz','COBWEB','ljPOu','KPjbq','sTargetJS','3|2|4|5|1|','OkQNE','mdnvm','eaBQD','glitch','<CENTER>%1','repeatTarg','nsEnd','_multiplie','displayCou','GjxHX','updateSpin','le_selectN','tkPNY','toString','nTypeAtNod','mmandWindo','nterWindow','Friends','ActionAnim','faceWidth','DhvvL','ntBackOffs','YNwha','TP_Rate','aced\x20over\x20','kxZtR','\x20=\x20(this.c','ula','oLCRS','ipVert','\x20TURN','numberFont','GoScN','playBattle','_currentAc','mySprite','makeDeepCo','uments[1];','_inputting','veStatesTo','doesPageHa','CalcEscape','merBitmap','BlurScreen','ageCap','e.log(\x27NaN','eBattleTra','wRect','zoomDurati','bfYRs','attleJS','bSUiM','vgJja','setupBattl','yoQtu','chantStyle','_commandNa','map','JdVIS','etX','cLfOU','forceSelec','HlLHf','rateDamage','2|3|6|9|1|','default','_phase','jMObr','tleLog_Pop','QiJEg','\x20target\x20=\x20','Zucge','isFlipped','angleDurat','_blendColo','yjagt','_endBattle','ItnRO','commandSym','mList_maxC','ActionCoun','processTou','NOTE','OGrTB','nSpnK','battleStat','mSpeed','angingOpac','tute','command236','astTime','era_FocusT','nabled','UYYpO','fittingHei','ctiles\x20nee','ents[1];\x0a\x0a','ParseWeapo','applyAngle','sDYXv','UUTvq','closeBattl','_padding','HEART','ShakeFlinc','mation_Att','gpiNh','MvjgY','MotionIdle','_targetInd','isForDeadF','isBuffAffe','KDrQR','ZUAWm','mFmIP','kFCVx','waitCount','damageCont','preter','LLhKv','ger_endBat','OBnaB','UuVDi','MXzoO','numRepeats','version\x20in','leField','includes','Guard','\x20\x20\x20\x20\x20\x20\x20\x20//','AYiLh','pagedown','_opacityDu','length','myEscape','URN','_opacityEa','PEVCF','er_perform','RHZym','update','refresh','Mode','\x20\x20\x20\x20return','\x20?\x20this.it','addGuardCo','StyleON','1|6','message4','onSkewEnd','createChil','auto','onHomeMove','yAtCoordin','ZHnPW','startOpaci','user','uSPcJ','pushBaseLi','cReflectio','isPTB','Key','tleLog_UI','QAeYz','applyEasin','registerCo','missle','dimColor1','[0];\x0a\x20\x20\x20\x20\x20','Phabh','owRectDefa','ragonbones','DCBbv','e\x0a\x20\x20\x20\x20\x20\x20\x20\x20','lCUVD','\x20this.item','_battleFie','FRUSTRATIO','alive\x20enem','Ewpfm','isSpriteVS','displayIte','ovedStates','tScaler','sAdd','HMaWa','equenceSpe','DualWield','ger_checkB','dead\x20oppon','xbeRO','ser','neYmr','nemies','showNormal','Damage','_enemyWind','ponAnimati','dQvqY','angle','wuytj','hanics_Etb','cWRzn','onGrowEnd','UXeiT','tor','rtEvent','targetObje','playEvasio','Item','\x20\x20try\x20{\x0a\x20\x20','_createDam','rJVCi','isibleDura','SkillItemB','{\x0a\x20\x20\x20\x20\x20\x20\x20\x20','onMoveEnd','ctContaine','ridMoveCom','23467900HmYgoL','iner','isBreakStu','le_itemWin','dUZWm','_svBattler','iconIndex','tateResist','\x20\x20\x20\x20\x20\x20\x20if\x20','ipHorz','weatherPow','FchoG','USeXo','EnemyOffse','minimumHit','eCore','itemRect','\x20\x20//\x20Proce','canMove','AKrTY','setValue','refreshSta','sEESH','CastCertai','allowColla','updateKeyb','ger_startT','t\x20state\x20=\x20','nLJEl','VPTTl','DamageStyl','AllBattleC','tleCore','resh','peCommand','DkmQp','eCore_Crea','vPvaW','vpKII','\x20\x20\x20\x20if\x20($g','cts','eCoreDamag','ZZZ','regionId','kflYq','pCYMg','vasion','createAllW','isSkipPart','skin','obj','stPointsSt','upport\x20cha','toUpperCas','NVeiE','_targetY','oint','currentAct','MeleeDista','bQxFq','TION\x20SEQUE','nPortraitF','TlTJG','getDragonb','EnableSoft','iddle','VisuMZ_3_S','psWBI','hanics_Sta','aAnRR','qkGam','MotionSpee','ButtonAssi','bjabg','kIblo','\x20($gameTem','ror_TVCrea','_angleWhol','fuoBJ','le_update','updateSkew','CJYhB','addOncePar','eFGhU','magicRefle','encounterL','findIndex','_spriteset','ameraOffse','ParseAllNo','uotVo','currentCla','pfjZF','sDSzq','uMPuO','counterAtt','toLowerCas','sembJ','activate','Nbzyk','_damages','tal\x20Healin','ger_proces','IQisZ','JkqFN','applyTarge','createComm','ByBreakShi','zoekS','abwPx','iginalRate','addChildAt','ts\x20=\x20argum','HDXdv','ScaleDown','lvLSs','BtzTM','HUxqS','AhVer','OJWQl','attleAI','eToTargets','rToPoint','_character','n_itemTarg','resizeWind','klkhl','t\x20obj\x20=\x20ar','mes','Rrfex','tCells','displayAdd','ncounterLi','iddleLayou','led','_allTarget','PdSJg','mageMotion','Flinch','nging','QkpcT','STR','lename','UEhof','othImage','addAttackC','BbVBl','nShownOnBa','guardMpLif','_skewX','_cursorSpr','IGysi','in_AddVisu','NEzVG','sXeit','azNWN','_borderPor','Playtest()','UUchC','CheckActSe','processBat','putClose','ikigc','resetBreak','reakShield','EventKeysF','tkJjb','StyleName','attlerOnTo','tOpacity','essJS','user;\x0a\x20\x20\x20\x20','aqCLI','Disabled','euNzc','yCache','zkjrr','sVictory','MtMRA','geValueDis','OJzGJ','onActorOk','gainMp','\x20visible\x20=','esSpriteCo','XYqzG','BARE\x20HANDS','CRjoq','Shield','ShowHpDmg','cePoint','ody','battlerSha','tBattlerKe','ionY','ement_Wait','UWmkT','Game_Party','temEnabled','disarmMpLi','%1JS','testApply','era_Offset','xAnimation','MDHBg','xfDMd','eEnemyModi','FegoM','Width','portraitIn','_FinishAct','YvDqS','gainBraveP','CmdIconAut','artyComman','ntKey','tleLayout','XVqZD','geGYm','createMain','QeCDB','MVdvk','reTargetSc','OqZnR','ShuffleArr','mmandEnabl','oating','ypKib','wbWsv','cameraDura','CommandAdd','displayBuf','IOrrV','lrcyA','Bfduf','lNptI','kxJoL','_totalHits','koBWA','AnchorX','lue\x20=\x20orig','ActorOffse','at(\x27\x27,obj.','VQoFs','AYufZ','restore','HelpFight','IconSet','htcSX','contains','ionEndMemb','startParty','FrontViewS','GxoWm','re\x20to\x20work','HitRate','zeSkn','BindCommon','Scene_Part','eFocusFrie','ectAll','isCancelLi','xcEmM','NyCwh','kXMzq','nqwPa','isAlive','eOpacity','refreshReq','registerDe','isDTB','CTB','_targetDam','commandOpt','YDMbt','cfIVH','_defeatedE','nents\x20not\x20','removeCurr','damageStyl','DkGgX','ge_smoothn','XnAzo','nVisibilit','note','jYOXp','addPartyCo','ore','isCustomAc','fyijh','hZrQw','Pjkka','UZEcH','_floatEasi','_lineHeigh','OffsetAdju','bol','Rect','m_WaitForZ','IgnZY','getChildIn','DSRDX','hanics_Col','Rtevv','FQRRH','ouping','HZtdM','ionSequenc','wwQQN','\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20','hanics_Tex','buiuv','isBattleRe','opup','pJapQ','svBattlerA','alterPrior','svBattlerN','n\x20update!','onSpriteOf','oad','CmdTextAut','portraitFl','svBattlerD','Sprite_Gau','addBattleC','4|2|0|1|3','wgXPa','itsBorderS','()\x20:\x20obj;\x0a','tmap','TZuKD','isAnyoneJu','Wlksk','AutoAddSta','tyxdY','PreBattleC','UiContaine','r\x20===\x20Game','rite','ibility','ctors','_emptyBitm','_canLose','tuvMV','StCgR','nbcNJ','\x20\x20\x20\x20const\x20','log(e);\x0a\x20\x20','...','DmjNI','_battlerHu','cancel','m_initiali','QKUnw','YtnCN','WakzF','PostEndBat','t\x20defender','nYtDK','le_command','ngState','ActSeq_Hor','rs\x20not\x20tar','KeyTargets','Dragonbone','endVisualC','isJumping','yWindow','wvrlq','rAlpha','_battlePor','ap2','enemy','keUcN','cqJfC','_stypeIDs','Combo\x5c{','_lastHpDam','ngedBuffs','andIcon','ewing','6|39|7|38|','NTEGER','qwaBm','aDKki','SkipPartyC','NYqTR','_baseTextu','Battle_upd','ger_select','index','ait','killComman','ue;\x0a\x0a\x20\x20\x20\x20\x20','_freezeMot','BwYBb','fxSJY','ext','OuPlX','vMbwv','NFggi','NewPopupBo','ScaleY','clearMotio','\x20\x20\x20\x20\x20origi','4|2|3|1|0','QKJZw','VAuwW','owAttachme','Face','_targetFlo','ZINnq','yygsD','smgPL','tyRefresh','eWindowCen','oMnKx','mzMsS','LvApt','ListAutoAt','tor\x20===\x20Ga','Game_Syste','_targetHom','GqdiZ','iconText','Targets1','XXvCX','re!','bgType','xDdQq','oveBuffDeb','temporaryV','nPlaying','isFightCom','t\x20version\x20','okTargetSe','Override','te\x20=\x20rate;','ndowBattle','nPortraitH','Convert','ands','GtebB','bEbTG','nzrfG','autoSelect','open','\x5cI[%1]%2','ActSeqImpa','dows','or_updateB','MRqht','jqNTA','zPJlF','VoJSQ','ARRAYFUNC','icSvBattle','Strength','ected','updateScal','omActionSe','setMoveEas','NUM','isDying','hanics_Bre','chant','llsStatesC','yWnKQ','ions_statu','GPxFu','ction','sume','lateItemEf','euvec','BattleCore','evbNZ','rigin(obj.','vBattler','VisuMZ_3_B','zMiEN','PreDamageA','le.log(e);','erBase_isS','urn','Fhjet','updateOpac','actor%1-po','startInjec','lcZNG','rHLQY','ffsetX','clearForce','\x20to\x20%2\x27.fo','RXZck','tomDmgForm','OVXMX','sEcCx','sUHrU','reorder\x20th','mation_Act','stypeId','addDebuff','izedText','Mute','ttler','_growWhole','increaseTo','mWWCp','psXAW','formSubsti','removeChil','terminate','ionJS','Ibkqp','xomjG','performWea','show','_duration','BuffDebuff','lbMtr','ger_abort','loonAnimat','tler_setBa','nPortraitI','_playTestF','\x20\x20\x20if\x20(isN','MUSIC\x20NOTE','_escapeRat','WXIdf','attackMoti','ger_setup','rtmfS','d_Animatio','eAction','le_start','Actor-%1-%','Amp','le_helpWin','jsScaleToF','clearActiv','andNameWin','zHUJS','tatusWindo','ence','on2','lare\x20Const','setSkill','PQJDz','MFFwY','tsUsableIt','FwHBe','zlMTC','DWsgh','WeaponType','obj;\x0a\x20\x20\x20\x20\x20','ajqif','version','JS\x20%1START','_fauxAnima','eatedBefor','applyResul','ynRWF','guardHpLif','WaitForEff','battlerSpr','BXoqq','QKPkX','displayTyp','canSingleO','FacePoint','\x20\x20\x20\x20\x20\x20\x20\x20\x20c','MIN_SAFE_I','createAnim','oring\x20rate','n.\x0aPlease\x20','imation','CriticalDu','Data','PpFkh','sQKPT','oaWcW','createShad','rget','AWdva','ForScale','rance','psznu','attack','isStatusAf','hBXTm','era','e_Action)\x20','PosOffsetY','traitSet','cRjPU','nsitionabl','ies','bdsyM','yvLJV','inalRate;\x0a','Wvzkk','UxxqI','EEHzt','jump','niiwe','UlvXo','dmilF','_battleCor','Battleback','isCustomBa','attlePortr','arallelInt','Duration','updateMain','setHelpWin','tLIag','ZAtDa','owRectXPSt','CounterPla','nit','terpreters','VojOd','ate','Reposition','AllowRando','Target','ActSeq_Tar','getMenuIma','YAXww','requestBat','veFriend','Game_Battl','clamp','processPos','siveStates','updateAtta','setTroopPa','CmdIconFig','eWindow','oBattle','autoMeleeS','utMode','eOffsetY','indows','zRDTd','XnNYv','RNIhF','j;\x0a\x20\x20\x20\x20\x20\x20\x20','Wdalw','_reflectio','playReflec','OGPrd','pOgQo','DecgV','mATB','LrucS','amageCap','PTmCC','CpHyt','xryHm','tyCommand_','leProcess','\x20\x20\x20\x20\x20\x20\x20try','DktWY','dead','BULB','ombatLog','setColorTo','0|4|6|7|1|','currentSym','aleBorderS','astMode','%1Regenera','ED\x202','mation_Ite','buvTG','mcqKe','lastFilena','itemPaddin','alue','_preBattle','veOncePara','czLLO','hardDamage','performAtt','commandRem','icon','dFRHu','setupHpGau','vmAnh','Projectile','RKmij','IxcAU','onStaticEn','lerContain','zfjjx','PxNaa','JwnZv','_SetupActi','owBorderSt','fresh','_enemy','TpbMainPha','n_applyGlo','tViewSprit','MWqqB','battleEnd','0|3|8|1|7|','updateFram','updateShak','attleVoice','Settings','ShowMpDmg','oKrrG','agic','HpGauge','lWoYy','viKDr','displayRef','opacitySta','OqcXW','front\x20cent','CSOcj','ubstitute','updateColl','floatBattl','maxCommand','Selection','SlotID','portraitFi','\x5cC[6]%1\x5c}\x20','ceil','ZtsmQ','CmdIconIte','isSubjectV','MpbLA','drawSingle','fnordRemov','formEvasio','_removeAct','\x20\x20\x20\x20\x20if\x20($','sideview_u','addGeneral','InEnemyWin','battleZoom','lor','actions','ocoRU','isOTB','itemEffect','alive\x20oppo','getSpriteP','getAttackW','Game_Enemy','kill','center','Count','raData','yJtHq','globalAlph','tID','in\x20order\x20f','lRPnX','DWyVO','lticL','AlphaFilte','nbDFf','aVuXh','aDCEb','getColor','ystem','rallelTroo','ommand','battleMove','CastAnimat','mYgrI','iconWidth','abort','nCommandIn','createHelp','kWEBI','xhKcu','ger_makeAc','showAnimat','AuBMx','BG_TYPE','RemoveExce','cUCTQ','ResumeLaun','itemTextAl','terpreter','ubrcF','ger_onEnco','ActSeq_Set','rHome','tyLvU','Window_Opt','osition','uest','pMembers','autoBattle','DistanceAd','ePopup','isTpbMainP','AxwKz','SZTwC','CommonEven','hJton','otetags','mswdI','yBYVo','GetActionS','traitDurat','jTPCd','llelStart','leCheck','setBattleZ','isIncluded','ionResults','CutinHorz','bJwzi','tionBattle','tleBalloon','rrIQE','rocessTouc','DBiax','tWidth','Inputtable','Actions','MJSzz','erpreters','TextAlign','arget','onAllActio','kWaap','aced\x20on\x20th','eCore_Comm','nch','Exploit','IPsAE','_makeCurso','BshVB','anceX','ror_Clear','xpQjV','era_FocusP','_targetGro','(\x27\x27,origin','ICzdA','CommandWid','isForAlive','my_initVis','nSequenceN','getBattleP','performLif','Voice','onstructor','HQdGW','vKrjD','JZpEW','icEvasion','eCore_Plug','in(obj.id)','DVwnn','chPower','leX','onEnemyOk','BSzGg','dSHmH','tkwHI','ds\x20to\x20be\x20u','NxfJL','addActor','_eventId','zXDft','opacity','Remove','pop','FormulaBat','n_setSkill','_homeEasin','_weaponIma','extOrigina','addNewStat','startSpin','tWVUL','CoreEngine','fDINM','YmOHM','TpGaugeOff','_baseLineS','ultiTarget','mFTB','fxsdF','QXrLY','_buttonKey','CjhMT','freezeFram','oMCRK','Time','owMode','displayEva','plNUH','tal','uRZut','createDist','5|3|1|2|0|','putDisable','HMyOu','current\x20ta','EjCBA','pckJm','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20','updatePosi','transform','onDisabled','tMultiplie','tFrontview','process_Vi','_nameTempV','battleVoic','gtxGR','feat','EYeRW','Bbfch','BattleVict','hitIndex','ArMXn','ement_Opac','tlers','rallelInte','setVisible','laYgx','MYlyo','max','_namesCoun','Points','textColor','aFveE','JdPoO','gAbBx','keFlinch','otFiO','1\x0a\x20\x20\x20\x20\x20\x20\x20\x20','hitsHealFm','iKepc','_windowLay','eCore_jsFu','TlGib','\x20ACTION','dBattleCor','hide','PFTvZ','eters','_transform','_targetBat','extPopup','kcvsj','ght','onOpacityE','innerWidth','ionRefresh','ReHNy','uVlUV','eNoElement','traitObjec','ent','isAtbCasti','my_updateC','xDRjj','Sprite_Bat','oumiE','or_updateF','sPlaytest(','Sprite_Act','\x20===\x20Game_','orCommandC','mationId','ynTmA','mpDamageFm','_totalValu','SelectOnly','isPartyTpb','addWindow','iousComman','MOTIONS','KgpST','CriticalHi','rmat(\x27\x27,or','ield','BpNPc','evade','eCore_Note','lo-%1-%2','setTargetB','p.isPlayte','nter','hanics_Arm','ion_Motion','cture','pPage','UstqM','ShowPortra','ss\x20=\x20obj;\x0a','2Name','FollowTurn','le_WaitFor','Rpljv','aunFk','txGyi','sMhyO','_cursorAre','AttachStat','parallaxSc','pse','oHcvD','isPlaytest','HVfFH','qSoKc','SkillItemM','wgbNy','ParseClass','setSTBExpl','outStyle','n_clear','yINZn','xploited','_helpWindo','isibile','GTrzu','FlashDurat','ace','iveWeapon','_skewEasin','Scene_Map_','_actorComm','startSkew','elpWindow','xDDsq','preter_ter','ove','Arguments\x0a','jSyAs','_enemySpri','cancelButt','mAction','LsnVk','tRate','tler_isMov','pdatePosit','tags_Targe','Changing','_logWindow','requestBal','hzrca','le_createH','ConvertCou','sortEnemie','PreDamage%','BackColor','_angleReve','agePopup','abelBattle','_immortal','performMag','PostDamage','StateIconO','ntFrontOff','oESey','FaceAway','cted','\x20Create\x20Co','moveToStar','wait','ntQueue','WaitCount1','tical','mand301','Scene_Boot','Sprite','ageListSty','gNaFk','XJazV','WaitForCam','apVmZ','QjRFz','VisuMZ_1_E','isForAnyon','PreRegener','ystem\x20-\x20%1','rentClass\x20','entAction','collapse','wGvYf','pdate','actFilter','VuoKv','HggEC','ionsPTB','LVAMz','ageAmountL','fwOnf','\x0a\x20\x20\x20\x20\x20\x20\x20\x20c','isDisplayE','eWeaponSet','parse','nList','ateBattleF','eLoaded','_createCli','clearFreez','ied','jsAccuracy','sUFOU','qOiuC','Core','shouldDisp','yback','PopupDurat','Lgvoc','lrurs','itemLifeSt','vCPlY','KgSOD','_statusWin','requestFau','_colorFilt','LhDLc','WeaponSlot','canAttackB','zkkEW','elect','applyGloba','equips','on\x20does\x20no','_tempBattl','WaitComple','OlHuI','qBzuO','DefaultDam','act_ZoomBl','ChantStyle','ctiveChain','ndowRect','ConfigMana','ones','playMiss','ayOffsetX','commandAut','rowSpacing','tags_Trait','YBZdt','bitmap','ger_startB','changePain','andWindow','7|8|3|4|5|','eList','updateWait','WTUlv','fsetX','needsSelec','EyiMB','1_BattleCo','lectionPla','egExp','pon_ClearA','MTaVe','efdJz','displayFai','eaknessDis','LPmgK','clearHorro','ggroContro','mation_Cas','alidForAny','vnaJB','ureJS','ettings','xlRuJ','ntBack','drawSkillC','eLfVO','Msg','his\x20:\x20user','BattleTran','Vxofc','cBattlerKe','_enemyName','addDamageS','maxTp','\x20\x20\x20\x20\x20\x20\x20let','hanics_Btb','ShowAddedS','suMZ_1_Ski','iyVKD','ename','RZysd','IDABP','alCutinEff','ass-%1-%2','isInputtin','ctSeqImpac','DigitGroup','DisplayAct','gjUci','isNegative','isSceneBat','uiMenuStyl','eceiver\x20=\x20','ationId1','IrFNW','pgRbG','UTWoN','n_needsSel','ByHor','ame','jlwsa','onCount','Victory','motionSpee','command283','ing','HITTYPE_CE','tleCommand','ZpBKk','VisuMZ_2_W','ldwDU','e)\x20{\x0a\x20\x20\x20\x20\x20','Action)\x20?\x20','ylePortrai','end','2|14|10|24','_active','isGuard','gMnha','le_createC','tener','\x20\x20\x20\x20\x20const','onEscapeSu','FymzJ','clearGloba','\x27Restoring','Icon','CAUgN','or_update','owPosition','_isBattler','dalYy','reviousCom','preparePar','nEvent','logWindowR','hDuration','splice','ultStyle','UmKKg','ites','balVariabl','turn','upArray','GPEVx','OFsaY','teVisible','tShown','setAttack','uoJyo','EsbfY','Sprite_Dam','WaitForNew','ZSthQ','wDAig','stop','d_ActionAn','isAnyBattl','tiTargetAc','owRect','HBnzT','FEkWA','thrust','tzziS','mMessage','_colorTone','_lastActio','|26|12|1','ntNotetags','onBorderSt','MUSIC','ZfDtw','7|5|8|2|3|','qXiPl','_executeHp','lateGuardE','\x20\x20\x20\x20\x20','mmands','TLliw','createKeyJ','Event','startBattl','_surprise','waveImpact','frontviewS','nctions','checkCache','tal\x20Damage','xqjIK','hanics_Add','EPPvR','reserveCom','hEQel','SoGtM','popupDamag','ttely','lCutin','BwvHW','GaugeDispl','TargetLoca','bPEQa','inHomePosi','leSkillNot','VisuMZ_1_M','oyYRY','WaitForAng','\x20\x20\x20\x20//\x20Dec','updated\x20','Command','STYPES','okButtonTe','dead\x20enemi','Container','quXLJ','eBalloons','getSkillId','eraseState','igXpT','SeNwl','mGHzT','geStyles','_interpret','MoveToPoin','use\x20the\x20<E','ateActors','linkSprite','stateRate','mation_Pla','oAsUS','_damagePop','yBack','FhMlZ','olo','tack','isActiveTp','hIhns','changeTurn','JzMDs','gMaBi','TcHSd','tetags','battlerSmo','ISGuh','reaHeight','ommands','_effectDur','options','ZZYpN','VJnkG','setupRgbSp','kew','y\x20%2\x27.form','igin\x20=\x20use','eParallel','mping','reate','actionBatt','_updateCur','jzrOx','spriteId','leSwitchNo','\x20target;\x0a\x20','yMwuT','setText','Return\x20rat','ical','JVhMc','attleEnd','LyXtU','IHcJt','eSteal','hangeOTB','_motionSpe','tEvent','Filter','tler_start','createCont','loadBattle','ame_Action','battleLayo','fycBJ','gDCWi','wTKnj','nLoopingMo','ooVcp','nFhyZ','ents[3]\x20||','hpDamage','contentsOp','VisuMZ_3_F','hanics_Stb','otionSlot','visibility','ttleCore','GUzPX','TempVisibi','_tempActor','Cjplw','iacbN','tle','$dataState','playCritic','StepDurati','hidden','MWUXF','geCap','balloonId','ols','CheckVisib','gfRka','_homeX','hanics_Wai','ixlBI','tleEnemy_h','IcbDI','hargeTime','\x20\x20%1\x0a\x20\x20\x20\x20\x20','alterChang','llWindows_','ted\x20by\x20%2\x27','er\x20=\x20user;','yHhRb','RWsrc','missed','onBattleSt','refreshCur','maxItems','elntz','setBattleC','\x20weapon\x20=\x20','QgFut','tleCoreJS','xUChk','erBase_ini','2|3|0|1|4','\x20=\x20target;','rDVnJ','d_AddPassi','itemHeight','UJRGv','start','myfML','tBattleCom','tleLog_pus','nTarget','MDxtg','ED\x204','ype','ateAll','lYhrB','CkBNn','_enemyMult','getSkillTy','missile','JfUMU','ment_AddEl','oreData','nuCancel','battleSpin','onDatabase','hadowVisib','feSteal','mpDamage','loop','PreEndTurn','_Action)\x20?','ActSeq_Ske','apply','ePtIR','nSprite','ActionEffe','IEliH','frameVisib','ect','cEdVo','skillId','951654LMkjfb','onJS','nds\x20not\x20ta','UFfoz','jBAxo','ration','does\x20NOT\x20s','_injectAni','PreApplyAs','upDamage','performCas','tionSprite','ctBbP','PostRegene','\x20\x20\x20\x20}\x20catc','mation','_motionTyp','_frame','boxHeight','cialTarget','tYfuy','ilure','hasBeenDef','Notetags','0|3|2|4|1','oMJxk','moUBe','igKmq','DefaultHar','jwCjU','KkojK','PreStartAc','positionOf','removedSta','dead\x20actor','pGUsZ','_stateIcon','erBase_can','WaitCount','requestMot','leJS','TP_Flat','mOTB','otetagEffe','_onDatabas','hitType','oreHitRate','onRegenera','createUICo','ions','MoveToTarg','nds\x20not\x20us','CapRate','trait','MoveBy','weaponType','gsuNl','yleIcon','tionsPTB','ptionsMess','UJxJP','floor','n_makeTarg','placeGauge','kill\x20=\x20arg','eFlinch','createAtta','_actions','UxuXi','ionX','edAKD','dxjaV','lyzeWeakne','Opponents','ationFromC','useDigitGr','cadBk','wFlVs','item','llRect','isBattleMe','ShowWeapon','processExt',')\x20?\x20this.i','setLastBat','time','gWixn','ForceExplo','pSHVv','mBattleCor','FafRQ','ROmHC','isCharging','layCommonL','gDNRp','speed','isNonSubme','ntFront','ZacrE','ForOpacity','wYTrv','24145ShYWDL','chmentSpri','hanics_Dam','wjYgF','ttleCoreTr','match','orEffect','kxuow','noise','tusCore','addItemCom','CxMkL','isMeleeMul','animationN','asion','ealRate','removeDama','ZwDeN','tJUNM','commandSty','lId','JwuKA','Sprite_Ani','augeComman','OhUZJ','swing','updateBitm','5|7|8|4|0','joZbQ','battleCore','addStateTu','bTurn','or_setActo','Window','or_moveToS','TextColor','leCoreJS','CLils','orObj','commandFig','lValue;\x0a\x20\x20','/\x20Declare\x20','iggerFromN','BxUWD','updateHpGa','guardSkill','startGrow','ntIDs','ssiveState','drawTextTo','name));\x0a\x20\x20','ODktD','\x20rate;\x0a\x20\x20\x20','mainFontSi','LOVE','all\x20enemie','LejGm','torSelecti','padding','exHrA','wlQJj','ATnmN','_totalDama','tleJS','VisuMZ_0_C','ion_Refres','attleback2','Cap','isMoving','BravePoint','destroy','filter','Mfcvh','isBattlerG','_frontAtta','startTurn','erBase_add','updateForc','value1','cutinExit','uEbYa','OfHmG','canInput','allelInter','iTargetWin','BITgi','FullAction','applyVaria','QUESTION','rWLIj','BpqFK','MotionTrai','iconHeight','ActiveTpbO','itemTarget','DArYu','DsUYM','top','VariableHe','isAnyoneCh','\x20\x20\x20\x20let\x20or','PostEndAct','setHome','list','rateJS','JMMXq','addCommand','performMis','DpiVv','isBattlerT','_selection','processEsc','TrailRemov','%1Apply%2J','BuDNU','neralOptio','RTAIN','optDisplay','AutoMeleeS','nysXw','tForNewLin','_forcedBat','ENUjZ','DLdhE','isTurnBase','llList_max','performJum','ActorWindo','tags_Actio','_flashDura','ActSeq_Gri','isBattleCo','ommandEnab','executeDam','preter_upd','BuzcH','refreshAct','TSBHB','Miss','updateStat','OqiNc','tlVaW','utline','mandWindow','_forceActi','PhDyD','etsJS','createRate','oneSelect','yXIgr','KjGKQ','cImiN','PosOffsetX','pgcuf','dowScaleY','damageOffs','NameLegacy','UWKPN','geCounterW','forceEscap','5|2|7|6|4|','poCcp','ActionStar','eback','derActor','border','dTroopComp','aqXHX','isSkill','formMagicE','ZZVRd','formAction','crLIf','SikeM','mETB','ngs','MKFTa','4|6|1|5|7|','dJuCX','n_itemHit','PostStartT','wJFck','lukEffectR','BattleGrid','eCoreCriti','_growEasin','ForceRando','AddHpGauge','mation_Sho','WaitForExi','isTickBase','bHasz','rvEUM','hanics_Ptb','_effectTyp','tion();\x0a\x20\x20','ajGEu','origin','2|3|1|0|4','TGPzU','uiInputPos','IRJAd','isDuringNo','hIDMe','endIcon','geSprite','Value','test','position','_stateSpri','Point','LlKGE','gqjiB','GOgGJ','endTroopMe','BattleWind','umHLy','ttack','PARTY','dEnemies','ApplyImmor','AsTarget','layText','Type','HlOwp','tleLog_ref','elButton','updateTarg','KRHai','bers','selectAllA','oostAction','\x20const\x20b\x20=','_floatDura','MxTyW','NsiVb','domizedDat','KEdxC','refreshMot','ctAddNorma','ATK','prites','_enemyID','er_forceAc','3|8|5|2','StateIcon','turnOrderC','\x20const\x20cur','push','eIDQO','gzfYH','txdnU','Qpbuy','CdGJe','d_PushFrom','tration','jOrSJ','\x20Return\x20Va','ExtraSetti',',obj.name)','Cdydr','argets','ffsetY','BxDGy','eWeaponSlo','sing','charging','hanics_Var','hangeCache','n_numRepea','ABpHu','processRef','getDamageS','hitsDmgFmt','close','DAkRf','battleMemb','MAXHP','gJEjn','findSymbol','khmwx','sufev','uHWHL','xTfeI','processRan','setBackgro','nchorY','JEKYs','windowArea','id);\x0a\x20\x20\x20\x20\x20','isDrain','updatePadd','yTarget','xdUUZ','XneOn','eaknesses','rounded','tePlayStat','resetTextC','Window_Par','yqKKZ','monEvent','originalRa','addExtende','magicSkill','ill\x20=\x20(thi','priority','setEnemyWi','orderStyle','_displayBa','mmp','Animation','LlimZ','pNote','startShake','changeInpu','attlerKey','Evasion','_flashColo','VAPNZ','executeMpD','EajbC','NzReH','SwitchCrit','ARRAYJSON','ElementSta','jectile_An','HalfAction','isSideView','ndEscape','vertCells','updateStyl','hase','empVisibil','dded','MGLiP','eOffsetX','lOadl','subject','negativeHp','guments[2]','CreateActi','-%1','eredName','act_Desatu','return\x200','updateName','uQroQ','onActorCan','eId','wzwzo','drawEnemyN','ubVME','ing\x20a\x20requ','3|4|0|2|1','owSprite','Battle_cre','act_ColorB','displayRem','erBase_die','isFloating','critical','EOCHK','ess','ObhBR','CheckSkill','Objects','bUFHB','oon','TargetJS','_targetSke','BaseLine','mbnfY','EscapeFail','skill','ctSeqCamer','d_RemovePa','changeAtbC','battleCame','hdkby','hangeEnabl','CopyCombat','isEffectin','CTION','inBattle','_forActor','xZSBF','message1','_activeWea','ChiUs','clearRect','ZhNwF','iTsxW','isAtbCharg','_baseX','checkBattl','startHomeM','w_DrawJS','updateUiCo','oWHqn','PTYAT','49204hfVfDs','dguyf','nrNJw','ldTimes','dgdTM','processAct','ctor\x20=\x20obj','updateCanc','hanics_Cus','loonSprite','n_evalDama','performCou','aIqIV','TNWCJ','LifeSteal','AnchorY','hpHealingF','MpGaugeOff','SUCCESS','terWindowR','utIndex','frontview_','setupBlueR','MotionType','tion','HelpSkillT','yleIconTex','kitYH','oNfsj','nned','isSideButt','lurImpactF','VeaRm','ToJsPoint','Sprites','ActSeqProj','ion_WaitMo','wNCWC','ActSeq_DB_','mWindowsMi','atus','RegExp','processTur','filterArea','CoECc','Cvpqs','hBaseLine','LRmpv','fkzvL','MnfIp','ctTBa','VICTORY','innerHeigh','NxTfG','pes','ArRedFlat','MLAKY','extraPosit','bKkbd','KzLjt','rQPur','Filename','NbxCR','isDisarmLi','WFbeJ','WaitForZoo','my_setHue','loadSvEnem','createDama','form','Bhnty','_growDurat','\x20\x20\x20\x20\x20\x20\x20\x20if','ParseArmor','isAnyoneFl','ting','ShowRemove','battleOpac','_targetOff','_actorWind','wOffsetY','Radius','RjaSu','smoothness','wPosition','GVesl','ants\x0a\x20\x20\x20\x20\x20','ealer\x20=\x20us','ScaleToFit','\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20','performSub','er_onTurnE','rDistance','isBTB','rnJS','MultiTarge','ENEMY_OFFS','minimumSta','thod','(obj))\x20{\x0a\x20','setupWeapo','NRVlw','raRAe','attleCore\x20','enemyId','eTijn','\x20target.ge','le_startAc','pDamage','ons','YHJul','IconStypeN','_animation','Targets2','XZjrP','ement_Floa','customDama','eVersion','ommonEvent','AlPzZ','QFQvI','ParseState','damageText','eToPoint','Escape','tler_damag','kState','ActiveChec','kXEWy','ndex','\x20into\x20the\x20','XfvUi','ForSpin','skewBattle','136Gddkzi','_skewWhole','1|4|8|7|3|','ancelTPB','_tpbCharge','ement_Move','QIhAa','PreApply%1','updateDura','hanics_Onc','OeisG','Hidden','isAlwaysHi','_actorSpri','owVisibili','iAohO','jLAzS','erBase_era','gets','xfXVz','prepareBor','Fight','pageup','motionIdle','sCore','addAutoBat','HnzSf','WyESs','SdvQo','apon\x20=\x20obj','updateGrow','MGEBI','ationIdSlo','rPytL','orPortrait','TOmPN','evaded','rait','ttleJS','zysUE','EiZUf','eTransitio','fOZaD','gFlat','WaitForSke','czsSM','NImNP','%1Damage%2','totalHealF','shouldHide','effect','ED\x201','sition','PostStartA','nkqtc','bHQDT','battleEffe','LNPDh','opups','TyLKX','oHBMf','NXrFw','qoTdS','isBattleFl','htJpF','RSZNK','sBattleCor','HNhxx','\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a','tActionsET','0|3|1|2|4|','svActorHor','geting\x20to\x20','CommandSel','processVic','ZMiZY','ForceDeath','ition','undecided','getFullAct','_flipScale','Ext','IReqq','gMquM','leStep','_floatHeig','Enable','createBatt','animationB','launchBatt','targetsFor','enemyNames','ndAutoBatt','seState','bRSec','NEYmN','ationId2','currentVal','ansitionEr','PRvyU','CSFdJ','Mjvae','hitRate','eaponSwapS','weatherTyp','QCHIG','_targetX','updateWeat','etY','frameCount','DistanceY','kFQZT','lxGnu','Game_Inter','performCol','reposition','qqKTD','fiddZ','nJsAtNode','ActSeq_Ele','DeUXQ','czOBI','MHWFq','indowRectM','tWzVo','NwWHv','rvevq','smooth','try\x20{\x0a\x20\x20\x20\x20','IconIndex','Style','eForcedEle','tleLog_dis','BkBcH','expRate','oom','NZAjd','aponType','PostStartB','HsOGH','pdated\x20','LvxpK','_opacityWh','updateActi','displayCha','isTeamBase','Qrdrt','DYmKs','waitForOpa','idLdY','alive\x20batt','Variable','AsUser','_subject','aOHSR','ets','ugin\x27s.\x20Pl','ucKoo','getAttackM','uNFSt','ionsMet','er_onBattl','waitForJum','esolution','safes','Post','checkShowH','isLearnedS','featedEnem','ope','UwiMt','Scale','bles\x0a\x20\x20\x20\x20\x20','ement_Home','litImpactF','isTpbCharg','nCostPTB','isDamagePo','makeSucces','prite','iogky','xhvcd','iCpJY','ss-%1-%2','eCalculati','TPgpG','ngcBs','era_WaitFo','leY','setupZoomB','UseSkills','wzkJx','xOYuT','shift','CriticalDm','AllowColla','age_create','ivmwl','SyrPX','_battleBal','mand','qWaAb','\x20let\x20targe','isForOppon','mEVph','fWnlw','BreakShiel','VXbLL','hjEOb','kZefO','Node','nIndex','RtiNB','ommandAdde','PreEndBatt','QJOnM','install\x20%2','gfgoe','drawItemIm','OUWqu','canEscape','VLvUM','_damageCou','attleSyste','BattleCmdL','startActio','dState','isActing','command119','updateEffe','drawBackgr','olSystem','CcGZx','nXqjj','NsrpB','ckground','Sprite_SvE','ror_TVRemo','tForBattle','aOlhw','noSimilarS','ror_NoiseC','ForSkew','onAngleEnd','st())\x20{\x0a\x20\x20','TrDHH','\x20\x20\x20\x20\x20\x20cons','mpactTimeS','NameAttach','_homeDurat','popBaseLin','Turns','lerOpacity','le_initial','fontSize','displayHpD','canAlterAc','\x5c}\x5cC[21]To','_tpbSceneC','not\x20focus','aveCenterT','disarmLife','AtStart','EasingType','getNextSub','ler','%1-%2','imationCon','processFor','uff','_endingBat','GrYyC','FbyuH','rtMessages','Help','isOptionsC','AddNormalS','command357','setupDesat','Parse_Note','\x20=\x20user;\x0a\x20','ikFTw','createStat','createAuto','displayBat','terArea','LYWVk','JNzve','startMove','ArPenRate','AGI','LsKES','FromNode','parent','wcaec','clearResul','selectNext','onSequence','drawLineTe','FaceDirect','damageFlat','jectAniPre','_commonEve','QoL','LIGHT-BULB','\x20const\x20ite',')\x20{\x0a\x20\x20\x20\x20\x20\x20','MyeuL',';\x0a\x20\x20\x20\x20\x20\x20\x20\x20','fontFace','_homeWhole','ocation','isBorderSt','JumpToLabe','isBusy','setBattler','hanics_Ene','er_isScene','ABoli','updateFloa','Back','nEffect','Portrait','iEKOi','oOLyD','ontainer','_customDam','isEnemy','actionEffe','oqivz','aultHeight','gainCurren','n_isForOne','XClLX','4|1|0|5|3|','bkdtI','ustomActio','HTjVm','Targets','Swtvx','DefeatEven','Wzudr','makeDamage','ctBorderSt','isGrowing','OrderByCTB','casting','Game_Map_e','ist','getLastPlu','leUIOffset','dden','CYPsO','<CUSTOM\x20AC','inParams','Flipped','ionEnd','addFightCo','call','2|6|7','\x20\x20\x20\x20\x20value','scpyy','aQqCv','ndow','fBuJQ','amzQk','createInne','qGkyK','CIqhA','setBattleP','Ymgbn','nMSJv','_appeared','jectile','emerge','processOk','r\x20=\x20obj;\x0a\x20','setHue','fJCyj','%1\x20is\x20miss','ngedStates','Popups','Down','BoostPoint','QIPyo','MANUAL','paySkillCo','AnimationI','stitute','E\x20%2','maxBattleM','BsXxX','filters','hasSvBattl','selectAll','isItem','8|28|42|18','aXBzr','RnQsY','PreStartBa','setup','WindowBatt','uvfVu','refreshBat','gainStored','ShowSubsti','snapForBac','applyImmor','kWwhz','onSet','extraHeigh','CmdIconEsc','_PreBattle','nTlWi','cUKzG','ionStart','ActionCent','pVSSl','Lnglt','uPHtg','disperseDa','value','svAnchorX','HITTYPE_MA','mpeTs','revertTpbC','slice','itute','setupShock','ESCAPE','_requestRe','bLzWr','ParseItemN','ToFit','battleSpri','ActionEnd','aBnai','addOptions','UvzJn','ItemID','NzclY','JlXXw','%1\x20is\x20inco','st\x20armor\x20=','zFQdA','gainHp','ssActions','er_regener','hanics_Emu','ign','leBalloons','tartPositi','ngeAngle','xucYz','kSwitch','or_initMem','ForFloat','back','XAten','PRRGd','kground','teAffected','atusListSt','ActionSet','Formula','tFilter','oWlXk','\x20enemy\x20=\x20o','le_skillWi','ortionSpri','SYdKq','r\x20Battle\x20S','addedDebuf','eoGnA','isForNotUs','eJrlw','xGock','BaseTroopI','eJS','ngeTo','rnoyw','processBor','m\x20=\x20(this.','Ahpjd','ionMotions','battleback','isBorderPo','gFbvI','totalDmgFm','endAction','\x20\x20\x20//\x20Decl','setBattleI','LIGHT','dSprite','_regionBat','StatusWind','ActSeq_Pro','wPNiZ','ZGLOP','createJS','TvgNV','Exploited','artOncePar','PostApplyA','nextActive','ies\x20not\x20ta','PopupPosit','split','SkillItemS','pbVAH','+%1\x20MP','SceneManag','dPFyB','LRYPH','ywjsi','GUARD','ugeSprite','CniDe','fset','portraitTy','trim','WaitForFlo','Game_Actio','lSprites','pointX','PbZCE','nst\x20attack','ctionJS','Muadv','BgType','damage','createCanc','AhHrh','AllActorsT','mbers','RKIoD','xthQB','lineHeight','taStates.i','isPrevious','PostEndTur','HtGsP','increaseHi','Start','6|0|1|4','pDamage_Co','pattern','Sprite_Ene','me_Action)','wOMcm','PerformAct','d_Teleport','hanics_Ctb','isMVAnimat','CsmRB','isSelected','hGrlu','dragonbone','_makeActio','ackSlot','jCHkZ','NgicS','uhEfO','rsTld','XVjCC','n_testAppl','ement_Skew','UeaWo','PreStartTu','JoSAK','uRJjZ','isBattleTe','tleActor_s','battleProj','ctXPStyle','AUTO\x20BATTL','putActiveB','gPQAq','yle','upuwq','BattleMana','VisuMZ_1_B','ist.\x0aIt\x20is','LfQPa','removedBuf','haFaW','forceWeapo','stopInject','tAction();','isFrameVis','EBsvM','e\x20plugin\x20l','baogH','isConfused','setX','HP_Flat','GxauT','nst\x20enemy\x20','tleback1','wRTgp','battler','kWeaponAni','AUmcu','oPBtO','ap1','ams','negativeLi','xzWwc','BattleLog','Hsyzl','em()\x20:\x20obj','battlelog','IDYEu','STB','isAffected','in_EndVisu','obj;\x0a\x0a\x20\x20\x20\x20','ALL_ACTORS','ActorCmd','active','trueRandom','ET_Y','_targetOpa','vzAgQ','alterType','visualHpGa','VisuMZ_3_V','unter','OverallFor','makeAutoBa','9|4|7|2|3|','drZtT','zJrYB','setupNegat','nzywx','le_createP','width','WaitForSca','gugwt','ebuff','play','TpbGaugeOf','action','zJEXp','vTQge','AWiXK','lebackBitm','IjDhI','tlerSprite','er_push','\x20%2','stepBack','hanics_Otb','int','llYQs','_iconIndex','custom','LAkaP','_jumpWhole','\x20\x20\x20\x20\x20//\x20Re','33|3|36|21','ageSprite','ctAni','_tpbNeedsP','dWindow','ited','_indent','d_Traverse','vIZib','ilename','removeHorr','rLfWY','orMsg','_item','owBattleCo','isAutoBatt','stTarget','n_itemEffe','isChanting','GQqxK','mationSpri','onFloatEnd','eaponSet','lelInterpr','EndBattleP','HelpOption','NextComman','clearEleme','ingType','_battlerCo','battleDisp','nemyWindow','MDF','XtSPH','plyBattleC','imCbE','offsetX','DefaultSof','|31|37|35|','uTZKN','lyJsK','UdwBU','gonbonesAn','SettingsBa','extendTroo','uvjeV','mation_tar','numTargets','owXPStyle','dead\x20frien','lastComman','LJRta','tForAnimat','_setup','IdTHu','Destinatio','\x20=\x20obj;\x0a\x0a\x20','lCommonEve','xJVLb','ssRov','lMsg2','jVJzU','ttom','vAHOQ','getSpecifi','mnZzV','tesToDisto','flashColor','singleSkil','iaTre','sDefeat','_targets','hasStaticS','measureTex','hanics_Atb','ger_startA','blt','After','ActorInput','le_createA','uuerc','FAILURE','lateSkillE','ger_initMe','tWindow','removeImmo','allels','loadSystem','#%1','lJcOd','ired\x20plugi','eSpriteBat','lyyyH','equence','le_onEnemy','bNekO','torCommand','initialize','AmPNn','eMotionFor','ape','wMvjh','isGuardWai','code','ACTOR_OFFS','constructo','ycVQr','ERlHJ','processDef','canAttack','103324jmVLdq','PopupShift','mopee','Scene','jDaZS','yYDSv','JbckP','|\x200;\x0a\x20\x20\x20\x20\x20','NCIjw','QJCSk','updateHelp','RLvib','declareGlo','uVPaN','coyHl','_forcedHom','KBeOb','kENEN','nAnimation','performEva','usSprite','jcpLp','dBxKT','ment_Force','fect','leszU','dBVCN','yeQLk','FNRtt','d_MoveTarg','Enemy','emSTB','ion_ClearF','applyFreez','Move','tleLog_upd','skillItemW','zHoWL','d_PullToTa','tWindowRec','act_TimeSc','OaiTd','ifkQQ','selectSymb','bcPmp','kxkrf','OzNAx','\x200;\x0a\x20\x20\x20\x20\x20\x20','attachSpri','ateLowerLa','Enemy-%1-%','agePortrai','Game_Temp_','Check','setHandler','dKufr','kkPbS','offsetY','inning','mboWindow','jsOneForOn','POST-','Weapons','ceX','CreateComm','getInputBu','324863LEfUFh','aseDelay','tory','SiDxk','battleComm','cJHTu','clearAllVi','isEscapeCo','ET_X','just','result','attleGridS','EQMVr','_lastActor','CastPhysic','drawItemBa','rollY','State-%1-%','isPhysical','validTarge','t())\x20conso','WaitForPro','le_startEn','WindowRect','ieGDZ','addChild','startMotio','fywJT','kfXqv','_back1Spri','pping','cancelActo','actor','checkTpbIn','XdbKV','le_windowA','hBattleCor','ddle','indow','canGuardBa','mation_Ski','PostApply%','ZCGtv','loonIconSp','dFromUiCon','_equips','reezeFrame','jumpBattle','SSPfh','ComboWindo','updateSele','PGkbc','stateMotio','displayAct','leBalloon','=\x20(this.co','or_setBatt','flashDurat','attackTime','NNBrF','_homeY','turnAction','erOpacity','ToTarget','Game_Map_b','svBattlerS','tSwitches','DcRDz','ngWXm','nchorX','_cacheText','lPYnO','min','mation_Wai','GLtZs','ntainer','createDigi','ldRCh','name','textBaseli','Line','nbwnJ','Visibility','SkillID','attleCore','Class-%1-%','gYuad','))\x20console','MOtfw','isImmortal','usCore','message2','List','actorComma','partyComma','hMotion','Steal','TetZx','zyNNZ','UyuGK','tActionsFT','Direction','die','isTriggere','weyat','ZzMvf','ConvertPar','Cancel','work\x20','amage','processAbo','_speed','applyHardD','AniDuratio','guard','LifeStealR','avePoint','kfoaT','bcerT','WfhUw','dvUum','turnCount','fsetY','CmdIconOpt','CxMCH','VisuMZ_2_B','ActSeq_Imp','hanics_HpM','getEnemyId','Fxbni','justPositi','0|3|8|4|6|','ecific','Gain','IkJxF','SelectionM','drawTextEx','lYUsB','otion','0|2|1|4|3|','tleEnemy_s','FeRYF','onTurnEnd','ctorComman','ZxFUi','lements','yaufy','qolPm','_growX','pactFilter','_list','UDQIq','tPosition','OAcGf','imationAtN','tags','NiRmW','uDFhz','\x20\x20\x20const\x20h','\x20\x20\x20\x20\x20if\x20(I','Shadow','autoMeleeM','onEnemyCan','statusWind','ClearBattl','sUserJS','ct\x20needs\x20a','suoRa','yNameConta','JsPoint','teJS','tleActor_h','ikSrH','allBattleM','DyyGP','cancelLife','StateID','VisuMZ_2_D','my_updateS','artySystem','tyle','\x20\x20\x20return\x20','n_setGuard','ctActionSe','mUlxV','MAXMP','updateOnce','istStyle','woZho','setBattleA','isFriendly','JvaPu','members','rtraitSpri','\x20\x20\x20console','tStyle','nemy','YFcZB','ChildSprit','KeXVL','ite','\x20a\x20Tier\x20%2','swapEnemyI','ndowMode','tateSprite','pon_NextAc','TgnWm','HvaKL','formReflec','showHelpWi','QuDep','yDuration','IWEOe','yoEyi','_deathStat','asIfO','usePremade','NmYpy','_battleLay','FozPI','calcWindow','PrioritySo','FvqRL','ActSeq_Zoo','ger_isTpbM','applyBattl','isHiddenSk','acPcF','era_Reset','eld','owSkinFile','battleUIOf','age','walk','applyDamag','cphvN','focus','weaponImag','aEbpz','applyForce','BKJwb','ameraTarge','ActSeq_Inj','PartyCmd','ata','Change','SHOW_BUTTO','target;\x0a\x20\x20','round','BattleLayo','Javyc','isChanging','ekMgK','_target','NCuBY','qhEyx','fAAnH','efender\x20=\x20','PYrSm','MYTiK','tandardCol','rtionSprit','zoxNr','ANTI_TINT_','yJWIp','isRightInp','WkIcc','sliceMax','MotionFram','victory','PLZCq','startVisua','esCore\x20&&\x20','yiNwO','Lrwxy','_callScene','pZRsq','updateComm','hgpDc','\x5cC[4]Hit\x20C','CommandVis','alive\x20frie','Action\x20Seq','updateRefr','ZqmFz','Friend','HITTYPE_PH','performAct','VisuMZ_4_I','ckVRh','2|4|0|1|3','\x20\x20\x20\x20consol','LEcSv','ement','ents','ssQOD','createActi','hTzYX','SfniK','lateAttack','TextFmt','MoveToJsPo','EnemiesByR','ideviewBat','EffectCoun','canUse','addCombatL','SMqLA','ConvertAct','isForAll','rPortrait','_angleEasi','TOiui','ityVisible','nd\x20Provoke','fhaYZ','battleFloa','_hue','iUtOa','ToNode','vgqRK','gainHalfAc','UNTITLED','teTurnsCha','isPartyCom','KVERT','updateJump','isForOne','Enemies','State','addText','processEne','ion_Freeze','clearNameT','nents','createLowe','fpbNf','_preemptiv','epLWm','lifeStealR','AutoBattle','lUpcB','updateShad','dataId','XACCf','0|8|3|2','qProjectil','UoGcU','children','_battler','fJQaq','Menu','tpbActorSw','priteY','oxXzW','dying','playAction','etSelectio','psYfB','JUQDA','1Name','ger_checkS','hPoBO','clearBattl','right','BKUHI','performSha','jcAkY','RatioJS','makeTarget','_wtypeIDs','DEF','ilter','of\x20VisuMZ_','const\x20a\x20=\x20','all\x20actors','KqUMd','qckRK','selectedBa','uge','rtjTO','tleLog_cle','HpGaugeOff','battlerKey','MiCyq','ndWindowRe','eCore_Dama','bGFPL','nds','_jumpDurat','setActiveW','ERATE','jJNtQ','IaCsb','textSizeEx','invokeActi','aliveMembe','RmtGS','HPWhz','\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20','tomActionS','mqtan','UgEsn','opponentsU','adjustWeap','setImmorta','_performAc','KvBZf','customFont','wdpYF','troop','EFFECT_COM','SBLEU','ttonString','lwiqU','drawGauge','rea','ActSeq_Cam','WYBtb','drain','OPmYv','traitTarge','n_isForOpp','updateFlip','ectJS','\x20rate\x20crea','battle.','tpbCommand','%1\x0a\x20\x20\x20\x20\x20\x20\x20','rInput','CYQoc','wholeActio','oqLyZ','chedSprite','Loaded','_offsetY','EXCLAMATIO','itemHit','RLtiC','JwrSL','ErzFI','YeKIi','setSvBattl','isPlaying','zwjlS','setActionS','ePobB','ale','WaitForMov','isAlwaysVi','TRJKD','fUjgw','AehmZ','log','DpUdN','xRuqq','pow','ParallelIn','pNsoh','updateLink','nst\x20user\x20=','on\x20=\x20(this','_shadowSpr',']+%1','.isPlaytes','AsTargetJS','ugePositio','CVsRB','redraw','y\x20Variable','_waitMode','te\x20=\x20argum','sZILe','d_RemoveTr','freezeMoti','PreEndActi','ger_onEsca','DkUmd','formCounte','rtyCommand','font','le_updateS','act_Oversa','Vhhlq','End','eplacement','MELEO','surprise','ctor\x20===\x20G','GvCyl','battleAnim','freezeTime','ctiles','ShowMissEv','drawComboT','WOmiZ','initElemen','_pattern','updateStar','symbol','Window_Act','ndSelectio','n_executeM','DTB','VjIAE','meWindow','ingAction','cuFbF','\x20\x20\x20\x20\x20\x20\x20\x20%1','flipVisual','targetActi','getItemDam','3|4|2|0|1','mandEnable','jFKuc','sortDamage','zWfWx','isMagicSki','NUmOK','apse','dCap','SEowX','isAnyoneIn','Types','LqgJj','_skewY','save','tFgGs','ngle','VLEPY','=\x20obj;\x0a\x20\x20\x20','callOption','mallest\x20to','LuLmD','TPB','NextTurn','rQQRu','YrASJ','descriptio','zZoGa','YIUmS','eBattleSta','ShowFacesL','destroyDam','RiwGs','rollX','lectionVal','ageAmountT','ulmbV','78sdLyIZ','emulateAct','leCommandE','ainer','Dfovz','leJKf','startIcon','le_updateB','conBalloon','ameTemp.is','turate','format','joQVc','\x20{\x0a\x20\x20\x20\x20\x20\x20\x20','RYZkn','bJEGb','lure','ger_makeDa','Window_Ite','dzRsz','ation','2|0|1|3|4','mpHealingF','loadPictur','eTHIT','eRefreshRe','BattleDefe','tcMqK','Flip','EscapeSucc','jectAnimat','ginCommand','_buttonTex','prototype','XPJLQ','clearTarge','htOLW','_jumpHeigh','olor','le_partyCo','mtwLP','ePosition','checkExten','ponSlot','makeComman','ffectSetti','getNextDam','battleAngl','hUEuQ','setWaitMod','ENouu','Cdkeo','mand283','nsole.log(','OnUQl','zLcwA','n_updateLa','ctPrep','AXqGt','TargetNode','tpuZD','erStylePor','MBtOo','ionEffect','updateCall','replace','WtZFc','dList','bDANQ','changeBatt','setBattleS','Order','leCore','SkewX','RxUsC','isActionSe','embers','orGroup','retrieveBa','VisuMZ_4_C','sible','back1','isATB','1];\x0a\x20\x20\x20\x20\x20\x20','oHXWf','OwOuT','hlSrP','JS\x20%1END\x20A','le_createE','ltYmq','quest','IfvDS','Tfosk','isAnyoneSp','addLoadLis','CAqgG','canBattler','cancelMpLi','oreVisible','LzxYK','pha','YyPdU','tFMoO','rnxVg','SkewY','ActSeq_Ani','pUxNq','mationMV_u','UpAPK','erBase_mee','_bypass_ap','VisuMZ_3_W','_damageCon','nable','EdmIi','n_isForAll','MFiyP','onst\x20a\x20=\x20u','pages','ltmpA','Defeat','ActorCondi','forceMotio','ixRZG','PqtTv','tionFrame','tion_1for1','ttackAnima','tStatusCor','llback','friendsUni','tionId','iablePopup','_actor','FGCjO','ARRAYEVAL','sXxQT','PartyComma','VipEE','ResetFocus','AsUserJS','attackStat','MAT','drawText','city','xJlpa','dTroopMemb','SkillsStat','front\x20base','resetResul','pedBattlef','tleSkill','lay','SceneBattl','N\x20Check\x0a\x20\x20','BattleEndE','}\x0a\x20\x20\x20\x20\x20\x20\x20\x20','COMBAT\x20LOG','uKfjc','exit','mCTB','cale','hanics_Dea','aN(value))','SKDOC','displayAff','NwjXf','UpQcJ','hpAffected','targetDist','ateFrame','delay','ttleBalloo','VisualCuti','Union','setFrame','magePopup','tActionSet','isBattleSy','onSelectAc','scale','startWeapo','ccess','isDead','this.item(','GtmPC','gle','rate','sliceMin','playFailur','setStateTu','command301','indexOf','wtypeId','pzGbB','effects','dow','isShownOnB','loadWindow','emBTB','SCKpW','SvMotionId','VOZcJ','qoyvf','canAddSkil','jFsRh','tleStatus_','tlerMotion','rgetNode','zNZtV','VariableDm','bxKKA','compareBat','isWaiting','etsInDirec','act_Motion','ruBeo','inputting','JllmH','MeZNq','uqhfv','vent','jectile_Pi','atbInterru','its','ActSeq_Cha','ror_Glitch','t\x20receiver','her','ATTLE','calEffect','requestAni','updateEven','ActionSequ','1|6|8|3','_floatWhol','textAlignm','tIndex','battleSkew','rHomeDista','CommandSho','Xmxyi','finalizeSc','deselect','ity','createBord','create','HHQSC','motionType','mUGTo','ageContain','startInput','StartTurnM','EhpAU','_effectsCo','eight','KffIL','drawActorF','unshift','LGSAL','float','setY','LROhj','YQDHN','BvzCI','LCJmi','_angleDura','isHidden','isCertainH','_flinched','formMiss','ffect','pgXEf','canUseItem','CmdTextAli','jJZTW','|15|13|4|3','LTiJc','muPkp','uTuso','Requests','hanics_Mul','tPopup','pire','mation_Gua','ELBBc','with\x20lates','ctilePrese','dNxTz','pause','Pre','Sprite_Wea','setSubject','DTnVe','usWindowAn','ActionSkil','dGameTroop','oited','anager.','_expTotal','jRkLL','rHomeToPoi','s\x0a\x20\x20\x20\x20\x20\x20\x20\x20','fnordAdded','ageXPStyle','brBAt','KqneX','tzBAP','Names','initMember','addShowHpG','fqTuN','DamageFlat','jooFX','FriendBatt','erBase_ref','ActSeq_Mov','rec','jHsCF','d_AddTrigg','CrvWP','WaitForAni','SILENCE','wText','WnjGx','helpWindow','isCTB','tleback_ad','string','equipSlots','stepForwar','cel','logActionL','type','sitionable','ntainerPos','n_setSubje','YtJJn','fHjIO','lifeSteaIt','ptoBQ','text\x20targe','battleBall','ActSeq_Mot','isCancelle','XPActorCom','rEffects','_hpGaugeSp','\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20','PostApplyJ','RaiseJS','createPart','_index','my_updateB','loonIconRa','Frame','FwhWP','JS\x20ESCAPE\x20','sorArea','EAceB','undType','andVisible','hadow','onBattleEn','abnormal','charged','_baseY','vvVyr','LJLMs','onEventKey','LmEPI','alignBattl','nitialize','back2','random','findTarget','extCommand','atusXPStyl','con','ests','_lastEnemy','head','%1EndTurnJ','EBfHN','wEcFi','FHZYv','_linkedSpr','5|9|2|6|4','openBattle','_createCur','oreAutoBat',');\x0a\x20\x20\x20\x20\x20\x20\x20','ActionEndU','jOSBD','xWEYa','recoverAll','vVapM','orfpg','callOkHand','_branch','nNotetags','actQT','ooGwn','oryJS','suMZ_Battl','rtActors','sion','bitmapWidt','dowItem','HWhmb','gradientFi','addImmorta','_visibleDu','uNXBV','tKFAJ','Tygvv','er_clearMo','centerFron','allowRando','acity','calHitRate','eItemCondi','ner','createWeat','xSUty','setupDamag','hPower','nzvVn','3|2|1|0|4','mergedEnem','qISOK','Declare\x20Co','LWMLq','OCKQT','zqZvr','Brqyw','rtActive','aSKXE','rGkzl','YwvPb','VisuMZ_2_A','mMQwm','Action','AlKHd','isNameTemp','setItem','evalDamage','uQKOJ','StateOverl','entArea','pAligned','deathState','ShowCritic','yMLsf','sMotionAni','EmergeText','JGLsR','lectionVis','spinBattle','uEcPG','JxHTh','tleLog_Dis','checkSubst','NameFontSi','ngeBattleP','lue\x20=\x20argu','rontviewBa','ving','Elements','Scene_Opti','compatibil','ager.','EwEkh','damageCoun','makeUnique','le_termina','mainSprite','tionJS','ect_Animat','cal','_dimmerSpr','_battlerKe','_jumpMaxHe','criticalDm','+%1','onLayout','GGQkO','svActor','BattleStar','utStyle','jypVO','emyBitmapL','displayCur','ShowButton','mYQAC','CancelButt','or\x20===\x20Gam','wCaOT','_updateDur','eSkth','sorSprite','achedActor','ateJS','isMagical','uEqYZ','0|4|1|5|3|','quence','BYGpf','remove','scope','QNEWy','lSystem\x20ne','fCtVT','bottom','removeAnim','my_setBatt','get_PrevTa','le_logWind','enabled','loonQueue','udKFZ','animationW','tFilters','rmKgY','llAnimatio','ortraitFil','or_updateS','ZTLgw','\x20\x20\x20const\x20b','initVisibi','softDamage','.construct','isAnimatio','tQGZr','PJqAE','rTYIR','NewState','_updateFil','attackSkil','ctDefaultS','NWDCR','ionScaledY','YANfQ','orrorEffec','LyFEJ','All\x20Allies','Scene_Quic','MvEDR','rMultipleS','BVQAe','Immortal','meetsSelec','createHpGa','removeBuff','getBattler','Game_Actor','leSolo-%1-','2|1|5|7','cameraClam','PRCop','lywNR','onSpriteTo','ShowFailur','regenerate','_skillWind','CayJD','ActSeq_Mec','OffsetY','SpeedJS','Users','GQmgm','sleep','GkdVb','removeOnce','moveBattle','leBackHide','hPCtG','rDDuq','rtal','helpAreaHe','checkAutoC','drawIcon','placeActor','lers\x20not\x20u','NCDry','deadMember','BattleSyst','ForJump','ion_ComboW','isCommonEv','monEvents','mlkct','tePosition','ize','.log(e);\x0a\x20','currentExt','ScaleUp','nQfGC','visualCuti','ZXDrK','bReady','expTotal','mSTB','%1StartTur','attleback1','_itemWindo','act_Shockw','LHTgK','_actionBat','virtualCli','performRef','escape','YZtrr','alphabetic','3|6','Wave','NVbQY','hitText','kIDWE','_armorPene','fected','eEnd','lection','_onceParal','ARRAYSTR','setupActio','eCore_PreB','erSprite','1|0|2|3|4','mation_Cha','VoiceLine','createActo','emCTB','VtFSk','ror_NoiseR','skillTypes','eIconSprit','parseForce','Options','3|4|1|2|0','s.construc','nqDap','iJRaP','er_clearDa','erMotionTr','oundRect','WithName','ZiWjC','RopeC','clnJh','sAzjb','attleProce','onText','createEnem','textAlign','updateInte','finishActi','XPSpriteYL','helpAreaBo','rguments[0','LoAtH','RHZNj','PortraitSc','actorId','nge','HP_Rate','TEGIT','NYHNP','_addActor','GLBBC','114yzbLCS','\x20\x20\x20\x20\x20\x20\x20\x20\x20%','nqwKD','lity','tleLog_Cle','lid','stepFlinch','indowRectB','wSwitches','epsqa','xjkqB','retreat','clear','nSjMQ','SETTINGS','FkRWY','EGqRt','commandNam','_ptbAction','leBattleNo','BCvzT','_visualHpG','isOpen','mBTB','rate)){\x0a\x20\x20','extBattleC','nPQXc','ionsMenu','rame','VdJZm','sor','preter_com','tes','DxCuQ','spell','tLXLO','Mirror','weapons','jdsyy','in_WaitFor','ser;\x0a\x20\x20\x20\x20\x20','ill','Givru','_targetAng','addedBuffs','base','HFHOL','zgpLt','lSFbn','isAnyProje','setupChild','NDXeP','collapseTy','bility','\x20to\x20%1\x20mid','_methods','isualCutin','SWEAT','DnBSd','isAnyoneSk','addSingleS','FrameCount','tion_Scale','faceRect','erToNode','geFormula','_performDa','\x20\x20\x20\x20\x20\x20\x20con','le_Reset','resetFontS','hYQuS','commandEsc','gRate','_WholeActi','makeSpeed','NfbvE','nJS','hanics_Boo','changeCtbC','ZuYdV','Visible','ageFormula','akShieldRe','_distortio','dYsxd','qZAns','owRectBord','comboWindo','vnifB','rns','shadow','andEnabled','rdAnimatio','jCkGY','_skillIDs','eCore_Trai','VqFOg','multiTarge','nsitionErr','updateCoun','hAqUl','QZycb','makeData','rtOnFinish','XjmfH','CreateCuti','concat','if\x20(isNaN(','MIWzd','llTRp','aPJrK','Actor','formCollap','argeted','startFloat','CUldg','ParseActor','ScaleX','qHqRi','playEnemyA','isAnyoneMo','dMERr','addState','FlashColor','All','ist\x20from\x20s','qJUky','AntiTintUi','move','lEuNp','VisuMZ_2_P','WMOZB','prepare','tusWindow','tleLog_per','dom','setupMotio','parallaxHu','ZNDJC','stbGainIns','ationConta','or_createS','setupCriti','VxDNv','Nhrbx','\x20BATTLE','rFDOE','MP_Rate','($gameTemp','VctXB','gYEDk','ationSprit','wAnimation','addSkillTy','EvLiw','TSokB','OwdjU','SwitchMiss','isSceneCha','EVAL','isForRando','guardLifeS','resetCount','_attackAni','CommandTpb','_mainSprit','Letter','isCurrentI','applyData','arPenFlat','WaitForEnt','ehKIG','houldMirro','ctionEffec','YULMj','forceActio','_shakeFlin','ZMhmG','parameters','lgJDc','cWzmi','ossCollaps','setBlendCo','zXSui','LNNrH','Evade','TJofO','tEnemy','Text','teal','createTarg','dZZOc','attleCommo','\x20\x20\x20\x20\x20\x20\x20}\x0a\x20','_updateCli','oobmT','get_RandTa','updateActo','edStates','hanics_Swa','mqpjb','art','addMeleeRe','\x20\x20\x20\x20let\x20ra','maxCols','itemWindow','physical','n_isForFri','dBuff','cancelTarg','States','placeState','DisablePar','xkhew','URvdL','ment_Clear','oaqhE','\x20(Imported','HesNV','cEnit','DpmIX','SKILLS','hmentSprit','getHardDam','is.constru','_back2Spri','formRecove','ideBattleN','ange','iVhUd','AS\x20TARGET','MessageWai','jgmSO','teIcon_upd','bitmapHeig','eat','Sprite_Sta','createSepa','\x20=\x20origina','n_makeDama','eApplied','ons_maxCom','isSkewing','ShowPopup','yJbKp','lVariables','lity\x20Varia','QEfFT','tAnimation','ctSeqProje','anchor','fKJtC','animationI','rpreter','_colorType','AdjustRect','kOdpM','nIDAtNode','Linear','EAbcD','EVwed','yyTGY','HrDFa','ayed','));\x0a\x20\x20\x20\x20\x20\x20','hasSkill','displayCri','StepDistan','alue\x20=\x20val','addTextToC','tate','isSkillIte','System','Spriteset_','setupIconT','Mechanics','getDefeate','TDlux','bal','itmap','movement','Setting','esCore','isAppeared','ReflectAni','SmoothImag','clearOnceP','kLoad','_createCol','ORhwl','ActSeq_Cut','RdkCQ','removeActo','Set','find','uKZZa','rLczP','minate','lipped','pTp','jsScaleDow','gainFullAc','qlIlz','zLcHF','VPSxD','IOpJo','PkHNc','tler_setHo','#ffffff','BattleAI','rollXinver','sAbort','horzCells','er_makeSpe','aawuf','YNDkC','VvhTj','lBaca','set','xymDo','rtrait','cedAction','alive\x20acto','NQFaV','growBattle','battleJump','getStypeId','updateLast','tPositionB','teObjects','meetsUsabl','leFieldBat','peSuccess','eMotion','alValue));','3|0|5|2|1|','dead\x20battl','isItemComm','urateImpac','ITEM','boxWidth','AddOption','preter_Plu','tipliers','_currentAn','];\x0a\x20\x20\x20\x20\x20\x20\x20','|11|9|27|5','skew','attle','ter','ebackBattl','Angle','sorFilterA','usWindowPo','_enemyIDs','rollYinver','invokeMagi','addedState','lapse','Update\x20you','thBreak','animationS','BdDaG','Scene_Item','ForMovemen','_text','fier','ger_applyD','CheckMapBa','onEncounte','endAnimati','waitForMov','Cols','ton','ActSeq_Bat','\x20const\x20att','w_WaitForS','worldTrans','BSAvS','mmand','tleStyleCo','uFuNT','JPXnT','n_isForDea','le_onActor','\x20targets\x20|','RpiLe','isStateAff','isAnyoneGr','TLpDN','ameraPoint','nSet','9|4|8|5|6|','etCandidat','eAnimation','ortrait','yCrHd','eCoreHitRa','MKjUg','extDelay','_motionCou','ttleEventV','n_executeH','tler_updat','ALL\x20SKILLS','VisuMZ_4_B','ions_addGe','isCommandE','IoNNS','AvNoA','sNfNR','FocusX','lCHCD','w_Reset','fbCPe','llWindows','eCoreData','ements','dtnCF','\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20','ger_cancel','JlSrI','BRgSD','arPenRate','changeWeat','placeTimeG','ost','s.\x0aPlease\x20','duration','<%1>\x5cs*([\x5c','updateBatt','pZWXM','4|3|2|1|0','4|1|2|0|3','messageSpe','stQsd','perse','svShadow','LIGHTBULB','s.includes','tleback2','chBattle','mPZla','Effect','_targetHit','BattleEndP','nameY','startJump','VolAS','yer','wmxvu','AaSwD','amageFormu','lebacks','EJdQK','RTKgd','sjELV','statusText','etPosition','peFailure','isVisualHp','st\x20b\x20=\x20use','olo-%1-%2','TYsDU','ALtMi','5|4|1|2|0|','waitForEff','toUseBoost','checkScene','setGuard','NRmti','htLix','status','oreEngine','Ypfdi','xwixn','ShowHide','\x5c/%1>','mageCap','Rate','WIDTH','Attack','CalcAction','ffDFl','performDam','myModeTouc','entBattleC','_autoBattl','svAnchorY','itemLineRe','ingState','bLHaM','iXQfg','killsState','selectAllE','_cache','ainPhase','LFRYi','JS\x20BATTLE\x20','eCore_Base','ZWSQD','VariableID','pdeaY','ActSeq_Ang','umeAfter','\x20\x20\x20\x20let\x20va','visible','AutoMeleeA','isFTB','updatePhas','ayOffsetY','Game_Map_s','VisuMZ_2_H','xoKWS','Value\x0a\x20\x20\x20\x20','qXcPL','%1EndActio','Balloon','Name','isNextScen','kdisU','mhp','riend','endBattle','LastSelect','RecoverHp','eovnD','Candidates','isTpb','updatePoin','wURMm','atibility','wFNGj','GroupDigit','KLIji','LdciF','ESQId','rorMsg','tone','vYEhq','hanics_Ftb','some','CjKpn','gaugeX','mpatibilit','%1StartBat','how','CtKKr','dowRect','clearDamag','battleInje','WEXAC','prev\x20targe','updateHome','AttackAnim','Cjgbb','ect_WaitFo','_statusTyp','tlerKey','cvAgB','createTroo','mandLines','Opacity','tleLog_pop','revealNewW','\x20\x20\x20const\x20r','tionOrders','HomePosJS','gnqlP','WBQGb','owScale','executeHpD','pqIjA','fCygR','nce','jectile_Ic','Priority','JMWBx','pon_loadBi','ujFbE','\x20\x20\x20const\x20a','orarilyVis','CastMagica','hitFlat','OlRgA','sort','qnIwS','m_Reset','qLobr','ReflectPla','VisuMZ_3_A','DczOD','gaugeLineH','makeBattle','r;\x0a\x20\x20\x20\x20\x20\x20\x20','callUpdate','tFlat','BTestBypas','dzGKr','uence\x20Impa','ss\x20Code\x0a\x20\x20','_weather','tler_initM','VisuMZ_1_S','ortraitOff','ger_endAct','ack','Phase','IxAjV','startActor','etupBattle','_weaponSpr','_tpbState','\x20\x20\x20\x20\x20\x20\x20//\x20','loadEnemy','yHtSd','rFrames','rUYIB','KeyTargetR','inputtingA','_actionInp','eDuration','pdCox','HyOME','applyItem','jcuAl','turn\x20Value','_offsetX','ntAnimatio','tepVh','ctsContain','NameDamage','addEscapeC','putOpen','erseDamage','n_isForRan','setupTextP','eTarget','SkillCost','Vxjia','tleUI','ParseEnemy','JS\x20%1APPLY','loonIcon','CrAEe','adjustPosi','onJumpEnd','YOYWJ','HelpAutoBa','d_ClearPas','rmjDd','vUneK','eBalloonPl','formula','\x20\x20\x20\x20\x20\x20\x20\x20co','prnqg','knNLT','ger_inputt','_handlers','randomTarg','_motion','oNEFV','1516347KrkSId','ttleScope','onEscapeFa','_executedV','bind','Exploiter','sText','ZBlEQ','isBypassDa','addCustomC','vLSoL','Interprete','esIQy','rLayer','ingDamageS','finishActo','_backAttac','wBackgroun','ipped','reduce','tleLog_Wai','ingleTarge','cancelHpLi','ttle','tateIconSp','ectsContai','\x20Enemy\x20tar','dex','hanics_Rem','updateBoss','rmulaJS','ible','auge','Mhcia','ezwYf','fhrHf','DBXhh','ventIdWith','OuRnK','ActionItem','_showWeapo','bLNzi','yDcfg','qymwx','lers\x20not\x20t','callNextMe','playCurren','setLastPlu','updateBord','PVnMi','waitForNew','FfWTZ','eMotionFra','waitForAni','gozOE','HbnUg','hiJpM','CiRpt','ion','isForFrien','value2','ObWuS','tMembers','ement_Scal','context','NameOffset','setHorrorE','ode','createMult','esAuto','Pmrxl','ADnpu','urnJS','RduxT','initBattle','\x20plugin\x20pl','orderCols','debuffAdd','AopsD','attackAnim','left','cHseT','resetNameT','nuTxB','iwPZz','my_update','RIHAD','entReserve','eActorWind','Window_Bat','aTXAm','er;\x0a\x20\x20\x20\x20\x20\x20','getWtypeId','createStri','ments','IfOSm','param','SgmgR','OTkno','ActSeq_Wea','SvKfJ','select','utin','1JS','_scene','IAqWO','\x0a\x20\x20\x20\x20\x20\x20\x20\x20}','portrait','ateWaitMod','gShyn','ailData','adjustFlip','removeStat','waitForFlo','ImPHh','ger_startI','clone','le_startPa','qoZxF','eCoreJS','eCore_Fail','FCxRM','JMTma','NuhFW','removeBatt','overy','wEXjW','compareEne','_enemies','pVHxq','qRGED','lCommand','SJIyt','%1EndBattl','isSpriteVi','contents','MP_Flat','_skewDurat','eCore_Acti','startDamag','XiyUW','mands','mage','RFQzK','IgPtH','performRec','silentHome','ymole','Gauge','ection','setCommonE','ionAnimati','zlYvo','getCommonE','tions','addSkillCo','ED\x203','ackAnimati','knVdO','HjOdn','ionData','ion_Perfor','ideSwitchN','setupFont','skillWindo','gTMMf','applySoftD','formDamage','ShowTpDmg','owSkinHide','_uiContain','notFocusVa','n_executeD','isStateRes','Game_Troop','lementStat','eSprite','refreshDim','isAttack','lastBattle','RectBorder','alid','AutoNoteta','GSLAh','2|4|0|1|3|','iPkwe','erStyle','traitSprit','TpbActiveC','isOnCurren','_lastRegen','getDualWie','GesnW','lifeStealT','rentState','auge_JustD','CmdStyle','loon','battleSys','ZWrnI','forActor','ers','zCells','ZwGTN','emySelecti','playMpDama','uyTNd','zoQRS','Results','\x20Process\x20C','NameAlways','gcpGX','MYIrK','criticalHi','OffsetX','ement_Face','_battlerNa','Buffs','becomeSTBE','SvWeaponMa','on_Notetag','rCommandWi','gainTp','atHeight','OaMNz','JS\x20%1END\x20T','TnZZS','rByLG','nSettings','fKPzB','rBattleCor','applyGuard','FiPjQ','loadBitmap','CurrentTur','JSON','_growY','oQWVH','QgvAu','addBuff','Cost','eeeVZ','OOadR','frameDelay','fight','jectFromPo','3|0|1|4|2|','hpDamageFm','ard','ight','useItem','\x20arguments','Scene_Batt','hanics_Ana','yCommandWi','tForEffect','MaxLines','ide','randomInt','_partyComm','tleStartup','artBattleC','HelpEscape','ier\x20number'];_0x498c=function(){return _0x4cc077;};return _0x498c();}function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy[_0x4258d1(0xf38)]=Object['create'](Sprite_Actor[_0x4258d1(0xf38)]),Sprite_SvEnemy['prototype'][_0x4258d1(0xcab)+'r']=Sprite_SvEnemy,Sprite_SvEnemy[_0x4258d1(0xf38)][_0x4258d1(0xca3)]=function(_0x1c649c){const _0x2e32a8=_0x4258d1;Sprite_Actor[_0x2e32a8(0xf38)]['initialize'][_0x2e32a8(0xb14)](this,_0x1c649c),this[_0x2e32a8(0xfcb)]['x']=-(-0x3d2+-0x256f+0x2942),this[_0x2e32a8(0x868)+'te']['scale']['x']=-(0x1*-0x1b32+0x72d+0x1*0x1406);},Sprite_SvEnemy[_0x4258d1(0xf38)][_0x4258d1(0x3a2)+'owSprite']=function(){},Sprite_SvEnemy[_0x4258d1(0xf38)][_0x4258d1(0x58d)+_0x4258d1(0xd8a)]=function(){},Sprite_SvEnemy['prototype'][_0x4258d1(0x1564)+'me']=function(_0x1ba664){},Sprite_SvEnemy[_0x4258d1(0xf38)][_0x4258d1(0xe48)+'ow']=function(){},Sprite_SvEnemy['prototype']['updateShad'+_0x4258d1(0x63b)]=function(){},Sprite_SvEnemy['prototype'][_0x4258d1(0x822)+_0x4258d1(0x14fb)]=function(){const _0x2075cc=_0x4258d1;this['_stateSpri'+'te'][_0x2075cc(0x13af)]=![];},Sprite_SvEnemy[_0x4258d1(0xf38)][_0x4258d1(0x7b1)+'ap']=function(){const _0x361398=_0x4258d1,_0x255b05={'dhskc':function(_0x2613c5,_0x412dd6){return _0x2613c5!==_0x412dd6;},'HyOME':function(_0x1ae0c7,_0x118d5f){return _0x1ae0c7!==_0x118d5f;}};Sprite_Battler['prototype'][_0x361398(0x7b1)+'ap'][_0x361398(0xb14)](this);const _0x2aa25b=this[_0x361398(0xf9c)][_0x361398(0x299)+'ame']();_0x255b05['dhskc'](this[_0x361398(0x1523)+'me'],_0x2aa25b)&&(this[_0x361398(0x1523)+'me']=_0x2aa25b,this[_0x361398(0x125a)+'e'][_0x361398(0x5dd)]=ImageManager['loadSvActo'+'r'](_0x2aa25b)),this[_0x361398(0x125a)+'e']&&this[_0x361398(0x125a)+'e'][_0x361398(0x5dd)]&&this[_0x361398(0xe4f)]&&(_0x255b05[_0x361398(0x1424)](this[_0x361398(0x125a)+'e'][_0x361398(0x5dd)][_0x361398(0xa2d)],this[_0x361398(0xe4f)]['battlerSmo'+'othImage']())&&(this[_0x361398(0x125a)+'e'][_0x361398(0x5dd)][_0x361398(0xa2d)]=this['_battler']['battlerSmo'+_0x361398(0x1ec)]()));},Sprite_SvEnemy['prototype'][_0x4258d1(0x11c0)]=function(){},Sprite_SvEnemy[_0x4258d1(0xf38)]['startMove']=function(_0x28f910,_0x2ba92a,_0x224f9d){const _0x4a1c5a=_0x4258d1;if(this['parent'])this[_0x4a1c5a(0xad3)][_0x4a1c5a(0xace)](_0x28f910,_0x2ba92a,_0x224f9d);},Sprite_SvEnemy[_0x4258d1(0xf38)]['refreshMot'+_0x4258d1(0x1485)]=function(){const _0x204909=_0x4258d1,_0x41e103={'ReHNy':_0x204909(0xddb),'Cjplw':function(_0x544f7a,_0x1f75ae){return _0x544f7a===_0x1f75ae;},'sZILe':_0x204909(0x3f5),'TRJKD':'sleep','CjKpn':_0x204909(0x32e),'JPXnT':_0x204909(0xd64),'uEQQj':_0x204909(0x1083),'uEcPG':_0x204909(0xe55)},_0xbb5359=this['_actor'];if(_0xbb5359){const _0x57512e=_0xbb5359[_0x204909(0xd26)+_0x204909(0xa81)]();if(_0xbb5359['isInputtin'+'g']()||_0xbb5359[_0x204909(0xa91)]())this['startMotio'+'n'](_0x41e103[_0x204909(0x51f)]);else{if(_0x41e103[_0x204909(0x6e3)](_0x57512e,0x3*-0x15a+0x13c8+0x1bf*-0x9))this['startMotio'+'n'](_0x41e103[_0x204909(0xeca)]);else{if(_0x41e103[_0x204909(0x6e3)](_0x57512e,-0xb*-0x259+0x1*0x1af+0xdc0*-0x2))this[_0x204909(0xd0c)+'n'](_0x41e103[_0x204909(0xeb4)]);else{if(_0xbb5359['isChanting']())this['startMotio'+'n'](_0x41e103[_0x204909(0x13d3)]);else{if(_0xbb5359['isGuard']()||_0xbb5359['isGuardWai'+_0x204909(0x973)]())this['startMotio'+'n'](_0x41e103[_0x204909(0x1333)]);else{if(_0x41e103[_0x204909(0x6e3)](_0x57512e,-0xe65+0x49*0x7+0xc67))this['startMotio'+'n'](_0x41e103['uEQQj']);else{if(_0xbb5359[_0x204909(0x32c)]())this[_0x204909(0xd0c)+'n'](_0x41e103[_0x204909(0x10e2)]);else _0xbb5359['isUndecide'+'d']()?this['startMotio'+'n'](_0x41e103[_0x204909(0x51f)]):this[_0x204909(0xd0c)+'n'](_0xbb5359[_0x204909(0x29f)+'ata']()[_0x204909(0x9c5)]||_0x41e103[_0x204909(0x51f)]);}}}}}}}},Sprite_SvEnemy[_0x4258d1(0xf38)][_0x4258d1(0x683)+_0x4258d1(0x940)]=function(){const _0x22a748=_0x4258d1,_0x3d8dff={'LejGm':function(_0x9cd61,_0x297fac){return _0x9cd61===_0x297fac;}};return this[_0x22a748(0xad3)]?_0x3d8dff['LejGm'](this[_0x22a748(0xad3)][_0x22a748(0x1428)],0x43a+-0x15c3+0x43*0x43)&&_0x3d8dff[_0x22a748(0x7cf)](this['parent'][_0x22a748(0xea5)],0xde7+0x1b35+-0x291c):!![];},Sprite_SvEnemy['prototype'][_0x4258d1(0xe99)]=function(){},VisuMZ['BattleCore'][_0x4258d1(0x7ad)+_0x4258d1(0xc70)+_0x4258d1(0x44c)+_0x4258d1(0x47a)]=Sprite_Animation[_0x4258d1(0xf38)]['targetSpri'+_0x4258d1(0x1167)],Sprite_Animation['prototype']['targetSpri'+'tePosition']=function(_0x3efae4){const _0x5d0b68=_0x4258d1;return _0x3efae4['_distortio'+'nSprite']?this[_0x5d0b68(0xfc0)+_0x5d0b68(0xb83)+_0x5d0b68(0x1167)](_0x3efae4):VisuMZ[_0x5d0b68(0x337)]['Sprite_Ani'+'mation_tar'+_0x5d0b68(0x44c)+'osition']['call'](this,_0x3efae4);},Sprite_Animation[_0x4258d1(0xf38)][_0x4258d1(0xfc0)+_0x4258d1(0xb83)+_0x4258d1(0x1167)]=function(_0x763bff){const _0x4c1004=_0x4258d1,_0x2d2bbf={'wbWsv':function(_0xc4b53a,_0x274164){return _0xc4b53a+_0x274164;}};let _0x4cce7c=_0x763bff['x'],_0x1f9865=_0x763bff['y'],_0x34b148=_0x763bff[_0x4c1004(0x1594)],_0x31eac1=_0x763bff[_0x4c1004(0x1208)+'nSprite'][_0x4c1004(0xfcb)]['y'];_0x763bff['x']=_0x2d2bbf[_0x4c1004(0x240)](_0x763bff['_baseX'],_0x763bff[_0x4c1004(0x961)+_0x4c1004(0x777)]()),_0x763bff['y']=_0x2d2bbf[_0x4c1004(0x240)](_0x763bff[_0x4c1004(0x1085)],_0x763bff[_0x4c1004(0x961)+'ionY']()),_0x763bff[_0x4c1004(0x1594)]*=_0x31eac1;let _0x2590d6=VisuMZ[_0x4c1004(0x337)]['Sprite_Ani'+_0x4c1004(0xc70)+_0x4c1004(0x44c)+_0x4c1004(0x47a)][_0x4c1004(0xb14)](this,_0x763bff);return _0x763bff['x']=_0x4cce7c,_0x763bff['y']=_0x1f9865,_0x763bff[_0x4c1004(0x1594)]=_0x34b148,_0x2590d6;},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x7ad)+'mationMV_u'+_0x4258d1(0x576)+_0x4258d1(0x1485)]=Sprite_AnimationMV[_0x4258d1(0xf38)][_0x4258d1(0x4ee)+'tion'],Sprite_AnimationMV[_0x4258d1(0xf38)]['updatePosi'+_0x4258d1(0x940)]=function(){const _0x5551ce=_0x4258d1,_0x2ebc94={'wJFck':function(_0x564c70,_0x399e13){return _0x564c70===_0x399e13;},'qRGED':function(_0x4d151e,_0x1c74ba){return _0x4d151e/_0x1c74ba;}};VisuMZ['BattleCore'][_0x5551ce(0x7ad)+_0x5551ce(0xf82)+'pdatePosit'+_0x5551ce(0x1485)][_0x5551ce(0xb14)](this);if(!SceneManager[_0x5551ce(0x614)+_0x5551ce(0x6e5)]())return;if(_0x2ebc94[_0x5551ce(0x84c)](this['_animation'][_0x5551ce(0x867)],0x1859+0x1f3b+-0xb1d*0x5))this['x']=Math[_0x5551ce(0xdea)](_0x2ebc94[_0x5551ce(0x14cd)](Graphics['boxWidth'],-0x2d*-0xcc+-0x704+-0x1cd6*0x1)),this['y']=Math[_0x5551ce(0xdea)](_0x2ebc94[_0x5551ce(0x14cd)](Graphics[_0x5551ce(0x744)],0x34*-0xb+-0x2f*-0x2+0x1e0));else{if(this['battleStat'+'usSprite'])return;}},Sprite_Damage[_0x4258d1(0xf38)][_0x4258d1(0x15f5)+_0x4258d1(0x16aa)]=function(_0x4fcaa2){const _0x735057=_0x4258d1,_0x45b512={'oHcvD':function(_0x50d952,_0x148783){return _0x50d952>=_0x148783;},'geGYm':function(_0x1594b3,_0x248ed3){return _0x1594b3!==_0x248ed3;},'qwaBm':function(_0x553bab,_0x47c043){return _0x553bab>=_0x47c043;}},_0x4a4bc8=_0x4fcaa2[_0x735057(0xf45)+'agePopup']()||_0x4fcaa2['result']();if(_0x4a4bc8['missed']||_0x4a4bc8[_0x735057(0x9d2)])this['_colorType']=-0x24e8+0xb*0x235+0xca1,this['createMiss']();else{if(_0x4a4bc8[_0x735057(0xfbf)])this['_colorType']=_0x45b512[_0x735057(0x554)](_0x4a4bc8[_0x735057(0x6d9)],0x2*0xbf1+-0x1d93+0x5b1)?-0x9*-0xd3+-0x1aa1+0x1336:0x8a8+0x224b+-0x2*0x1579,this[_0x735057(0xd3e)+'ts'](_0x4a4bc8[_0x735057(0x6d9)]);else _0x4fcaa2[_0x735057(0x266)]()&&_0x45b512[_0x735057(0x236)](_0x4a4bc8[_0x735057(0x724)],0xa2e*0x1+0x19*0x18b+-0x30c1)&&(this[_0x735057(0x12b3)]=_0x45b512[_0x735057(0x2dc)](_0x4a4bc8['mpDamage'],0x754+0x1383+-0x1ad7)?0x24ba+0x113f+-0x35f7:-0x22c3+-0xa1a+0x2ce0,this[_0x735057(0xd3e)+'ts'](_0x4a4bc8[_0x735057(0x724)]));}_0x4a4bc8[_0x735057(0x900)]&&this['setupCriti'+'calEffect']();},Sprite_Damage[_0x4258d1(0xf38)][_0x4258d1(0xb3e)]=function(_0x5ddc2d){},Sprite_Damage[_0x4258d1(0xf38)][_0x4258d1(0xd3e)+'ts']=function(_0x49eb6a){const _0x1a9867=_0x4258d1,_0x3ac20e={'drZtT':function(_0x25d8de,_0x4fd6ac){return _0x25d8de*_0x4fd6ac;},'ELBBc':function(_0x36a4ba,_0x87caf5){return _0x36a4ba<_0x87caf5;},'IOpJo':_0x1a9867(0x450),'NbxCR':function(_0x26d8c5,_0x538932){return _0x26d8c5*_0x538932;},'VqCmP':function(_0x250929,_0x5e2461){return _0x250929-_0x5e2461;},'WaRnW':function(_0x1f4244,_0x4f22ec){return _0x1f4244/_0x4f22ec;},'amzQk':function(_0x5f3ab5,_0x185232){return _0x5f3ab5-_0x185232;}};let _0x561600=this[_0x1a9867(0x14a8)+'ng'](_0x49eb6a);const _0x19bf6c=this[_0x1a9867(0xaac)](),_0x13c721=Math[_0x1a9867(0x76f)](_0x3ac20e[_0x1a9867(0xc25)](_0x19bf6c,0x1*-0x1173+0x44e+0xd25*0x1+0.75));for(let _0x56cbf5=0x18f5+0x136f*0x1+-0x2c64;_0x3ac20e[_0x1a9867(0x1034)](_0x56cbf5,_0x561600[_0x1a9867(0x1645)]);_0x56cbf5++){const _0x3a3b42=this['createChil'+_0x1a9867(0xb9b)](_0x13c721,_0x19bf6c);_0x3a3b42[_0x1a9867(0x5dd)][_0x1a9867(0xfa6)](_0x561600[_0x56cbf5],0x1*-0xd55+0xe12+-0xbd,-0x1*0x1c6e+-0x3f0+0x205e,_0x13c721,_0x19bf6c,_0x3ac20e[_0x1a9867(0x12e6)]),_0x3a3b42['x']=_0x3ac20e[_0x1a9867(0x966)](_0x3ac20e['VqCmP'](_0x56cbf5,_0x3ac20e['WaRnW'](_0x3ac20e[_0x1a9867(0xb1b)](_0x561600[_0x1a9867(0x1645)],0xa1d*0x1+0xd04+0x1720*-0x1),0x1fc+0x9a8+-0x5d1*0x2)),_0x13c721),_0x3a3b42['dy']=-_0x56cbf5;}},Sprite_Damage[_0x4258d1(0xf38)][_0x4258d1(0x14a8)+'ng']=function(_0x17e58f){const _0x265b60=_0x4258d1,_0x3d37ff={'nzrfG':_0x265b60(0x8ed),'gzYhT':function(_0x1c7925,_0x7d1a2d){return _0x1c7925===_0x7d1a2d;},'muPkp':_0x265b60(0x10fb),'uKZZa':'-%1\x20MP','OCKQT':_0x265b60(0xbac)};let _0x2bcf12=Math['abs'](_0x17e58f)[_0x265b60(0x15cd)]();this[_0x265b60(0x77d)+'ouping']()&&(_0x2bcf12=VisuMZ[_0x265b60(0x13ca)+'s'](_0x2bcf12));const _0x40e569=VisuMZ[_0x265b60(0x337)][_0x265b60(0x424)]['Damage'];let _0x5d3966='',_0x215581='';switch(this[_0x265b60(0x12b3)]){case 0x1a0f+0x1982+-0x3391:_0x5d3966=_0x40e569[_0x265b60(0x1542)+'t']||_0x3d37ff[_0x265b60(0x319)],_0x215581=TextManager['hp'];if(_0x3d37ff['gzYhT'](_0x17e58f,0x13c0+-0x35*0x13+-0xfd1))_0x5d3966='%1';break;case 0x12c3+-0xd2+-0x11f0:_0x5d3966=_0x40e569[_0x265b60(0x938)+'mt']||_0x3d37ff[_0x265b60(0x102d)],_0x215581=TextManager['hp'];break;case 0x15c5+-0x9*0x53+-0x12d8:_0x5d3966=_0x40e569[_0x265b60(0x530)+'t']||_0x3d37ff[_0x265b60(0x12dc)],_0x215581=TextManager['mp'];break;case 0x1f2d+0x12d3*-0x1+0x27*-0x51:_0x5d3966=_0x40e569[_0x265b60(0xf2d)+'mt']||_0x3d37ff[_0x265b60(0x10c8)],_0x215581=TextManager['mp'];break;}return _0x5d3966[_0x265b60(0xf22)](_0x2bcf12,_0x215581)[_0x265b60(0xbb6)]();},Sprite_Damage[_0x4258d1(0xf38)][_0x4258d1(0x77d)+_0x4258d1(0x28d)]=function(){const _0x1f4cbf=_0x4258d1;return Imported[_0x1f4cbf(0x7d7)+_0x1f4cbf(0x138e)]?VisuMZ[_0x1f4cbf(0x4d3)][_0x1f4cbf(0x424)][_0x1f4cbf(0xadd)][_0x1f4cbf(0x610)+_0x1f4cbf(0x1459)+_0x1f4cbf(0x888)]:![];},Sprite_Damage[_0x4258d1(0xf38)][_0x4258d1(0x1243)+_0x4258d1(0xffd)]=function(){const _0x46e415=_0x4258d1,_0x1c1fdb=VisuMZ['BattleCore'][_0x46e415(0x424)][_0x46e415(0x1683)];_0x1c1fdb[_0x46e415(0x15b3)+'lor']=_0x1c1fdb[_0x46e415(0x15b3)+_0x46e415(0x446)]||[-0x1566*-0x1+0x1268+-0x27ce,0xc81+0x295+-0xf16,-0x1f91+0xca5+0x2b4*0x7,0xc68+-0x1af*0x9+0x13*0x25],this['_flashColo'+'r']=_0x1c1fdb[_0x46e415(0x15b3)+_0x46e415(0x446)][_0x46e415(0xb58)](0x2*0xbf6+-0x1*0x8dd+-0xf0f),this['_flashDura'+_0x46e415(0x940)]=_0x1c1fdb[_0x46e415(0x39d)+_0x46e415(0x737)]||-0x2*-0x11e7+0x110f+-0x44*0xc7;},Sprite_Damage[_0x4258d1(0xf38)][_0x4258d1(0x1431)+_0x4258d1(0x295)]=function(_0x9c5c96,_0x1775d9){const _0x7d3d4b=_0x4258d1,_0x35ff92={'sXxQT':function(_0x43d1fb,_0x47962a){return _0x43d1fb*_0x47962a;},'sAzjb':_0x7d3d4b(0x450)};this[_0x7d3d4b(0x8d5)+'r']=_0x1775d9[_0x7d3d4b(0xc85)]||[-0xeb*0x1f+0xc1e+-0x59*-0x2f,0x2662*-0x1+-0x9b*0x3c+0x4ab6*0x1,0x155+-0xc5*0x28+0x1d73,0x24e4*-0x1+0x2216+0x2ce],this['_flashColo'+'r']=JsonEx[_0x7d3d4b(0x15e4)+'py'](this[_0x7d3d4b(0x8d5)+'r']),this['_flashDura'+_0x7d3d4b(0x940)]=_0x1775d9[_0x7d3d4b(0xd2b)+_0x7d3d4b(0x1485)]||-0x1d77+-0x1*0x1406+0x29*0x135;const _0xb44c20=this[_0x7d3d4b(0xaac)](),_0x4190ed=Math[_0x7d3d4b(0x76f)](_0x35ff92[_0x7d3d4b(0xf9f)](_0xb44c20,-0x2340+0x249a+-0x13c)),_0xab83f=this['createChil'+_0x7d3d4b(0xb9b)](_0x4190ed,_0xb44c20);_0xab83f[_0x7d3d4b(0x5dd)][_0x7d3d4b(0x506)]=ColorManager[_0x7d3d4b(0x45e)](_0x1775d9[_0x7d3d4b(0x506)]),_0xab83f[_0x7d3d4b(0x5dd)]['drawText'](_0x9c5c96,-0x1*0x38e+0x3*-0x3c2+0xed4,0x4*0x9c3+0x1*-0x2027+-0x6e5,_0x4190ed,_0xb44c20,_0x35ff92[_0x7d3d4b(0x11a1)]),_0xab83f['dy']=-0x1975+-0x1*-0x6a3+0x12d2;},Sprite_Damage[_0x4258d1(0xf38)][_0x4258d1(0x12c7)+'extPopup']=function(_0x4f7ee9,_0x465fc4,_0x2b8b60){const _0x4480ff=_0x4258d1,_0x3a5c44={'hVIDh':function(_0x3ada4a,_0x3711fa){return _0x3ada4a*_0x3711fa;},'VwAbX':function(_0x50be12,_0x109400){return _0x50be12/_0x109400;},'NAatz':function(_0x583b5b,_0x8aca62){return _0x583b5b+_0x8aca62;},'QFqBW':function(_0xc4551a,_0x5a4693){return _0xc4551a-_0x5a4693;},'fqTuN':_0x4480ff(0x450),'xlRuJ':function(_0x250156,_0x4aa3bd){return _0x250156/_0x4aa3bd;},'OuPlX':function(_0xce8904,_0x5ecd7a){return _0xce8904-_0x5ecd7a;},'GSLAh':function(_0xec7812,_0x285c34){return _0xec7812+_0x285c34;},'pSHVv':function(_0x417ee6,_0x5a967e){return _0x417ee6-_0x5a967e;},'dZZOc':function(_0x5dbc69,_0x4f579c){return _0x5dbc69/_0x4f579c;},'knNLT':function(_0x2f00d4,_0x261cf8){return _0x2f00d4/_0x261cf8;},'GoScN':_0x4480ff(0x253),'NwWHv':function(_0x4d3dcc,_0x4c15fc){return _0x4d3dcc%_0x4c15fc;},'ZMhmG':function(_0x1e1499,_0x108a51){return _0x1e1499*_0x108a51;}},_0x41b35b=Math[_0x4480ff(0x503)](this[_0x4480ff(0xaac)](),ImageManager[_0x4480ff(0x7f3)]),_0x328709=Math['floor'](_0x3a5c44[_0x4480ff(0x159b)](_0x41b35b,-0x1afb+-0x39f*0x1+-0x1eb8*-0x1)),_0x4bcae7=this[_0x4480ff(0x1656)+'dSprite'](_0x328709,_0x41b35b),_0x5dd12e=_0x3a5c44['VwAbX'](ImageManager[_0x4480ff(0x465)],-0x1*-0x2509+0x2374*0x1+-0x487b),_0x4ee51f=_0x4bcae7[_0x4480ff(0x5dd)]['measureTex'+_0x4480ff(0x497)](_0x3a5c44['NAatz'](_0x465fc4,'\x20'));_0x4bcae7['bitmap'][_0x4480ff(0x506)]=ColorManager[_0x4480ff(0x45e)](_0x2b8b60['textColor']),_0x4bcae7[_0x4480ff(0x5dd)][_0x4480ff(0xfa6)](_0x465fc4,_0x5dd12e,-0x1b9*0x9+-0xaab+0x1a2c,_0x3a5c44['QFqBW'](_0x328709,_0x5dd12e),_0x41b35b,_0x3a5c44[_0x4480ff(0x104e)]);const _0x5f390e=Math['round'](_0x3a5c44[_0x4480ff(0x5f8)](_0x3a5c44['OuPlX'](_0x41b35b,ImageManager['iconHeight']),0x6b9*0x2+-0x1483+-0x713*-0x1)),_0x1eca62=_0x3a5c44[_0x4480ff(0x1502)](_0x3a5c44[_0x4480ff(0x2eb)](_0x3a5c44[_0x4480ff(0x78a)](_0x3a5c44[_0x4480ff(0x1274)](_0x328709,-0x131*0x17+-0xde7+0x52a*0x8),ImageManager[_0x4480ff(0x465)]),_0x3a5c44[_0x4480ff(0x1274)](_0x4ee51f,-0x9ba+-0x117+0xad3)),_0x3a5c44[_0x4480ff(0x1445)](_0x5dd12e,0x89*0x1b+0x21c8*0x1+0x3039*-0x1)),_0x1f3795=ImageManager[_0x4480ff(0xc99)](_0x3a5c44[_0x4480ff(0x15e0)]),_0x4237f3=ImageManager[_0x4480ff(0x465)],_0x512afd=ImageManager[_0x4480ff(0x7f3)],_0xcfa629=_0x3a5c44[_0x4480ff(0x159b)](_0x3a5c44[_0x4480ff(0xa2b)](_0x4f7ee9,-0x1219+-0x1f39+0x3162),_0x4237f3),_0x5635d1=_0x3a5c44[_0x4480ff(0x1266)](Math[_0x4480ff(0x76f)](_0x3a5c44[_0x4480ff(0x1274)](_0x4f7ee9,0x35*-0x58+-0xc38+0x1e80)),_0x512afd);_0x4bcae7[_0x4480ff(0x5dd)][_0x4480ff(0xc8e)](_0x1f3795,_0xcfa629,_0x5635d1,_0x4237f3,_0x512afd,_0x1eca62,_0x5f390e),this[_0x4480ff(0x8d5)+'r']=_0x2b8b60[_0x4480ff(0xc85)]||[0x1f93+-0x89*-0xa+-0x1*0x24ed,-0x1*-0x8ce+-0x1204+0x83*0x12,0x1921+0x353+-0x1c74,-0x1aee*0x1+-0x49*0x3b+-0x1e7*-0x17],this[_0x4480ff(0x8d5)+'r']=JsonEx['makeDeepCo'+'py'](this[_0x4480ff(0x8d5)+'r']),this[_0x4480ff(0x818)+_0x4480ff(0x940)]=_0x2b8b60[_0x4480ff(0xd2b)+_0x4480ff(0x1485)]||-0x2553+-0x1*0x2221+-0x21a*-0x22,_0x4bcae7['dy']=-0x1367*-0x1+-0xd49+-0x36*0x1d,_0x2b8b60['offsetX']&&(_0x4bcae7['x']+=_0x2b8b60[_0x4480ff(0xc66)]),_0x2b8b60[_0x4480ff(0xce9)]&&(_0x4bcae7['dy']+=_0x2b8b60[_0x4480ff(0xce9)]);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x651)+'age_create'+_0x4258d1(0xdb8)+'e']=Sprite_Damage[_0x4258d1(0xf38)][_0x4258d1(0x1656)+'dSprite'],Sprite_Damage['prototype']['createChil'+_0x4258d1(0xb9b)]=function(_0x3eb1bd,_0x495d9d){const _0x526f50=_0x4258d1,_0x208382={'EUwor':function(_0x4f8bce,_0x4a2c74){return _0x4f8bce*_0x4a2c74;}};return _0x495d9d=Math['round'](_0x208382['EUwor'](_0x495d9d,0x23ef+0x24d5+-0x48c3+0.19999999999999996)),VisuMZ[_0x526f50(0x337)][_0x526f50(0x651)+_0x526f50(0xa72)+_0x526f50(0xdb8)+'e'][_0x526f50(0xb14)](this,_0x3eb1bd,_0x495d9d);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x12a1)+_0x4258d1(0x129e)+'ateFrame']=Sprite_StateIcon[_0x4258d1(0xf38)][_0x4258d1(0x421)+'e'],Sprite_StateIcon[_0x4258d1(0xf38)][_0x4258d1(0x421)+'e']=function(){const _0x666630=_0x4258d1,_0x49cc54={'gShyn':function(_0x2040e4,_0x244c81){return _0x2040e4>_0x244c81;}};VisuMZ[_0x666630(0x337)][_0x666630(0x12a1)+_0x666630(0x129e)+_0x666630(0xfc1)][_0x666630(0xb14)](this),this[_0x666630(0x4c8)]=_0x49cc54[_0x666630(0x14b8)](this[_0x666630(0xc3d)],-0x1c9e+-0x1e4d+-0x1*-0x3aeb)?-0x207*0xd+0x19f*0x5+0x133f:0x2*0x63d+0x1*-0x22e7+0x166d;},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x103a)+_0x4258d1(0x13f7)+_0x4258d1(0x2a6)]=Sprite_Weapon[_0x4258d1(0xf38)][_0x4258d1(0x1534)],Sprite_Weapon[_0x4258d1(0xf38)][_0x4258d1(0x1534)]=function(){const _0x2cd3c6=_0x4258d1;VisuMZ[_0x2cd3c6(0x337)][_0x2cd3c6(0x103a)+'pon_loadBi'+_0x2cd3c6(0x2a6)]['call'](this),this['bitmap']&&(this[_0x2cd3c6(0x5dd)][_0x2cd3c6(0xa2d)]=VisuMZ[_0x2cd3c6(0x337)][_0x2cd3c6(0x424)][_0x2cd3c6(0x1224)][_0x2cd3c6(0x12d2)+'e']);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x2a0)+_0x4258d1(0x275)+_0x4258d1(0x902)]=Sprite_Gauge['prototype']['smoothness'],Sprite_Gauge[_0x4258d1(0xf38)][_0x4258d1(0x97b)]=function(){const _0x2eabf8=_0x4258d1,_0xe24da2={'yJbKp':function(_0x4a5f1f,_0x4aa98d){return _0x4a5f1f!==_0x4aa98d;},'Mhcia':_0x2eabf8(0x787)};return _0xe24da2[_0x2eabf8(0x12a9)](this[_0x2eabf8(0x13e2)+'e'],_0xe24da2[_0x2eabf8(0x146c)])?VisuMZ[_0x2eabf8(0x337)][_0x2eabf8(0x424)][_0x2eabf8(0x428)][_0x2eabf8(0xd63)+'n']??-0x11fa+-0x1c3f+0x2e4d:VisuMZ[_0x2eabf8(0x337)][_0x2eabf8(0x2a0)+_0x2eabf8(0x275)+_0x2eabf8(0x902)][_0x2eabf8(0xb14)](this);};function Sprite_HpGauge(){const _0x4dfe1a=_0x4258d1;this[_0x4dfe1a(0xca3)](...arguments);}Sprite_HpGauge[_0x4258d1(0xf38)]=Object[_0x4258d1(0x100d)](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x4258d1(0xf38)][_0x4258d1(0xcab)+'r']=Sprite_HpGauge,Sprite_HpGauge[_0x4258d1(0xf38)][_0x4258d1(0xca3)]=function(){const _0x139c60=_0x4258d1;Sprite_Gauge[_0x139c60(0xf38)]['initialize']['call'](this);},Sprite_HpGauge[_0x4258d1(0xf38)][_0x4258d1(0x13d4)]=function(){return 0xbec+-0xa53+0x1*-0x199;},Sprite_HpGauge[_0x4258d1(0xf38)]['redraw']=function(){const _0x280576=_0x4258d1,_0x2bbb39={'xhvcd':function(_0x503688,_0x174b4b){return _0x503688(_0x174b4b);}};this[_0x280576(0x5dd)][_0x280576(0x11c1)]();const _0x170b55=this[_0x280576(0xa0f)+'ue']();!_0x2bbb39[_0x280576(0xa63)](isNaN,_0x170b55)&&this[_0x280576(0xe91)]();};function Sprite_EnemyName(){const _0x290434=_0x4258d1;this[_0x290434(0xca3)](...arguments);}Sprite_EnemyName[_0x4258d1(0xf38)]=Object[_0x4258d1(0x100d)](Sprite_Name[_0x4258d1(0xf38)]),Sprite_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0xcab)+'r']=Sprite_EnemyName,Sprite_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0xca3)]=function(){const _0x5a4459=_0x4258d1;Sprite_Name[_0x5a4459(0xf38)][_0x5a4459(0xca3)][_0x5a4459(0xb14)](this),this[_0x5a4459(0x774)+'chedSprite'+'s']();},Sprite_EnemyName[_0x4258d1(0xf38)]['initMember'+'s']=function(){const _0x2ef472=_0x4258d1,_0x51b2cb={'zPJlF':_0x2ef472(0xe14)},_0x3054cc=_0x51b2cb[_0x2ef472(0x322)][_0x2ef472(0xba9)]('|');let _0x18ba25=-0x3a8*-0x2+0x24d2+0x2c22*-0x1;while(!![]){switch(_0x3054cc[_0x18ba25++]){case'0':this['_linkedSpr'+_0x2ef472(0xdba)]=null;continue;case'1':this[_0x2ef472(0x12af)]['x']=0x1b09+0x3*0xe4+-0x1db5+0.5;continue;case'2':Sprite_Name[_0x2ef472(0xf38)]['initMember'+'s'][_0x2ef472(0xb14)](this);continue;case'3':this[_0x2ef472(0x12af)]['y']=-0x34f+0x1a39+-0xe*0x1a3;continue;case'4':this[_0x2ef472(0x4c8)]=0x1*0x434+-0x16f6+-0x62*-0x31;continue;}break;}},Sprite_EnemyName['prototype']['createAtta'+_0x4258d1(0xea3)+'s']=function(){const _0x2c812b=_0x4258d1;VisuMZ[_0x2c812b(0x337)][_0x2c812b(0x424)]['Enemy'][_0x2c812b(0xaa6)+_0x2c812b(0x88c)]&&(this[_0x2c812b(0x756)+_0x2c812b(0x594)]=new Sprite_StateIcon(),this['addChild'](this[_0x2c812b(0x756)+_0x2c812b(0x594)]));},Sprite_EnemyName[_0x4258d1(0xf38)]['bitmapWidt'+'h']=function(){const _0xb98655=_0x4258d1;return Graphics[_0xb98655(0x1309)];},Sprite_EnemyName[_0x4258d1(0xf38)]['bitmapHeig'+'ht']=function(){const _0x8e21bc=_0x4258d1,_0x2a885c={'fHjIO':function(_0x2f6628,_0x1156d5){return _0x2f6628*_0x1156d5;}};return this[_0x8e21bc(0x282)+'t']=this[_0x8e21bc(0x282)+'t']||Window_Base[_0x8e21bc(0xf38)]['lineHeight']()||0x137*0x7+-0x80a+0x1*-0x53,_0x2a885c[_0x8e21bc(0x1069)](this[_0x8e21bc(0x282)+'t'],-0x1ea6+0x1a27+-0x5*-0xe7);},Sprite_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0xaac)]=function(){const _0xdb62d4=_0x4258d1;return VisuMZ['BattleCore'][_0xdb62d4(0x424)]['Enemy'][_0xdb62d4(0x10e6)+'ze']||$gameSystem[_0xdb62d4(0x7cc)+'ze']();},Sprite_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0x69b)]=function(_0x2e4907){const _0x29565c=_0x4258d1;this['_linkedSpr'+_0x29565c(0xdba)]=_0x2e4907;},Sprite_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0x164c)]=function(){const _0x8b2b19=_0x4258d1,_0x3c1fd7={'MXzoO':_0x8b2b19(0x85d)},_0x4901b3=_0x3c1fd7[_0x8b2b19(0x163b)][_0x8b2b19(0xba9)]('|');let _0x303e2d=-0xdb2+0x82*-0x22+0x3*0xa52;while(!![]){switch(_0x4901b3[_0x303e2d++]){case'0':this[_0x8b2b19(0x3d8)+_0x8b2b19(0xea3)+'s']();continue;case'1':this['updatePosi'+'tion']();continue;case'2':Sprite_Name[_0x8b2b19(0xf38)][_0x8b2b19(0x164c)]['call'](this);continue;case'3':this[_0x8b2b19(0xebd)]();continue;case'4':this[_0x8b2b19(0x342)+'ity']();continue;}break;}},Sprite_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0xec6)]=function(){const _0x4e12fc=_0x4258d1,_0x4cacc8={'MOtfw':_0x4e12fc(0x450)};this['_cacheText'+_0x4e12fc(0x22c)]=undefined;const _0x124431=this[_0x4e12fc(0xd40)](),_0x118656=this[_0x4e12fc(0x10ae)+'h'](),_0x1be743=Window_Base['prototype'][_0x4e12fc(0xbc7)]();this[_0x4e12fc(0x14ee)](),this[_0x4e12fc(0x5dd)][_0x4e12fc(0x11c1)](),this[_0x4e12fc(0x5dd)]['drawText'](_0x124431,-0x1ef7*-0x1+0x76+-0x1f6d,0xafe+-0x81*0x3d+-0x151*-0xf,_0x118656,_0x1be743,_0x4cacc8[_0x4e12fc(0xd4a)]);},Sprite_EnemyName[_0x4258d1(0xf38)]['updateLink']=function(){const _0x20284d=_0x4258d1,_0x210d5d={'NVeiE':function(_0x1beb28,_0x535e76){return _0x1beb28!==_0x535e76;}};if(!this[_0x20284d(0x1099)+_0x20284d(0xdba)])return;_0x210d5d[_0x20284d(0x192)](this[_0x20284d(0xe4f)],this[_0x20284d(0x1099)+_0x20284d(0xdba)][_0x20284d(0xe4f)])&&this[_0x20284d(0xb3e)](this[_0x20284d(0x1099)+_0x20284d(0xdba)]['_battler']);},Sprite_EnemyName[_0x4258d1(0xf38)]['updatePosi'+'tion']=function(){const _0x3069c3=_0x4258d1,_0x3b65f6={'wzkJx':function(_0x1452b7,_0xce645b){return _0x1452b7-_0xce645b;},'PGEpW':function(_0x3495a2,_0x2a7824){return _0x3495a2*_0x2a7824;}};if(!this[_0x3069c3(0x1099)+_0x3069c3(0xdba)])return;this[_0x3069c3(0x282)+'t']=this[_0x3069c3(0x282)+'t']||Window_Base[_0x3069c3(0xf38)]['lineHeight'](),this['x']=Math[_0x3069c3(0xdea)](this[_0x3069c3(0x1099)+'ite'][_0x3069c3(0x921)]),this['y']=Math[_0x3069c3(0xdea)](_0x3b65f6[_0x3069c3(0xa6d)](this[_0x3069c3(0x1099)+_0x3069c3(0xdba)][_0x3069c3(0x1085)],_0x3b65f6['PGEpW'](this[_0x3069c3(0x282)+'t'],0x9*0x404+-0x7d3+-0x1*0x1c51+0.5)));const _0x166593=VisuMZ[_0x3069c3(0x337)][_0x3069c3(0x424)][_0x3069c3(0xcce)];this['x']+=Math[_0x3069c3(0xdea)](_0x166593['NameOffset'+'X']||-0x1a10+0x14b1*-0x1+0x2ec1),this['y']+=Math['round'](_0x166593['NameOffset'+'Y']||-0x468*0x1+0x174c+-0x7c*0x27);},Sprite_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0x3d8)+'chedSprite'+'s']=function(){const _0x3ed951=_0x4258d1;this['updateStat'+_0x3ed951(0x1193)+'e']();},Sprite_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0x822)+_0x4258d1(0x1193)+'e']=function(){const _0x698ceb=_0x4258d1,_0x742f69={'RWJGl':function(_0xdddc14,_0x5159b2){return _0xdddc14!==_0x5159b2;},'IGlkh':function(_0x4be5fe,_0x84a106){return _0x4be5fe+_0x84a106;},'vYEhq':function(_0xe74a78,_0x2ea22e){return _0xe74a78/_0x2ea22e;},'xcEmM':function(_0x51fdf3,_0x4c1aba){return _0x51fdf3+_0x4c1aba;}};if(!this[_0x698ceb(0x756)+_0x698ceb(0x594)])return;_0x742f69['RWJGl'](this[_0x698ceb(0xe4f)],this[_0x698ceb(0x756)+_0x698ceb(0x594)][_0x698ceb(0xe4f)])&&this[_0x698ceb(0x756)+_0x698ceb(0x594)][_0x698ceb(0xb3e)](this['_battler']);const _0x14c2e2=this['textWidth']();this['_lineHeigh'+'t']=this[_0x698ceb(0x282)+'t']||Window_Base[_0x698ceb(0xf38)][_0x698ceb(0xbc7)](),this[_0x698ceb(0x756)+_0x698ceb(0x594)]['x']=_0x742f69['IGlkh'](Math['round'](_0x742f69[_0x698ceb(0x13d0)](_0x742f69[_0x698ceb(0x262)](_0x14c2e2,ImageManager[_0x698ceb(0x465)]),0x37*-0x49+-0x8*-0x15d+0x31*0x19)),0x119e+-0x1c42+0xaac),this[_0x698ceb(0x756)+_0x698ceb(0x594)]['y']=_0x742f69[_0x698ceb(0x13d0)](this[_0x698ceb(0x282)+'t'],-0x1c3*0x2+-0x77*0x25+0x14bb);const _0x2fc73f=VisuMZ[_0x698ceb(0x337)]['Settings'][_0x698ceb(0xcce)];this['_stateIcon'+_0x698ceb(0x594)]['x']+=_0x2fc73f[_0x698ceb(0x551)+'eOffsetX']||-0x1e2*-0x13+0x247f*0x1+-0x4845,this['_stateIcon'+'Sprite']['y']+=_0x2fc73f[_0x698ceb(0x551)+_0x698ceb(0x3df)]||-0xa96+-0x856+0x12ec;},Sprite_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0x342)+'ity']=function(){const _0x5126ca=_0x4258d1,_0x480ed0={'tJUNM':function(_0x3d57cc,_0x24bcdf){return _0x3d57cc<_0x24bcdf;},'dHhlC':function(_0x1ce248,_0x48c7a9){return _0x1ce248>_0x48c7a9;}},_0x5d3294=this[_0x5126ca(0x6de)+'State']();if(_0x5d3294&&_0x480ed0[_0x5126ca(0x7a9)](this[_0x5126ca(0x4c8)],-0x3*-0x481+-0xb94+-0x6*0x28))this[_0x5126ca(0x4c8)]+=0x99+-0x20d7+0x204e;else!_0x5d3294&&_0x480ed0['dHhlC'](this['opacity'],-0x8b9+-0x71a+0xfd3)&&(this[_0x5126ca(0x4c8)]-=0x1*0x713+-0x31*0x2+-0x6a1);},Sprite_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0x6de)+_0x4258d1(0xe3b)]=function(){const _0x316526=_0x4258d1,_0x3a21b8={'zLcHF':function(_0x11241b,_0x1b932c){return _0x11241b>_0x1b932c;}};if(this[_0x316526(0x9ba)+_0x316526(0xb0d)]())return![];else{if(!this[_0x316526(0xe4f)])return![];else{if(!this[_0x316526(0xe4f)][_0x316526(0x12d0)]())return![];else{if(this[_0x316526(0x30c)+_0x316526(0x561)]())return!![];else{if(this['_battler']['isDead']())return![];else{if(this[_0x316526(0x804)+_0x316526(0x1226)]())return!![];else{if(this[_0x316526(0x10ed)+_0x316526(0xe2b)]())return!![];else{if(this[_0x316526(0xeb3)+_0x316526(0xf67)]())return!![];else{if(this[_0x316526(0x48e)+_0x316526(0x444)+_0x316526(0xfdb)]())return!![];else{if(_0x3a21b8[_0x316526(0x12e4)](this[_0x316526(0x4c8)],0xb23+-0xbdd+0x1f*0x6))return![];}}}}}}}}}},Sprite_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0x30c)+_0x4258d1(0x561)]=function(){const _0x24bd66=_0x4258d1;return this[_0x24bd66(0xe4f)]&&this[_0x24bd66(0xe4f)][_0x24bd66(0x10d3)+_0x24bd66(0x13fa)+_0x24bd66(0x146a)]();},Sprite_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0x9ba)+_0x4258d1(0xb0d)]=function(){const _0x54f057=_0x4258d1;return VisuMZ[_0x54f057(0x337)][_0x54f057(0x424)][_0x54f057(0xcce)][_0x54f057(0x151d)+_0x54f057(0x9b9)];},Sprite_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0x804)+_0x4258d1(0x1226)]=function(){const _0x58ef36=_0x4258d1;return this['_battler']&&BattleManager[_0x58ef36(0xa47)]&&BattleManager[_0x58ef36(0xc89)][_0x58ef36(0x163f)](this[_0x58ef36(0xe4f)]);},Sprite_EnemyName['prototype'][_0x4258d1(0x10ed)+'ityVisible']=function(){return![];},Sprite_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0xeb3)+_0x4258d1(0xf67)]=function(){const _0x30b722=_0x4258d1;return VisuMZ[_0x30b722(0x337)][_0x30b722(0x424)]['Enemy'][_0x30b722(0x151d)+_0x30b722(0x1205)];},Sprite_EnemyName['prototype'][_0x4258d1(0x48e)+_0x4258d1(0x444)+'dow']=function(){const _0x42309d=_0x4258d1;return VisuMZ[_0x42309d(0x337)][_0x42309d(0x424)][_0x42309d(0xcce)][_0x42309d(0x151d)+_0x42309d(0x532)]?this[_0x42309d(0xe4f)][_0x42309d(0xbd9)]():SceneManager['_scene']['_enemyWind'+'ow']&&SceneManager[_0x42309d(0x14b3)][_0x42309d(0x1684)+'ow'][_0x42309d(0xc19)]&&SceneManager[_0x42309d(0x14b3)][_0x42309d(0x1684)+'ow'][_0x42309d(0x14cb)][_0x42309d(0x163f)](this[_0x42309d(0xe4f)]);},Sprite_EnemyName[_0x4258d1(0xf38)]['textWidth']=function(){const _0x4e7525=_0x4258d1;if(!this[_0x4e7525(0xe4f)])return-0x2287*-0x1+0x1*0xb9b+-0x2e22;if(this['_cacheText'+_0x4e7525(0x22c)])return this['_cacheText'+'Width'];const _0x48a95c=this['name']();return this[_0x4e7525(0x14ee)](),this[_0x4e7525(0xd38)+_0x4e7525(0x22c)]=this[_0x4e7525(0x5dd)][_0x4e7525(0xc8b)+_0x4e7525(0x497)](_0x48a95c)||-0x1*0x66a+0xd91+0x1e*-0x3d,this['_cacheText'+'Width'];},VisuMZ[_0x4258d1(0x337)]['Sprite_Bat'+_0x4258d1(0x105e)+'justPositi'+'on']=Sprite_Battleback[_0x4258d1(0xf38)]['adjustPosi'+_0x4258d1(0x940)],Sprite_Battleback['prototype'][_0x4258d1(0x143a)+_0x4258d1(0x940)]=function(){const _0x5ace5a=_0x4258d1,_0x564d3d={'CtKKr':function(_0xcf5ce1,_0x59a7ca){return _0xcf5ce1(_0x59a7ca);},'Dfovz':'1:1','RKmij':_0x5ace5a(0x980),'pNsBm':_0x5ace5a(0x1ce),'rovCP':_0x5ace5a(0x116b)},_0x54b3c5=VisuMZ['BattleCore']['Settings'][_0x5ace5a(0x3bd)+'Scale'];if(!_0x54b3c5)return VisuMZ[_0x5ace5a(0x337)][_0x5ace5a(0x527)+'tleback_ad'+_0x5ace5a(0xd74)+'on']['call'](this);const _0x55bc53=_0x564d3d[_0x5ace5a(0x13d8)](String,_0x54b3c5['DefaultSty'+'le'])||'MZ';switch(_0x55bc53){case'MZ':VisuMZ[_0x5ace5a(0x337)][_0x5ace5a(0x527)+'tleback_ad'+_0x5ace5a(0xd74)+'on'][_0x5ace5a(0xb14)](this);break;case _0x564d3d[_0x5ace5a(0xf1b)]:this[_0x5ace5a(0x143a)+_0x5ace5a(0xf95)]();break;case _0x564d3d[_0x5ace5a(0x410)]:this['adjustPosi'+'tion_Scale'+'ToFit']();break;case _0x564d3d['pNsBm']:this[_0x5ace5a(0x143a)+'tion_Scale'+_0x5ace5a(0xb2c)]();break;case _0x564d3d['rovCP']:this['adjustPosi'+'tion_Scale'+'Up']();break;}},Sprite_Battleback[_0x4258d1(0xf38)]['adjustPosi'+_0x4258d1(0xf95)]=function(){const _0x1ad1ed=_0x4258d1,_0x223ae9=VisuMZ[_0x1ad1ed(0x337)]['Settings']['Battleback'+_0x1ad1ed(0xa59)];if(_0x223ae9&&_0x223ae9[_0x1ad1ed(0xcec)+'e'])return _0x223ae9[_0x1ad1ed(0xcec)+'e'][_0x1ad1ed(0xb14)](this);this[_0x1ad1ed(0xc2a)]=Graphics[_0x1ad1ed(0xc2a)],this[_0x1ad1ed(0x1594)]=Graphics[_0x1ad1ed(0x1594)];const _0x1f8471=-0xc86+-0x23bb+0x8e*0x57;this[_0x1ad1ed(0xfcb)]['x']=_0x1f8471,this[_0x1ad1ed(0xfcb)]['y']=_0x1f8471,this['x']=-0xc0f+-0xca6*-0x2+0xd3d*-0x1,this['y']=-0x5*0x2b4+0x2e*0x47+-0x61*-0x2;},Sprite_Battleback[_0x4258d1(0xf38)][_0x4258d1(0x143a)+_0x4258d1(0x11f3)+_0x4258d1(0xb5f)]=function(){const _0x12999e=_0x4258d1,_0x25f248={'VoJSQ':function(_0x5d4580,_0x59c7ef){return _0x5d4580/_0x59c7ef;},'DyyGP':function(_0x3f14aa,_0x54cf24){return _0x3f14aa-_0x54cf24;},'OaiTd':function(_0xc112b1,_0x467b3f){return _0xc112b1-_0x467b3f;}},_0x4504f1=VisuMZ['BattleCore'][_0x12999e(0x424)]['Battleback'+'Scale'];if(_0x4504f1&&_0x4504f1[_0x12999e(0x377)+'it'])return _0x4504f1[_0x12999e(0x377)+'it']['call'](this);this[_0x12999e(0xc2a)]=Graphics[_0x12999e(0xc2a)],this[_0x12999e(0x1594)]=Graphics[_0x12999e(0x1594)];const _0x211788=_0x25f248['VoJSQ'](this['width'],this[_0x12999e(0x5dd)][_0x12999e(0xc2a)]),_0x301782=_0x25f248[_0x12999e(0x323)](this[_0x12999e(0x1594)],this[_0x12999e(0x5dd)][_0x12999e(0x1594)]),_0x1dfbcd=Math['max'](_0x211788,_0x301782);this['scale']['x']=_0x1dfbcd,this[_0x12999e(0xfcb)]['y']=_0x1dfbcd,this['x']=_0x25f248['VoJSQ'](_0x25f248[_0x12999e(0xda0)](Graphics[_0x12999e(0xc2a)],this[_0x12999e(0xc2a)]),0x1*-0xee7+-0x2044+0x2f2d),this['y']=_0x25f248[_0x12999e(0xcd9)](Graphics[_0x12999e(0x1594)],this[_0x12999e(0x1594)]);},Sprite_Battleback['prototype'][_0x4258d1(0x143a)+_0x4258d1(0x11f3)+_0x4258d1(0xb2c)]=function(){const _0x49541b=_0x4258d1,_0x331a63={'RcOiU':function(_0x3a90b8,_0x1c6232){return _0x3a90b8/_0x1c6232;},'CdGJe':function(_0x56709f,_0x59aecc){return _0x56709f/_0x59aecc;},'cUCTQ':function(_0x22ee33,_0x1ed059){return _0x22ee33-_0x1ed059;}},_0xf46380=VisuMZ['BattleCore']['Settings'][_0x49541b(0x3bd)+'Scale'];if(_0xf46380&&_0xf46380['jsScaleDow'+'n'])return _0xf46380[_0x49541b(0x12e1)+'n'][_0x49541b(0xb14)](this);this[_0x49541b(0xc2a)]=Graphics[_0x49541b(0xc2a)],this['height']=Graphics[_0x49541b(0x1594)];const _0xb56e40=Math['min'](-0x2227+-0x1*-0xd3e+0x14ea,_0x331a63['RcOiU'](this[_0x49541b(0xc2a)],this[_0x49541b(0x5dd)][_0x49541b(0xc2a)])),_0x47b77f=Math[_0x49541b(0xd3a)](0x2176+0x5*-0x3bf+-0xeba*0x1,_0x331a63[_0x49541b(0x894)](this['height'],this['bitmap']['height'])),_0x8096b5=Math[_0x49541b(0x503)](_0xb56e40,_0x47b77f);this[_0x49541b(0xfcb)]['x']=_0x8096b5,this['scale']['y']=_0x8096b5,this['x']=_0x331a63[_0x49541b(0x894)](_0x331a63[_0x49541b(0x470)](Graphics[_0x49541b(0xc2a)],this[_0x49541b(0xc2a)]),0xa*-0x2b4+-0xf62*-0x1+0xba8),this['y']=_0x331a63[_0x49541b(0x470)](Graphics[_0x49541b(0x1594)],this[_0x49541b(0x1594)]);},Sprite_Battleback[_0x4258d1(0xf38)][_0x4258d1(0x143a)+'tion_Scale'+'Up']=function(){const _0x162469=_0x4258d1,_0x5c570b={'FvzuU':function(_0x5a8da0,_0x46dcd6){return _0x5a8da0/_0x46dcd6;},'UZEcH':function(_0x1e2e67,_0x1eb5ef){return _0x1e2e67/_0x1eb5ef;},'dQvqY':function(_0x4ce306,_0x39d62f){return _0x4ce306/_0x39d62f;},'zoQRS':function(_0x36879b,_0xa2dbbe){return _0x36879b-_0xa2dbbe;},'pbVAH':function(_0x31a687,_0x34076a){return _0x31a687-_0x34076a;}},_0x403b85=VisuMZ[_0x162469(0x337)][_0x162469(0x424)][_0x162469(0x3bd)+'Scale'];if(_0x403b85&&_0x403b85['jsScaleUp'])return _0x403b85['jsScaleUp'][_0x162469(0xb14)](this);this[_0x162469(0xc2a)]=Graphics[_0x162469(0xc2a)],this[_0x162469(0x1594)]=Graphics[_0x162469(0x1594)];const _0x3d8784=Math[_0x162469(0x503)](0x98a+0x541+-0xeca,_0x5c570b['FvzuU'](this[_0x162469(0xc2a)],this[_0x162469(0x5dd)]['width'])),_0x2b4fb6=Math[_0x162469(0x503)](-0xd6b+-0x48a+0x11f6,_0x5c570b[_0x162469(0x280)](this[_0x162469(0x1594)],this[_0x162469(0x5dd)][_0x162469(0x1594)])),_0x3d8ac2=Math[_0x162469(0x503)](_0x3d8784,_0x2b4fb6);this[_0x162469(0xfcb)]['x']=_0x3d8ac2,this[_0x162469(0xfcb)]['y']=_0x3d8ac2,this['x']=_0x5c570b[_0x162469(0x1686)](_0x5c570b[_0x162469(0x151a)](Graphics[_0x162469(0xc2a)],this[_0x162469(0xc2a)]),-0x12c4*0x1+-0xc34+0x1efa),this['y']=_0x5c570b[_0x162469(0xbab)](Graphics['height'],this['height']);},Spriteset_Battle[_0x4258d1(0xdf9)+'UI']=VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)][_0x4258d1(0xdeb)+'ut'][_0x4258d1(0x1234)+_0x4258d1(0x10eb)]??!![],Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x1608)]=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0xa06)+_0x4258d1(0xcf3)]=function(){return 0x19c*-0x7+-0x1*0x1055+0x1b99;},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x7a4)+_0x4258d1(0x1344)]=function(){return-0x4f2+0x1b71+-0x167f;},VisuMZ[_0x4258d1(0x337)]['Spriteset_'+_0x4258d1(0x8fb)+_0x4258d1(0xce1)+_0x4258d1(0x1376)]=Spriteset_Battle['prototype'][_0x4258d1(0xe41)+_0x4258d1(0x1458)],Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0xe41)+_0x4258d1(0x1458)]=function(){const _0x576b94=_0x4258d1;VisuMZ[_0x576b94(0x337)]['Spriteset_'+'Battle_cre'+_0x576b94(0xce1)+'yer'][_0x576b94(0xb14)](this),this[_0x576b94(0x10be)+_0x576b94(0xffb)](),this['createEnem'+'yNames']();},VisuMZ['BattleCore'][_0x4258d1(0x12c6)+'Battle_upd'+_0x4258d1(0x3cb)]=Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x164c)],Spriteset_Battle['prototype'][_0x4258d1(0x164c)]=function(){const _0x5c7bc0=_0x4258d1,_0x8e0cd2={'kIDWE':_0x5c7bc0(0x74a)},_0xdd1fee=_0x8e0cd2[_0x5c7bc0(0x1181)][_0x5c7bc0(0xba9)]('|');let _0x192cf2=0x112f+0x1da7+-0x2ed6;while(!![]){switch(_0xdd1fee[_0x192cf2++]){case'0':VisuMZ['BattleCore'][_0x5c7bc0(0x12c6)+_0x5c7bc0(0x2e1)+_0x5c7bc0(0x3cb)]['call'](this);continue;case'1':this[_0x5c7bc0(0x1363)+_0x5c7bc0(0xb70)]();continue;case'2':this[_0x5c7bc0(0x925)+_0x5c7bc0(0x1066)+_0x5c7bc0(0x9fb)]();continue;case'3':this['updateBatt'+'lerContain'+'er']();continue;case'4':this[_0x5c7bc0(0xa19)+'her']();continue;}break;}},Spriteset_Battle[_0x4258d1(0xf38)]['createWeat'+'her']=function(){const _0x3def67=_0x4258d1;this[_0x3def67(0x140e)]=new Weather(),this[_0x3def67(0x1670)+'ld'][_0x3def67(0xd0b)](this[_0x3def67(0x140e)]);},Spriteset_Battle['prototype'][_0x4258d1(0xa19)+'her']=function(){const _0xfe1ea=_0x4258d1;this[_0xfe1ea(0x140e)][_0xfe1ea(0x1064)]=$gameScreen[_0xfe1ea(0xa16)+'e'](),this['_weather']['power']=$gameScreen[_0xfe1ea(0x16a5)+'er']();},Game_Interpreter[_0x4258d1(0xf38)][_0x4258d1(0x1619)]=function(_0x4874ef){const _0x4e2764=_0x4258d1;$gameScreen[_0x4e2764(0x135d)+_0x4e2764(0xffb)](_0x4874ef[0x2*-0xe0b+-0x3f+0x1c55],_0x4874ef[0x1ade+0x19bc+-0x3499*0x1],_0x4874ef[0x17cf+-0xe*-0x6f+-0x1ddf]);if(_0x4874ef[-0x15ef+0xf6b+0x687])this[_0x4e2764(0x58e)](_0x4874ef[-0x602+0x10ce+-0xaca]);return!![];},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xa1f)+'preter_com'+_0x4258d1(0xf4b)]=Game_Interpreter[_0x4258d1(0xf38)][_0x4258d1(0x622)],Game_Interpreter[_0x4258d1(0xf38)][_0x4258d1(0x622)]=function(_0xd5ffb9){const _0xf88526=_0x4258d1;return SceneManager[_0xf88526(0x614)+_0xf88526(0x6e5)]()?(SceneManager[_0xf88526(0x14b3)]['_spriteset'][_0xf88526(0xf5c)+_0xf88526(0x137a)](_0xd5ffb9[-0x1c45+0x5eb+0x165a],_0xd5ffb9[-0x248d+-0x3ff+0x7*0x5cb]),!![]):VisuMZ[_0xf88526(0x337)][_0xf88526(0xa1f)+_0xf88526(0x11d4)+'mand283']['call'](this,_0xd5ffb9);},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x1363)+_0x4258d1(0xc34)+'ap']=function(_0x558bc2,_0x3a3041){_0x558bc2['bitmap']=_0x3a3041;},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0xf5c)+'lebacks']=function(_0x5db75a,_0x3516b0){const _0x5b7aa1=_0x4258d1,_0x22815d={'beGIi':function(_0x409510,_0x4c4484){return _0x409510||_0x4c4484;},'QCHIG':function(_0x2b2a3d,_0x1603f4){return _0x2b2a3d||_0x1603f4;},'qygox':function(_0x43e49c,_0x294f1e){return _0x43e49c===_0x294f1e;},'MWUXF':function(_0x17f6b2,_0x1ecd20){return _0x17f6b2===_0x1ecd20;}};_0x5db75a=_0x22815d['beGIi'](_0x5db75a,''),_0x3516b0=_0x22815d[_0x5b7aa1(0xa17)](_0x3516b0,'');_0x22815d['qygox'](_0x5db75a,'')&&_0x22815d[_0x5b7aa1(0x6ea)](_0x3516b0,'')&&(_0x5db75a=this['_back1Spri'+'te']['battleback'+'1Name'](),_0x3516b0=this['_back2Spri'+'te'][_0x5b7aa1(0xb93)+_0x5b7aa1(0x549)]());const _0xaf18de=ImageManager[_0x5b7aa1(0x6cf)+_0x5b7aa1(0xf68)](_0x5db75a),_0x1a8d97=ImageManager['loadBattle'+_0x5b7aa1(0x108c)](_0x3516b0);_0xaf18de['addLoadLis'+_0x5b7aa1(0x632)](this['updateBatt'+_0x5b7aa1(0xc34)+_0x5b7aa1(0xc0a)][_0x5b7aa1(0x144f)](this,this[_0x5b7aa1(0xd0f)+'te'],this[_0x5b7aa1(0x1296)+'te'],_0xaf18de,_0x1a8d97));},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x1363)+'lebackBitm'+_0x4258d1(0xc0a)]=function(_0x50caa7,_0x19cc6a,_0x4ff232,_0x16ab9e){const _0x392e89=_0x4258d1;_0x16ab9e['addLoadLis'+_0x392e89(0x632)](this[_0x392e89(0x1363)+_0x392e89(0xc34)+_0x392e89(0x2d0)][_0x392e89(0x144f)](this,_0x50caa7,_0x19cc6a,_0x4ff232,_0x16ab9e));},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x1363)+'lebackBitm'+_0x4258d1(0x2d0)]=function(_0x199cb8,_0x719b27,_0x48c24f,_0x2ed991){const _0xae079a=_0x4258d1;_0x199cb8[_0xae079a(0x5dd)]=_0x48c24f,_0x719b27[_0xae079a(0x5dd)]=_0x2ed991,_0x199cb8[_0xae079a(0x143a)+'tion'](),_0x719b27[_0xae079a(0x143a)+_0xae079a(0x940)]();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x12c6)+_0x4258d1(0x8fb)+_0x4258d1(0x5b0)+'ield']=Spriteset_Battle['prototype']['createBatt'+_0x4258d1(0x163e)],Spriteset_Battle['prototype'][_0x4258d1(0xa05)+_0x4258d1(0x163e)]=function(){const _0x47e217=_0x4258d1;VisuMZ['BattleCore']['Spriteset_'+_0x47e217(0x8fb)+_0x47e217(0x5b0)+_0x47e217(0x53a)][_0x47e217(0xb14)](this),this['createBatt'+_0x47e217(0x1300)+_0x47e217(0x16bb)]();},Spriteset_Battle['prototype'][_0x4258d1(0xa05)+_0x4258d1(0x1300)+_0x4258d1(0x16bb)]=function(){const _0x290c6c=_0x4258d1,_0x4332b0={'ymole':_0x290c6c(0xef2)},_0x313748=_0x4332b0[_0x290c6c(0x14de)][_0x290c6c(0xba9)]('|');let _0x66be1c=0x6b+-0x56*0x1d+0x953;while(!![]){switch(_0x313748[_0x66be1c++]){case'0':this[_0x290c6c(0x96c)+'geContaine'+'r']();continue;case'1':this[_0x290c6c(0x14ba)+'pedBattlef'+_0x290c6c(0x53a)]();continue;case'2':this[_0x290c6c(0x399)+'ationConta'+'iner']();continue;case'3':this[_0x290c6c(0xa05)+'leFieldCon'+_0x290c6c(0x1579)]();continue;case'4':this[_0x290c6c(0x762)+_0x290c6c(0xd3d)]();continue;}break;}},Spriteset_Battle[_0x4258d1(0xf38)]['createBatt'+'leFieldCon'+_0x4258d1(0x1579)]=function(){const _0xdc447f=_0x4258d1;this[_0xdc447f(0xc5f)+_0xdc447f(0xd3d)]=new Sprite(),this['_battleFie'+'ld'][_0xdc447f(0xd0b)](this['_battlerCo'+_0xdc447f(0xd3d)]);},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x399)+_0x4258d1(0x1241)+_0x4258d1(0x169c)]=function(){const _0x1f174a=_0x4258d1;this['_animation'+'Container']=new Sprite(),Spriteset_Battle[_0x1f174a(0xdf9)+'UI']?this['addChild'](this[_0x1f174a(0x998)+_0x1f174a(0x68e)]):this[_0x1f174a(0x1670)+'ld'][_0x1f174a(0xd0b)](this['_animation'+_0x1f174a(0x68e)]);},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x96c)+'geContaine'+'r']=function(){const _0x542586=_0x4258d1;this[_0x542586(0xf87)+'tainer']=new Sprite(),this[_0x542586(0xf87)+_0x542586(0x1579)]['x']=this[_0x542586(0x1670)+'ld']['x'],this[_0x542586(0xf87)+'tainer']['y']=this[_0x542586(0x1670)+'ld']['y'],this[_0x542586(0xd0b)](this[_0x542586(0xf87)+_0x542586(0x1579)]);},Spriteset_Battle['prototype'][_0x4258d1(0x14ba)+_0x4258d1(0xfad)+_0x4258d1(0x53a)]=function(){const _0x4b68dc=_0x4258d1,_0x1e943e={'BpqFK':_0x4b68dc(0x5e1)+'1|6|0|2','GAEAS':function(_0x3c40ee,_0x22a26e){return _0x3c40ee+_0x22a26e;}},_0x28d558=_0x1e943e[_0x4b68dc(0x7f1)][_0x4b68dc(0xba9)]('|');let _0x1f6753=0x2e*0x1d+-0x1880+0x9a5*0x2;while(!![]){switch(_0x28d558[_0x1f6753++]){case'0':this[_0x4b68dc(0xf87)+_0x4b68dc(0x1579)]['scale']['x']=-(-0x88*-0x3b+0x24fc+-0x4453);continue;case'1':this['_animation'+'Container'][_0x4b68dc(0xfcb)]['x']=-(-0x3*-0x392+0x27*0x59+-0x2*0xc22);continue;case'2':this[_0x4b68dc(0xf87)+_0x4b68dc(0x1579)]['x']=_0x1e943e['GAEAS'](this['_battleFie'+'ld']['x'],this[_0x4b68dc(0x1670)+'ld'][_0x4b68dc(0xc2a)]);continue;case'3':this[_0x4b68dc(0xc5f)+'ntainer']['x']=this[_0x4b68dc(0x1670)+'ld']['width'];continue;case'4':this[_0x4b68dc(0x14f5)+'er']['scale']['x']=-(0xc84+-0x1ec9+0x923*0x2);continue;case'5':this[_0x4b68dc(0x14f5)+'er']['x']=this[_0x4b68dc(0x1670)+'ld'][_0x4b68dc(0xc2a)];continue;case'6':this[_0x4b68dc(0x998)+_0x4b68dc(0x68e)]['x']=this[_0x4b68dc(0x1670)+'ld'][_0x4b68dc(0xc2a)];continue;case'7':if(!this[_0x4b68dc(0x1608)]())return;continue;case'8':this[_0x4b68dc(0xc5f)+_0x4b68dc(0xd3d)][_0x4b68dc(0xfcb)]['x']=-(0x8*0x3a1+0xc37+0x149f*-0x2);continue;}break;}},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x11a4)+_0x4258d1(0x3b1)]=function(){const _0x3eebb2=_0x4258d1;Imported[_0x3eebb2(0x7d7)+_0x3eebb2(0x138e)]&&this['coreEngine'+_0x3eebb2(0x3cc)+_0x3eebb2(0xe3a)]()&&this[_0x3eebb2(0xa21)+_0x3eebb2(0xe20)+_0x3eebb2(0xa51)]();const _0xb778ad=$gameTroop['members'](),_0x254ed6=[];for(const _0x14a00c of _0xb778ad){_0x254ed6[_0x3eebb2(0x88f)](new Sprite_Enemy(_0x14a00c));}_0x254ed6[_0x3eebb2(0x13fe)](this[_0x3eebb2(0x14ca)+_0x3eebb2(0x15e3)][_0x3eebb2(0x144f)](this));for(const _0xcdbfdb of _0x254ed6){this[_0x3eebb2(0xc5f)+_0x3eebb2(0xd3d)][_0x3eebb2(0xd0b)](_0xcdbfdb);}this['_enemySpri'+_0x3eebb2(0x11d5)]=_0x254ed6;},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x118e)+'rs']=function(){const _0x5d01af=_0x4258d1,_0x35190e={'abwPx':function(_0x4a0e39,_0x40bffa){return _0x4a0e39<_0x40bffa;}};this[_0x5d01af(0x9bb)+_0x5d01af(0x11d5)]=[];for(let _0x2db375=-0x23*-0xb9+-0x97*-0x7+-0x1d6c;_0x35190e[_0x5d01af(0x1c9)](_0x2db375,$gameParty['maxBattleM'+_0x5d01af(0xf63)]());_0x2db375++){const _0x33bd3a=$gameParty[_0x5d01af(0x8ab)+_0x5d01af(0x1514)]()[_0x2db375],_0x1241c3=new Sprite_Actor();_0x1241c3[_0x5d01af(0x58d)+_0x5d01af(0x12fd)+_0x5d01af(0xd46)](_0x33bd3a),_0x1241c3['setBattler'](_0x33bd3a),_0x1241c3[_0x5d01af(0x164c)](),this[_0x5d01af(0x9bb)+_0x5d01af(0x11d5)][_0x5d01af(0x88f)](_0x1241c3),this[_0x5d01af(0xc5f)+_0x5d01af(0xd3d)]['addChild'](_0x1241c3);}},Spriteset_Battle['prototype'][_0x4258d1(0x399)+_0x4258d1(0x124c)+'e']=function(_0xe6a972,_0x259d51,_0x5d8fbf,_0x58a650){const _0x2f7f24=_0x4258d1,_0x52d155=this[_0x2f7f24(0xbd7)+_0x2f7f24(0x1485)](_0x259d51),_0x50998b=new(_0x52d155?Sprite_AnimationMV:Sprite_Animation)(),_0x18492d=this[_0x2f7f24(0xe63)+'Sprites'](_0xe6a972);this[_0x2f7f24(0x131e)+_0x2f7f24(0x1261)+'r'](_0xe6a972[0x106d+-0x3*0x417+0x1*-0x428])&&(_0x5d8fbf=!_0x5d8fbf),_0x50998b['targetObje'+_0x2f7f24(0x184)]=_0xe6a972,_0x50998b[_0x2f7f24(0xb3e)](_0x18492d,_0x259d51,_0x5d8fbf,_0x58a650),this['addAnimati'+_0x2f7f24(0x1148)+_0x2f7f24(0x68e)](_0x50998b);},Spriteset_Battle[_0x4258d1(0xf38)]['addAnimati'+_0x4258d1(0x1148)+_0x4258d1(0x68e)]=function(_0x3bf7ce){const _0x464ade=_0x4258d1;this['isAnimatio'+_0x464ade(0x1ef)+'ttlePortra'+'it'](_0x3bf7ce)?(this[_0x464ade(0x1615)+_0x464ade(0x103d)+_0x464ade(0xab9)+_0x464ade(0x1579)]()['addChild'](_0x3bf7ce),_0x3bf7ce[_0x464ade(0x1615)+_0x464ade(0xcc4)]=!![]):(this[_0x464ade(0x998)+_0x464ade(0x68e)][_0x464ade(0xd0b)](_0x3bf7ce),Spriteset_Battle[_0x464ade(0xdf9)+'UI']&&(this[_0x464ade(0x998)+'Container']['x']=this['_effectsCo'+_0x464ade(0xd3d)]['x'],this['_animation'+_0x464ade(0x68e)]['y']=this[_0x464ade(0x1015)+_0x464ade(0xd3d)]['y'])),this[_0x464ade(0x998)+_0x464ade(0x94a)][_0x464ade(0x88f)](_0x3bf7ce);},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x112b)+_0x4258d1(0x1ef)+'ttlePortra'+'it']=function(_0x3d515c){const _0x273048=_0x4258d1,_0x2a4cc9={'nqwPa':function(_0x5a2b51,_0x557c28){return _0x5a2b51===_0x557c28;},'UFsRF':function(_0x5130ea,_0x17e914){return _0x5130ea!==_0x17e914;},'IaCsb':function(_0x4cc289,_0x27706e){return _0x4cc289===_0x27706e;},'llYQs':function(_0x5eab96,_0x97838c){return _0x5eab96===_0x97838c;},'tlVaW':_0x273048(0x14b6)};if(!_0x3d515c)return![];if(!_0x3d515c[_0x273048(0x998)])return![];if(!_0x3d515c['targetObje'+_0x273048(0x184)][-0x8e7+-0x1*0x1e+-0x905*-0x1])return![];if(_0x3d515c[_0x273048(0x168f)+_0x273048(0x184)][-0x1e7f+0x1*-0x3d1+-0x10*-0x225][_0x273048(0x1580)]&&!_0x3d515c[_0x273048(0x168f)+'cts'][0x37*-0x3+0xaa+-0x5][_0x273048(0x1580)]())return![];if($gameSystem[_0x273048(0x8df)]())return![];if(!this[_0x273048(0x1615)+_0x273048(0x103d)+_0x273048(0xab9)+_0x273048(0x1579)]())return![];if(_0x2a4cc9[_0x273048(0x265)](_0x3d515c[_0x273048(0xcab)+'r'],Sprite_Animation)){if(_0x2a4cc9[_0x273048(0x15b9)](_0x3d515c[_0x273048(0x998)][_0x273048(0x394)+'e'],0x1256*0x2+0x8*-0x46d+-0x144))return![];}else{if(_0x2a4cc9[_0x273048(0xe7b)](_0x3d515c['constructo'+'r'],Sprite_AnimationMV)){if(_0x2a4cc9[_0x273048(0xc3c)](_0x3d515c[_0x273048(0x998)][_0x273048(0x867)],0x10bf+0xa46+-0x1b02))return![];}}return!![];const _0x3da1b9=Window_BattleStatus[_0x273048(0xf38)][_0x273048(0x6d1)+_0x273048(0x1100)]();return['xp',_0x2a4cc9[_0x273048(0x824)]][_0x273048(0x255)](_0x3da1b9);},Spriteset_Battle['prototype']['battleStat'+_0x4258d1(0x103d)+_0x4258d1(0xab9)+'tainer']=function(){const _0x23e928=_0x4258d1;if(!SceneManager[_0x23e928(0x14b3)])return null;if(!SceneManager[_0x23e928(0x14b3)][_0x23e928(0x5c1)+_0x23e928(0xfdb)])return null;if(!SceneManager[_0x23e928(0x14b3)][_0x23e928(0x5c1)+_0x23e928(0xfdb)][_0x23e928(0x1015)+_0x23e928(0xd3d)])return null;return SceneManager[_0x23e928(0x14b3)][_0x23e928(0x5c1)+'dow'][_0x23e928(0x1015)+_0x23e928(0xd3d)];},Spriteset_Battle[_0x4258d1(0xf38)]['removeAnim'+_0x4258d1(0xf2b)]=function(_0x4c3d70){const _0x51e4ba=_0x4258d1;this[_0x51e4ba(0x1119)+'ationFromC'+_0x51e4ba(0xaf3)](_0x4c3d70);for(const _0x3ec28c of _0x4c3d70[_0x51e4ba(0x168f)+_0x51e4ba(0x184)]){_0x3ec28c[_0x51e4ba(0x1327)+'on']&&_0x3ec28c[_0x51e4ba(0x1327)+'on']();}_0x4c3d70[_0x51e4ba(0x7dd)]();},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x1119)+_0x4258d1(0x77c)+_0x4258d1(0xaf3)]=function(_0xaaf0b2){const _0x344ec7=_0x4258d1,_0x30200a={'vzAgQ':_0x344ec7(0x10c3)},_0x5a94d7=_0x30200a[_0x344ec7(0xc1d)][_0x344ec7(0xba9)]('|');let _0x16bd1b=-0x1*0xa0c+0x19ff+0x1*-0xff3;while(!![]){switch(_0x5a94d7[_0x16bd1b++]){case'0':this['_animation'+_0x344ec7(0x94a)][_0x344ec7(0x1113)](_0xaaf0b2);continue;case'1':this[_0x344ec7(0x998)+_0x344ec7(0x68e)][_0x344ec7(0x35b)+'d'](_0xaaf0b2);continue;case'2':this[_0x344ec7(0x1015)+_0x344ec7(0xd3d)][_0x344ec7(0x35b)+'d'](_0xaaf0b2);continue;case'3':this['isAnimatio'+_0x344ec7(0x1ef)+_0x344ec7(0x15a4)+'it'](_0xaaf0b2)?this[_0x344ec7(0x1615)+_0x344ec7(0x103d)+'imationCon'+_0x344ec7(0x1579)]()[_0x344ec7(0x35b)+'d'](_0xaaf0b2):this['_animation'+_0x344ec7(0x68e)][_0x344ec7(0x35b)+'d'](_0xaaf0b2);continue;case'4':if(this[_0x344ec7(0x38b)+_0x344ec7(0x73d)+'s'])this['_fauxAnima'+'tionSprite'+'s'][_0x344ec7(0x1113)](_0xaaf0b2);continue;}break;}},VisuMZ[_0x4258d1(0x337)]['Spriteset_'+'Battle_upd'+_0x4258d1(0x69a)]=Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x127a)+'rs'],Spriteset_Battle['prototype'][_0x4258d1(0x127a)+'rs']=function(){const _0x3c8095=_0x4258d1;VisuMZ['BattleCore'][_0x3c8095(0x12c6)+_0x3c8095(0x2e1)+'ateActors']['call'](this),this[_0x3c8095(0x1363)+_0x3c8095(0x413)+'er']();},Spriteset_Battle['prototype'][_0x4258d1(0x1363)+_0x4258d1(0x413)+'er']=function(){const _0x2178fd=_0x4258d1;this[_0x2178fd(0xc5f)+'ntainer'][_0x2178fd(0xe4e)][_0x2178fd(0x13fe)](this['compareBat'+_0x2178fd(0xc36)+'s']['bind'](this)),this[_0x2178fd(0xbee)+_0x2178fd(0x204)+'p']();if(!this[_0x2178fd(0xc5f)+_0x2178fd(0xd3d)])return;this[_0x2178fd(0xc5f)+_0x2178fd(0xd3d)][_0x2178fd(0x4c8)]=this['targetBatt'+_0x2178fd(0x413)+_0x2178fd(0xd30)]();},Spriteset_Battle['prototype'][_0x4258d1(0xfeb)+'tlerSprite'+'s']=function(_0x717e9d,_0x504b59){const _0x2256f5=_0x4258d1,_0x279a7a={'oEWgP':function(_0x4991e7,_0x4040d4){return _0x4991e7!==_0x4040d4;},'HHmaa':function(_0x10534e,_0x4d41b3){return _0x10534e-_0x4d41b3;}};if(VisuMZ['BattleCore']['Settings']['Actor']['PrioritySo'+'rtActors']){if(_0x717e9d[_0x2256f5(0xe4f)]&&_0x504b59[_0x2256f5(0xe4f)]){if(_0x717e9d[_0x2256f5(0xe4f)]['isActor']()&&_0x504b59[_0x2256f5(0xe4f)]['isEnemy']())return-0x337*0x1+0x97*0x11+-0x6cf;else{if(_0x504b59[_0x2256f5(0xe4f)][_0x2256f5(0x1580)]()&&_0x717e9d['_battler']['isEnemy']())return-(-0x32*-0x5+0xb24+-0x1*0xc1d);}}}return _0x279a7a['oEWgP'](_0x717e9d[_0x2256f5(0x1085)],_0x504b59['_baseY'])?_0x279a7a['HHmaa'](_0x717e9d[_0x2256f5(0x1085)],_0x504b59[_0x2256f5(0x1085)]):_0x279a7a['HHmaa'](_0x504b59['spriteId'],_0x717e9d[_0x2256f5(0x6bd)]);},Spriteset_Battle['prototype'][_0x4258d1(0xbee)+_0x4258d1(0x204)+'p']=function(){const _0x300ed2=_0x4258d1,_0x58a0e6={'CjhMT':function(_0x2795df,_0x350640){return _0x2795df===_0x350640;}};if(!VisuMZ[_0x300ed2(0x337)]['Settings'][_0x300ed2(0x1224)][_0x300ed2(0xdcf)+_0x300ed2(0x10cb)])return;const _0xa7439b=BattleManager[_0x300ed2(0xa47)];if(_0xa7439b){if(_0xa7439b[_0x300ed2(0x1580)]()&&!$gameSystem[_0x300ed2(0x8df)]())return;if(_0x58a0e6[_0x300ed2(0x4dd)](_0xa7439b,BattleManager[_0x300ed2(0xd12)]()))return;const _0x57bf63=_0xa7439b[_0x300ed2(0xc06)]();if(_0x57bf63&&_0xa7439b[_0x300ed2(0x1580)]())this[_0x300ed2(0xc5f)+_0x300ed2(0xd3d)]['addChild'](_0x57bf63);}},Spriteset_Battle['prototype'][_0x4258d1(0x806)+_0x4258d1(0xca6)]=function(){const _0x1c5f8c=_0x4258d1;for(const _0x30646b of $gameParty[_0x1c5f8c(0xe7e)+'rs']()){if(!_0x30646b)continue;if(!_0x30646b[_0x1c5f8c(0xc06)]())continue;_0x30646b[_0x1c5f8c(0xc06)]()[_0x1c5f8c(0x836)+_0x1c5f8c(0x14fb)]=!![],_0x30646b[_0x1c5f8c(0xc06)]()[_0x1c5f8c(0x11c0)]();}},Spriteset_Battle[_0x4258d1(0xf38)]['createUICo'+_0x4258d1(0xd3d)]=function(){const _0x5917a2=_0x4258d1;this[_0x5917a2(0x14f5)+'er']=new Sprite(),Spriteset_Battle[_0x5917a2(0xdf9)+'UI']?this['addChild'](this[_0x5917a2(0x14f5)+'er']):this[_0x5917a2(0x1670)+'ld'][_0x5917a2(0xd0b)](this[_0x5917a2(0x14f5)+'er']),SceneManager[_0x5917a2(0x14b3)][_0x5917a2(0x14f5)+'er']=this[_0x5917a2(0x14f5)+'er'];},Spriteset_Battle['prototype']['createEnem'+'yNames']=function(){const _0x5ac43e=_0x4258d1;if(VisuMZ[_0x5ac43e(0x337)][_0x5ac43e(0x424)][_0x5ac43e(0xcce)][_0x5ac43e(0x833)])return;this['_enemyName'+_0x5ac43e(0x68e)]=new Sprite(),BattleManager[_0x5ac43e(0x1593)+_0x5ac43e(0x2ad)+'r'](this[_0x5ac43e(0x601)+_0x5ac43e(0x68e)]);for(const _0x581db1 of this[_0x5ac43e(0x570)+_0x5ac43e(0x11d5)]){const _0x33c753=new Sprite_EnemyName();this['_enemyName'+'Container'][_0x5ac43e(0xd0b)](_0x33c753),_0x33c753['linkSprite'](_0x581db1);}},Spriteset_Battle['prototype'][_0x4258d1(0x925)+_0x4258d1(0x1066)+_0x4258d1(0x9fb)]=function(){const _0xe28ec2=_0x4258d1,_0x150539={'KxzIv':function(_0x3d8f9f,_0xeffacc){return _0x3d8f9f+_0xeffacc;},'pUmkX':function(_0x547815,_0x3311a1){return _0x547815+_0x3311a1;}};if(!this[_0xe28ec2(0xf87)+_0xe28ec2(0x1579)])return;if(!this[_0xe28ec2(0x14f5)+'er'])return;const _0x55480f=Spriteset_Battle[_0xe28ec2(0xdf9)+'UI']?this[_0xe28ec2(0xf87)+_0xe28ec2(0x1579)]['x']:0x1f15+-0xbc6+0x1*-0x134f,_0x502a78=Spriteset_Battle[_0xe28ec2(0xdf9)+'UI']?this['_damageCon'+'tainer']['y']:0x2bd*0xe+0x3b*-0x7f+-0xd3*0xb,_0x11c59f=Imported[_0xe28ec2(0x1403)+_0xe28ec2(0x90e)+'a']?this['_battleFie'+'ld']['x']:-0x12e2+-0x1c+0x12fe,_0x56e936=Imported[_0xe28ec2(0x1403)+_0xe28ec2(0x90e)+'a']?this['_battleFie'+'ld']['y']:-0x14*0x47+0x7b*-0x1d+0x137b;this[_0xe28ec2(0x14f5)+'er']['x']=_0x150539['KxzIv'](_0x55480f,_0x11c59f),this[_0xe28ec2(0x14f5)+'er']['y']=_0x150539['pUmkX'](_0x502a78,_0x56e936);},BattleManager[_0x4258d1(0x1593)+_0x4258d1(0x2ad)+'r']=function(_0x27e7dd){const _0x967bbf=_0x4258d1;if(!SceneManager[_0x967bbf(0x14b3)][_0x967bbf(0x14f5)+'er'])return;SceneManager[_0x967bbf(0x14b3)]['_uiContain'+'er'][_0x967bbf(0xd0b)](_0x27e7dd);},BattleManager[_0x4258d1(0x35b)+_0x4258d1(0xd1e)+_0x4258d1(0x1579)]=function(_0x28daf6){const _0x2964f5=_0x4258d1;if(!SceneManager[_0x2964f5(0x14b3)][_0x2964f5(0x14f5)+'er'])return;SceneManager[_0x2964f5(0x14b3)][_0x2964f5(0x14f5)+'er'][_0x2964f5(0x35b)+'d'](_0x28daf6);},Spriteset_Battle[_0x4258d1(0xf38)]['targetBatt'+_0x4258d1(0x413)+_0x4258d1(0xd30)]=function(){return-0xc1*0x1+-0x62b*0x3+-0x11*-0x131;},Spriteset_Battle['prototype'][_0x4258d1(0xae8)]=function(){return![];},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x972)+_0x4258d1(0x23e)]=function(){const _0x22dee8=_0x4258d1;return this[_0x22dee8(0x391)+_0x22dee8(0x646)]()[_0x22dee8(0x13d2)](_0x344803=>_0x344803[_0x22dee8(0x8ff)]());},Spriteset_Battle[_0x4258d1(0xf38)]['isAnyoneJu'+_0x4258d1(0x6b8)]=function(){const _0x2fe95a=_0x4258d1;return this['battlerSpr'+_0x2fe95a(0x646)]()[_0x2fe95a(0x13d2)](_0x2ab5a2=>_0x2ab5a2['isJumping']());},Spriteset_Battle[_0x4258d1(0xf38)]['isAnyoneGr'+'owing']=function(){const _0x2c6588=_0x4258d1;return this[_0x2c6588(0x391)+_0x2c6588(0x646)]()['some'](_0x5b765c=>_0x5b765c[_0x2c6588(0xb06)]());},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x11f0)+_0x4258d1(0x2d9)]=function(){const _0x540a83=_0x4258d1;return this[_0x540a83(0x391)+_0x540a83(0x646)]()['some'](_0x2ce538=>_0x2ce538['isSkewing']());},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0xf74)+'inning']=function(){const _0x4f31ea=_0x4258d1;return this['battlerSpr'+_0x4f31ea(0x646)]()['some'](_0x2e9b2f=>_0x2e9b2f['isSpinning']());},Spriteset_Battle[_0x4258d1(0xf38)][_0x4258d1(0x7fa)+_0x4258d1(0x1617)+_0x4258d1(0x100b)]=function(){const _0x3aff0b=_0x4258d1;return this['battlerSpr'+'ites']()[_0x3aff0b(0x13d2)](_0x2ea767=>_0x2ea767[_0x3aff0b(0xded)+_0x3aff0b(0x13e7)]());},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0xf29)+_0x4258d1(0x160f)+'ols']=Window_ItemList[_0x4258d1(0xf38)][_0x4258d1(0x1281)],Window_ItemList['prototype'][_0x4258d1(0x1281)]=function(){const _0x46302d=_0x4258d1,_0x4b3873={'woZho':function(_0x34e78d,_0x4abfaf){return _0x34e78d===_0x4abfaf;},'DFuHo':_0x46302d(0x83c)};return SceneManager['isSceneBat'+_0x46302d(0x6e5)]()?_0x4b3873[_0x46302d(0xdae)](SceneManager[_0x46302d(0x14b3)][_0x46302d(0x6d1)+_0x46302d(0x1100)](),_0x4b3873['DFuHo'])?VisuMZ['BattleCore']['Settings']['BattleLayo'+'ut'][_0x46302d(0x1696)+_0x46302d(0x1497)]:VisuMZ['BattleCore'][_0x46302d(0x424)][_0x46302d(0xdeb)+'ut'][_0x46302d(0xbaa)+_0x46302d(0xdf6)+'s']:VisuMZ[_0x46302d(0x337)][_0x46302d(0xf29)+_0x46302d(0x160f)+_0x46302d(0x6ed)][_0x46302d(0xb14)](this);},VisuMZ[_0x4258d1(0x337)]['Window_Ski'+_0x4258d1(0x814)+_0x4258d1(0x1329)]=Window_SkillList[_0x4258d1(0xf38)][_0x4258d1(0x1281)],Window_SkillList[_0x4258d1(0xf38)]['maxCols']=function(){const _0x146089=_0x4258d1,_0x43e972={'CSOcj':function(_0x169b88,_0x3aef8a){return _0x169b88===_0x3aef8a;},'JEKYs':_0x146089(0x83c)};return SceneManager['isSceneBat'+_0x146089(0x6e5)]()?_0x43e972[_0x146089(0x42f)](SceneManager['_scene'][_0x146089(0x6d1)+_0x146089(0x1100)](),_0x43e972[_0x146089(0x8b6)])?VisuMZ[_0x146089(0x337)][_0x146089(0x424)][_0x146089(0xdeb)+'ut']['SkillItemB'+_0x146089(0x1497)]:VisuMZ['BattleCore'][_0x146089(0x424)]['BattleLayo'+'ut'][_0x146089(0xbaa)+_0x146089(0xdf6)+'s']:VisuMZ[_0x146089(0x337)]['Window_Ski'+_0x146089(0x814)+'Cols']['call'](this);},VisuMZ['BattleCore'][_0x4258d1(0x479)+_0x4258d1(0x134b)+'neralOptio'+'ns']=Window_Options[_0x4258d1(0xf38)][_0x4258d1(0x443)+_0x4258d1(0x1195)],Window_Options[_0x4258d1(0xf38)][_0x4258d1(0x443)+'Options']=function(){const _0x445647=_0x4258d1;VisuMZ['BattleCore'][_0x445647(0x479)+_0x445647(0x134b)+_0x445647(0x80a)+'ns'][_0x445647(0xb14)](this),this[_0x445647(0x9c7)+'tleCommand'+'s'](),this[_0x445647(0x104d)+_0x445647(0x7ae)+'d']();},Window_Options[_0x4258d1(0xf38)]['addAutoBat'+_0x4258d1(0x625)+'s']=function(){const _0x38254e=_0x4258d1;VisuMZ[_0x38254e(0x337)][_0x38254e(0x424)][_0x38254e(0xe46)][_0x38254e(0x130a)]&&(this[_0x38254e(0x2a1)+_0x38254e(0x109d)+_0x38254e(0x154f)+_0x38254e(0x68a)](),this['addBattleC'+_0x38254e(0x109d)+_0x38254e(0x1331)+_0x38254e(0x1330)]());},Window_Options['prototype']['addShowHpG'+'augeComman'+'d']=function(){const _0x14c9eb=_0x4258d1,_0x5396ab={'psYfB':'visualHpGa'+'uge'};if(!VisuMZ[_0x14c9eb(0x337)]['Settings']['HpGauge'][_0x14c9eb(0x852)+'Option'])return;const _0x3441a5=TextManager['visualHpGa'+_0x14c9eb(0xe6d)],_0x20bf6e=_0x5396ab[_0x14c9eb(0xe58)];this[_0x14c9eb(0x801)](_0x3441a5,_0x20bf6e);},Window_Options[_0x4258d1(0xf38)][_0x4258d1(0x2a1)+_0x4258d1(0x109d)+_0x4258d1(0x154f)+_0x4258d1(0x68a)]=function(){const _0x4b3c78=_0x4258d1,_0x4eb64f={'eMdfG':_0x4b3c78(0x47d)+_0x4b3c78(0xab4)},_0x4194d8=TextManager[_0x4b3c78(0x47d)+'Start'],_0x5e0d4c=_0x4eb64f['eMdfG'];this['addCommand'](_0x4194d8,_0x5e0d4c);},Window_Options['prototype']['addBattleC'+_0x4258d1(0x109d)+'tleStyleCo'+_0x4258d1(0x1330)]=function(){const _0x24abfc=_0x4258d1,_0x347e57={'apVmZ':_0x24abfc(0x47d)+_0x24abfc(0xa6c)},_0xc81199=TextManager[_0x24abfc(0x47d)+'Style'],_0x2593e3=_0x347e57[_0x24abfc(0x599)];this[_0x24abfc(0x801)](_0xc81199,_0x2593e3);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x479)+_0x4258d1(0x331)+'sText']=Window_Options[_0x4258d1(0xf38)]['statusText'],Window_Options[_0x4258d1(0xf38)][_0x4258d1(0x137e)]=function(_0x344290){const _0x2d29c6=_0x4258d1,_0x330d58={'fTXaX':function(_0x74c96b,_0x45c84e){return _0x74c96b===_0x45c84e;},'nzKeV':_0x2d29c6(0x47d)+_0x2d29c6(0xa6c)},_0x13f1e3=this[_0x2d29c6(0x160e)+_0x2d29c6(0x284)](_0x344290);return _0x330d58['fTXaX'](_0x13f1e3,_0x330d58['nzKeV'])?this['statusText'+_0x2d29c6(0xe46)+_0x2d29c6(0xa30)]():VisuMZ[_0x2d29c6(0x337)][_0x2d29c6(0x479)+_0x2d29c6(0x331)+_0x2d29c6(0x1451)][_0x2d29c6(0xb14)](this,_0x344290);},Window_Options['prototype'][_0x4258d1(0x137e)+'AutoBattle'+_0x4258d1(0xa30)]=function(){const _0x4b3f50=_0x4258d1,_0x13efa7={'OzNAx':_0x4b3f50(0x47d)+_0x4b3f50(0xa6c)},_0x540d4d=VisuMZ[_0x4b3f50(0x337)][_0x4b3f50(0x424)][_0x4b3f50(0xe46)],_0xd9259c=this['getConfigV'+_0x4b3f50(0x404)](_0x13efa7[_0x4b3f50(0xcde)]);return _0xd9259c?_0x540d4d[_0x4b3f50(0x1652)]:_0x540d4d['StyleOFF'];},Window_ShopStatus['prototype'][_0x4258d1(0xef1)+_0x4258d1(0x5a9)+_0x4258d1(0x583)+_0x4258d1(0x5b8)]=function(){const _0x2f5a73=_0x4258d1,_0x4ed8e5={'xbvUI':'DamageType'+'%1'},_0x57b6d6=DataManager[_0x2f5a73(0x8a7)+_0x2f5a73(0xda6)](this[_0x2f5a73(0xc4f)]),_0x4840d2=VisuMZ[_0x2f5a73(0x16b9)+'es'][_0x57b6d6];if(!_0x4840d2)return this[_0x2f5a73(0xef1)+_0x2f5a73(0x5a9)+'abelOrigin'+'al']();const _0x44aaa9=_0x4ed8e5['xbvUI'][_0x2f5a73(0xf22)](this[_0x2f5a73(0xc4f)][_0x2f5a73(0xbc0)][_0x2f5a73(0x1064)]),_0x43be00=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x2f5a73(0xc4f)][_0x2f5a73(0xbc0)]['type']];return _0x4840d2[_0x44aaa9]['format'](_0x43be00);},Window_ShopStatus[_0x4258d1(0xf38)]['getItemDam'+_0x4258d1(0xf15)+_0x4258d1(0x11ce)+'ore']=function(){const _0xd2983b=_0x4258d1,_0x4066d5=DataManager['getDamageS'+'tyle'](this[_0xd2983b(0xc4f)]),_0x12e93e=VisuMZ[_0xd2983b(0x16b9)+'es'][_0x4066d5];if(!_0x12e93e)return this[_0xd2983b(0xef1)+_0xd2983b(0xf15)+_0xd2983b(0x4cf)+'l']();return _0x12e93e['DamageDisp'+_0xd2983b(0xfaf)][_0xd2983b(0xb14)](this);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x8c2)+_0x4258d1(0x3f1)+_0x4258d1(0xca3)]=Window_PartyCommand[_0x4258d1(0xf38)]['initialize'],Window_PartyCommand['prototype'][_0x4258d1(0xca3)]=function(_0x1e7a54){const _0x1073f0=_0x4258d1;VisuMZ[_0x1073f0(0x337)]['Window_Par'+_0x1073f0(0x3f1)+_0x1073f0(0xca3)][_0x1073f0(0xb14)](this,_0x1e7a54),this['createComm'+_0x1073f0(0x379)+_0x1073f0(0xfdb)](_0x1e7a54);},Window_PartyCommand['prototype']['createComm'+_0x4258d1(0x379)+'dow']=function(_0x24b305){const _0x18ed6f=_0x4258d1,_0x3de043=new Rectangle(-0x172c+0x1369*-0x1+0xb*0x3df,-0x143+0x3e*0x97+-0x234f,_0x24b305[_0x18ed6f(0xc2a)],_0x24b305['height']);this[_0x18ed6f(0x15f8)+'meWindow']=new Window_Base(_0x3de043),this[_0x18ed6f(0x15f8)+'meWindow'][_0x18ed6f(0x4c8)]=0x5*0x191+0x62b*0x2+0x6b9*-0x3,this[_0x18ed6f(0xd0b)](this[_0x18ed6f(0x15f8)+_0x18ed6f(0xeeb)]),this['updateComm'+_0x18ed6f(0x379)+'dow']();},Window_PartyCommand[_0x4258d1(0xf38)]['callUpdate'+_0x4258d1(0xac0)]=function(){const _0x5bf9b1=_0x4258d1;Window_Command['prototype'][_0x5bf9b1(0x1408)+_0x5bf9b1(0xac0)]['call'](this);if(this[_0x5bf9b1(0x15f8)+_0x5bf9b1(0xeeb)])this['updateComm'+_0x5bf9b1(0x379)+_0x5bf9b1(0xfdb)]();},Window_PartyCommand[_0x4258d1(0xf38)]['updateComm'+_0x4258d1(0x379)+_0x4258d1(0xfdb)]=function(){const _0x16bc02=_0x4258d1,_0x1fd5c3={'uMPuO':function(_0x5210b0,_0x508ccc){return _0x5210b0===_0x508ccc;},'mUGTo':_0x16bc02(0x40b),'VqezO':function(_0x38f104,_0x397c0a){return _0x38f104>_0x397c0a;}},_0x15ec6e=this['_commandNa'+_0x16bc02(0xeeb)];_0x15ec6e['contents']['clear']();const _0x5d3907=this[_0x16bc02(0x7aa)+'leCheck'](this[_0x16bc02(0x2e3)]());if(_0x1fd5c3[_0x16bc02(0x1ba)](_0x5d3907,_0x1fd5c3[_0x16bc02(0x1010)])&&_0x1fd5c3['VqezO'](this['maxItems'](),0xf31*0x1+-0x2309*-0x1+-0x323a)){const _0x3227b2=this['itemLineRe'+'ct'](this['index']());let _0x123715=this[_0x16bc02(0x11c6)+'e'](this[_0x16bc02(0x2e3)]());_0x123715=_0x123715[_0x16bc02(0xf58)](/\\I\[(\d+)\]/gi,''),_0x15ec6e['resetFontS'+'ettings'](),this[_0x16bc02(0x11c6)+_0x16bc02(0x1557)+_0x16bc02(0x145c)+'d'](_0x123715,_0x3227b2),this['commandNam'+_0x16bc02(0x1557)+_0x16bc02(0x105a)](_0x123715,_0x3227b2),this[_0x16bc02(0x11c6)+_0x16bc02(0x2fc)+_0x16bc02(0x1312)](_0x123715,_0x3227b2);}},Window_PartyCommand[_0x4258d1(0xf38)][_0x4258d1(0x11c6)+_0x4258d1(0x1557)+_0x4258d1(0x145c)+'d']=function(_0x131a42,_0x42af5d){},Window_PartyCommand['prototype'][_0x4258d1(0x11c6)+_0x4258d1(0x1557)+_0x4258d1(0x105a)]=function(_0x31ea7d,_0x58ec3d){const _0x45b373=_0x4258d1,_0x173643={'XkSjV':_0x45b373(0x450)},_0x999ac3=this[_0x45b373(0x15f8)+'meWindow'];_0x999ac3[_0x45b373(0xfa6)](_0x31ea7d,-0x23f2+-0x41*-0xd+0x20a5,_0x58ec3d['y'],_0x999ac3['innerWidth'],_0x173643['XkSjV']);},Window_PartyCommand['prototype'][_0x4258d1(0x11c6)+_0x4258d1(0x2fc)+_0x4258d1(0x1312)]=function(_0x23eace,_0x3803d4){const _0x38b37d=_0x4258d1,_0x1a980b={'qHqRi':function(_0x2526b6,_0x29d3dd){return _0x2526b6+_0x29d3dd;},'xJlpa':function(_0x2ffe13,_0x2e54a3){return _0x2ffe13/_0x2e54a3;},'eeeVZ':function(_0x236dce,_0x47f5c1){return _0x236dce/_0x47f5c1;},'ABoli':function(_0x1bbf58,_0x2bce19){return _0x1bbf58/_0x2bce19;}},_0x1c1c0f=this['_commandNa'+_0x38b37d(0xeeb)],_0x5602f6=$gameSystem[_0x38b37d(0x15ac)+'ing'](),_0x130e9a=_0x1a980b[_0x38b37d(0x122b)](_0x1a980b[_0x38b37d(0x122b)](_0x3803d4['x'],Math[_0x38b37d(0x76f)](_0x1a980b[_0x38b37d(0xfa8)](_0x3803d4['width'],-0x6b0*0x4+0x1*-0x1d3e+0x3800))),_0x5602f6);_0x1c1c0f['x']=_0x1a980b[_0x38b37d(0x122b)](_0x1a980b[_0x38b37d(0x153c)](_0x1c1c0f['width'],-(-0x1f5c+-0xdf*0x1d+-0x2fb*-0x13)),_0x130e9a),_0x1c1c0f['y']=Math[_0x38b37d(0x76f)](_0x1a980b[_0x38b37d(0xaec)](_0x3803d4[_0x38b37d(0x1594)],-0xf*-0xf+0xeab+-0xf8a));},Window_PartyCommand[_0x4258d1(0xf38)][_0x4258d1(0xf43)+'dList']=function(){const _0x2beeb2=_0x4258d1,_0x20a16d={'McoUq':_0x2beeb2(0x1365)},_0x22f4b5=_0x20a16d['McoUq']['split']('|');let _0x3f019f=-0x1b41+-0xc*-0xc7+0x11ed;while(!![]){switch(_0x22f4b5[_0x3f019f++]){case'0':this[_0x2beeb2(0x142d)+_0x2beeb2(0x461)]();continue;case'1':this[_0x2beeb2(0xb63)+_0x2beeb2(0x68a)]();continue;case'2':this[_0x2beeb2(0x1454)+_0x2beeb2(0x6ae)]();continue;case'3':this['addAutoBat'+_0x2beeb2(0x625)]();continue;case'4':this[_0x2beeb2(0xb13)+'mmand']();continue;}break;}},Window_PartyCommand[_0x4258d1(0xf38)][_0x4258d1(0xb13)+_0x4258d1(0x1330)]=function(){const _0x2dba1d=_0x4258d1,_0x119899={'NRVlw':function(_0x5a75ad,_0x2654a2){return _0x5a75ad===_0x2654a2;},'krQOR':_0x2dba1d(0x15a8),'PFHif':'\x5cI[%1]%2','JUQDA':'fight'},_0x1e4849=this['commandSty'+'le'](),_0x294133=VisuMZ['BattleCore'][_0x2dba1d(0x424)][_0x2dba1d(0xde5)][_0x2dba1d(0x3da)+'ht'],_0x5cb391=_0x119899[_0x2dba1d(0x98d)](_0x1e4849,_0x119899['krQOR'])?TextManager[_0x2dba1d(0x153f)]:_0x119899['PFHif'][_0x2dba1d(0xf22)](_0x294133,TextManager[_0x2dba1d(0x153f)]),_0x126d2d=this[_0x2dba1d(0x30e)+_0x2dba1d(0xef3)+'d']();this[_0x2dba1d(0x801)](_0x5cb391,_0x119899[_0x2dba1d(0xe59)],_0x126d2d);},Window_PartyCommand[_0x4258d1(0xf38)]['isFightCom'+_0x4258d1(0xef3)+'d']=function(){return!![];},Window_PartyCommand[_0x4258d1(0xf38)][_0x4258d1(0x9c7)+'tleCommand']=function(){const _0x3d266c=_0x4258d1,_0xc05ad5={'bHQDT':function(_0x4e6f08,_0x14bef8){return _0x4e6f08===_0x14bef8;},'kxuow':'text','Vxjia':_0x3d266c(0x31c),'MFFwY':'autoBattle'};if(!this[_0x3d266c(0xc51)+'leCommandA'+'dded']())return;const _0x1f3d9d=this[_0x3d266c(0x7aa)+'le'](),_0x1d889d=VisuMZ['BattleCore'][_0x3d266c(0x424)]['PartyCmd'][_0x3d266c(0x231)+_0x3d266c(0x3dc)],_0x513deb=_0xc05ad5[_0x3d266c(0x9e5)](_0x1f3d9d,_0xc05ad5[_0x3d266c(0x79e)])?TextManager[_0x3d266c(0x47d)]:_0xc05ad5[_0x3d266c(0x1434)][_0x3d266c(0xf22)](_0x1d889d,TextManager['autoBattle']),_0x136736=this['isAutoBatt'+_0x3d266c(0xf19)+_0x3d266c(0x161c)]();this[_0x3d266c(0x801)](_0x513deb,_0xc05ad5[_0x3d266c(0x381)],_0x136736);},Window_PartyCommand['prototype']['isAutoBatt'+'leCommandA'+_0x4258d1(0x8e5)]=function(){const _0x136837=_0x4258d1;return VisuMZ['BattleCore'][_0x136837(0x424)][_0x136837(0xde5)][_0x136837(0x242)+_0x136837(0xe46)];},Window_PartyCommand['prototype'][_0x4258d1(0xc51)+'leCommandE'+_0x4258d1(0x161c)]=function(){return!![];},Window_PartyCommand[_0x4258d1(0xf38)][_0x4258d1(0x1454)+_0x4258d1(0x6ae)]=function(){},Window_PartyCommand[_0x4258d1(0xf38)][_0x4258d1(0xb63)+_0x4258d1(0x68a)]=function(){const _0x5243cf=_0x4258d1,_0x38847a={'aOlhw':function(_0x1d85a5,_0x16fe39){return _0x1d85a5===_0x16fe39;},'fAFgW':_0x5243cf(0x15a8),'YUamY':_0x5243cf(0x31c),'xymDo':_0x5243cf(0x6b0)};if(!this[_0x5243cf(0xac1)+_0x5243cf(0xa83)+'d']())return;const _0x534c81=this['commandSty'+'le'](),_0x50c927=VisuMZ[_0x5243cf(0x337)][_0x5243cf(0x424)][_0x5243cf(0xde5)][_0x5243cf(0xd6d)+_0x5243cf(0x763)],_0x45bf32=_0x38847a[_0x5243cf(0xa9d)](_0x534c81,_0x38847a['fAFgW'])?TextManager[_0x5243cf(0x6b0)]:_0x38847a['YUamY'][_0x5243cf(0xf22)](_0x50c927,TextManager[_0x5243cf(0x6b0)]),_0x5b152d=this[_0x5243cf(0xac1)+_0x5243cf(0x81b)+_0x5243cf(0x1e2)]();this[_0x5243cf(0x801)](_0x45bf32,_0x38847a[_0x5243cf(0x12f4)],_0x5b152d);},Window_PartyCommand[_0x4258d1(0xf38)]['isOptionsC'+'ommandAdde'+'d']=function(){const _0x158764=_0x4258d1;return VisuMZ[_0x158764(0x337)][_0x158764(0x424)]['PartyCmd'][_0x158764(0x242)+_0x158764(0x1195)];},Window_PartyCommand[_0x4258d1(0xf38)][_0x4258d1(0xac1)+_0x4258d1(0x81b)+_0x4258d1(0x1e2)]=function(){return!![];},Window_PartyCommand[_0x4258d1(0xf38)][_0x4258d1(0x142d)+_0x4258d1(0x461)]=function(){const _0x1182bc=_0x4258d1,_0x8c2d6={'IRJAd':function(_0x45c4bf,_0x5dec40){return _0x45c4bf===_0x5dec40;},'MDHBg':_0x1182bc(0x15a8),'oHXWf':_0x1182bc(0x31c),'fkzvL':_0x1182bc(0x117a)},_0x497637=this['commandSty'+'le'](),_0x5722e2=VisuMZ[_0x1182bc(0x337)][_0x1182bc(0x424)][_0x1182bc(0xde5)][_0x1182bc(0xb49)+_0x1182bc(0xca6)],_0x1baac2=_0x8c2d6[_0x1182bc(0x860)](_0x497637,_0x8c2d6[_0x1182bc(0x228)])?TextManager[_0x1182bc(0x117a)]:_0x8c2d6[_0x1182bc(0xf6b)][_0x1182bc(0xf22)](_0x5722e2,TextManager['escape']),_0x32271a=this['isEscapeCo'+_0x1182bc(0x23d)+'ed']();this[_0x1182bc(0x801)](_0x1baac2,_0x8c2d6[_0x1182bc(0x958)],_0x32271a);},Window_PartyCommand[_0x4258d1(0xf38)][_0x4258d1(0xcf9)+_0x4258d1(0x23d)+'ed']=function(){const _0x17d032=_0x4258d1;return BattleManager[_0x17d032(0xa8a)]();},Window_PartyCommand[_0x4258d1(0xf38)][_0x4258d1(0x472)+'ign']=function(){const _0x5cdb7d=_0x4258d1;return VisuMZ['BattleCore']['Settings'][_0x5cdb7d(0xde5)][_0x5cdb7d(0x1029)+'gn'];},Window_PartyCommand['prototype']['drawItem']=function(_0xaae9eb){const _0x37acb5=_0x4258d1,_0x4f00ef={'qnIwS':function(_0x209e68,_0xe91d31){return _0x209e68===_0xe91d31;},'pNqmf':_0x37acb5(0x305),'VAuwW':function(_0x254ac8,_0x3c4365){return _0x254ac8===_0x3c4365;},'bfYRs':'icon'},_0x5a6f4d=this['commandSty'+_0x37acb5(0x48c)](_0xaae9eb);if(_0x4f00ef[_0x37acb5(0x13ff)](_0x5a6f4d,_0x4f00ef['pNqmf']))this[_0x37acb5(0x1561)+_0x37acb5(0x942)+'t'](_0xaae9eb);else _0x4f00ef[_0x37acb5(0x2f4)](_0x5a6f4d,_0x4f00ef[_0x37acb5(0x15f1)])?this['drawItemSt'+_0x37acb5(0x76b)](_0xaae9eb):Window_Command[_0x37acb5(0xf38)]['drawItem'][_0x37acb5(0xb14)](this,_0xaae9eb);},Window_PartyCommand['prototype'][_0x4258d1(0x7aa)+'le']=function(){const _0x1c5e84=_0x4258d1;return VisuMZ[_0x1c5e84(0x337)]['Settings']['PartyCmd'][_0x1c5e84(0x150f)];},Window_PartyCommand[_0x4258d1(0xf38)]['commandSty'+'leCheck']=function(_0x55a187){const _0x707022=_0x4258d1,_0x1238ec={'evbNZ':function(_0x62bbd7,_0x5cd510){return _0x62bbd7<_0x5cd510;},'aHOWS':_0x707022(0x15a8),'VOZcJ':function(_0xc4d281,_0x1b3480){return _0xc4d281!==_0x1b3480;},'xGock':'auto','oQWVH':function(_0x4072c2,_0x5010ed){return _0x4072c2>_0x5010ed;},'TYsDU':function(_0x2b0fb6,_0x4dba6b){return _0x2b0fb6<=_0x4dba6b;},'bnJfC':_0x707022(0x305),'QmQel':_0x707022(0x40b)};if(_0x1238ec[_0x707022(0x338)](_0x55a187,0x12f5+-0x853+-0xaa2))return _0x1238ec[_0x707022(0x1567)];const _0x3745fa=this[_0x707022(0x7aa)+'le']();if(_0x1238ec[_0x707022(0xfe1)](_0x3745fa,_0x1238ec[_0x707022(0xb8a)]))return _0x3745fa;else{if(_0x1238ec[_0x707022(0x1538)](this[_0x707022(0x700)](),0x2312+-0x13*0x1cf+-0x1*0xb5)){const _0x3f978e=this[_0x707022(0x11c6)+'e'](_0x55a187);if(_0x3f978e[_0x707022(0x79c)](/\\I\[(\d+)\]/i)){const _0x2d7f40=this[_0x707022(0x139e)+'ct'](_0x55a187),_0x381643=this['textSizeEx'](_0x3f978e)[_0x707022(0xc2a)];return _0x1238ec[_0x707022(0x1384)](_0x381643,_0x2d7f40[_0x707022(0xc2a)])?_0x1238ec['bnJfC']:_0x1238ec[_0x707022(0x15a1)];}}}return _0x1238ec[_0x707022(0x1567)];},Window_PartyCommand[_0x4258d1(0xf38)][_0x4258d1(0x1561)+'yleIconTex'+'t']=function(_0x2579c2){const _0x1f364a=_0x4258d1,_0x1b2560={'lBaca':function(_0x202e35,_0x2d49a8){return _0x202e35===_0x2d49a8;},'Fxbni':_0x1f364a(0xe5e),'bxKKA':function(_0x474fca,_0x4e9801){return _0x474fca-_0x4e9801;},'FHZYv':function(_0x6cc817,_0x51d9c9){return _0x6cc817+_0x51d9c9;},'TACIS':_0x1f364a(0x450),'dgdTM':function(_0x546394,_0x33060b){return _0x546394/_0x33060b;},'FNRtt':function(_0xeea5c4,_0x255c93){return _0xeea5c4-_0x255c93;}},_0xf43767=this[_0x1f364a(0x139e)+'ct'](_0x2579c2),_0x3795c9=this['commandNam'+'e'](_0x2579c2),_0x1d3210=this[_0x1f364a(0xe7c)](_0x3795c9)['width'];this['changePain'+_0x1f364a(0x205)](this[_0x1f364a(0x134c)+_0x1f364a(0x161c)](_0x2579c2));const _0x392390=this[_0x1f364a(0x472)+'ign']();if(_0x1b2560[_0x1f364a(0x12f2)](_0x392390,_0x1b2560[_0x1f364a(0xd73)]))this[_0x1f364a(0xd7a)](_0x3795c9,_0x1b2560[_0x1f364a(0xfea)](_0x1b2560[_0x1f364a(0x1098)](_0xf43767['x'],_0xf43767[_0x1f364a(0xc2a)]),_0x1d3210),_0xf43767['y'],_0x1d3210);else{if(_0x1b2560[_0x1f364a(0x12f2)](_0x392390,_0x1b2560['TACIS'])){const _0x11a819=_0x1b2560['FHZYv'](_0xf43767['x'],Math[_0x1f364a(0x76f)](_0x1b2560[_0x1f364a(0x92c)](_0x1b2560[_0x1f364a(0xccc)](_0xf43767[_0x1f364a(0xc2a)],_0x1d3210),0x9d7+-0xbd*0x18+0x7e3)));this[_0x1f364a(0xd7a)](_0x3795c9,_0x11a819,_0xf43767['y'],_0x1d3210);}else this[_0x1f364a(0xd7a)](_0x3795c9,_0xf43767['x'],_0xf43767['y'],_0x1d3210);}},Window_PartyCommand[_0x4258d1(0xf38)][_0x4258d1(0x1561)+_0x4258d1(0x76b)]=function(_0x13c180){const _0x23486f=_0x4258d1,_0x3388c0={'TEGIT':function(_0x10408e,_0x311c10){return _0x10408e(_0x311c10);},'bJwzi':function(_0x831bfc,_0x5e7b24){return _0x831bfc+_0x5e7b24;},'quvqv':function(_0x53d538,_0x2d27dc){return _0x53d538/_0x2d27dc;},'Pjkka':function(_0x3dab27,_0xa27727){return _0x3dab27-_0xa27727;},'OJWQl':function(_0x30ca97,_0xeb8547){return _0x30ca97-_0xeb8547;}};this[_0x23486f(0x11c6)+'e'](_0x13c180)['match'](/\\I\[(\d+)\]/i);const _0x529f87=_0x3388c0[_0x23486f(0x11b1)](Number,RegExp['$1'])||0xb3a+0x6f*-0x13+-0x5*0x99,_0x5dab04=this['itemLineRe'+'ct'](_0x13c180),_0x328819=_0x3388c0[_0x23486f(0x491)](_0x5dab04['x'],Math[_0x23486f(0x76f)](_0x3388c0['quvqv'](_0x3388c0[_0x23486f(0x27f)](_0x5dab04[_0x23486f(0xc2a)],ImageManager[_0x23486f(0x465)]),-0x249d+-0x16a0+0x1d*0x20b))),_0x13f974=_0x3388c0[_0x23486f(0x491)](_0x5dab04['y'],_0x3388c0['quvqv'](_0x3388c0[_0x23486f(0x1d3)](_0x5dab04[_0x23486f(0x1594)],ImageManager[_0x23486f(0x7f3)]),0x92*-0x2f+-0x7ae*-0x1+0x4f*0x3e));this[_0x23486f(0x115c)](_0x529f87,_0x328819,_0x13f974);},Window_PartyCommand[_0x4258d1(0xf38)][_0x4258d1(0x514)]=function(){},Window_PartyCommand[_0x4258d1(0xf38)][_0x4258d1(0x1be)]=function(){const _0x1fd030=_0x4258d1,_0x41563e={'zHoWL':function(_0x3d90f5,_0x5d8b0e){return _0x3d90f5===_0x5d8b0e;},'ngWXm':_0x1fd030(0x83c)};Window_Command[_0x1fd030(0xf38)][_0x1fd030(0x1be)][_0x1fd030(0xb14)](this);const _0x4f6a6b=this['battleLayo'+_0x1fd030(0x1100)]();_0x41563e[_0x1fd030(0xcd5)](_0x4f6a6b,_0x41563e[_0x1fd030(0xd36)])&&this['showHelpWi'+_0x1fd030(0xb19)]();},Window_PartyCommand['prototype']['battleLayo'+_0x4258d1(0x1100)]=function(){const _0x29776a=_0x4258d1;if(this[_0x29776a(0xdcc)+_0x29776a(0x55c)])return this[_0x29776a(0xdcc)+_0x29776a(0x55c)];return this[_0x29776a(0xdcc)+'outStyle']=SceneManager['_scene'][_0x29776a(0x6d1)+_0x29776a(0x1100)](),this[_0x29776a(0xdcc)+_0x29776a(0x55c)];},Window_PartyCommand['prototype'][_0x4258d1(0xcba)]=function(){const _0x8c11a6=_0x4258d1,_0x26dfd5={'ikigc':_0x8c11a6(0x153f),'fnAss':_0x8c11a6(0x47d),'gTMMf':_0x8c11a6(0x6b0),'DpiVv':'escape'},_0x1032ec=VisuMZ[_0x8c11a6(0x337)][_0x8c11a6(0x424)][_0x8c11a6(0xde5)],_0x738288=this[_0x8c11a6(0x3fa)+_0x8c11a6(0x284)]();switch(_0x738288){case _0x26dfd5[_0x8c11a6(0x1fe)]:this['_helpWindo'+'w'][_0x8c11a6(0x6c1)](_0x1032ec[_0x8c11a6(0x252)]);break;case _0x26dfd5['fnAss']:this[_0x8c11a6(0x560)+'w']['setText'](_0x1032ec[_0x8c11a6(0x143d)+_0x8c11a6(0x1462)]);break;case _0x26dfd5[_0x8c11a6(0x14f0)]:this['_helpWindo'+'w'][_0x8c11a6(0x6c1)](_0x1032ec[_0x8c11a6(0xc5b)+'s']);break;case _0x26dfd5[_0x8c11a6(0x803)]:this[_0x8c11a6(0x560)+'w']['setText'](_0x1032ec['HelpEscape']);break;default:this[_0x8c11a6(0x560)+'w'][_0x8c11a6(0x6c1)]('');break;}},VisuMZ['BattleCore'][_0x4258d1(0xee6)+_0x4258d1(0x156d)+'initialize']=Window_ActorCommand[_0x4258d1(0xf38)]['initialize'],Window_ActorCommand[_0x4258d1(0xf38)]['initialize']=function(_0x4bc483){const _0x268dda=_0x4258d1;VisuMZ['BattleCore'][_0x268dda(0xee6)+_0x268dda(0x156d)+_0x268dda(0xca3)][_0x268dda(0xb14)](this,_0x4bc483),this[_0x268dda(0x1c6)+_0x268dda(0x379)+_0x268dda(0xfdb)](_0x4bc483);},Window_ActorCommand['prototype'][_0x4258d1(0x1c6)+_0x4258d1(0x379)+_0x4258d1(0xfdb)]=function(_0x26ef27){const _0x16f591=_0x4258d1,_0x488506=new Rectangle(-0x16f6+-0x254b+-0x3c41*-0x1,-0x16ca+-0x16c8+0x13*0x266,_0x26ef27[_0x16f591(0xc2a)],_0x26ef27[_0x16f591(0x1594)]);this[_0x16f591(0x15f8)+_0x16f591(0xeeb)]=new Window_Base(_0x488506),this[_0x16f591(0x15f8)+_0x16f591(0xeeb)]['opacity']=0x36e*-0x7+-0x1eb3+0x1*0x36b5,this['addChild'](this[_0x16f591(0x15f8)+_0x16f591(0xeeb)]),this['updateComm'+'andNameWin'+_0x16f591(0xfdb)]();},Window_ActorCommand['prototype'][_0x4258d1(0x1408)+'Help']=function(){const _0x3ca4b6=_0x4258d1;Window_Command['prototype'][_0x3ca4b6(0x1408)+'Help'][_0x3ca4b6(0xb14)](this);if(this[_0x3ca4b6(0x15f8)+'meWindow'])this[_0x3ca4b6(0xe07)+_0x3ca4b6(0x379)+_0x3ca4b6(0xfdb)]();},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0xe07)+_0x4258d1(0x379)+_0x4258d1(0xfdb)]=function(){const _0x47c4b5=_0x4258d1,_0xdfb612={'yygsD':function(_0x235182,_0x19c57d){return _0x235182===_0x19c57d;},'dyjiY':'icon','YeTtt':function(_0x3f1301,_0x218bb1){return _0x3f1301>_0x218bb1;}},_0x93dff4=this[_0x47c4b5(0x15f8)+'meWindow'];_0x93dff4['contents']['clear']();const _0x16c287=this['commandSty'+_0x47c4b5(0x48c)](this[_0x47c4b5(0x2e3)]());if(_0xdfb612[_0x47c4b5(0x2f9)](_0x16c287,_0xdfb612['dyjiY'])&&_0xdfb612['YeTtt'](this[_0x47c4b5(0x700)](),-0x2476+-0x445*-0x2+-0xdf6*-0x2)){const _0x18656c=this[_0x47c4b5(0x139e)+'ct'](this['index']());let _0x1fbf4a=this[_0x47c4b5(0x11c6)+'e'](this[_0x47c4b5(0x2e3)]());_0x1fbf4a=_0x1fbf4a[_0x47c4b5(0xf58)](/\\I\[(\d+)\]/gi,''),_0x93dff4[_0x47c4b5(0x11fa)+_0x47c4b5(0x5f7)](),this[_0x47c4b5(0x11c6)+_0x47c4b5(0x1557)+_0x47c4b5(0x145c)+'d'](_0x1fbf4a,_0x18656c),this[_0x47c4b5(0x11c6)+_0x47c4b5(0x1557)+_0x47c4b5(0x105a)](_0x1fbf4a,_0x18656c),this[_0x47c4b5(0x11c6)+_0x47c4b5(0x2fc)+_0x47c4b5(0x1312)](_0x1fbf4a,_0x18656c);}},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x11c6)+'eWindowDra'+_0x4258d1(0x145c)+'d']=function(_0x31e2e2,_0x133e6f){},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x11c6)+_0x4258d1(0x1557)+_0x4258d1(0x105a)]=function(_0x4a31fd,_0x483b7c){const _0x329439=_0x4258d1,_0x4f36b1={'VwExl':_0x329439(0x450)},_0x1a8403=this['_commandNa'+_0x329439(0xeeb)];_0x1a8403[_0x329439(0xfa6)](_0x4a31fd,-0x3*0x86d+-0xc70+0x25b7,_0x483b7c['y'],_0x1a8403[_0x329439(0x51d)],_0x4f36b1[_0x329439(0x15b0)]);},Window_ActorCommand['prototype']['commandNam'+_0x4258d1(0x2fc)+_0x4258d1(0x1312)]=function(_0x265157,_0xa3a071){const _0x4fbcae=_0x4258d1,_0x413c07={'QKJZw':function(_0x4486e7,_0x169bca){return _0x4486e7+_0x169bca;},'OAcGf':function(_0x213773,_0x58c7e9){return _0x213773+_0x58c7e9;},'DCBbv':function(_0x2c7598,_0x21dec2){return _0x2c7598/_0x21dec2;},'QJOnM':function(_0x29ce84,_0x2a6dd2){return _0x29ce84+_0x2a6dd2;}},_0x32f111=this[_0x4fbcae(0x15f8)+_0x4fbcae(0xeeb)],_0x12ff57=$gameSystem[_0x4fbcae(0x15ac)+_0x4fbcae(0x623)](),_0x55bb10=_0x413c07[_0x4fbcae(0x2f3)](_0x413c07[_0x4fbcae(0xd8b)](_0xa3a071['x'],Math[_0x4fbcae(0x76f)](_0x413c07['DCBbv'](_0xa3a071[_0x4fbcae(0xc2a)],0x1baf+-0x470+-0x173d))),_0x12ff57);_0x32f111['x']=_0x413c07[_0x4fbcae(0xa85)](_0x413c07[_0x4fbcae(0x166c)](_0x32f111[_0x4fbcae(0xc2a)],-(0x2103+0x5*-0x32+-0x2007)),_0x55bb10),_0x32f111['y']=Math[_0x4fbcae(0x76f)](_0x413c07[_0x4fbcae(0x166c)](_0xa3a071[_0x4fbcae(0x1594)],0x2*-0x1143+0x1cdf+0x3*0x1e3));},Window_ActorCommand[_0x4258d1(0xf38)]['makeComman'+_0x4258d1(0xf5a)]=function(){const _0x13cfed=_0x4258d1;if(!this['_actor'])return;const _0x398379=this['_actor'][_0x13cfed(0xcf6)+_0x13cfed(0x316)]();for(const _0xc54bef of _0x398379){this[_0x13cfed(0x1406)+_0x13cfed(0x68a)](_0xc54bef[_0x13cfed(0x191)+'e']()['trim']());}},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x1406)+_0x4258d1(0x68a)]=function(_0x19e01d){const _0xd0cf66=_0x4258d1,_0x21cc3a={'WyESs':function(_0x1e9c2d,_0x4b3325){return _0x1e9c2d===_0x4b3325;},'PRRGd':'ATTACK','sgWcG':_0xd0cf66(0x68b),'jUdBj':_0xd0cf66(0x1292),'ZtsmQ':_0xd0cf66(0xbb1),'HrDFa':_0xd0cf66(0x1308),'BGWQo':_0xd0cf66(0xb5b),'ODktD':function(_0x2c02eb,_0xe43f85){return _0x2c02eb===_0xe43f85;},'xqjIK':_0xd0cf66(0xbed)+'E','uVLeE':function(_0x23e4a8,_0xfcec6c){return _0x23e4a8(_0xfcec6c);},'HDXdv':function(_0x266cff,_0x561b61){return _0x266cff===_0x561b61;},'JwrSL':_0xd0cf66(0x1349),'LVAMz':function(_0x598a01,_0x38e92d){return _0x598a01(_0x38e92d);},'DYmKs':function(_0x548260,_0x3d50d9){return _0x548260===_0x3d50d9;},'xxycx':_0xd0cf66(0x871),'rsTld':'COMBATLOG','NjNjE':_0xd0cf66(0xfb4),'RmCJc':'WEAPON\x20SWA'+'P','yjMZY':'GRID\x20MOVE'};_0x21cc3a[_0xd0cf66(0x9c9)](_0x19e01d,_0x21cc3a[_0xd0cf66(0xb79)])&&this[_0xd0cf66(0x1ed)+_0xd0cf66(0x461)]();[_0x21cc3a['sgWcG'],_0x21cc3a['jUdBj']][_0xd0cf66(0x163f)](_0x19e01d)&&this[_0xd0cf66(0x14e6)+_0xd0cf66(0x66b)]();_0x21cc3a[_0xd0cf66(0x9c9)](_0x19e01d,_0x21cc3a[_0xd0cf66(0x439)])&&this[_0xd0cf66(0x1651)+'mmand']();_0x21cc3a[_0xd0cf66(0x9c9)](_0x19e01d,_0x21cc3a[_0xd0cf66(0x12bb)])&&this[_0xd0cf66(0x7a1)+_0xd0cf66(0xa76)]();_0x21cc3a['WyESs'](_0x19e01d,_0x21cc3a['BGWQo'])&&this[_0xd0cf66(0x142d)+_0xd0cf66(0x461)]();_0x21cc3a[_0xd0cf66(0x7ca)](_0x19e01d,_0x21cc3a[_0xd0cf66(0x676)])&&this[_0xd0cf66(0x9c7)+'tleCommand']();if(_0x19e01d[_0xd0cf66(0x79c)](/STYPE: (\d+)/i)){const _0x55d6d3=_0x21cc3a['uVLeE'](Number,RegExp['$1']);this[_0xd0cf66(0x124e)+'peCommand'](_0x55d6d3);}else{if(_0x19e01d['match'](/STYPE: (.*)/i)){const _0x44e285=DataManager[_0xd0cf66(0x12fb)+_0xd0cf66(0x119d)](RegExp['$1']);this['addSkillTy'+'peCommand'](_0x44e285);}}_0x21cc3a[_0xd0cf66(0x1cd)](_0x19e01d,_0x21cc3a[_0xd0cf66(0xea9)])&&this[_0xd0cf66(0x11f1)+_0xd0cf66(0x2e5)+'ds']();if(_0x19e01d[_0xd0cf66(0x79c)](/SKILL: (\d+)/i)){const _0x376ce8=_0x21cc3a[_0xd0cf66(0x5a8)](Number,RegExp['$1']);this['addSingleS'+_0xd0cf66(0x2e5)+'d']($dataSkills[_0x376ce8]);}else{if(_0x19e01d[_0xd0cf66(0x79c)](/SKILL: (.*)/i)){const _0x2a3898=DataManager[_0xd0cf66(0x691)+_0xd0cf66(0x119d)](RegExp['$1']);this[_0xd0cf66(0x11f1)+'killComman'+'d']($dataSkills[_0x2a3898]);}}_0x21cc3a[_0xd0cf66(0xa41)](_0x19e01d,_0x21cc3a['xxycx'])&&Imported[_0xd0cf66(0x1237)+_0xd0cf66(0xda5)]&&this[_0xd0cf66(0x27a)+_0xd0cf66(0x1330)](),[_0x21cc3a[_0xd0cf66(0xbe1)],_0x21cc3a['NjNjE']][_0xd0cf66(0x163f)](_0x19e01d)&&Imported[_0xd0cf66(0xf66)+_0xd0cf66(0x3f7)]&&this[_0xd0cf66(0xe24)+'ogCommand'](),_0x21cc3a['HDXdv'](_0x19e01d,_0x21cc3a['RmCJc'])&&Imported['VisuMZ_2_W'+'eaponSwapS'+'ystem']&&this['addWeaponS'+'wapCommand'](!![]),_0x21cc3a[_0xd0cf66(0x1cd)](_0x19e01d,_0x21cc3a['yjMZY'])&&Imported['VisuMZ_2_B'+_0xd0cf66(0xcfd)+_0xd0cf66(0x45f)]&&this['addBattleG'+_0xd0cf66(0x169a)+_0xd0cf66(0xa76)]();},Window_ActorCommand['prototype']['addAttackC'+_0x4258d1(0x461)]=function(){const _0x5c2932=_0x4258d1,_0xdec3f0={'ZwDeN':function(_0x32bc1a,_0xdb62ec){return _0x32bc1a===_0xdb62ec;},'hXOEV':_0x5c2932(0x15a8),'leypY':_0x5c2932(0x31c),'EOCHK':'attack'},_0x452c25=$dataSkills[this[_0x5c2932(0xf9c)]['attackSkil'+_0x5c2932(0x7ab)]()];if(!_0x452c25)return;if(!this[_0x5c2932(0xfe3)+_0x5c2932(0x14ce)](_0x452c25))return;const _0x388270=this[_0x5c2932(0x7aa)+'le'](),_0x207018=DataManager['battleComm'+_0x5c2932(0x15b1)](_0x452c25),_0x15a45a=DataManager[_0x5c2932(0xcf6)+_0x5c2932(0x2d8)](_0x452c25),_0x4bda49=_0xdec3f0[_0x5c2932(0x7a8)](_0x388270,_0xdec3f0[_0x5c2932(0x159c)])?_0x207018:_0xdec3f0['leypY'][_0x5c2932(0xf22)](_0x15a45a,_0x207018);this['addCommand'](_0x4bda49,_0xdec3f0[_0x5c2932(0x901)],this[_0x5c2932(0xf9c)][_0x5c2932(0xcaf)]());},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x1651)+_0x4258d1(0x1330)]=function(){const _0x5d9ba8=_0x4258d1,_0x3c1dc1={'mbLru':function(_0x5e3493,_0x15a2c7){return _0x5e3493===_0x15a2c7;},'pckJm':_0x5d9ba8(0x15a8),'avOqe':_0x5d9ba8(0x31c),'KDrQR':_0x5d9ba8(0xd64)},_0x32b942=$dataSkills[this[_0x5d9ba8(0xf9c)][_0x5d9ba8(0x7c4)+'Id']()];if(!_0x32b942)return;if(!this['canAddSkil'+'lCommand'](_0x32b942))return;const _0xc6bc4c=this['commandSty'+'le'](),_0x4ee72c=DataManager[_0x5d9ba8(0xcf6)+_0x5d9ba8(0x15b1)](_0x32b942),_0x154a6d=DataManager[_0x5d9ba8(0xcf6)+'andIcon'](_0x32b942),_0x37c54a=_0x3c1dc1['mbLru'](_0xc6bc4c,_0x3c1dc1[_0x5d9ba8(0x4ec)])?_0x4ee72c:_0x3c1dc1['avOqe'][_0x5d9ba8(0xf22)](_0x154a6d,_0x4ee72c);this[_0x5d9ba8(0x801)](_0x37c54a,_0x3c1dc1[_0x5d9ba8(0x1630)],this[_0x5d9ba8(0xf9c)]['canGuard']());},Window_ActorCommand['prototype'][_0x4258d1(0x7a1)+'mand']=function(){const _0x430f27=_0x4258d1,_0x30e423={'gozOE':function(_0xdfcdda,_0x6227c7){return _0xdfcdda===_0x6227c7;},'fvViI':'text','PEVCF':'\x5cI[%1]%2','gBttQ':_0x430f27(0x780)},_0x228e80=this[_0x430f27(0x7aa)+'le'](),_0x476fb5=VisuMZ[_0x430f27(0x337)][_0x430f27(0x424)][_0x430f27(0xc18)][_0x430f27(0x43a)+'m'],_0x160130=_0x30e423[_0x430f27(0x1481)](_0x228e80,_0x30e423['fvViI'])?TextManager['item']:_0x30e423[_0x430f27(0x1649)][_0x430f27(0xf22)](_0x476fb5,TextManager[_0x430f27(0x780)]),_0x2667d2=this[_0x430f27(0x1306)+_0x430f27(0x1210)]();this[_0x430f27(0x801)](_0x160130,_0x30e423['gBttQ'],_0x2667d2);},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x1306)+_0x4258d1(0x1210)]=function(){const _0x82ad49=_0x4258d1;return this[_0x82ad49(0xf9c)]&&this[_0x82ad49(0xf9c)][_0x82ad49(0x1028)+_0x82ad49(0x68a)]();},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x14e6)+_0x4258d1(0x66b)]=function(){const _0x460169=_0x4258d1,_0x367b89=this[_0x460169(0xf9c)][_0x460169(0x1192)]();for(const _0x3a429e of _0x367b89){this[_0x460169(0x124e)+'peCommand'](_0x3a429e);}},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x124e)+_0x4258d1(0x16bd)]=function(_0xa70484){const _0x402878=_0x4258d1,_0x5e2c06={'pOgQo':function(_0x50d63e,_0x2fd0a5){return _0x50d63e===_0x2fd0a5;},'YyPdU':'text','wFNGj':_0x402878(0x31c),'knYzf':_0x402878(0x90d)};let _0x3b0033=$dataSystem['skillTypes'][_0xa70484];if(!_0x3b0033)return;let _0x3871a2=_0x3b0033;const _0x5f136d=this[_0x402878(0x7aa)+'le']();if(_0x5e2c06[_0x402878(0x3e9)](_0x5f136d,_0x5e2c06[_0x402878(0xf7c)]))_0x3871a2=_0x3871a2[_0x402878(0xf58)](/\x1I\[(\d+)\]/gi,''),_0x3871a2=_0x3871a2[_0x402878(0xf58)](/\\I\[(\d+)\]/gi,'');else{if(!_0x3b0033[_0x402878(0x79c)](/\\I\[(\d+)\]/i)){const _0x17742e=Imported[_0x402878(0x1410)+'killsState'+_0x402878(0x9c6)]?VisuMZ['SkillsStat'+_0x402878(0x12cf)][_0x402878(0x424)]['Skills']:VisuMZ['BattleCore'][_0x402878(0x424)][_0x402878(0xc18)],_0x34e306=$dataSystem[_0x402878(0x8c7)+'s'][_0x402878(0x163f)](_0xa70484),_0x397d66=_0x34e306?_0x17742e['IconStypeM'+_0x402878(0x427)]:_0x17742e[_0x402878(0x997)+'orm'];_0x3871a2=_0x5e2c06[_0x402878(0x13c9)][_0x402878(0xf22)](_0x397d66,_0x3b0033);}}this[_0x402878(0x801)](_0x3871a2,_0x5e2c06['knYzf'],!![],_0xa70484);},Window_ActorCommand['prototype'][_0x4258d1(0x11f1)+_0x4258d1(0x2e5)+'ds']=function(){const _0x27421f=_0x4258d1,_0x228bed=this['_actor']['skillTypes'](),_0x12bfe4=this[_0x27421f(0xf9c)]['skills']();for(const _0xaf65e3 of _0x12bfe4){if(!_0xaf65e3)continue;if(Imported[_0x27421f(0x1410)+_0x27421f(0x13a2)+_0x27421f(0x9c6)]){if(this[_0x27421f(0xa9e)+_0x27421f(0xefd)](_0xaf65e3))continue;if(this[_0x27421f(0xdd4)+_0x27421f(0x11de)](_0xaf65e3))continue;}else{if(!_0x228bed[_0x27421f(0x163f)](_0xaf65e3[_0x27421f(0x351)]))continue;}this[_0x27421f(0x11f1)+'killComman'+'d'](_0xaf65e3);}},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0xa9e)+_0x4258d1(0xefd)]=function(_0x5977d8){const _0x23b72c=_0x4258d1,_0x3f38bb={'gzfYH':function(_0x23fed1,_0x334bf4){return _0x23fed1<=_0x334bf4;}},_0x4ba71a=this[_0x23b72c(0xf9c)][_0x23b72c(0x1192)](),_0x11c154=_0x4ba71a[_0x23b72c(0x7de)](_0x3d90e9=>DataManager[_0x23b72c(0x71a)+_0x23b72c(0x95e)](_0x5977d8)[_0x23b72c(0x163f)](_0x3d90e9));return _0x3f38bb[_0x23b72c(0x891)](_0x11c154[_0x23b72c(0x1645)],-0x810*0x2+-0x111a+0x213a);},Window_ActorCommand[_0x4258d1(0xf38)]['isHiddenSk'+'ill']=function(_0x40e671){const _0x1cf574=_0x4258d1,_0x38e7e3={'aPJrK':function(_0x50be5a,_0x912769){return _0x50be5a>=_0x912769;}};if(Imported[_0x1cf574(0x1410)+_0x1cf574(0x13a2)+_0x1cf574(0x9c6)]){if(_0x38e7e3[_0x1cf574(0x1223)](VisuMZ['SkillsStat'+_0x1cf574(0x12cf)][_0x1cf574(0x389)],0x17*0x2e+-0xe5a+0xa39+0.24)){if(this[_0x1cf574(0xf9c)]){if(!VisuMZ[_0x1cf574(0xfaa)+'esCore'][_0x1cf574(0x6ee)+_0x1cf574(0x11c8)+'tetags'](this['_actor'],_0x40e671))return!![];if(!VisuMZ[_0x1cf574(0xfaa)+_0x1cf574(0x12cf)][_0x1cf574(0x6ee)+_0x1cf574(0x6be)+_0x1cf574(0x6aa)](this['_actor'],_0x40e671))return!![];if(!VisuMZ['SkillsStat'+'esCore'][_0x1cf574(0x6ee)+_0x1cf574(0x684)+'etags'](this[_0x1cf574(0xf9c)],_0x40e671))return!![];}}else{if(!Window_SkillList['prototype'][_0x1cf574(0xa54)+_0x1cf574(0x1298)+'otetags']['call'](this,_0x40e671))return!![];if(!Window_SkillList['prototype'][_0x1cf574(0xa54)+_0x1cf574(0x14ed)+'otetags'][_0x1cf574(0xb14)](this,_0x40e671))return!![];if(!Window_SkillList['prototype'][_0x1cf574(0xa54)+'ideSkillNo'+'tetags'][_0x1cf574(0xb14)](this,_0x40e671))return!![];}}return![];},Window_ActorCommand[_0x4258d1(0xf38)]['addSingleS'+'killComman'+'d']=function(_0x3a54fd){const _0x40e774=_0x4258d1,_0x1fc12f={'Jwhmd':function(_0x26cdfc,_0x16b6dd){return _0x26cdfc===_0x16b6dd;},'ABpHu':_0x40e774(0x15a8),'BfHsx':'\x5cI[%1]%2','qymwx':_0x40e774(0xc86)+'l'};if(!_0x3a54fd)return;if(!this[_0x40e774(0xfe3)+_0x40e774(0x14ce)](_0x3a54fd))return;const _0x38878a=this[_0x40e774(0x7aa)+'le'](),_0x1ab29f=DataManager[_0x40e774(0xcf6)+_0x40e774(0x15b1)](_0x3a54fd),_0x5c9653=DataManager[_0x40e774(0xcf6)+_0x40e774(0x2d8)](_0x3a54fd),_0x399cee=_0x1fc12f['Jwhmd'](_0x38878a,_0x1fc12f[_0x40e774(0x8a5)])?_0x1ab29f:_0x1fc12f['BfHsx'][_0x40e774(0xf22)](_0x5c9653,_0x1ab29f),_0x443ffc=this[_0x40e774(0xf9c)][_0x40e774(0xe23)](_0x3a54fd);this['addCommand'](_0x399cee,_0x1fc12f[_0x40e774(0x1476)],_0x443ffc,_0x3a54fd['id']);},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0xfe3)+'lCommand']=function(_0x153a3e){const _0x433609=_0x4258d1,_0x4df211={'xucYz':_0x433609(0xe0a)+_0x433609(0x146a)},_0x2cf973=_0x153a3e[_0x433609(0x278)];if(_0x2cf973[_0x433609(0x79c)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x433609(0xf9c)][_0x433609(0xa55)+_0x433609(0x44f)](_0x153a3e['id']))return![];}if(_0x2cf973[_0x433609(0x79c)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x433609(0xf9c)][_0x433609(0x12be)](_0x153a3e['id']))return![];}const _0x1a227a=VisuMZ[_0x433609(0x337)][_0x433609(0x66d)+'S'](_0x153a3e,_0x4df211[_0x433609(0xb73)]);if(VisuMZ[_0x433609(0x337)]['JS'][_0x1a227a]){if(!VisuMZ[_0x433609(0x337)]['JS'][_0x1a227a][_0x433609(0xb14)](this,this[_0x433609(0xf9c)],_0x153a3e))return![];}return VisuMZ[_0x433609(0x337)]['CheckSkill'+'CommandSho'+_0x433609(0x11bd)](_0x153a3e);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x904)+_0x4258d1(0x1007)+_0x4258d1(0x11bd)]=function(_0x266a07){const _0x3b0809=_0x4258d1,_0x373530={'XClLX':function(_0x115ea0,_0x1d6f87){return _0x115ea0+_0x1d6f87;},'AhHrh':function(_0xa45f45,_0x4d56d5){return _0xa45f45+_0x4d56d5;},'aAnRR':function(_0x24ab38,_0x2c5fac){return _0x24ab38+_0x2c5fac;},'kFQZT':function(_0x3678d7,_0x438614){return _0x3678d7+_0x438614;},'niiwe':function(_0x4efd83,_0x3c11e7){return _0x4efd83+_0x3c11e7;},'AehmZ':function(_0x7c41b,_0x3ffc39){return _0x7c41b+_0x3ffc39;},'jHsCF':function(_0x4ef134,_0x3b2e9b){return _0x4ef134+_0x3b2e9b;},'Bbfch':function(_0x4f4d40,_0x1d7983){return _0x4f4d40+_0x1d7983;}},_0x380bdd=_0x266a07[_0x3b0809(0x278)];if(_0x380bdd['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x729cdc=JSON[_0x3b0809(0x5ae)](_0x373530[_0x3b0809(0xafb)](_0x373530[_0x3b0809(0xbc2)]('[',RegExp['$1'][_0x3b0809(0x79c)](/\d+/g)),']'));for(const _0x283023 of _0x729cdc){if(!$gameSwitches[_0x3b0809(0xb53)](_0x283023))return![];}return!![];}if(_0x380bdd[_0x3b0809(0x79c)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x45db1d=JSON[_0x3b0809(0x5ae)](_0x373530[_0x3b0809(0xbc2)](_0x373530[_0x3b0809(0x1a1)]('[',RegExp['$1']['match'](/\d+/g)),']'));for(const _0xe9a0dd of _0x45db1d){if(!$gameSwitches[_0x3b0809(0xb53)](_0xe9a0dd))return![];}return!![];}if(_0x380bdd[_0x3b0809(0x79c)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3f966a=JSON['parse'](_0x373530['kFQZT'](_0x373530[_0x3b0809(0xa1d)]('[',RegExp['$1'][_0x3b0809(0x79c)](/\d+/g)),']'));for(const _0x204f13 of _0x3f966a){if($gameSwitches[_0x3b0809(0xb53)](_0x204f13))return!![];}return![];}if(_0x380bdd['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x373963=JSON[_0x3b0809(0x5ae)](_0x373530[_0x3b0809(0x3b9)](_0x373530[_0x3b0809(0xeb6)]('[',RegExp['$1'][_0x3b0809(0x79c)](/\d+/g)),']'));for(const _0x42c58f of _0x373963){if(!$gameSwitches[_0x3b0809(0xb53)](_0x42c58f))return!![];}return![];}if(_0x380bdd[_0x3b0809(0x79c)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x21a44b=JSON['parse'](_0x373530['jHsCF'](_0x373530[_0x3b0809(0xa1d)]('[',RegExp['$1'][_0x3b0809(0x79c)](/\d+/g)),']'));for(const _0x2e08a1 of _0x21a44b){if(!$gameSwitches[_0x3b0809(0xb53)](_0x2e08a1))return!![];}return![];}if(_0x380bdd['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x27c0e2=JSON[_0x3b0809(0x5ae)](_0x373530[_0x3b0809(0x1055)](_0x373530[_0x3b0809(0x4f9)]('[',RegExp['$1'][_0x3b0809(0x79c)](/\d+/g)),']'));for(const _0x52c6d8 of _0x27c0e2){if($gameSwitches[_0x3b0809(0xb53)](_0x52c6d8))return![];}return!![];}return!![];},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x142d)+_0x4258d1(0x461)]=function(){const _0x24ddec=_0x4258d1,_0x367112={'wRuHU':function(_0xf5230,_0x5e8829){return _0xf5230===_0x5e8829;},'qolPm':_0x24ddec(0x15a8),'zWfWx':_0x24ddec(0x31c),'DJXPe':_0x24ddec(0x117a)},_0x2748ca=this[_0x24ddec(0x7aa)+'le'](),_0x1a4e05=VisuMZ[_0x24ddec(0x337)][_0x24ddec(0x424)][_0x24ddec(0xde5)][_0x24ddec(0xb49)+_0x24ddec(0xca6)],_0x5c0a28=_0x367112['wRuHU'](_0x2748ca,_0x367112[_0x24ddec(0xd85)])?TextManager[_0x24ddec(0x117a)]:_0x367112[_0x24ddec(0xef6)][_0x24ddec(0xf22)](_0x1a4e05,TextManager[_0x24ddec(0x117a)]),_0xac19b0=this[_0x24ddec(0xcf9)+_0x24ddec(0x23d)+'ed']();this[_0x24ddec(0x801)](_0x5c0a28,_0x367112['DJXPe'],_0xac19b0);},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0xcf9)+_0x4258d1(0x23d)+'ed']=function(){return BattleManager['canEscape']();},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x9c7)+_0x4258d1(0x625)]=function(){const _0x154cdf=_0x4258d1,_0x54776e={'BwvHW':function(_0x222920,_0xd67f12){return _0x222920===_0xd67f12;},'GouLl':_0x154cdf(0x15a8),'Wvzkk':_0x154cdf(0x31c),'yiNwO':'autoBattle'},_0x347aa1=this[_0x154cdf(0x7aa)+'le'](),_0x477608=VisuMZ[_0x154cdf(0x337)][_0x154cdf(0x424)]['PartyCmd'][_0x154cdf(0x231)+_0x154cdf(0x3dc)],_0x2823b4=_0x54776e[_0x154cdf(0x67f)](_0x347aa1,_0x54776e['GouLl'])?TextManager[_0x154cdf(0x47d)]:_0x54776e[_0x154cdf(0x3b5)][_0x154cdf(0xf22)](_0x477608,TextManager[_0x154cdf(0x47d)]),_0x3bca2a=this[_0x154cdf(0xc51)+_0x154cdf(0xf19)+_0x154cdf(0x161c)]();this[_0x154cdf(0x801)](_0x2823b4,_0x54776e[_0x154cdf(0xe03)],_0x3bca2a);},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0xc51)+_0x4258d1(0xf19)+'nabled']=function(){return!![];},Window_ActorCommand['prototype'][_0x4258d1(0x472)+_0x4258d1(0xb6f)]=function(){const _0x58667f=_0x4258d1;return VisuMZ[_0x58667f(0x337)][_0x58667f(0x424)][_0x58667f(0xc18)][_0x58667f(0x1029)+'gn'];},Window_ActorCommand[_0x4258d1(0xf38)]['drawItem']=function(_0x359d1c){const _0x5540d1=_0x4258d1,_0x555e81={'Mfcvh':function(_0x20b8f2,_0x1fb9dc){return _0x20b8f2===_0x1fb9dc;},'NdlCN':_0x5540d1(0x305),'UZMez':_0x5540d1(0x40b)},_0x2718d2=this['commandSty'+_0x5540d1(0x48c)](_0x359d1c);if(_0x555e81[_0x5540d1(0x7df)](_0x2718d2,_0x555e81['NdlCN']))this['drawItemSt'+_0x5540d1(0x942)+'t'](_0x359d1c);else _0x555e81[_0x5540d1(0x7df)](_0x2718d2,_0x555e81['UZMez'])?this[_0x5540d1(0x1561)+_0x5540d1(0x76b)](_0x359d1c):Window_Command[_0x5540d1(0xf38)]['drawItem'][_0x5540d1(0xb14)](this,_0x359d1c);this['drawSingle'+_0x5540d1(0x1433)](_0x359d1c);},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x7aa)+'le']=function(){const _0xd5a469=_0x4258d1;return VisuMZ[_0xd5a469(0x337)][_0xd5a469(0x424)][_0xd5a469(0xc18)][_0xd5a469(0x150f)];},Window_ActorCommand[_0x4258d1(0xf38)]['commandSty'+_0x4258d1(0x48c)]=function(_0x3cffec){const _0x547f7b=_0x4258d1,_0x459326={'ixRZG':function(_0x5f204f,_0x52a815){return _0x5f204f<_0x52a815;},'URvdL':_0x547f7b(0x15a8),'yYDSv':function(_0x32a1f8,_0x29a06e){return _0x32a1f8!==_0x29a06e;},'LAkaP':_0x547f7b(0x1657),'DsUYM':function(_0x37c3eb,_0x155945){return _0x37c3eb>_0x155945;},'OUWqu':function(_0x59f7fc,_0x1390de){return _0x59f7fc<=_0x1390de;},'kENEN':'iconText','kWwhz':_0x547f7b(0x40b)};if(_0x459326[_0x547f7b(0xf92)](_0x3cffec,-0x1973+-0x1fc9+0x393c))return _0x459326[_0x547f7b(0x128b)];const _0x3459a4=this['commandSty'+'le']();if(_0x459326[_0x547f7b(0xcb5)](_0x3459a4,_0x459326[_0x547f7b(0xc3f)]))return _0x3459a4;else{if(_0x459326[_0x547f7b(0x7f7)](this[_0x547f7b(0x700)](),-0x24d8+-0x15a0+-0xe9e*-0x4)){const _0x4db43b=this[_0x547f7b(0x11c6)+'e'](_0x3cffec);if(_0x4db43b[_0x547f7b(0x79c)](/\\I\[(\d+)\]/i)){const _0x5e2698=this['itemLineRe'+'ct'](_0x3cffec),_0x3160f1=this['textSizeEx'](_0x4db43b)[_0x547f7b(0xc2a)];return _0x459326[_0x547f7b(0xa89)](_0x3160f1,_0x5e2698[_0x547f7b(0xc2a)])?_0x459326[_0x547f7b(0xcc1)]:_0x459326[_0x547f7b(0xb46)];}}}return _0x459326[_0x547f7b(0x128b)];},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x1561)+_0x4258d1(0x942)+'t']=function(_0x5ccaad){const _0x55c118=_0x4258d1,_0x135aa1={'bLzWr':function(_0x451899,_0x18b068){return _0x451899===_0x18b068;},'KnNGH':_0x55c118(0xe5e),'pdCox':function(_0x488427,_0xab5e0d){return _0x488427-_0xab5e0d;},'EiZUf':function(_0x2affa1,_0x744744){return _0x2affa1+_0x744744;},'wEXjW':_0x55c118(0x450),'xZSBF':function(_0x2de341,_0x18e934){return _0x2de341+_0x18e934;},'rWLIj':function(_0x236415,_0x21895e){return _0x236415/_0x21895e;},'nqDap':function(_0x39d930,_0x398f0e){return _0x39d930-_0x398f0e;}},_0xf66ee=this['itemLineRe'+'ct'](_0x5ccaad),_0x1ed52d=this['commandNam'+'e'](_0x5ccaad),_0x2a9ea5=this[_0x55c118(0xe7c)](_0x1ed52d)[_0x55c118(0xc2a)];this[_0x55c118(0x5df)+'tOpacity'](this[_0x55c118(0x134c)+_0x55c118(0x161c)](_0x5ccaad));const _0x532ad5=this[_0x55c118(0x472)+'ign']();if(_0x135aa1[_0x55c118(0xb5d)](_0x532ad5,_0x135aa1['KnNGH']))this[_0x55c118(0xd7a)](_0x1ed52d,_0x135aa1[_0x55c118(0x1423)](_0x135aa1[_0x55c118(0x9d6)](_0xf66ee['x'],_0xf66ee[_0x55c118(0xc2a)]),_0x2a9ea5),_0xf66ee['y'],_0x2a9ea5);else{if(_0x135aa1[_0x55c118(0xb5d)](_0x532ad5,_0x135aa1[_0x55c118(0x14c9)])){const _0x35a2db=_0x135aa1[_0x55c118(0x919)](_0xf66ee['x'],Math['floor'](_0x135aa1[_0x55c118(0x7f0)](_0x135aa1[_0x55c118(0x1198)](_0xf66ee[_0x55c118(0xc2a)],_0x2a9ea5),0x245f*0x1+-0x1a28+-0xa35)));this[_0x55c118(0xd7a)](_0x1ed52d,_0x35a2db,_0xf66ee['y'],_0x2a9ea5);}else this[_0x55c118(0xd7a)](_0x1ed52d,_0xf66ee['x'],_0xf66ee['y'],_0x2a9ea5);}},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x1561)+_0x4258d1(0x76b)]=function(_0x5674a8){const _0x3d12b4=_0x4258d1,_0x34023a={'hJton':function(_0x8303b2,_0x3b3ccd){return _0x8303b2(_0x3b3ccd);},'EEdJp':function(_0x395313,_0x25890e){return _0x395313+_0x25890e;},'DWsgh':function(_0x17d68d,_0x180519){return _0x17d68d/_0x180519;},'HYqPE':function(_0x38b87d,_0x3bac80){return _0x38b87d-_0x3bac80;},'PzwBq':function(_0xc0d4a9,_0xd612c9){return _0xc0d4a9+_0xd612c9;},'ogcCH':function(_0x1b8568,_0x49f7e7){return _0x1b8568-_0x49f7e7;}};this[_0x3d12b4(0x11c6)+'e'](_0x5674a8)[_0x3d12b4(0x79c)](/\\I\[(\d+)\]/i);const _0x145644=_0x34023a[_0x3d12b4(0x484)](Number,RegExp['$1'])||-0x1aa4+-0xecf+0x1b*0x189,_0x428676=this['itemLineRe'+'ct'](_0x5674a8),_0x31f1e5=_0x34023a[_0x3d12b4(0x1565)](_0x428676['x'],Math['floor'](_0x34023a['DWsgh'](_0x34023a['HYqPE'](_0x428676['width'],ImageManager[_0x3d12b4(0x465)]),0x3*-0x72d+0x1601+-0x5*0x18))),_0x1816d4=_0x34023a['PzwBq'](_0x428676['y'],_0x34023a[_0x3d12b4(0x385)](_0x34023a['ogcCH'](_0x428676[_0x3d12b4(0x1594)],ImageManager[_0x3d12b4(0x7f3)]),-0x8*0x4a+0x971*-0x1+0xbc3));this[_0x3d12b4(0x115c)](_0x145644,_0x31f1e5,_0x1816d4);},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x43d)+_0x4258d1(0x1433)]=function(_0x3ba18b){const _0x22fd2c=_0x4258d1,_0x64015d={'MLAKY':_0x22fd2c(0x3a8),'ieGDZ':'guard','XnAzo':_0x22fd2c(0xc86)+'l','SzYUk':function(_0x4907a6,_0x21d2cf){return _0x4907a6===_0x21d2cf;}};if(!(VisuMZ[_0x22fd2c(0x337)][_0x22fd2c(0x424)][_0x22fd2c(0xc18)]['ShowCosts']??!![]))return;const _0x5a48e7=this[_0x22fd2c(0x160e)+'bol'](_0x3ba18b);if(![_0x64015d[_0x22fd2c(0x960)],_0x64015d[_0x22fd2c(0xd0a)],_0x64015d[_0x22fd2c(0x276)]][_0x22fd2c(0x163f)](_0x5a48e7))return;const _0x4904ce=this['itemLineRe'+'ct'](_0x3ba18b);let _0x592e71=null;if(_0x64015d['SzYUk'](_0x5a48e7,_0x64015d[_0x22fd2c(0x960)]))_0x592e71=$dataSkills[this[_0x22fd2c(0xf9c)][_0x22fd2c(0x1131)+_0x22fd2c(0x7ab)]()];else _0x64015d['SzYUk'](_0x5a48e7,_0x64015d[_0x22fd2c(0xd0a)])?_0x592e71=$dataSkills[this['_actor'][_0x22fd2c(0x7c4)+'Id']()]:_0x592e71=$dataSkills[this['_list'][_0x3ba18b]['ext']];this['drawSkillC'+_0x22fd2c(0x135f)](this['_actor'],_0x592e71,_0x4904ce['x'],_0x4904ce['y'],_0x4904ce['width']);},Window_ActorCommand['prototype'][_0x4258d1(0x5fa)+'ost']=function(_0xaf549,_0x8faab4,_0x29e0c6,_0x436834,_0x50914b){const _0x1136a1=_0x4258d1;if(!_0x8faab4)return;Imported[_0x1136a1(0x1410)+_0x1136a1(0x13a2)+'sCore']?Window_Command[_0x1136a1(0xf38)][_0x1136a1(0x5fa)+'ost'][_0x1136a1(0xb14)](this,_0xaf549,_0x8faab4,_0x29e0c6,_0x436834,_0x50914b):Window_SkillList[_0x1136a1(0xf38)][_0x1136a1(0x5fa)+_0x1136a1(0x135f)][_0x1136a1(0xb14)](this,_0x8faab4,_0x29e0c6,_0x436834,_0x50914b);},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x514)]=function(){},Window_ActorCommand['prototype'][_0x4258d1(0x1be)]=function(){const _0x7d61a0=_0x4258d1,_0x4b74a2={'yCrHd':function(_0x312327,_0x41f0da){return _0x312327===_0x41f0da;},'XdbKV':_0x7d61a0(0x83c)};Window_Command[_0x7d61a0(0xf38)]['activate'][_0x7d61a0(0xb14)](this);const _0x37fbc3=this['battleLayo'+_0x7d61a0(0x1100)]();_0x4b74a2[_0x7d61a0(0x1341)](_0x37fbc3,_0x4b74a2[_0x7d61a0(0xd14)])&&this[_0x7d61a0(0xdc3)+_0x7d61a0(0xb19)]();},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x6d1)+_0x4258d1(0x1100)]=function(){const _0x13e5a1=_0x4258d1;if(this[_0x13e5a1(0xdcc)+_0x13e5a1(0x55c)])return this['_battleLay'+'outStyle'];return this[_0x13e5a1(0xdcc)+_0x13e5a1(0x55c)]=SceneManager[_0x13e5a1(0x14b3)][_0x13e5a1(0x6d1)+'utStyle'](),this['_battleLay'+'outStyle'];},VisuMZ['BattleCore']['Window_Act'+'orCommand_'+_0x4258d1(0xb3e)]=Window_ActorCommand['prototype']['setup'],Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0xb3e)]=function(_0x3d3762){const _0x2e8f64=_0x4258d1,_0x4a9a76={'sYTzU':_0x2e8f64(0x14b6),'xOYuT':'border','tepVh':function(_0x1cf011,_0x35c8ef){return _0x1cf011>_0x35c8ef;}},_0x50a873=this[_0x2e8f64(0x6d1)+_0x2e8f64(0x1100)]();if(_0x3d3762&&['xp',_0x4a9a76['sYTzU']][_0x2e8f64(0x163f)](_0x50a873))this[_0x2e8f64(0x1d9)+'owXPStyle'](_0x3d3762);else _0x3d3762&&[_0x4a9a76[_0x2e8f64(0xa6e)]]['includes'](_0x50a873)&&(this[_0x2e8f64(0x1d9)+_0x2e8f64(0x418)+'yle'](_0x3d3762),this[_0x2e8f64(0xdc3)+_0x2e8f64(0xb19)]());VisuMZ[_0x2e8f64(0x337)]['Window_Act'+_0x2e8f64(0x156d)+'setup']['call'](this,_0x3d3762),_0x3d3762&&_0x4a9a76[_0x2e8f64(0x142a)]($gameTroop[_0x2e8f64(0xe7e)+'rs']()[_0x2e8f64(0x1645)],0x127+0x486+-0x1*0x5ad)&&_0x3d3762['battler']()&&_0x3d3762[_0x2e8f64(0xc06)]()[_0x2e8f64(0x1061)+'d']();},Window_ActorCommand[_0x4258d1(0xf38)]['resizeWind'+_0x4258d1(0xc72)]=function(_0x15ad43){const _0x35c1b1=_0x4258d1,_0x44e839={'TlGib':function(_0x2a43de,_0x353f48){return _0x2a43de/_0x353f48;},'IGysi':function(_0x107e27,_0x20c8cd){return _0x107e27/_0x20c8cd;},'haFaW':function(_0x493751,_0x2716ce){return _0x493751-_0x2716ce;},'eaBQD':function(_0x2c8f56,_0x1c7a95){return _0x2c8f56-_0x1c7a95;},'gAbBx':function(_0x17f958,_0x69cbd7){return _0x17f958+_0x69cbd7;},'KwkUD':function(_0x1d43f7,_0x40a5d6){return _0x1d43f7*_0x40a5d6;},'LhDLc':function(_0x462847,_0x36c9e8){return _0x462847/_0x36c9e8;},'nkDIZ':function(_0x16d3f6,_0x3689d2){return _0x16d3f6-_0x3689d2;},'IReqq':function(_0x1136f9,_0x342f33){return _0x1136f9-_0x342f33;}},_0x26c092=VisuMZ[_0x35c1b1(0x337)]['Settings']['BattleLayo'+'ut']['CommandWid'+'th'],_0x280b48=Math[_0x35c1b1(0xdea)](_0x44e839[_0x35c1b1(0x511)](Graphics['boxWidth'],-0x1930+0x62c+0x1307)),_0x266a41=Math[_0x35c1b1(0xdea)](_0x44e839[_0x35c1b1(0x511)](Graphics[_0x35c1b1(0x1309)],$gameParty[_0x35c1b1(0x8ab)+_0x35c1b1(0x1514)]()[_0x35c1b1(0x1645)])),_0x5158cc=Math['max'](Math[_0x35c1b1(0xd3a)](_0x280b48,_0x266a41),_0x26c092),_0x58b46c=this[_0x35c1b1(0x161e)+_0x35c1b1(0x51b)](VisuMZ['BattleCore'][_0x35c1b1(0x424)][_0x35c1b1(0xdeb)+'ut'][_0x35c1b1(0x1070)+'mandLines']),_0x4767a8=Math['floor'](_0x44e839[_0x35c1b1(0x1f3)](_0x44e839['haFaW'](Graphics[_0x35c1b1(0x1309)],Graphics[_0x35c1b1(0xc2a)]),0x2*-0x14+0xe*-0x1b1+0x368*0x7)),_0x46a97b=_0x44e839[_0x35c1b1(0x15c2)](Graphics[_0x35c1b1(0x1309)],_0x4767a8),_0x8bb126=_0x44e839[_0x35c1b1(0x509)](Math[_0x35c1b1(0xdea)](_0x44e839['KwkUD'](_0x266a41,_0x15ad43[_0x35c1b1(0x2e3)]())),Math['round'](_0x44e839[_0x35c1b1(0x5c4)](_0x44e839['nkDIZ'](_0x266a41,_0x5158cc),0x54c*-0x7+-0x1*0x1145+-0xfd*-0x37)))[_0x35c1b1(0x3d5)](_0x4767a8,_0x44e839[_0x35c1b1(0xbf7)](_0x46a97b,_0x5158cc)),_0x25b9fc=Math[_0x35c1b1(0xdea)](_0x44e839[_0x35c1b1(0xa00)](SceneManager[_0x35c1b1(0x14b3)]['_statusWin'+_0x35c1b1(0xfdb)]['y'],_0x58b46c));this[_0x35c1b1(0x1235)](_0x8bb126,_0x25b9fc,_0x5158cc,_0x58b46c),this[_0x35c1b1(0x6ce)+_0x35c1b1(0xe18)](),this[_0x35c1b1(0x8b4)+_0x35c1b1(0x107f)](-0x598*-0x6+-0x42d+-0x1d62*0x1);},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x1d9)+_0x4258d1(0x418)+_0x4258d1(0xbf0)]=function(_0x2b4b43){const _0x3b7058=_0x4258d1,_0x116ce2=SceneManager[_0x3b7058(0x14b3)][_0x3b7058(0xd50)+'ndWindowRe'+'ctBorderSt'+'yle']();this[_0x3b7058(0x1235)](_0x116ce2['x'],_0x116ce2['y'],_0x116ce2[_0x3b7058(0xc2a)],_0x116ce2[_0x3b7058(0x1594)]),this[_0x3b7058(0x6ce)+_0x3b7058(0xe18)](),this[_0x3b7058(0x8b4)+_0x3b7058(0x107f)](-0x246d+0x25ad+-0x5*0x40);},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x14fc)+_0x4258d1(0x15ea)]=function(){const _0x98e459=_0x4258d1,_0x556736={'RdkCQ':function(_0x19e3d3,_0x546953){return _0x19e3d3-_0x546953;},'xxkaQ':function(_0x20b78a,_0x118937){return _0x20b78a-_0x118937;},'XnNYv':function(_0x35778a,_0x5a3750){return _0x35778a*_0x5a3750;}};if(this[_0x98e459(0x10f7)+'ite']){const _0x296526=this[_0x98e459(0x10f7)+'ite'][_0x98e459(0x5dd)],_0x1f36ea=_0x556736['RdkCQ'](this[_0x98e459(0xc2a)],-0x1a16+-0x1*0xb23+0x2541),_0x4db501=this[_0x98e459(0x1594)],_0x3061c1=this[_0x98e459(0x7d1)],_0x5dcebc=ColorManager[_0x98e459(0x1667)](),_0x242e52=ColorManager['dimColor2']();this['_dimmerSpr'+'ite']['x']=-0xc92+0x1f96+-0x1300,_0x296526[_0x98e459(0x1566)](_0x1f36ea,_0x4db501),_0x296526['gradientFi'+_0x98e459(0x781)](0x58c+-0x1d31+-0x17a5*-0x1,-0x1*-0xbf7+-0x36*0x82+0x3*0x527,_0x1f36ea,_0x3061c1,_0x242e52,_0x5dcebc,!![]),_0x296526['fillRect'](0x131*-0x1e+0xa4*-0x2c+-0x14e*-0x31,_0x3061c1,_0x1f36ea,_0x556736['xxkaQ'](_0x4db501,_0x556736[_0x98e459(0x3e2)](_0x3061c1,-0xcae+-0xfcf+0x5*0x5b3)),_0x5dcebc),_0x296526[_0x98e459(0x10b1)+_0x98e459(0x781)](-0x144e+-0x10*-0x4a+-0x2*-0x7d7,_0x556736[_0x98e459(0x12d8)](_0x4db501,_0x3061c1),_0x1f36ea,_0x3061c1,_0x5dcebc,_0x242e52,!![]),this['_dimmerSpr'+_0x98e459(0xdba)][_0x98e459(0xfc6)](0x2033+0x95f+-0x2992,-0x23d3+-0x2*-0xeaa+-0x1*-0x67f,_0x1f36ea,_0x4db501);}},Window_ActorCommand[_0x4258d1(0xf38)]['updateHelp']=function(){const _0x3066e6=_0x4258d1,_0x42aed8={'llTRp':_0x3066e6(0x3a8),'DBXhh':_0x3066e6(0xd64),'DczOD':_0x3066e6(0x90d),'dKufr':_0x3066e6(0xc86)+'l','ltmpA':_0x3066e6(0x780),'BoImp':_0x3066e6(0x117a),'LRYPH':_0x3066e6(0x47d)};if(!this[_0x3066e6(0xf9c)])return;const _0x1cfbaa=VisuMZ[_0x3066e6(0x337)][_0x3066e6(0x424)][_0x3066e6(0xc18)],_0x38a64b=this[_0x3066e6(0x3fa)+'bol']();switch(_0x38a64b){case _0x42aed8[_0x3066e6(0x1222)]:this[_0x3066e6(0x3c3)+_0x3066e6(0x10af)]($dataSkills[this[_0x3066e6(0xf9c)][_0x3066e6(0x1131)+_0x3066e6(0x7ab)]()]);break;case _0x42aed8[_0x3066e6(0x146f)]:this[_0x3066e6(0x3c3)+_0x3066e6(0x10af)]($dataSkills[this[_0x3066e6(0xf9c)]['guardSkill'+'Id']()]);break;case _0x42aed8[_0x3066e6(0x1404)]:const _0x304736=_0x1cfbaa[_0x3066e6(0x941)+_0x3066e6(0x715)],_0x52e5cf=_0x304736[_0x3066e6(0xf22)]($dataSystem['skillTypes'][this['currentExt']()]);this['_helpWindo'+'w'][_0x3066e6(0x6c1)](_0x52e5cf);break;case _0x42aed8[_0x3066e6(0xce7)]:this['setHelpWin'+_0x3066e6(0x10af)]($dataSkills[this['currentExt']()]);break;case _0x42aed8[_0x3066e6(0xf8e)]:this[_0x3066e6(0x560)+'w'][_0x3066e6(0x6c1)](_0x1cfbaa['HelpItem']);break;case _0x42aed8['BoImp']:this[_0x3066e6(0x560)+'w'][_0x3066e6(0x6c1)](_0x1cfbaa[_0x3066e6(0x1551)]);break;case _0x42aed8[_0x3066e6(0xbaf)]:this[_0x3066e6(0x560)+'w'][_0x3066e6(0x6c1)](_0x1cfbaa[_0x3066e6(0x143d)+_0x3066e6(0x1462)]);break;default:this[_0x3066e6(0x560)+'w']['setText']('');break;}},Window_ActorCommand[_0x4258d1(0xf38)]['selectLast']=function(){const _0x178f4a=_0x4258d1,_0x45ab00={'dvUum':function(_0x20eb74,_0x93a2a7){return _0x20eb74===_0x93a2a7;},'EwEkh':_0x178f4a(0x90d),'kfoaT':function(_0x51523b,_0x440571){return _0x51523b||_0x440571;},'ENeuf':function(_0x58e212,_0x5acf3e){return _0x58e212===_0x5acf3e;},'wCaOT':'singleSkil'+'l','VTuQv':function(_0x2ae424,_0x14a79d){return _0x2ae424||_0x14a79d;}};this[_0x178f4a(0x15fd)+'t'](0x108c+0x30*0x1+-0x10bc);if(this[_0x178f4a(0xf9c)]&&ConfigManager[_0x178f4a(0x40a)+'ember']){const _0x5abe0d=this[_0x178f4a(0xf9c)][_0x178f4a(0xc74)+'dSymbol']();this[_0x178f4a(0xcdb)+'ol'](_0x5abe0d);if(_0x45ab00[_0x178f4a(0xd6a)](_0x5abe0d,_0x45ab00[_0x178f4a(0x10ef)])){const _0xd2503b=this[_0x178f4a(0xf9c)][_0x178f4a(0x14fe)+'Skill']();if(_0xd2503b){const _0x14b124=this[_0x178f4a(0x8ae)+_0x178f4a(0x9ff)](_0x45ab00[_0x178f4a(0x10ef)],_0xd2503b[_0x178f4a(0x351)]);this[_0x178f4a(0x14b0)](_0x45ab00[_0x178f4a(0xd67)](_0x14b124,0x8*0x417+0x174d*-0x1+0x96b*-0x1));}}else{if(_0x45ab00['ENeuf'](_0x5abe0d,_0x45ab00[_0x178f4a(0x1108)])){const _0x4e9447=this['_actor']['lastBattle'+'Skill']();if(_0x4e9447){const _0x5da067=this['findSymbol'+_0x178f4a(0x9ff)](_0x45ab00['wCaOT'],_0x4e9447['id']);this[_0x178f4a(0x14b0)](_0x45ab00['VTuQv'](_0x5da067,0x24f0+-0x433+0x1*-0x20bd));}}}}},Window_ActorCommand[_0x4258d1(0xf38)][_0x4258d1(0x8ae)+_0x4258d1(0x9ff)]=function(_0x26aaf6,_0x50782f){const _0xd4c399=_0x4258d1;return this[_0xd4c399(0xd88)][_0xd4c399(0x1b2)](_0x258f48=>_0x258f48[_0xd4c399(0xee5)]===_0x26aaf6&&_0x258f48[_0xd4c399(0x2ea)]===_0x50782f);},VisuMZ[_0x4258d1(0x337)]['Window_Bat'+'tleStatus_'+'initialize']=Window_BattleStatus['prototype'][_0x4258d1(0xca3)],Window_BattleStatus[_0x4258d1(0xf38)]['initialize']=function(_0x2b61d8){const _0x15f5e1=_0x4258d1;VisuMZ['BattleCore']['Window_Bat'+_0x15f5e1(0xfe5)+_0x15f5e1(0xca3)][_0x15f5e1(0xb14)](this,_0x2b61d8),this[_0x15f5e1(0x1495)+'Core'](),this['createAtta'+_0x15f5e1(0x798)+_0x15f5e1(0x11d5)]();},Window_BattleStatus['prototype']['battleLayo'+'utStyle']=function(){const _0xede0c0=_0x4258d1;if(this[_0xede0c0(0xdcc)+_0xede0c0(0x55c)])return this[_0xede0c0(0xdcc)+_0xede0c0(0x55c)];return this[_0xede0c0(0xdcc)+'outStyle']=SceneManager[_0xede0c0(0x14b3)][_0xede0c0(0x6d1)+_0xede0c0(0x1100)](),this[_0xede0c0(0xdcc)+'outStyle'];},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x1495)+_0x4258d1(0x5b8)]=function(){const _0x2ffb7b=_0x4258d1;this[_0x2ffb7b(0x72e)+'le']=this['isFrameVis'+_0x2ffb7b(0x146a)]();const _0x2939a5=VisuMZ[_0x2ffb7b(0x337)][_0x2ffb7b(0x424)][_0x2ffb7b(0xdeb)+'ut'];_0x2939a5[_0x2ffb7b(0xb9d)+_0x2ffb7b(0x14f4)]&&(this[_0x2ffb7b(0x4c8)]=-0x1*0x10d5+-0x1*-0xc+0x10c9);},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0xbfb)+'ible']=function(){const _0x1d1620=_0x4258d1,_0x4ac698={'gDCWi':_0x1d1620(0x7fe),'MFiyP':_0x1d1620(0x83c),'EGqRt':_0x1d1620(0x1601),'LGSAL':_0x1d1620(0x14b6)},_0x25a7b1=VisuMZ[_0x1d1620(0x337)][_0x1d1620(0x424)]['BattleLayo'+'ut'];if(_0x25a7b1[_0x1d1620(0xb9d)+_0x1d1620(0xdd8)+'name'])return!![];const _0x4d5dde=this[_0x1d1620(0x6d1)+_0x1d1620(0x1100)]();switch(_0x4d5dde){case _0x4ac698[_0x1d1620(0x6d3)]:case _0x4ac698[_0x1d1620(0xf8b)]:return!![];break;case _0x4ac698[_0x1d1620(0x11c5)]:case'xp':case _0x4ac698[_0x1d1620(0x101a)]:default:return![];break;}},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0xb48)+'t']=function(){const _0x144696=_0x4258d1;return this[_0x144696(0xbfb)+'ible']()?0x1231+0x1*0x2566+0x1*-0x3797:-0x1591+-0x1c60+0x31fb;},Window_BattleStatus[_0x4258d1(0xf38)]['maxCols']=function(){const _0x256bbf=_0x4258d1,_0x5888ad={'qckRK':_0x256bbf(0x7fe),'MvjgY':_0x256bbf(0x14b6),'EvLiw':_0x256bbf(0x1601)},_0x13f076=this[_0x256bbf(0x6d1)+_0x256bbf(0x1100)]();switch(_0x13f076){case _0x5888ad[_0x256bbf(0xe6b)]:return-0x5*-0x759+0x1d55+0x515*-0xd;break;case'xp':case _0x5888ad[_0x256bbf(0x162b)]:return $gameParty['battleMemb'+'ers']()['length'];break;case _0x5888ad[_0x256bbf(0x124f)]:default:return $gameParty[_0x256bbf(0xb34)+_0x256bbf(0xf63)]();break;}},Window_BattleStatus[_0x4258d1(0xf38)]['itemHeight']=function(){const _0x3a82ab=_0x4258d1,_0x2b0fb1={'CSFdJ':_0x3a82ab(0x7fe),'NsrpB':_0x3a82ab(0x1601),'uhEfO':_0x3a82ab(0x14b6)},_0x4a3dd5=this[_0x3a82ab(0x6d1)+_0x3a82ab(0x1100)]();switch(_0x4a3dd5){case _0x2b0fb1[_0x3a82ab(0xa12)]:return Window_StatusBase[_0x3a82ab(0xf38)][_0x3a82ab(0x70c)][_0x3a82ab(0xb14)](this);break;case _0x2b0fb1[_0x3a82ab(0xa98)]:case'xp':case _0x2b0fb1[_0x3a82ab(0xbe0)]:default:return this[_0x3a82ab(0x95c)+'t'];break;}},Window_BattleStatus['prototype'][_0x4258d1(0x5da)]=function(){const _0x34fe78=_0x4258d1,_0x1ca333={'dalYy':_0x34fe78(0x7fe),'OlHuI':_0x34fe78(0x1601),'zhdzn':_0x34fe78(0x14b6)},_0x2c15d8=this[_0x34fe78(0x6d1)+_0x34fe78(0x1100)]();switch(_0x2c15d8){case _0x1ca333[_0x34fe78(0x63d)]:return Window_StatusBase[_0x34fe78(0xf38)][_0x34fe78(0x5da)]['call'](this);break;case _0x1ca333[_0x34fe78(0x5ce)]:case'xp':case _0x1ca333['zhdzn']:default:return 0x29b*-0x1+-0x730+-0x9cb*-0x1;break;}},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x8ba)+_0x4258d1(0x623)]=function(){const _0x46f905=_0x4258d1;this[_0x46f905(0xbfb)+_0x46f905(0x146a)]()?Window_StatusBase[_0x46f905(0xf38)][_0x46f905(0x8ba)+'ing'][_0x46f905(0xb14)](this):this[_0x46f905(0x7d1)]=-0x4*0x97b+-0xfb*0x26+-0x1912*-0x3;},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0xfdd)+_0x4258d1(0x18d)]=function(){const _0x1b965f=_0x4258d1,_0x2b9708=VisuMZ[_0x1b965f(0x337)][_0x1b965f(0x424)][_0x1b965f(0xdeb)+'ut'];_0x2b9708[_0x1b965f(0xb9d)+'owSkinFile'+_0x1b965f(0xd40)]?this['windowskin']=ImageManager[_0x1b965f(0xc99)](_0x2b9708[_0x1b965f(0xb9d)+_0x1b965f(0xdd8)+_0x1b965f(0xd40)]):Window_StatusBase[_0x1b965f(0xf38)][_0x1b965f(0xfdd)+_0x1b965f(0x18d)][_0x1b965f(0xb14)](this);},Window_BattleStatus[_0x4258d1(0xf38)]['drawItemBa'+_0x4258d1(0xa99)]=function(_0x594518){const _0x2b8fff=_0x4258d1,_0x577145=VisuMZ['BattleCore']['Settings'][_0x2b8fff(0xdeb)+'ut'];if(_0x577145[_0x2b8fff(0xb9d)+'owSelectab'+_0x2b8fff(0x1156)])return;Window_StatusBase[_0x2b8fff(0xf38)][_0x2b8fff(0xd01)+'ckground']['call'](this,_0x594518);},Window_BattleStatus[_0x4258d1(0xf38)]['requestRef'+_0x4258d1(0x16bc)]=function(){const _0x1b8a98=_0x4258d1;this[_0x1b8a98(0xb5c)+_0x1b8a98(0x419)]=!![];},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x164c)]=function(){const _0x409605=_0x4258d1,_0x551818={'IOrrV':function(_0x4f2830,_0xc59b7e){return _0x4f2830===_0xc59b7e;},'HnzSf':'border'};Window_StatusBase[_0x409605(0xf38)][_0x409605(0x164c)]['call'](this),this[_0x409605(0xe0d)+'esh'](),this[_0x409605(0xa93)+_0x409605(0x1699)+'rs']();if(_0x551818[_0x409605(0x244)](this[_0x409605(0x6d1)+'utStyle'](),_0x551818[_0x409605(0x9c8)]))this[_0x409605(0x147b)+_0x409605(0x1505)]();},Window_BattleStatus[_0x4258d1(0xf38)]['updateRefr'+'esh']=function(){const _0x203086=_0x4258d1;if($gameTemp[_0x203086(0x294)+'freshReque'+'sted']())this[_0x203086(0x63f)+_0x203086(0x2fb)](),this['_requestRe'+_0x203086(0x419)]=![],$gameTemp[_0x203086(0xe5d)+_0x203086(0xf30)+_0x203086(0xf71)]();else this['_requestRe'+_0x203086(0x419)]&&(this['_requestRe'+'fresh']=![],this[_0x203086(0x164d)](),this['updateAtta'+_0x203086(0x798)+_0x203086(0x11d5)]());},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x361)]=function(){const _0x4b7324=_0x4258d1;Window_StatusBase[_0x4b7324(0xf38)][_0x4b7324(0x361)][_0x4b7324(0xb14)](this);if(!$gameSystem[_0x4b7324(0x8df)]())this['refresh']();},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x514)]=function(){const _0x16a211=_0x4258d1,_0x4a5fc1={'EjCBA':function(_0x418342,_0xd45bf6){return _0x418342===_0xd45bf6;}};if(_0x4a5fc1[_0x16a211(0x4eb)](this[_0x16a211(0xcab)+'r'],Window_BattleStatus))return;Window_StatusBase[_0x16a211(0xf38)][_0x16a211(0x514)][_0x16a211(0xb14)](this);},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0xa94)+_0x4258d1(0x119c)]=function(_0x22a337){const _0x3f0999=_0x4258d1,_0xae9ccd={'pCYMg':_0x3f0999(0x14b6),'amvjz':_0x3f0999(0x1601),'mRImA':_0x3f0999(0x7fe),'JlXXw':'border'},_0x16b088=this[_0x3f0999(0x6d1)+_0x3f0999(0x1100)]();switch(_0x16b088){case'xp':case _0xae9ccd[_0x3f0999(0x189)]:break;case _0xae9ccd['amvjz']:case _0xae9ccd['mRImA']:case _0xae9ccd[_0x3f0999(0xb67)]:default:return Window_StatusBase[_0x3f0999(0xf38)]['drawBackgr'+_0x3f0999(0x119c)][_0x3f0999(0xb14)](this,_0x22a337);break;}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+_0x4258d1(0xfe5)+_0x4258d1(0xa88)+_0x4258d1(0xdda)]=Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0xa88)+_0x4258d1(0xdda)],Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0xa88)+_0x4258d1(0xdda)]=function(_0x31c5a0){const _0x24f803=_0x4258d1,_0x374d7b={'RHZym':_0x24f803(0x7fe),'QCFou':_0x24f803(0x14b6),'xfDMd':_0x24f803(0x1601),'deNBZ':'border'},_0x219c8c=this[_0x24f803(0x6d1)+_0x24f803(0x1100)]();switch(_0x219c8c){case _0x374d7b[_0x24f803(0x164b)]:this['drawItemIm'+_0x24f803(0x595)+'le'](_0x31c5a0);break;case'xp':this['drawItemIm'+_0x24f803(0x1047)](_0x31c5a0);break;case _0x374d7b['QCFou']:this[_0x24f803(0xa88)+_0x24f803(0xce3)+_0x24f803(0xdb5)](_0x31c5a0);break;case _0x374d7b[_0x24f803(0x229)]:case _0x374d7b['deNBZ']:default:VisuMZ['BattleCore'][_0x24f803(0x14a4)+_0x24f803(0xfe5)+_0x24f803(0xa88)+'age'][_0x24f803(0xb14)](this,_0x31c5a0);break;}},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x1561)+_0x4258d1(0x950)]=function(_0x1868cc){const _0x3f0c9d=_0x4258d1,_0x19665e={'zNZtV':_0x3f0c9d(0x7fe),'kyRuX':_0x3f0c9d(0x14b6),'rFDOE':_0x3f0c9d(0x1601),'EAbcD':_0x3f0c9d(0x83c)},_0xdce1aa=this[_0x3f0c9d(0x6d1)+_0x3f0c9d(0x1100)]();if(!$gameSystem[_0x3f0c9d(0x8df)]())this[_0x3f0c9d(0x10b8)+_0x3f0c9d(0x41d)+'e'](_0x1868cc);switch(_0xdce1aa){case _0x19665e[_0x3f0c9d(0xfe8)]:this[_0x3f0c9d(0x1561)+'atusListSt'+_0x3f0c9d(0xbf0)](_0x1868cc);break;case'xp':case _0x19665e['kyRuX']:case _0x19665e[_0x3f0c9d(0x1247)]:case _0x19665e[_0x3f0c9d(0x12b8)]:default:this[_0x3f0c9d(0x1561)+_0x3f0c9d(0x1090)+'e'](_0x1868cc);break;}},Window_BattleStatus[_0x4258d1(0xf38)]['refreshCur'+_0x4258d1(0x11d3)]=function(){const _0x3c6bc9=_0x4258d1,_0x4cb949=this['battleLayo'+_0x3c6bc9(0x1100)]();if(['xp'][_0x3c6bc9(0x163f)](_0x4cb949)&&!$gameSystem[_0x3c6bc9(0x8df)]()){this['setCursorR'+_0x3c6bc9(0x72f)](0x2e8*0xc+-0x191*-0x15+-0x3*0x1697,0x211*0x1+0x1*0x1cd0+-0x1ee1,-0xea+-0x7bc+0x171*0x6,-0x133a+0xf8*-0x20+0x323a);return;}Window_StatusBase[_0x3c6bc9(0xf38)][_0x3c6bc9(0x6ff)+'sor'][_0x3c6bc9(0xb14)](this);},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x10b8)+'tViewSprit'+'e']=function(_0x2a80a3){const _0x109d31=_0x4258d1,_0x11ad4a={'ePtIR':function(_0x2e69a5,_0x497f5a){return _0x2e69a5+_0x497f5a;},'NRmti':function(_0x5027df,_0xa83a3f){return _0x5027df+_0xa83a3f;},'USeXo':function(_0x3cf4df,_0x4d76b0){return _0x3cf4df/_0x4d76b0;},'bUFHB':'list','vMbwv':function(_0xcfc884,_0x55224c){return _0xcfc884/_0x55224c;},'jcSiu':function(_0x20eb1e,_0x3906cf){return _0x20eb1e/_0x3906cf;}},_0x466eb8=this[_0x109d31(0xd12)](_0x2a80a3)['battler']();if(!_0x466eb8)return;const _0x558c21=this[_0x109d31(0x6d1)+_0x109d31(0x1100)](),_0x39b9b4=this[_0x109d31(0x16ab)](_0x2a80a3);let _0x171e8a=_0x11ad4a[_0x109d31(0x72a)](Math['round'](_0x11ad4a[_0x109d31(0x138b)](_0x39b9b4['x'],_0x11ad4a['USeXo'](_0x39b9b4['width'],-0x1a7d+0x1f4f+-0x2c*0x1c))),this['padding']);[_0x11ad4a[_0x109d31(0x906)]]['includes'](_0x558c21)&&(_0x171e8a=_0x11ad4a[_0x109d31(0x16a7)](_0x39b9b4[_0x109d31(0xc2a)],$gameParty['battleMemb'+'ers']()[_0x109d31(0x1645)]),_0x171e8a*=_0x2a80a3,_0x171e8a+=_0x11ad4a[_0x109d31(0x2ec)](_0x11ad4a['jcSiu'](_0x39b9b4[_0x109d31(0xc2a)],$gameParty['battleMemb'+_0x109d31(0x1514)]()[_0x109d31(0x1645)]),0x24*0xb3+0x149e+0x5*-0x928));let _0x3f4a19=Math[_0x109d31(0xdea)](this[_0x109d31(0x672)+_0x109d31(0xe53)](_0x2a80a3,_0x466eb8,_0x39b9b4));_0x466eb8['setHome'](_0x171e8a,_0x3f4a19),this[_0x109d31(0x1cb)](_0x466eb8,-0x54*0x76+-0x476*0x4+0x3*0x12db),_0x466eb8[_0x109d31(0x361)](),this[_0x109d31(0xa93)+_0x109d31(0x142b)+'er'](),this[_0x109d31(0x3d8)+_0x109d31(0x798)+_0x109d31(0x11d5)]();},Window_BattleStatus[_0x4258d1(0xf38)]['frontviewS'+_0x4258d1(0xe53)]=function(_0x5c92f4,_0x120b06,_0x581312){const _0x231c44=_0x4258d1,_0x24def4={'iogky':function(_0xf3a65c,_0x1d4bb2){return _0xf3a65c===_0x1d4bb2;},'vnaJB':_0x231c44(0x1118),'wRTgp':function(_0x120b2d,_0x17265b){return _0x120b2d-_0x17265b;},'LulfB':function(_0x1098ab,_0x55c813){return _0x1098ab/_0x55c813;},'OaMNz':_0x231c44(0x450),'hGrlu':function(_0x14af3e,_0x304325){return _0x14af3e/_0x304325;},'cNiMi':function(_0x1c9661,_0x2e479a){return _0x1c9661+_0x2e479a;},'fKnUS':_0x231c44(0x7f8),'ooPCg':_0x231c44(0xd40),'aZHim':function(_0x42f28b,_0x548ddc){return _0x42f28b===_0x548ddc;},'KrNpT':'portrait'},_0x10c7b3=VisuMZ[_0x231c44(0x337)]['Settings']['BattleLayo'+'ut'],_0xc48ba7=this[_0x231c44(0x6d1)+_0x231c44(0x1100)]();if(_0x24def4[_0x231c44(0xa62)](_0xc48ba7,'xp')){const _0x1ff5a0=_0x10c7b3[_0x231c44(0x11a8)+_0x231c44(0xae5)];switch(_0x1ff5a0[_0x231c44(0x1bc)+'e']()[_0x231c44(0xbb6)]()){case _0x24def4[_0x231c44(0x5f5)]:return _0x24def4[_0x231c44(0xc05)](_0x581312[_0x231c44(0x1594)],_0x24def4['LulfB'](_0x120b06[_0x231c44(0xec0)+'ite'][_0x231c44(0x1594)],-0x7a*-0x8+-0xf65+0xb99));break;case _0x24def4[_0x231c44(0x152b)]:const _0x2522ae=_0x10c7b3['XPActorDef'+_0x231c44(0xaf8)];return _0x24def4[_0x231c44(0xbda)](_0x24def4['cNiMi'](_0x581312[_0x231c44(0x1594)],_0x120b06[_0x231c44(0x1594)]||_0x2522ae),-0x1*0x1fc9+0x827*0x1+0x17a4);break;case _0x24def4['fKnUS']:return-0xb*-0x30+-0x2*0xa91+0x1312;case _0x24def4['ooPCg']:default:return this['nameY'](_0x581312);break;}}else{if(_0x24def4['aZHim'](_0xc48ba7,_0x24def4['KrNpT'])){}}return _0x120b06[_0x231c44(0x1594)];},Sprite_Name['prototype']['bitmapHeig'+'ht']=function(){return-0x1693+0x11a7+0x510;},Sprite_Name['prototype']['redraw']=function(){const _0x4298a8=_0x4258d1,_0x3c658b={'VTdzP':'left'},_0x9ac041=this[_0x4298a8(0xd40)](),_0x391c57=this[_0x4298a8(0x10ae)+'h'](),_0x20e351=this[_0x4298a8(0x129f)+'ht']();this[_0x4298a8(0x14ee)](),this['bitmap'][_0x4298a8(0x11c1)](),this['bitmap'][_0x4298a8(0x7c8)+'pAligned'](_0x9ac041,0x1a96+-0x22a0+0x80e,-0x1afd+-0x1f82+0x3a7f,_0x391c57,_0x20e351,_0x3c658b['VTdzP']);},Bitmap[_0x4258d1(0xf38)]['drawTextTo'+_0x4258d1(0x10d9)]=function(_0x18ca2d,_0x5d18d3,_0x2a292e,_0x792aff,_0x1c126c,_0x5eea22){const _0x12fab6=_0x4258d1,_0x3b1c97={'yCZhH':function(_0x108859,_0x18aa3d){return _0x108859||_0x18aa3d;},'pZWXM':function(_0x5cd54d,_0x4f3b69){return _0x5cd54d+_0x4f3b69;},'lYhrB':function(_0x1be478,_0x2071b3){return _0x1be478+_0x2071b3;},'tkPNY':function(_0x49147d,_0x459541){return _0x49147d/_0x459541;},'cgfnW':function(_0x518667,_0x2635e0){return _0x518667*_0x2635e0;},'MWqqB':function(_0x18f228,_0x310790){return _0x18f228===_0x310790;},'zXDft':_0x12fab6(0x450),'GTrzu':function(_0x1c27f1,_0x19e8e9){return _0x1c27f1/_0x19e8e9;},'xpQjV':function(_0x42d4a1,_0x262c78){return _0x42d4a1===_0x262c78;},'GjxHX':'right','neYmr':_0x12fab6(0x117c)};TextManager['parseLocal'+_0x12fab6(0x353)]&&(_0x18ca2d=TextManager['parseLocal'+_0x12fab6(0x353)](_0x18ca2d));const _0x46b44b=this[_0x12fab6(0x148b)],_0x12233a=_0x46b44b[_0x12fab6(0x454)+'a'];_0x792aff=_0x3b1c97['yCZhH'](_0x792aff,0x91bbfd05*0x3+-0x1e791508b+0x87cb3*0x2419);let _0x23b9b8=_0x5d18d3,_0x4bf9ad=Math['round'](_0x3b1c97[_0x12fab6(0x1364)](_0x3b1c97[_0x12fab6(0x717)](_0x2a292e,_0x3b1c97[_0x12fab6(0x15cc)](-0x2547+0xf25*0x1+-0x5*-0x472,-0x537*0x5+0x565*-0x7+0x3fd8)),_0x3b1c97['cgfnW'](this[_0x12fab6(0xaac)],-0x7ac+0x1d3+-0x1f3*-0x3+0.35)));_0x3b1c97[_0x12fab6(0x41e)](_0x5eea22,_0x3b1c97[_0x12fab6(0x4c7)])&&(_0x23b9b8+=_0x3b1c97[_0x12fab6(0x562)](_0x792aff,-0x1811+0x8ca+0xd*0x12d)),_0x3b1c97[_0x12fab6(0x4a9)](_0x5eea22,_0x3b1c97[_0x12fab6(0x15c9)])&&(_0x23b9b8+=_0x792aff),_0x46b44b[_0x12fab6(0xf00)](),_0x46b44b[_0x12fab6(0xed2)]=this['_makeFontN'+'ameText'](),_0x46b44b['textAlign']=_0x5eea22,_0x46b44b[_0x12fab6(0xd41)+'ne']=_0x3b1c97[_0x12fab6(0x1680)],_0x46b44b[_0x12fab6(0x454)+'a']=-0x3c1*-0x4+-0x1aaa+-0x13*-0x9d,this['_drawTextO'+_0x12fab6(0x825)](_0x18ca2d,_0x23b9b8,_0x4bf9ad,_0x792aff),_0x46b44b[_0x12fab6(0x454)+'a']=_0x12233a,this[_0x12fab6(0x1582)+_0x12fab6(0x21b)](_0x18ca2d,_0x23b9b8,_0x4bf9ad,_0x792aff),_0x46b44b[_0x12fab6(0x251)](),this[_0x12fab6(0x2e0)+'re'][_0x12fab6(0x164c)]();},Window_BattleStatus['prototype'][_0x4258d1(0x1373)]=function(_0x179420){const _0x5b507e=_0x4258d1,_0x167697={'DxCuQ':function(_0x2c497b,_0x2a8811){return _0x2c497b-_0x2a8811;}};return _0x167697[_0x5b507e(0x11d6)](this['basicGauge'+'sY'](_0x179420),this['gaugeLineH'+_0x5b507e(0x1016)]());},Window_BattleStatus['prototype'][_0x4258d1(0xa88)+_0x4258d1(0x595)+'le']=function(_0x5149b4){const _0x48c842=_0x4258d1,_0x33fbe0={'PxNaa':function(_0x5e7a5b,_0x4ad952){return _0x5e7a5b+_0x4ad952;},'mvyLN':function(_0x6bd999,_0x3589bf){return _0x6bd999+_0x3589bf;}};if(!VisuMZ[_0x48c842(0x337)][_0x48c842(0x424)][_0x48c842(0xdeb)+'ut'][_0x48c842(0xf10)+'istStyle'])return;const _0xfaa9e7=this[_0x48c842(0xd12)](_0x5149b4),_0x54a480=this[_0x48c842(0x16ab)](_0x5149b4);_0x54a480[_0x48c842(0xc2a)]=ImageManager[_0x48c842(0x15d3)],_0x54a480[_0x48c842(0x1594)]-=0x55f*0x2+0x281*-0x5+0x1c9,this[_0x48c842(0x1018)+_0x48c842(0x564)](_0xfaa9e7,_0x33fbe0[_0x48c842(0x415)](_0x54a480['x'],-0x22f4+0x5*-0x3e+0x242b),_0x33fbe0['mvyLN'](_0x54a480['y'],-0xaca*0x3+0x21*-0xb7+-0x2*-0x1bfb),_0x54a480[_0x48c842(0xc2a)],_0x54a480[_0x48c842(0x1594)]);},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x1561)+_0x4258d1(0xb7c)+_0x4258d1(0xbf0)]=function(_0x42d611){const _0x4b4474=_0x4258d1,_0x1743ea={'mqtan':function(_0x39c97a,_0x261b7c){return _0x39c97a+_0x261b7c;},'IrFNW':function(_0x414a22,_0x593d3b){return _0x414a22+_0x593d3b;},'ujFbE':function(_0x5818f1,_0x513281){return _0x5818f1*_0x513281;},'lyJsK':function(_0x310ead,_0x5e28e5){return _0x310ead-_0x5e28e5;},'PYrSm':function(_0x5b5bab,_0x1c039a){return _0x5b5bab+_0x1c039a;},'rvEUM':function(_0x49681b,_0x349d66){return _0x49681b-_0x349d66;},'lWoYy':function(_0x55e1e1,_0x3906f5){return _0x55e1e1+_0x3906f5;},'iKepc':function(_0x5b0e3f,_0x46d5ce){return _0x5b0e3f/_0x46d5ce;},'bkdtI':function(_0x1fb284,_0x56356e){return _0x1fb284-_0x56356e;},'zJEXp':function(_0x355f95,_0x35add5){return _0x355f95-_0x35add5;},'gFbvI':function(_0x304259,_0x358152){return _0x304259+_0x358152;},'DsGlz':function(_0x3cca36,_0x5e7217){return _0x3cca36/_0x5e7217;},'jMObr':function(_0x78f4ca,_0x2e9314){return _0x78f4ca+_0x2e9314;},'lCmbU':function(_0x1d1a6a,_0x2f10b7){return _0x1d1a6a+_0x2f10b7;},'kxkrf':function(_0x173281,_0x70da89){return _0x173281+_0x70da89;},'rPytL':function(_0x431f25,_0x3cb405){return _0x431f25+_0x3cb405;},'tFMoO':function(_0x3134ba,_0x2dd18a){return _0x3134ba+_0x2dd18a;},'yJtHq':function(_0x2a885a,_0x20e7c4){return _0x2a885a+_0x20e7c4;},'fNuOs':function(_0xaf6b72,_0x43687b){return _0xaf6b72*_0x43687b;},'OTkno':function(_0x175d63,_0x33879d){return _0x175d63+_0x33879d;},'htJpF':function(_0x4268c1,_0x342566){return _0x4268c1*_0x342566;}},_0x2d8b6a=VisuMZ[_0x4b4474(0x337)][_0x4b4474(0x424)][_0x4b4474(0xdeb)+'ut'],_0x50f44c=$dataSystem['optDisplay'+'Tp']?0x177*-0x9+0x1be+-0xb75*-0x1:-0x1b6a+-0x1*-0x1bef+-0x41*0x2,_0x4e3d45=_0x1743ea[_0x4b4474(0xe83)](_0x1743ea[_0x4b4474(0x618)](_0x1743ea[_0x4b4474(0x13f8)](_0x50f44c,-0x13a+0x6*0x5de+-0x2*0x10bd),_0x1743ea[_0x4b4474(0x13f8)](_0x1743ea['lyJsK'](_0x50f44c,0x1b34+0x2264+0x3d97*-0x1),0x1*-0x26a1+-0x2093*0x1+0x473c)),-0xfa4+-0xf52+0x1efa),_0x416dc4=this[_0x4b4474(0xd12)](_0x42d611),_0x516e67=this[_0x4b4474(0x16ab)](_0x42d611);let _0x2cac71=_0x1743ea[_0x4b4474(0xe83)](_0x516e67['x'],this[_0x4b4474(0x7d1)]);_0x2d8b6a[_0x4b4474(0xf10)+_0x4b4474(0xdad)]?_0x2cac71=_0x1743ea[_0x4b4474(0xdf4)](_0x1743ea[_0x4b4474(0xdf4)](_0x516e67['x'],ImageManager[_0x4b4474(0x15d3)]),-0xb90+0x15ee+0x372*-0x3):_0x2cac71+=ImageManager[_0x4b4474(0x465)];const _0x1736b2=Math[_0x4b4474(0xdea)](Math['min'](_0x1743ea[_0x4b4474(0x857)](_0x1743ea['lWoYy'](_0x516e67['x'],_0x516e67['width']),_0x4e3d45),_0x2cac71)),_0xe20b1d=Math[_0x4b4474(0xdea)](_0x1743ea[_0x4b4474(0xe83)](_0x516e67['y'],_0x1743ea['iKepc'](_0x1743ea[_0x4b4474(0xafd)](_0x516e67[_0x4b4474(0x1594)],Sprite_Name[_0x4b4474(0xf38)][_0x4b4474(0x129f)+'ht']()),0x1ae2+-0x1*-0x1d9b+-0x387b))),_0x5a4c21=Math['round'](_0x1743ea[_0x4b4474(0xc31)](_0x1743ea[_0x4b4474(0xc6a)](_0x1736b2,_0x1743ea[_0x4b4474(0x50e)](ImageManager['iconWidth'],0x1*0x9df+0x34f*-0x2+0x33f*-0x1)),-0x1166*-0x2+-0x3d*0x2f+-0x1795*0x1)),_0x3fa53d=Math[_0x4b4474(0xdea)](_0x1743ea[_0x4b4474(0xb95)](_0x1743ea[_0x4b4474(0xdf4)](_0x516e67['y'],_0x1743ea[_0x4b4474(0x50e)](_0x1743ea[_0x4b4474(0x857)](_0x516e67[_0x4b4474(0x1594)],ImageManager[_0x4b4474(0x7f3)]),0x4*0x57d+-0x213b+0xb49)),_0x1743ea['DsGlz'](ImageManager[_0x4b4474(0x7f3)],0x2*0x823+0x23f2+-0x3436)));let _0x1073ea=_0x1743ea[_0x4b4474(0x1603)](_0x1736b2,0x253a+-0x1859*-0x1+-0x1*0x3d0b);const _0x50717f=_0xe20b1d;this[_0x4b4474(0x135e)+_0x4b4474(0x146b)](_0x416dc4,_0x1743ea[_0x4b4474(0x1597)](_0x1743ea[_0x4b4474(0xc6a)](_0x1736b2,0xbaf+-0x191b+0x56*0x28),_0x2d8b6a['TpbGaugeOf'+_0x4b4474(0x5e5)]||-0x2012+-0x7cc*0x1+0x27de),_0x1743ea['lWoYy'](_0xe20b1d,_0x2d8b6a[_0x4b4474(0xc2f)+'fsetY']||-0xac6+-0x81*0x23+0x1c69)),this[_0x4b4474(0x115d)+_0x4b4474(0x13bb)](_0x416dc4,_0x1743ea[_0x4b4474(0xcdd)](_0x1736b2,_0x2d8b6a[_0x4b4474(0x148c)+'X']||-0x10b6+0x882*0x1+0x834),_0x1743ea[_0x4b4474(0x9cf)](_0xe20b1d,_0x2d8b6a[_0x4b4474(0x148c)+'Y']||0x2*-0x97b+0x3c*0xa+0x109e)),this['placeState'+'Icon'](_0x416dc4,_0x1743ea[_0x4b4474(0xcdd)](_0x5a4c21,_0x2d8b6a['StateIconO'+_0x4b4474(0x347)]||-0x5*-0x2f3+0x786+-0x1645),_0x1743ea[_0x4b4474(0xcdd)](_0x3fa53d,_0x2d8b6a[_0x4b4474(0x587)+_0x4b4474(0x89d)]||0x1b*0x57+0x14ff+-0x1e2c)),this[_0x4b4474(0x771)](_0x416dc4,'hp',_0x1743ea[_0x4b4474(0xf7d)](_0x1743ea['rPytL'](_0x1073ea,_0x1743ea['ujFbE'](0xb6*0x10+-0x210*-0x1+0x4*-0x33a,-0x9*0x1c4+-0x142*-0x7+0x716)),_0x2d8b6a[_0x4b4474(0xe70)+'setX']||-0x1*-0x805+0x7*0x409+-0x2444),_0x1743ea[_0x4b4474(0x453)](_0x50717f,_0x2d8b6a['HpGaugeOff'+_0x4b4474(0x101c)]||0x656+-0xbfe+0x5a8)),this[_0x4b4474(0x771)](_0x416dc4,'mp',_0x1743ea['mqtan'](_0x1743ea[_0x4b4474(0x429)](_0x1073ea,_0x1743ea['fNuOs'](0xc5*0x5+-0x1809+0x374*0x6,-0x1*0x1fa3+0x408+-0x3e*-0x72)),_0x2d8b6a[_0x4b4474(0x939)+_0x4b4474(0xc00)]||0xa97*0x3+-0xdb5+-0x1210),_0x1743ea[_0x4b4474(0x14ad)](_0x50717f,_0x2d8b6a[_0x4b4474(0x939)+'setY']||0x106*0x9+0xcf8*-0x1+0x3c2)),$dataSystem[_0x4b4474(0x80c)+'Tp']&&this['placeGauge'](_0x416dc4,'tp',_0x1743ea['tFMoO'](_0x1743ea[_0x4b4474(0xdf4)](_0x1073ea,_0x1743ea[_0x4b4474(0x9ee)](-0x2325+-0x2bd+-0x37e*-0xb,-0x1ce7+-0xf51+-0xebe*-0x3)),_0x2d8b6a['TpGaugeOff'+_0x4b4474(0xc00)]||0x157*0x7+0x14fb+-0x1e5c),_0x1743ea[_0x4b4474(0xcdd)](_0x50717f,_0x2d8b6a['TpGaugeOff'+'setY']||0x19e4+0x3b*0x73+-0x3465));},Window_BattleStatus['prototype']['drawItemIm'+_0x4258d1(0x1047)]=function(_0x2c999b){const _0x1b7136=_0x4258d1;if(!$gameSystem[_0x1b7136(0x8df)]())return;VisuMZ[_0x1b7136(0x337)][_0x1b7136(0x14a4)+_0x1b7136(0xfe5)+'drawItemIm'+_0x1b7136(0xdda)]['call'](this,_0x2c999b);},Window_BattleStatus['prototype'][_0x4258d1(0x1561)+_0x4258d1(0x1090)+'e']=function(_0x6b93a2){const _0x5b5ed0=_0x4258d1,_0x5a6b3f={'QJCSk':function(_0x5c1404,_0x42b880){return _0x5c1404+_0x42b880;},'VxtyO':function(_0x2c1123,_0x3e0a1f){return _0x2c1123/_0x3e0a1f;},'uFuNT':function(_0x535902,_0x56b9b4){return _0x535902-_0x56b9b4;},'LTiJc':function(_0x245e12,_0x19f8fc){return _0x245e12-_0x19f8fc;},'cLfOU':function(_0x5784fe,_0x403c0b){return _0x5784fe-_0x403c0b;},'yXIgr':function(_0xb6f71d,_0x2cb495){return _0xb6f71d/_0x2cb495;},'wdpYF':function(_0x30f7a9,_0x262b37){return _0x30f7a9<_0x262b37;},'kfXqv':function(_0x2cde96,_0x3f436a){return _0x2cde96-_0x3f436a;},'cpxcz':function(_0x262e27,_0x2ed554){return _0x262e27/_0x2ed554;},'PmybV':function(_0x1821b0,_0x1534c7){return _0x1821b0-_0x1534c7;},'bjabg':function(_0x2c5e2d,_0x4c6e3a){return _0x2c5e2d+_0x4c6e3a;},'fdAKv':function(_0x24dae5,_0xd72d35){return _0x24dae5/_0xd72d35;},'xWEYa':function(_0x3cc017,_0x1e5c75){return _0x3cc017-_0x1e5c75;},'eFGhU':function(_0x35565b,_0x3373e2){return _0x35565b/_0x3373e2;},'KPjbq':function(_0x1212fc,_0x4cdbce){return _0x1212fc+_0x4cdbce;},'StCgR':function(_0x3b715b,_0x24e966){return _0x3b715b+_0x24e966;},'XVjCC':function(_0x308e1b,_0x3d84bd){return _0x308e1b+_0x3d84bd;},'rJVCi':function(_0xb72c64,_0x181169){return _0xb72c64+_0x181169;},'aawuf':function(_0x31b21b,_0x2c7dd6){return _0x31b21b+_0x2c7dd6;},'fhaYZ':function(_0xf6a9d5,_0x74be3e){return _0xf6a9d5+_0x74be3e;},'smgPL':function(_0x334583,_0x256016){return _0x334583*_0x256016;}},_0x418a17=VisuMZ[_0x5b5ed0(0x337)][_0x5b5ed0(0x424)]['BattleLayo'+'ut'],_0x40b770=this['actor'](_0x6b93a2),_0x4a6056=this[_0x5b5ed0(0x16ab)](_0x6b93a2),_0x6c6fb9=Math[_0x5b5ed0(0xdea)](_0x5a6b3f[_0x5b5ed0(0xcb9)](_0x4a6056['x'],_0x5a6b3f['VxtyO'](_0x5a6b3f[_0x5b5ed0(0x1332)](_0x4a6056[_0x5b5ed0(0xc2a)],0x5*0x6a+0xbb6*-0x1+-0x512*-0x2),0x26fe+0xdf*0x1b+-0x3e81))),_0x499b8d=this[_0x5b5ed0(0x1373)](_0x4a6056);let _0x24e549=_0x5a6b3f[_0x5b5ed0(0x102c)](_0x5a6b3f[_0x5b5ed0(0x15fc)](_0x6c6fb9,_0x5a6b3f[_0x5b5ed0(0x82c)](ImageManager[_0x5b5ed0(0x465)],0x944+0x5*-0x6dc+-0x2*-0xc85)),0x13d6+-0x4b2+-0xf20),_0x59ab10=_0x5a6b3f[_0x5b5ed0(0xcb9)](_0x499b8d,_0x5a6b3f[_0x5b5ed0(0x82c)](ImageManager[_0x5b5ed0(0x7f3)],-0xfcd*-0x2+-0x4d2+0x12a*-0x17));_0x5a6b3f[_0x5b5ed0(0xe8b)](_0x5a6b3f[_0x5b5ed0(0xd0e)](_0x24e549,_0x5a6b3f['cpxcz'](ImageManager[_0x5b5ed0(0x465)],-0x36*0x9d+0x1*0x2593+-0x473)),_0x4a6056['x'])&&(_0x24e549=_0x5a6b3f['PmybV'](_0x5a6b3f[_0x5b5ed0(0x1a5)](_0x6c6fb9,_0x5a6b3f['fdAKv'](ImageManager[_0x5b5ed0(0x465)],0x1ec7+-0xef1+0x1*-0xfd4)),0x2*-0x9e0+-0x1*0x161a+-0x2e*-0xe9),_0x59ab10=_0x5a6b3f[_0x5b5ed0(0x10a1)](_0x499b8d,_0x5a6b3f[_0x5b5ed0(0x1af)](ImageManager[_0x5b5ed0(0x7f3)],0x1*0x509+0x2*-0x11b6+0x1e65)));const _0x12adc7=_0x6c6fb9,_0x44c9e4=this['basicGauge'+'sY'](_0x4a6056);this['placeTimeG'+_0x5b5ed0(0x146b)](_0x40b770,_0x5a6b3f[_0x5b5ed0(0x15bd)](_0x6c6fb9,_0x418a17[_0x5b5ed0(0xc2f)+_0x5b5ed0(0x5e5)]||0x2547+0x1df4+-0x433b),_0x5a6b3f[_0x5b5ed0(0xcb9)](_0x499b8d,_0x418a17[_0x5b5ed0(0xc2f)+_0x5b5ed0(0xd6c)]||-0x11f2*-0x1+-0xeb+-0x1107)),this[_0x5b5ed0(0x115d)+'Name'](_0x40b770,_0x5a6b3f[_0x5b5ed0(0x2b5)](_0x6c6fb9,_0x418a17[_0x5b5ed0(0x148c)+'X']||-0x3*-0x1a9+-0xbc1+-0x6*-0x121),_0x5a6b3f[_0x5b5ed0(0x2b5)](_0x499b8d,_0x418a17['NameOffset'+'Y']||0x26ee+-0x5*-0x33d+-0x371f)),this[_0x5b5ed0(0x1288)+_0x5b5ed0(0x638)](_0x40b770,_0x5a6b3f[_0x5b5ed0(0x2b5)](_0x24e549,_0x418a17['StateIconO'+_0x5b5ed0(0x347)]||0x20ca+0x584+-0x264e*0x1),_0x5a6b3f[_0x5b5ed0(0xbe2)](_0x59ab10,_0x418a17['StateIconO'+'ffsetY']||0x20+0x1*-0xcb3+-0x57*-0x25)),this['placeGauge'](_0x40b770,'hp',_0x5a6b3f[_0x5b5ed0(0x15bd)](_0x12adc7,_0x418a17['HpGaugeOff'+_0x5b5ed0(0xc00)]||0x1f37+-0x3d8+-0x4d*0x5b),_0x5a6b3f['bjabg'](_0x44c9e4,_0x418a17[_0x5b5ed0(0xe70)+_0x5b5ed0(0x101c)]||0x43*-0x27+0x931*-0x3+0x25c8)),this[_0x5b5ed0(0x771)](_0x40b770,'mp',_0x5a6b3f[_0x5b5ed0(0x1694)](_0x12adc7,_0x418a17[_0x5b5ed0(0x939)+_0x5b5ed0(0xc00)]||-0x26ad+0xbda+0x7*0x3d5),_0x5a6b3f[_0x5b5ed0(0x12ef)](_0x5a6b3f[_0x5b5ed0(0xe2d)](_0x44c9e4,this[_0x5b5ed0(0x1405)+_0x5b5ed0(0x1016)]()),_0x418a17[_0x5b5ed0(0x939)+_0x5b5ed0(0x101c)]||-0x3*-0x5d9+0xa2d*-0x1+-0x1*0x75e)),$dataSystem[_0x5b5ed0(0x80c)+'Tp']&&this[_0x5b5ed0(0x771)](_0x40b770,'tp',_0x5a6b3f['bjabg'](_0x12adc7,_0x418a17[_0x5b5ed0(0x4d6)+_0x5b5ed0(0xc00)]||0x68*0xc+-0xdc4*0x1+0x1*0x8e4),_0x5a6b3f[_0x5b5ed0(0x1694)](_0x5a6b3f[_0x5b5ed0(0x12ef)](_0x44c9e4,_0x5a6b3f[_0x5b5ed0(0x2fa)](this[_0x5b5ed0(0x1405)+_0x5b5ed0(0x1016)](),-0x623+-0x42c*-0x6+-0x12e3)),_0x418a17[_0x5b5ed0(0x4d6)+_0x5b5ed0(0x101c)]||-0x1*0xd3b+-0x229d+0x4*0xbf6));},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x155f)+_0x4258d1(0xff7)]=function(_0x4ae81a){const _0x11fcba=_0x4258d1;if(!VisuMZ[_0x11fcba(0x337)]['Settings']['BattleLayo'+'ut'][_0x11fcba(0x547)+'its'])return![];if(_0x4ae81a[_0x11fcba(0x4b2)+'ortrait']())return!![];return Imported[_0x11fcba(0x685)+_0x11fcba(0x1592)+'e']&&_0x4ae81a[_0x11fcba(0x3d0)+'ge']();},Game_Actor['prototype'][_0x4258d1(0x4b2)+_0x4258d1(0x1411)+_0x4258d1(0xc00)]=function(){const _0x6c0eb6=_0x4258d1,_0x371b51={'ObhBR':function(_0x376ec6,_0xd79696){return _0x376ec6(_0xd79696);},'dJuCX':function(_0x3abbbc,_0x23358e){return _0x3abbbc(_0x23358e);}};if(this[_0x6c0eb6(0xd12)]()[_0x6c0eb6(0x278)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return _0x371b51[_0x6c0eb6(0x903)](Number,RegExp['$1']);else{if(this['actor']()['note'][_0x6c0eb6(0x79c)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x371b51[_0x6c0eb6(0x849)](Number,RegExp['$1']);}return 0x13a*-0x1a+0x4*0xb5+0x5d0*0x5;},Game_Actor[_0x4258d1(0xf38)][_0x4258d1(0x4b2)+_0x4258d1(0x1411)+_0x4258d1(0x101c)]=function(){const _0xdfa724=_0x4258d1,_0x5f388b={'DnBSd':function(_0x27c79f,_0x2abb81){return _0x27c79f(_0x2abb81);}};if(this[_0xdfa724(0xd12)]()[_0xdfa724(0x278)][_0xdfa724(0x79c)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return _0x5f388b[_0xdfa724(0x11ef)](Number,RegExp['$1']);else{if(this[_0xdfa724(0xd12)]()[_0xdfa724(0x278)][_0xdfa724(0x79c)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x5f388b['DnBSd'](Number,RegExp['$2']);}return-0xd0b+0x1a32+-0xd27;},Window_BattleStatus['prototype'][_0x4258d1(0xa88)+_0x4258d1(0xce3)+'tStyle']=function(_0x200dfd){const _0x3060b8=_0x4258d1,_0x24e7ce={'GsGEW':_0x3060b8(0x343)+_0x3060b8(0x12f5),'PGkbc':function(_0x480039,_0x3d76cc){return _0x480039!==_0x3d76cc;},'ZAtDa':function(_0x4fd9c4,_0x380d50){return _0x4fd9c4+_0x380d50;},'crUDW':function(_0x3809b7,_0x4cf8a9){return _0x3809b7/_0x4cf8a9;}},_0x5b56ef=this[_0x3060b8(0xd12)](_0x200dfd);if(this[_0x3060b8(0x155f)+'its'](_0x5b56ef)){const _0x34b24e=_0x24e7ce['GsGEW'][_0x3060b8(0xf22)](_0x5b56ef[_0x3060b8(0x11ae)]()),_0x5b3233=this[_0x3060b8(0xb1c)+_0x3060b8(0xe28)](_0x34b24e,Sprite),_0x3bcddb=_0x5b56ef[_0x3060b8(0x4b2)+_0x3060b8(0x1124)+'ename']();_0x24e7ce[_0x3060b8(0xd25)](_0x3bcddb,'')?_0x5b3233[_0x3060b8(0x5dd)]=ImageManager[_0x3060b8(0xf2e)+'e'](_0x3bcddb):_0x5b3233['bitmap']=ImageManager[_0x3060b8(0x2b2)+'ap'];const _0x3d9288=this[_0x3060b8(0x16ab)](_0x200dfd);_0x5b3233[_0x3060b8(0x12af)]['x']=0x1*-0x1e16+0x233d+-0x527+0.5,_0x5b3233['anchor']['y']=0x10a+-0x8*0x26+0x27;let _0x56ef29=_0x24e7ce[_0x3060b8(0x3c5)](Math['round'](_0x24e7ce['ZAtDa'](_0x3d9288['x'],_0x24e7ce['crUDW'](_0x3d9288['width'],0x193a+0x267e+-0xa*0x65f))),this[_0x3060b8(0x7d1)]);_0x56ef29+=_0x5b56ef[_0x3060b8(0x4b2)+_0x3060b8(0x1411)+_0x3060b8(0xc00)]();let _0x34ada8=Math[_0x3060b8(0xdea)](this['height']);_0x34ada8+=_0x5b56ef[_0x3060b8(0x4b2)+_0x3060b8(0x1411)+'setY'](),_0x5b3233['move'](_0x56ef29,_0x34ada8);const _0x39d8bc=VisuMZ['BattleCore'][_0x3060b8(0x424)][_0x3060b8(0xdeb)+'ut'][_0x3060b8(0x11ad)+_0x3060b8(0xeb1)];_0x5b3233['scale']['x']=_0x39d8bc,_0x5b3233[_0x3060b8(0xfcb)]['y']=_0x39d8bc,_0x5b3233[_0x3060b8(0x361)]();}else{const _0x14f706=this[_0x3060b8(0x11f4)](_0x200dfd);this['drawActorF'+_0x3060b8(0x564)](_0x5b56ef,_0x14f706['x'],_0x14f706['y'],_0x14f706['width'],_0x14f706[_0x3060b8(0x1594)]);}},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0xb1c)+_0x4258d1(0xe28)]=function(_0x5a1b80,_0x4eb997){const _0x1d3647=_0x4258d1,_0x296a91=this['_additiona'+_0x1d3647(0xbb9)];if(_0x296a91[_0x5a1b80])return _0x296a91[_0x5a1b80];else{const _0x474a70=new _0x4eb997();return _0x296a91[_0x5a1b80]=_0x474a70,this[_0x1d3647(0x1593)+_0x1d3647(0xaee)](_0x474a70),this[_0x1d3647(0x1593)+_0x1d3647(0xaee)](this[_0x1d3647(0x550)+'a']),_0x474a70;}},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x5b2)+_0x4258d1(0x10d8)]=function(){const _0x2ac5c8=_0x4258d1;this[_0x2ac5c8(0x109c)+_0x2ac5c8(0x107d)](),this[_0x2ac5c8(0x15a7)+_0x2ac5c8(0x1464)+'ner'](),Window_StatusBase['prototype'][_0x2ac5c8(0x5b2)+'entArea'][_0x2ac5c8(0xb14)](this),this[_0x2ac5c8(0x1693)+_0x2ac5c8(0x1011)+'er']();},Window_BattleStatus['prototype'][_0x4258d1(0x109c)+'sorArea']=function(){const _0x3f26f2=_0x4258d1,_0x1edb74={'JdVIS':_0x3f26f2(0x2f2)},_0x29df99=_0x1edb74[_0x3f26f2(0x15fa)][_0x3f26f2(0xba9)]('|');let _0x1c485c=0x24b*0xa+-0x21cb+0x1*0xadd;while(!![]){switch(_0x29df99[_0x1c485c++]){case'0':this[_0x3f26f2(0xd0b)](this[_0x3f26f2(0x550)+'a']);continue;case'1':this[_0x3f26f2(0x550)+'a'][_0x3f26f2(0x1235)](this[_0x3f26f2(0x1626)],this[_0x3f26f2(0x1626)]);continue;case'2':this['_cursorAre'+'a'][_0x3f26f2(0xb36)]=[new PIXI[(_0x3f26f2(0xb36))][(_0x3f26f2(0x45a))+'r']()];continue;case'3':this[_0x3f26f2(0x550)+'a'][_0x3f26f2(0x953)]=new Rectangle();continue;case'4':this[_0x3f26f2(0x550)+'a']=new Sprite();continue;}break;}},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x15a7)+'ectsContai'+_0x4258d1(0x10bd)]=function(){const _0x4ee11c=_0x4258d1;this[_0x4ee11c(0x1015)+'ntainer']=new Sprite(),this['addChild'](this[_0x4ee11c(0x1015)+_0x4ee11c(0xd3d)]);},Window_BattleStatus[_0x4258d1(0xf38)]['updateEffe'+_0x4258d1(0x142b)+'er']=function(){const _0x558e97=_0x4258d1;this['_effectsCo'+_0x558e97(0xd3d)]&&this[_0x558e97(0xd0b)](this[_0x558e97(0x1015)+_0x558e97(0xd3d)]);},Window_BattleStatus['prototype'][_0x4258d1(0x1693)+_0x4258d1(0x1011)+'er']=function(){const _0x195909=_0x4258d1;this[_0x195909(0xf87)+_0x195909(0x1579)]=new Sprite(),this[_0x195909(0xd0b)](this[_0x195909(0xf87)+_0x195909(0x1579)]);},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x109c)+_0x4258d1(0x110b)]=function(){const _0x500e24=_0x4258d1,_0x79f9d4={'vTQge':function(_0x251b42,_0x56f4b2){return _0x251b42<_0x56f4b2;}};this['_cursorSpr'+_0x500e24(0xdba)]=new Sprite();for(let _0x126069=0x14bc+-0x1a31+-0x7f*-0xb;_0x79f9d4[_0x500e24(0xc32)](_0x126069,0x1331+-0x44*0x85+0x102c);_0x126069++){this['_cursorSpr'+_0x500e24(0xdba)]['addChild'](new Sprite());}this[_0x500e24(0x550)+'a'][_0x500e24(0xd0b)](this[_0x500e24(0x1f2)+_0x500e24(0xdba)]);},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x1277)+'entArea']=function(){const _0x48d175=_0x4258d1;Window_StatusBase[_0x48d175(0xf38)]['_updateCli'+_0x48d175(0x10d8)][_0x48d175(0xb14)](this),this['_updateCur'+_0x48d175(0x107d)]();},Window_BattleStatus['prototype'][_0x4258d1(0x6bb)+_0x4258d1(0x107d)]=function(){const _0x51c696=_0x4258d1,_0x11c48e={'Brqyw':function(_0x5080c0,_0x1aeb5a){return _0x5080c0-_0x1aeb5a;},'nSjMQ':function(_0x1c1976,_0x244598){return _0x1c1976>_0x244598;}},_0x33149e=this[_0x51c696(0x1626)];this[_0x51c696(0x550)+'a'][_0x51c696(0x1235)](_0x33149e,_0x33149e),this[_0x51c696(0x550)+'a']['x']=_0x11c48e[_0x51c696(0x10ca)](_0x33149e,this['origin']['x']),this[_0x51c696(0x550)+'a']['y']=_0x11c48e[_0x51c696(0x10ca)](_0x33149e,this[_0x51c696(0x85c)]['y']),_0x11c48e['nSjMQ'](this[_0x51c696(0x51d)],-0x9*0xad+0xc60+-0x64b)&&_0x11c48e[_0x51c696(0x11c2)](this['innerHeigh'+'t'],0x231d+-0x1d86+-0x597)?this[_0x51c696(0x550)+'a']['visible']=this[_0x51c696(0x11cb)]():this[_0x51c696(0x550)+'a'][_0x51c696(0x13af)]=![];},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x1130)+_0x4258d1(0xacb)]=function(){const _0x13f308=_0x4258d1;Window_StatusBase[_0x13f308(0xf38)][_0x13f308(0x1130)+_0x13f308(0xacb)][_0x13f308(0xb14)](this),this[_0x13f308(0x6bb)+_0x13f308(0x1315)+_0x13f308(0xe92)]();},Window_BattleStatus['prototype'][_0x4258d1(0x6bb)+'sorFilterA'+_0x4258d1(0xe92)]=function(){const _0x2bcd7f=_0x4258d1,_0x2c5275={'MBtOo':function(_0x75bf25,_0x26fd09){return _0x75bf25+_0x26fd09;}},_0x5404b5=this[_0x2bcd7f(0x550)+'a'][_0x2bcd7f(0x132e)+_0x2bcd7f(0x96d)][_0x2bcd7f(0x729)](new Point(0x4*-0x2e6+0x2437+-0xbf*0x21,-0xa6e+-0xc1e+0x168c)),_0x1fba6b=this[_0x2bcd7f(0x550)+'a']['filterArea'];_0x1fba6b['x']=_0x2c5275[_0x2bcd7f(0xf55)](_0x5404b5['x'],this[_0x2bcd7f(0x85c)]['x']),_0x1fba6b['y']=_0x2c5275[_0x2bcd7f(0xf55)](_0x5404b5['y'],this['origin']['y']),_0x1fba6b['width']=this[_0x2bcd7f(0x51d)],_0x1fba6b['height']=this[_0x2bcd7f(0x95c)+'t'];},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x81f)+'orPortrait']=function(_0x468ee9){const _0x4cc13f=_0x4258d1,_0x358c5c={'lcZNG':function(_0x12e2d1,_0x4a6819){return _0x12e2d1!==_0x4a6819;},'tpCuf':_0x4cc13f(0x14b6)};if(_0x358c5c[_0x4cc13f(0x345)](this['battleLayo'+_0x4cc13f(0x1100)](),_0x358c5c['tpCuf']))return;this[_0x4cc13f(0xa88)+_0x4cc13f(0xce3)+_0x4cc13f(0xdb5)](_0x468ee9[_0x4cc13f(0x2e3)]());},Window_BattleStatus[_0x4258d1(0xf38)]['addDamageS'+_0x4258d1(0xa61)]=function(_0x4561cb,_0x312d54){const _0x58e4ce=_0x4258d1,_0x8d056b={'DTnVe':function(_0x185100,_0x18539f){return _0x185100+_0x18539f;},'ToRQd':function(_0x143c28,_0x4efbb1){return _0x143c28/_0x4efbb1;}};if(!this['_damageCon'+_0x58e4ce(0x1579)])return;if(!_0x4561cb)return;if(!_0x312d54)return;const _0x1cd9d0=this[_0x58e4ce(0x16ab)](_0x312d54['index']());_0x1cd9d0['x']+=_0x8d056b[_0x58e4ce(0x103c)](_0x8d056b['ToRQd'](_0x1cd9d0['width'],-0xb*-0xe+-0x1*0xaed+0xa55),this[_0x58e4ce(0x7d1)]),_0x4561cb['x']=_0x1cd9d0['x'],_0x4561cb['y']=_0x1cd9d0['y'],this[_0x58e4ce(0xf87)+_0x58e4ce(0x1579)][_0x58e4ce(0xd0b)](_0x4561cb);},Window_BattleStatus[_0x4258d1(0xf38)]['removeDama'+'geSprite']=function(_0x41a691){const _0x3ff769=_0x4258d1;if(!this[_0x3ff769(0xf87)+_0x3ff769(0x1579)])return;if(!_0x41a691)return;this[_0x3ff769(0xf87)+_0x3ff769(0x1579)]['removeChil'+'d'](_0x41a691);},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x147b)+_0x4258d1(0x1505)]=function(){const _0x4ccac8=_0x4258d1;if(!this['isBorderSt'+_0x4ccac8(0x62b)+_0x4ccac8(0x64d)]())return;if(!this[_0x4ccac8(0x1f8)+_0x4ccac8(0x1506)+'e'])this[_0x4ccac8(0x100c)+_0x4ccac8(0xf54)+_0x4ccac8(0x1506)+'e']();this[_0x4ccac8(0x9c2)+'derActor'](),this['updateBord'+_0x4ccac8(0x118a)]();},Window_BattleStatus['prototype'][_0x4258d1(0xae6)+_0x4258d1(0x62b)+'tShown']=function(){const _0x775719=_0x4258d1,_0x52fcbb={'JVJtC':function(_0x37f215,_0x4e6047){return _0x37f215!==_0x4e6047;}};if(_0x52fcbb['JVJtC'](this[_0x775719(0xcab)+'r'],Window_BattleStatus))return![];if(!SceneManager[_0x775719(0x614)+'tle']())return![];return VisuMZ[_0x775719(0x337)]['Settings'][_0x775719(0xdeb)+'ut'][_0x775719(0x547)+_0x775719(0x2a4)+_0x775719(0xda6)];},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x100c)+'erStylePor'+_0x4258d1(0x1506)+'e']=function(){const _0x11fd50=_0x4258d1,_0x2dee1a={'pUxNq':function(_0x772323,_0x6de670){return _0x772323+_0x6de670;}};this[_0x11fd50(0x1f8)+_0x11fd50(0x1506)+'e']=new Sprite();const _0x537cc0=SceneManager[_0x11fd50(0x14b3)],_0x232e8b=_0x537cc0[_0x11fd50(0xe4e)][_0x11fd50(0xfd7)](_0x537cc0['_windowLay'+'er']);_0x537cc0[_0x11fd50(0x1cb)](this[_0x11fd50(0x1f8)+'traitSprit'+'e'],_0x232e8b),this['_borderPor'+_0x11fd50(0x1506)+'e'][_0x11fd50(0x12af)]['x']=-0x3b*-0x95+0xd90+-0x2fe7+0.5,this[_0x11fd50(0x1f8)+_0x11fd50(0x1506)+'e'][_0x11fd50(0x12af)]['y']=0x1*0x2699+-0x817+-0x1*0x1e81;const _0x32d553=VisuMZ['BattleCore']['Settings']['BattleLayo'+'ut'][_0x11fd50(0x11ad)+_0x11fd50(0x3fb)+_0x11fd50(0xda6)];this[_0x11fd50(0x1f8)+_0x11fd50(0x1506)+'e'][_0x11fd50(0xfcb)]['x']=_0x32d553,this[_0x11fd50(0x1f8)+_0x11fd50(0x1506)+'e']['scale']['y']=_0x32d553,this['_borderPor'+_0x11fd50(0x1506)+'e']['y']=_0x2dee1a[_0x11fd50(0xf81)](this['y'],this[_0x11fd50(0x1594)]),this[_0x11fd50(0x1f8)+_0x11fd50(0x489)+_0x11fd50(0x1485)]=-0x24d4+-0x26a8+0x4b7c*0x1;},Window_BattleStatus['prototype'][_0x4258d1(0xb94)+_0x4258d1(0xdb3)+_0x4258d1(0x64c)]=function(){const _0x27eb62=_0x4258d1;return BattleManager[_0x27eb62(0x60e)+'g']();},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x9c2)+_0x4258d1(0x83b)]=function(){const _0x52982c=_0x4258d1,_0x1cd824={'cDxYV':function(_0x1919c0,_0x3011b2){return _0x1919c0===_0x3011b2;},'SzxfK':function(_0x54d943,_0x19fffb){return _0x54d943===_0x19fffb;},'TGPzU':function(_0xa6b56b,_0x23b877){return _0xa6b56b===_0x23b877;}};this[_0x52982c(0x1f8)+_0x52982c(0x1506)+'e'][_0x52982c(0x13af)]=this[_0x52982c(0xb94)+'rtraitSpri'+_0x52982c(0x64c)]();const _0x499d36=BattleManager[_0x52982c(0xd12)](),_0x4ca96b=_0x499d36?_0x499d36[_0x52982c(0x4b2)+_0x52982c(0x1124)+'ename']()||'':'';if(_0x1cd824['cDxYV'](_0x499d36,this['_borderPor'+_0x52982c(0x1506)+'e']['actor'])&&_0x1cd824['SzxfK'](_0x4ca96b,this[_0x52982c(0x1f8)+_0x52982c(0x1506)+'e']['lastFilena'+'me']))return;this[_0x52982c(0x1f8)+_0x52982c(0x1506)+'e']['actor']=_0x499d36||this[_0x52982c(0x1f8)+'traitSprit'+'e']['actor'],this[_0x52982c(0x1f8)+_0x52982c(0x1506)+'e'][_0x52982c(0x402)+'me']=_0x4ca96b;if(!_0x499d36)return;else{if(_0x1cd824[_0x52982c(0x85e)](_0x4ca96b,'')){this[_0x52982c(0x1f8)+_0x52982c(0x1506)+'e'][_0x52982c(0x5dd)]=ImageManager['_emptyBitm'+'ap'],this['_borderPor'+_0x52982c(0x1506)+'e'][_0x52982c(0x402)+'me']='';return;}else{const _0x205c62=ImageManager[_0x52982c(0xf2e)+'e'](_0x4ca96b);this[_0x52982c(0x1f8)+_0x52982c(0x1506)+'e'][_0x52982c(0x4c8)]=-0x20f7+-0x1754+0x1*0x384b,_0x205c62[_0x52982c(0xf75)+_0x52982c(0x632)](this[_0x52982c(0xb8f)+_0x52982c(0x83b)]['bind'](this,_0x205c62));}}},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0xb8f)+_0x4258d1(0x83b)]=function(_0x762de5){const _0x5e2496=_0x4258d1,_0x5333f4={'gPQAq':function(_0x5a009a,_0x2dfeb1){return _0x5a009a/_0x2dfeb1;},'JoSAK':function(_0x520f96,_0x121d59){return _0x520f96*_0x121d59;},'HjzVM':function(_0x51c280,_0x1f9102){return _0x51c280+_0x1f9102;}};this[_0x5e2496(0x1f8)+'traitDurat'+_0x5e2496(0x1485)]=-0xb7f+-0x80*-0x34+-0x3*0x4cf,this[_0x5e2496(0x1f8)+_0x5e2496(0x1506)+'e'][_0x5e2496(0x5dd)]=_0x762de5;SceneManager[_0x5e2496(0x14b3)][_0x5e2496(0xdfb)+'utMode']()?(this[_0x5e2496(0x1f8)+_0x5e2496(0x1506)+'e']['x']=-0x9cf*-0x1+-0xd6f+0x3a0,this[_0x5e2496(0x1f8)+_0x5e2496(0xe97)+'tX']=Math[_0x5e2496(0x438)](_0x5333f4[_0x5e2496(0xbef)](_0x762de5['width'],-0x1968+0x3f8+-0x225*-0xa))):(this[_0x5e2496(0x1f8)+'traitSprit'+'e']['x']=this['width'],this[_0x5e2496(0x1f8)+'traitTarge'+'tX']=_0x5333f4['gPQAq'](_0x5333f4[_0x5e2496(0xbe7)](this[_0x5e2496(0xc2a)],0x8*-0x1e7+-0x985+-0xc6*-0x20),0x1d3*0x4+0x41f*-0x6+0x1172));this[_0x5e2496(0x1f8)+_0x5e2496(0x1506)+'e'][_0x5e2496(0x4c8)]=-0x1*-0x26a7+-0xaf2+0x1*-0x1bb5,this[_0x5e2496(0x1f8)+'traitSprit'+'e']['y']=_0x5333f4['HjzVM'](this['y'],this[_0x5e2496(0x1594)]);const _0x24b67a=BattleManager[_0x5e2496(0xd12)]();_0x24b67a&&(this['_borderPor'+_0x5e2496(0xe97)+'tX']+=_0x24b67a[_0x5e2496(0x4b2)+'ortraitOff'+_0x5e2496(0xc00)](),this[_0x5e2496(0x1f8)+_0x5e2496(0x1506)+'e']['y']+=_0x24b67a['getBattleP'+_0x5e2496(0x1411)+_0x5e2496(0x101c)]());},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x147b)+_0x4258d1(0x118a)]=function(){const _0x528216=_0x4258d1,_0x20fc10={'oMnKx':function(_0x2202f2,_0x40506b){return _0x2202f2>_0x40506b;},'ctBbP':function(_0x22e31a,_0x202321){return _0x22e31a/_0x202321;},'ikSrH':function(_0x9acce6,_0x2d9c17){return _0x9acce6+_0x2d9c17;},'MIWzd':function(_0x22ebc8,_0x338d06){return _0x22ebc8*_0x338d06;},'gsuNl':function(_0x29eeab,_0x1ed839){return _0x29eeab-_0x1ed839;},'wgXPa':function(_0x190b67,_0x48c0b2){return _0x190b67/_0x48c0b2;},'YtJJn':function(_0x2b2743,_0x1b5954){return _0x2b2743*_0x1b5954;}};if(_0x20fc10[_0x528216(0x2fd)](this['_borderPor'+_0x528216(0x489)+'ion'],0x173c+0x1*0x1897+-0x2fd3)){const _0x13dfe7=this[_0x528216(0x1f8)+_0x528216(0x489)+_0x528216(0x1485)],_0x30da4d=this[_0x528216(0x1f8)+_0x528216(0x1506)+'e'];_0x30da4d['x']=_0x20fc10[_0x528216(0x73e)](_0x20fc10['ikSrH'](_0x20fc10[_0x528216(0x1221)](_0x30da4d['x'],_0x20fc10['gsuNl'](_0x13dfe7,-0x235*0x11+0x14*-0xc5+-0xd*-0x412)),this[_0x528216(0x1f8)+'traitTarge'+'tX']),_0x13dfe7),_0x30da4d[_0x528216(0x4c8)]=_0x20fc10[_0x528216(0x2a3)](_0x20fc10[_0x528216(0xd9e)](_0x20fc10[_0x528216(0x1068)](_0x30da4d['opacity'],_0x20fc10[_0x528216(0x76a)](_0x13dfe7,-0xac4+0x512+0x5b3)),0x55c+-0x6a4+0x247),_0x13dfe7),this[_0x528216(0x1f8)+_0x528216(0x489)+_0x528216(0x1485)]--;}},Window_BattleStatus['prototype']['updateEffe'+_0x4258d1(0x1699)+'rs']=function(){const _0x27cc5f=_0x4258d1;return;this[_0x27cc5f(0x1015)+_0x27cc5f(0xd3d)]&&(this[_0x27cc5f(0x1015)+_0x27cc5f(0xd3d)]['x']=this['x'],this[_0x27cc5f(0x1015)+_0x27cc5f(0xd3d)]['y']=this['y']),this[_0x27cc5f(0xf87)+_0x27cc5f(0x1579)]&&(this[_0x27cc5f(0xf87)+_0x27cc5f(0x1579)]['x']=this['x'],this['_damageCon'+'tainer']['y']=this['y']);},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x774)+_0x4258d1(0x798)+_0x4258d1(0x11d5)]=function(){const _0x590ef7=_0x4258d1,_0x5b4144=VisuMZ[_0x590ef7(0x337)][_0x590ef7(0x424)][_0x590ef7(0xdeb)+'ut'];if(_0x5b4144[_0x590ef7(0xb9d)+_0x590ef7(0x2f5)+_0x590ef7(0x5f9)]){const _0x8baedd=new Sprite();_0x8baedd['bitmap']=ImageManager[_0x590ef7(0xc99)](_0x5b4144[_0x590ef7(0xb9d)+_0x590ef7(0x2f5)+_0x590ef7(0x5f9)]),_0x8baedd['x']=_0x5b4144['StatusWind'+'owAttachme'+_0x590ef7(0x15d5)+_0x590ef7(0x15fb)]||-0x2*-0x239+-0x1c41*-0x1+0x20b3*-0x1,_0x8baedd['y']=_0x5b4144[_0x590ef7(0xb9d)+_0x590ef7(0x2f5)+_0x590ef7(0x15d5)+_0x590ef7(0xa1a)]||0x162d+-0x7fa+-0xe33,this['addChildTo'+_0x590ef7(0xaee)](_0x8baedd),this[_0x590ef7(0x145b)+'hmentSprit'+'e']=_0x8baedd;}if(_0x5b4144[_0x590ef7(0xb9d)+_0x590ef7(0x2f5)+_0x590ef7(0x793)]){const _0x1bc0a1=new Sprite();_0x1bc0a1[_0x590ef7(0x5dd)]=ImageManager[_0x590ef7(0xc99)](_0x5b4144['StatusWind'+_0x590ef7(0x2f5)+_0x590ef7(0x793)]),_0x1bc0a1['x']=_0x5b4144[_0x590ef7(0xb9d)+_0x590ef7(0x2f5)+_0x590ef7(0x588)+_0x590ef7(0xc00)]||-0x3*-0x6b1+-0x781+-0xc92,_0x1bc0a1['y']=_0x5b4144[_0x590ef7(0xb9d)+_0x590ef7(0x2f5)+_0x590ef7(0x588)+_0x590ef7(0x101c)]||0xf0*-0x13+0x479*0x1+0xd57,this[_0x590ef7(0xd0b)](_0x1bc0a1),this['_frontAtta'+_0x590ef7(0x798)+'te']=_0x1bc0a1;}},Window_BattleStatus[_0x4258d1(0xf38)][_0x4258d1(0x3d8)+_0x4258d1(0x798)+_0x4258d1(0x11d5)]=function(){const _0x3c5804=_0x4258d1;this[_0x3c5804(0x7e1)+'chmentSpri'+'te']&&this[_0x3c5804(0xd0b)](this[_0x3c5804(0x7e1)+'chmentSpri'+'te']),this[_0x3c5804(0x145b)+'hmentSprit'+'e']&&this[_0x3c5804(0x1593)+_0x3c5804(0xaee)](this[_0x3c5804(0x145b)+_0x3c5804(0x1293)+'e']);},Window_BattleActor['prototype'][_0x4258d1(0x125c)+_0x4258d1(0x222)]=function(){const _0x191c94=_0x4258d1;return this[_0x191c94(0xf62)+_0x191c94(0xf14)+'id']();},Window_BattleActor['prototype'][_0x4258d1(0xf62)+_0x4258d1(0xf14)+'id']=function(){const _0x5d1542=_0x4258d1,_0x5a2ffd={'LmEPI':function(_0x1e85e5,_0x24efea){return _0x1e85e5===_0x24efea;}},_0x5d07ea=BattleManager['inputtingA'+_0x5d1542(0x333)]();if(!_0x5d07ea)return!![];if(!_0x5d07ea['item']())return!![];const _0x94af91=this[_0x5d1542(0xd12)](this[_0x5d1542(0x2e3)]()),_0x3cb6ea=_0x5d07ea[_0x5d1542(0x780)]()[_0x5d1542(0x278)];if(_0x5d07ea['isForNotUs'+'er']()){if(_0x5a2ffd[_0x5d1542(0x1089)](_0x94af91,BattleManager['actor']()))return![];}if(_0x5d07ea[_0x5d1542(0x162e)+_0x5d1542(0x13bf)]()){if(!_0x94af91[_0x5d1542(0xfce)]())return![];}if(_0x5d07ea[_0x5d1542(0x4af)+_0x5d1542(0xe0f)]()){if(!_0x94af91[_0x5d1542(0x266)]())return![];}return!![];},Window_BattleActor[_0x4258d1(0xf38)][_0x4258d1(0x8ca)+_0x4258d1(0xdbd)]=function(_0xec76e8){this['_enemyWind'+'owMode']=_0xec76e8;},VisuMZ['BattleCore']['Window_Bat'+_0x4258d1(0x157d)+_0x4258d1(0x495)+'h']=Window_BattleActor['prototype']['processTou'+'ch'],Window_BattleActor[_0x4258d1(0xf38)][_0x4258d1(0x1611)+'ch']=function(){const _0x39c175=_0x4258d1;Window_BattleStatus[_0x39c175(0xf38)][_0x39c175(0x1611)+'ch'][_0x39c175(0xb14)](this),this[_0x39c175(0x1684)+_0x39c175(0x4e1)]?this[_0x39c175(0xe3d)+_0x39c175(0x139a)+_0x39c175(0xd16)+'e']():VisuMZ[_0x39c175(0x337)]['Window_Bat'+_0x39c175(0x157d)+_0x39c175(0x495)+'h'][_0x39c175(0xb14)](this);},Window_BattleActor['prototype'][_0x4258d1(0xe3d)+_0x4258d1(0x139a)+_0x4258d1(0xd16)+'e']=function(){const _0x389b6d=_0x4258d1,_0x1de708={'yyTGY':function(_0xc0a6bb,_0x412c1a){return _0xc0a6bb>=_0x412c1a;}},_0x3bd035=SceneManager['_scene']['_enemyWind'+'ow'];if(!_0x3bd035)return;this['_doubleTou'+'ch']=![];const _0x4da9fc=this[_0x389b6d(0x4fb)]();if(_0x1de708['yyTGY'](_0x4da9fc,0x27b+-0xc9a*-0x1+-0xf15)){this['select'](_0x4da9fc);if(TouchInput['isClicked']()){const _0x27a536=$gameParty['members']()[_0x4da9fc],_0x4fd9b8=_0x3bd035[_0x389b6d(0x14cb)][_0x389b6d(0xfd7)](_0x27a536);_0x1de708[_0x389b6d(0x12ba)](_0x4fd9b8,-0x5b2+-0x8f8+-0xeaa*-0x1)&&(_0x3bd035[_0x389b6d(0x14b0)](_0x4fd9b8),_0x3bd035[_0x389b6d(0xb25)]());}}},Window_BattleActor['prototype']['_makeCurso'+_0x4258d1(0x2ce)]=function(){const _0x3ab877=_0x4258d1;this[_0x3ab877(0x1684)+_0x3ab877(0x4e1)]&&(this[_0x3ab877(0x998)+_0x3ab877(0x451)]++,this[_0x3ab877(0xc19)]=!![]);const _0x38dc59=Window_BattleStatus[_0x3ab877(0xf38)][_0x3ab877(0x4a5)+_0x3ab877(0x2ce)][_0x3ab877(0xb14)](this);return this[_0x3ab877(0x1684)+'owMode']&&(this[_0x3ab877(0xc19)]=![]),_0x38dc59;},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+_0x4258d1(0xbea)+'how']=Window_BattleActor[_0x4258d1(0xf38)][_0x4258d1(0x361)],Window_BattleActor[_0x4258d1(0xf38)][_0x4258d1(0x361)]=function(){const _0x271a67=_0x4258d1,_0x4bfc35={'fIDXF':function(_0x18340b,_0x58cab3){return _0x18340b>_0x58cab3;},'LEcSv':_0x271a67(0x1643)};VisuMZ[_0x271a67(0x337)]['Window_Bat'+'tleActor_s'+_0x271a67(0x13d7)][_0x271a67(0xb14)](this);const _0x92c877=BattleManager['inputtingA'+_0x271a67(0x333)]();if(_0x92c877){const _0x2dd483=$gameParty[_0x271a67(0xe7e)+'rs']();_0x92c877[_0x271a67(0x395)+_0x271a67(0x113b)+_0x271a67(0x5c8)]()&&_0x4bfc35['fIDXF'](_0x2dd483[_0x271a67(0x1645)],0x1996+-0x9d*-0x22+-0x2e6f)&&this[_0x271a67(0xce6)](_0x4bfc35[_0x271a67(0xe16)],this[_0x271a67(0x87d)+'ctors'][_0x271a67(0x144f)](this));}},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+_0x4258d1(0xd9d)+'ide']=Window_BattleActor[_0x4258d1(0xf38)]['hide'],Window_BattleActor[_0x4258d1(0xf38)][_0x4258d1(0x514)]=function(){const _0x16c4f6=_0x4258d1;VisuMZ[_0x16c4f6(0x337)]['Window_Bat'+_0x16c4f6(0xd9d)+_0x16c4f6(0x154c)][_0x16c4f6(0xb14)](this),delete this['_handlers'][_0x16c4f6(0x9c4)],delete this[_0x16c4f6(0x1447)]['pagedown'];},Window_BattleActor[_0x4258d1(0xf38)][_0x4258d1(0x87d)+_0x4258d1(0x2b1)]=function(){const _0x3dbd54=_0x4258d1,_0x5710ed={'CyDic':_0x3dbd54(0xe69)},_0x1061c4=BattleManager[_0x3dbd54(0x1420)+_0x3dbd54(0x333)]();if(_0x1061c4)_0x1061c4['setTargetB'+_0x3dbd54(0x8d3)](_0x5710ed['CyDic']);this[_0x3dbd54(0xb25)]();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+'tleEnemy_i'+_0x4258d1(0x108b)]=Window_BattleEnemy[_0x4258d1(0xf38)][_0x4258d1(0xca3)],Window_BattleEnemy[_0x4258d1(0xf38)][_0x4258d1(0xca3)]=function(_0x198b07){const _0x1d6186=_0x4258d1,_0x3ce55d={'AWiXK':function(_0x1afc00,_0x5dfcab){return _0x1afc00<_0x5dfcab;},'vYNRQ':_0x1d6186(0x10cf)+_0x1d6186(0x5f2)+_0x1d6186(0x1116)+'eds\x20to\x20be\x20'+'updated\x20','SPxVN':_0x1d6186(0x456)+'or\x20Taunt\x20a'+_0x1d6186(0xe2c)+'\x20features\x20'+'to\x20work\x20','WoNAK':'with\x20lates'+_0x1d6186(0x30f)+_0x1d6186(0xe67)+_0x1d6186(0x5e8)+_0x1d6186(0x308),'OqiNc':function(_0x371eec,_0x2d2194){return _0x371eec(_0x2d2194);}};this[_0x1d6186(0x1093)]=null,VisuMZ[_0x1d6186(0x337)][_0x1d6186(0x14a4)+'tleEnemy_i'+'nitialize'][_0x1d6186(0xb14)](this,_0x198b07);if(Imported[_0x1d6186(0x10cf)+_0x1d6186(0x5f2)+'lSystem']){if(_0x3ce55d[_0x1d6186(0xc33)](VisuMZ['AggroContr'+_0x1d6186(0xa95)]['version'],0x3*0xca+0x2620+0xd7f*-0x3+0.1200000000000001)){let _0x156be8='';_0x156be8+=_0x3ce55d['vYNRQ'],_0x156be8+=_0x3ce55d['SPxVN'],_0x156be8+=_0x3ce55d['WoNAK'],_0x3ce55d[_0x1d6186(0x823)](alert,_0x156be8),SceneManager[_0x1d6186(0xfb6)]();}}},Window_BattleEnemy[_0x4258d1(0xf38)][_0x4258d1(0x1281)]=function(){const _0x2db60c=_0x4258d1;return this[_0x2db60c(0x700)]();},VisuMZ['BattleCore']['Window_Bat'+_0x4258d1(0xd7e)+'how']=Window_BattleEnemy['prototype'][_0x4258d1(0x361)],Window_BattleEnemy[_0x4258d1(0xf38)]['show']=function(){const _0x5386ed=_0x4258d1,_0xf128cc={'bdsyM':function(_0x44f116,_0x2f9837){return _0x44f116*_0x2f9837;}};VisuMZ[_0x5386ed(0x337)][_0x5386ed(0x14a4)+'tleEnemy_s'+_0x5386ed(0x13d7)][_0x5386ed(0xb14)](this),this['y']=_0xf128cc[_0x5386ed(0x3b2)](Graphics[_0x5386ed(0x1594)],-0x2c*-0xa7+-0x1*0x22a4+0x5fa),this[_0x5386ed(0x113e)+_0x5386ed(0x4f2)+_0x5386ed(0xf90)+_0x5386ed(0x14e5)]()&&this[_0x5386ed(0x109b)+_0x5386ed(0x816)+'w']();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+_0x4258d1(0x6f3)+_0x4258d1(0x154c)]=Window_BattleEnemy[_0x4258d1(0xf38)]['hide'],Window_BattleEnemy[_0x4258d1(0xf38)][_0x4258d1(0x514)]=function(){const _0x1d3faa=_0x4258d1;VisuMZ[_0x1d3faa(0x337)][_0x1d3faa(0x14a4)+_0x1d3faa(0x6f3)+_0x1d3faa(0x154c)][_0x1d3faa(0xb14)](this),$gameParty[_0x1d3faa(0x14b0)](null),delete this[_0x1d3faa(0x1447)][_0x1d3faa(0x9c4)],delete this[_0x1d3faa(0x1447)]['pagedown'];},Window_BattleEnemy[_0x4258d1(0xf38)][_0x4258d1(0xd05)+'ts']=function(){const _0x516354=_0x4258d1,_0x1d7558={'LHTgK':function(_0x5aa0cf,_0x38fd0f){return _0x5aa0cf>_0x38fd0f;},'QZycb':_0x516354(0x9c4),'hwOSz':_0x516354(0x1643)};let _0x3d6c80=$gameTroop[_0x516354(0xe7e)+'rs']();const _0x22b6b0=BattleManager[_0x516354(0x1420)+'ction']();if(_0x22b6b0){_0x22b6b0['canSingleO'+_0x516354(0x113b)+_0x516354(0x5c8)]()&&_0x1d7558[_0x516354(0x1176)](_0x3d6c80['length'],-0x2f*-0x97+0x1*0x177b+-0x3333)&&this[_0x516354(0xce6)](_0x1d7558[_0x516354(0x121a)],this[_0x516354(0x13a3)+_0x516354(0x1681)][_0x516354(0x144f)](this));if(_0x22b6b0[_0x516354(0x59c)+'e']()){const _0x328cd6=$gameParty[_0x516354(0xe7e)+'rs']();_0x3d6c80=_0x3d6c80[_0x516354(0x121f)](_0x328cd6),_0x22b6b0[_0x516354(0x395)+_0x516354(0x113b)+'elect']()&&_0x1d7558['LHTgK'](_0x328cd6['length'],0xbe1+-0x4*0x87b+0x160c)&&this[_0x516354(0xce6)](_0x1d7558[_0x516354(0x15ba)],this[_0x516354(0x87d)+_0x516354(0x2b1)]['bind'](this));}}return _0x3d6c80;},Window_BattleEnemy[_0x4258d1(0xf38)][_0x4258d1(0x164d)]=function(){const _0x45f9b1=_0x4258d1;this[_0x45f9b1(0x14cb)]=this[_0x45f9b1(0xd05)+'ts'](),this[_0x45f9b1(0x57e)+'s'](),Window_Selectable[_0x45f9b1(0xf38)]['refresh'][_0x45f9b1(0xb14)](this);},Window_BattleEnemy[_0x4258d1(0xf38)]['sortEnemie'+'s']=function(){const _0x114f23=_0x4258d1,_0x1ae8cc={'wFlVs':function(_0x58d563,_0x42b660){return _0x58d563!==_0x42b660;},'aFveE':function(_0x283eb1,_0x4a260d){return _0x283eb1-_0x4a260d;},'TOiui':function(_0x1d7da9,_0x1a1bee){return _0x1d7da9===_0x1a1bee;}};this['_enemies']['sort']((_0xffe7f6,_0x211611)=>{const _0x33e639=_0x30a3;if(_0x1ae8cc[_0x33e639(0x77f)](_0xffe7f6[_0x33e639(0x1580)](),_0x211611['isActor']())){if(_0xffe7f6[_0x33e639(0xaf5)]())return-(-0x537+0x17bc+0x1284*-0x1);if(_0x211611[_0x33e639(0xaf5)]())return-0x1dcb+-0x2465+0x4231;}if(_0xffe7f6[_0x33e639(0x1580)]()&&_0x211611[_0x33e639(0x1580)]())return _0x1ae8cc[_0x33e639(0x507)](_0xffe7f6['index'](),_0x211611[_0x33e639(0x2e3)]());return _0x1ae8cc[_0x33e639(0xe2a)](_0xffe7f6[_0x33e639(0xc06)]()[_0x33e639(0x921)],_0x211611['battler']()[_0x33e639(0x921)])?_0x1ae8cc[_0x33e639(0x507)](_0xffe7f6['battler']()['_baseY'],_0x211611[_0x33e639(0xc06)]()['_baseY']):_0x1ae8cc[_0x33e639(0x507)](_0xffe7f6[_0x33e639(0xc06)]()['_baseX'],_0x211611[_0x33e639(0xc06)]()[_0x33e639(0x921)]);}),SceneManager[_0x114f23(0x9ed)+_0x114f23(0x145d)]()&&this[_0x114f23(0x14cb)]['reverse']();},Window_BattleEnemy[_0x4258d1(0xf38)][_0x4258d1(0x31a)]=function(){const _0x4403b0=_0x4258d1,_0x245dda=VisuMZ[_0x4403b0(0x337)][_0x4403b0(0x424)]['Enemy'];_0x245dda[_0x4403b0(0x13c1)+'ed']?this['autoSelect'+_0x4403b0(0x13c1)+'ed']():this[_0x4403b0(0x31a)+_0x4403b0(0x13f5)]();},Window_BattleEnemy[_0x4258d1(0xf38)]['autoSelect'+_0x4258d1(0x13c1)+'ed']=function(){const _0x41cc31=_0x4258d1,_0x538bb7=BattleManager['inputtingA'+_0x41cc31(0x333)]();if(_0x538bb7&&_0x538bb7[_0x41cc31(0x59c)+'e']()){if(_0x538bb7[_0x41cc31(0x59c)+_0x41cc31(0x25f)+_0x41cc31(0xe76)]()){if(this[_0x41cc31(0xcff)]&&this[_0x41cc31(0x14cb)][_0x41cc31(0x163f)](this['_lastActor'])){const _0x4da400=this[_0x41cc31(0x14cb)]['indexOf'](this['_lastActor']);return this[_0x41cc31(0x15fd)+'t'](_0x4da400);}else return this[_0x41cc31(0x31a)+_0x41cc31(0x13f5)]();}}if(this[_0x41cc31(0x1093)]&&this[_0x41cc31(0x14cb)][_0x41cc31(0x163f)](this[_0x41cc31(0x1093)])){const _0xd83e13=this[_0x41cc31(0x14cb)]['indexOf'](this[_0x41cc31(0x1093)]);this[_0x41cc31(0x15fd)+'t'](_0xd83e13);}else this[_0x41cc31(0x31a)+'Priority']();},Window_BattleEnemy[_0x4258d1(0xf38)][_0x4258d1(0x31a)+_0x4258d1(0x13f5)]=function(){const _0x19c801=_0x4258d1,_0x1a978c={'EIgvx':function(_0x1031fd,_0x27747c){return _0x1031fd-_0x27747c;}},_0x4ba243=BattleManager[_0x19c801(0x1420)+_0x19c801(0x333)]();if(_0x4ba243&&_0x4ba243[_0x19c801(0x59c)+'e']()){const _0x805ba8=$gameParty[_0x19c801(0xe7e)+'rs']()[-0x15a*-0x11+0xfef*-0x1+-0x259*0x3];let _0x11214c=this['_enemies'][_0x19c801(0xfd7)](_0x805ba8);const _0x2287dd=_0x4ba243[_0x19c801(0x780)]()[_0x19c801(0x1114)];if(_0x2287dd[_0x19c801(0x79c)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this['forceSelec'+'t'](_0x11214c);return;}else{if(_0x2287dd[_0x19c801(0x79c)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this['forceSelec'+'t'](_0x1a978c[_0x19c801(0x15a9)](_0x11214c,0xb65+0xf87+-0x1aeb*0x1));return;}}}const _0x4d9620=VisuMZ[_0x19c801(0x337)][_0x19c801(0x424)][_0x19c801(0xcce)];let _0x30fa0a=![];$gameSystem[_0x19c801(0x8df)]()?_0x30fa0a=_0x4d9620['SideviewSe'+'lect']:_0x30fa0a=_0x4d9620[_0x19c801(0x258)+_0x19c801(0x5c8)],this[_0x19c801(0x15fd)+'t'](_0x30fa0a?_0x1a978c[_0x19c801(0x15a9)](this['maxItems'](),0x17d1+-0x10bd*-0x1+-0x288d):-0x1*0x17c7+0x1ff3+-0x82c);},Window_BattleEnemy['prototype'][_0x4258d1(0x10a5)+_0x4258d1(0xab7)]=function(){const _0x345883=_0x4258d1;Window_Selectable[_0x345883(0xf38)][_0x345883(0x10a5)+'ler']['call'](this);if(this[_0x345883(0x2d1)]()[_0x345883(0xaf5)]())this[_0x345883(0x1093)]=this[_0x345883(0x2d1)]();if(this[_0x345883(0x2d1)]()[_0x345883(0x1580)]())this['_lastActor']=this['enemy']();},Window_BattleEnemy[_0x4258d1(0xf38)][_0x4258d1(0x14b0)]=function(_0x7ae9a3){const _0x4dec85=_0x4258d1;Window_Selectable[_0x4dec85(0xf38)][_0x4dec85(0x14b0)][_0x4dec85(0xb14)](this,_0x7ae9a3),$gameTroop[_0x4dec85(0x14b0)](this[_0x4dec85(0x2d1)]()),$gameParty[_0x4dec85(0x14b0)](this[_0x4dec85(0x2d1)]());if(!this[_0x4dec85(0x2d1)]())return;if(this[_0x4dec85(0x113e)+'tFrontview'+_0x4dec85(0xf90)+_0x4dec85(0x14e5)]()){const _0x3c8727=SceneManager[_0x4dec85(0x14b3)][_0x4dec85(0x977)+'ow'];this[_0x4dec85(0x2d1)]()[_0x4dec85(0x1580)]()?_0x3c8727['select'](this[_0x4dec85(0x2d1)]()[_0x4dec85(0x2e3)]()):_0x3c8727[_0x4dec85(0x100a)]();}},Window_BattleEnemy[_0x4258d1(0xf38)][_0x4258d1(0x113e)+_0x4258d1(0x4f2)+'ActorCondi'+_0x4258d1(0x14e5)]=function(){const _0x229c2f=_0x4258d1,_0x597033={'aHXOG':_0x229c2f(0x1601),'eIDQO':_0x229c2f(0x7fe),'BYGpf':_0x229c2f(0x14b6),'JZpEW':_0x229c2f(0x83c)};if(!this[_0x229c2f(0x13af)])return![];if($gameSystem[_0x229c2f(0x8df)]())return![];const _0x5e1d11=SceneManager[_0x229c2f(0x14b3)]['battleLayo'+_0x229c2f(0x1100)](),_0x5c4a1a=[_0x597033['aHXOG'],_0x597033[_0x229c2f(0x890)],'xp',_0x597033[_0x229c2f(0x1112)],_0x597033[_0x229c2f(0x4b8)]];return _0x5c4a1a[_0x229c2f(0x163f)](_0x5e1d11);},Window_BattleEnemy[_0x4258d1(0xf38)][_0x4258d1(0x109b)+_0x4258d1(0x816)+'w']=function(){const _0x5eafd9=_0x4258d1,_0x108a13={'oHBMf':_0x5eafd9(0x14b6),'NCuBY':'border'},_0x40743e=SceneManager[_0x5eafd9(0x14b3)]['_actorWind'+'ow'];_0x40743e['show'](),_0x40743e[_0x5eafd9(0x8ca)+_0x5eafd9(0xdbd)](!![]),_0x40743e['refresh'](),_0x40743e[_0x5eafd9(0x100a)]();const _0xcba8d9=SceneManager[_0x5eafd9(0x14b3)][_0x5eafd9(0x6d1)+_0x5eafd9(0x1100)](),_0x23da4a=['xp',_0x108a13[_0x5eafd9(0x9ea)],_0x108a13[_0x5eafd9(0xdf0)]];if(_0x23da4a['includes'](_0xcba8d9)){const _0x14df1b=SceneManager[_0x5eafd9(0x14b3)][_0x5eafd9(0x5c1)+_0x5eafd9(0xfdb)];_0x14df1b[_0x5eafd9(0xfcb)]['y']=0xf57+-0x17*-0xe9+-0x2446*0x1;}},Window_BattleEnemy[_0x4258d1(0xf38)]['closeBattl'+_0x4258d1(0x14a3)+'ow']=function(){const _0x472996=_0x4258d1,_0x4ebb4f=SceneManager[_0x472996(0x14b3)][_0x472996(0x977)+'ow'];_0x4ebb4f[_0x472996(0x514)](),_0x4ebb4f[_0x472996(0x8ca)+'ndowMode'](![]),_0x4ebb4f[_0x472996(0x100a)]();const _0x4c3671=SceneManager['_scene'][_0x472996(0x5c1)+'dow'];_0x4c3671[_0x472996(0xfcb)]['y']=-0xac1*-0x3+-0x16a*-0xb+-0x2fd0;},Window_BattleEnemy[_0x4258d1(0xf38)]['selectAllE'+_0x4258d1(0x1681)]=function(){const _0x469f06=_0x4258d1,_0x1088fb={'VvhTj':_0x469f06(0x7ce)+'s'},_0x575095=BattleManager[_0x469f06(0x1420)+_0x469f06(0x333)]();if(_0x575095)_0x575095['setTargetB'+_0x469f06(0x8d3)](_0x1088fb[_0x469f06(0x12f1)]);this[_0x469f06(0xb25)]();},Window_BattleEnemy[_0x4258d1(0xf38)][_0x4258d1(0x87d)+_0x4258d1(0x2b1)]=function(){const _0x16f34e=_0x4258d1,_0x5875d5={'yrFUp':_0x16f34e(0xe69)},_0x2f6443=BattleManager[_0x16f34e(0x1420)+'ction']();if(_0x2f6443)_0x2f6443['setTargetB'+'attlerKey'](_0x5875d5['yrFUp']);this[_0x16f34e(0xb25)]();},Window_BattleEnemy['prototype'][_0x4258d1(0x125c)+'temEnabled']=function(){const _0x2fb705=_0x4258d1;return this[_0x2fb705(0xf62)+'lectionVal'+'id']();},Window_BattleEnemy[_0x4258d1(0xf38)][_0x4258d1(0xf62)+'lectionVal'+'id']=function(){const _0xeb6bd2=_0x4258d1,_0x2ec134={'RNIhF':function(_0x5913fe,_0x1b2cac){return _0x5913fe===_0x1b2cac;}},_0x45239a=BattleManager['inputtingA'+_0xeb6bd2(0x333)]();if(!_0x45239a)return!![];if(!_0x45239a[_0xeb6bd2(0x780)]())return!![];const _0x16b1d8=this['enemy'](),_0x37d67d=_0x45239a[_0xeb6bd2(0x780)]()[_0xeb6bd2(0x278)];if(_0x45239a[_0xeb6bd2(0xb88)+'er']()){if(_0x2ec134[_0xeb6bd2(0x3e3)](_0x16b1d8,BattleManager[_0xeb6bd2(0xd12)]()))return![];}return!![];},Window_BattleItem[_0x4258d1(0xf38)]['includes']=function(_0x31dca7){const _0x52c48f=_0x4258d1,_0x258523={'aGkXb':function(_0x3818e5,_0x2334b9){return _0x3818e5===_0x2334b9;},'gfgoe':function(_0x360b02,_0x45ff62){return _0x360b02===_0x45ff62;}};if(!_0x31dca7)return![];return _0x258523['aGkXb'](_0x31dca7['occasion'],-0x16f+0x1*-0x1835+0x19a4)||_0x258523[_0x52c48f(0xa87)](_0x31dca7['occasion'],0x1ef3+-0x8cb*-0x2+-0x3088);};function Window_AutoBattleCancel(){const _0x3e758f=_0x4258d1;this[_0x3e758f(0xca3)](...arguments);}Window_AutoBattleCancel[_0x4258d1(0xf38)]=Object[_0x4258d1(0x100d)](Window_Base[_0x4258d1(0xf38)]),Window_AutoBattleCancel[_0x4258d1(0xf38)][_0x4258d1(0xcab)+'r']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x4258d1(0xf38)][_0x4258d1(0xca3)]=function(_0x155003){const _0x1d56bc=_0x4258d1;Window_Base['prototype'][_0x1d56bc(0xca3)][_0x1d56bc(0xb14)](this,_0x155003),this['setBackgro'+_0x1d56bc(0x107f)](this[_0x1d56bc(0x309)]()),this['refresh']();},Window_AutoBattleCancel['prototype'][_0x4258d1(0x309)]=function(){const _0x476ae7=_0x4258d1;return VisuMZ[_0x476ae7(0x337)][_0x476ae7(0x424)][_0x476ae7(0xe46)][_0x476ae7(0xe46)+_0x476ae7(0xbbf)];},Window_AutoBattleCancel[_0x4258d1(0xf38)]['refresh']=function(){const _0x2faf9f=_0x4258d1,_0x336082={'TSokB':function(_0x194558,_0x3713ea){return _0x194558/_0x3713ea;},'vooli':function(_0x332ffc,_0xa66762){return _0x332ffc-_0xa66762;}};this[_0x2faf9f(0x14d2)][_0x2faf9f(0x11c1)]();const _0x35d814=VisuMZ['BattleCore'][_0x2faf9f(0x424)][_0x2faf9f(0xe46)][_0x2faf9f(0xe46)+_0x2faf9f(0x5fc)],_0x49231a=_0x35d814[_0x2faf9f(0xf22)](this[_0x2faf9f(0x68c)+'xt'](),this[_0x2faf9f(0x571)+_0x2faf9f(0x11a3)]()),_0x4093ea=this[_0x2faf9f(0xe7c)](_0x49231a)[_0x2faf9f(0xc2a)],_0x4d2101=Math['floor'](_0x336082[_0x2faf9f(0x1250)](_0x336082['vooli'](this['innerWidth'],_0x4093ea),0xec5+-0x1c07+0xd44));this[_0x2faf9f(0xd7a)](_0x49231a,_0x4d2101,-0xd80+0x7*-0x122+0x156e,_0x4093ea);},Window_AutoBattleCancel[_0x4258d1(0xf38)][_0x4258d1(0x68c)+'xt']=function(){const _0x5a1193=_0x4258d1;return Imported[_0x5a1193(0x7d7)+_0x5a1193(0x138e)]?TextManager[_0x5a1193(0xcf1)+_0x5a1193(0xe8f)]('ok'):VisuMZ['BattleCore']['Settings']['AutoBattle'][_0x5a1193(0xe46)+'OK'];},Window_AutoBattleCancel[_0x4258d1(0xf38)][_0x4258d1(0x571)+_0x4258d1(0x11a3)]=function(){const _0xff789=_0x4258d1,_0x2f1982={'iVhUd':_0xff789(0x2bc)};return Imported[_0xff789(0x7d7)+'oreEngine']?TextManager[_0xff789(0xcf1)+_0xff789(0xe8f)](_0x2f1982[_0xff789(0x129a)]):VisuMZ[_0xff789(0x337)][_0xff789(0x424)][_0xff789(0xe46)][_0xff789(0xe46)+_0xff789(0xd5d)];},Window_AutoBattleCancel[_0x4258d1(0xf38)][_0x4258d1(0x164c)]=function(){const _0x32a918=_0x4258d1;Window_Base[_0x32a918(0xf38)][_0x32a918(0x164c)][_0x32a918(0xb14)](this),this['updateVisi'+'bility'](),this[_0x32a918(0x92f)+'el']();},Window_AutoBattleCancel[_0x4258d1(0xf38)]['updateVisi'+_0x4258d1(0x11ea)]=function(){const _0x5f096b=_0x4258d1;this[_0x5f096b(0x13af)]=BattleManager[_0x5f096b(0x139c)+'e'];},Window_AutoBattleCancel[_0x4258d1(0xf38)][_0x4258d1(0x92f)+'el']=function(){const _0x56e2a6=_0x4258d1,_0x57ffab={'FiPjQ':_0x56e2a6(0x2bc)};if(!BattleManager['_autoBattl'+'e'])return;(Input[_0x56e2a6(0xd59)+'d']('ok')||Input['isTriggere'+'d'](_0x57ffab[_0x56e2a6(0x1533)])||TouchInput['isClicked']()||TouchInput[_0x56e2a6(0x106f)+'d']())&&(SoundManager['playCancel'](),BattleManager[_0x56e2a6(0x139c)+'e']=![],Input[_0x56e2a6(0x11c1)](),TouchInput[_0x56e2a6(0x11c1)]());};function Window_EnemyName(){const _0x35f66e=_0x4258d1;this[_0x35f66e(0xca3)](...arguments);}Window_EnemyName['prototype']=Object[_0x4258d1(0x100d)](Window_StatusBase[_0x4258d1(0xf38)]),Window_EnemyName['prototype'][_0x4258d1(0xcab)+'r']=Window_EnemyName,Window_EnemyName['prototype'][_0x4258d1(0xca3)]=function(_0x46b96){const _0x441c74=_0x4258d1,_0x971ebb={'GPxFu':function(_0x448907,_0x5a2d63){return _0x448907*_0x5a2d63;}};this[_0x441c74(0x889)]=_0x46b96,this[_0x441c74(0x1322)]='';const _0x5cd8d9=new Rectangle(0x46c+0x75*-0x27+0xd67,-0x236*0xd+0x11a6+0xb18,Graphics['boxWidth'],_0x971ebb[_0x441c74(0x332)](this['lineHeight'](),0xd*0xc9+-0x7e4+-0x1f*0x13));Window_StatusBase[_0x441c74(0xf38)][_0x441c74(0xca3)]['call'](this,_0x5cd8d9),this[_0x441c74(0x8b4)+_0x441c74(0x107f)](-0x1239+-0x925*-0x1+0x916),this['contentsOp'+'acity']=0x13*0xbf+0x655*0x1+-0x1482;},Window_EnemyName[_0x4258d1(0xf38)]['updatePadd'+'ing']=function(){const _0x1a3cee=_0x4258d1;this[_0x1a3cee(0x7d1)]=-0x1224+-0x365*0x6+0x2682;},Window_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0x2d1)]=function(){const _0x26fe7d=_0x4258d1;return $gameTroop[_0x26fe7d(0xdb2)]()[this[_0x26fe7d(0x889)]];},Window_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0x164c)]=function(){const _0x2f8605=_0x4258d1,_0x5c8233={'gOaai':function(_0x48b1c5,_0x80aa7a){return _0x48b1c5!==_0x80aa7a;}};Window_StatusBase[_0x2f8605(0xf38)][_0x2f8605(0x164c)][_0x2f8605(0xb14)](this),this[_0x2f8605(0x2d1)]()&&_0x5c8233['gOaai'](this[_0x2f8605(0x2d1)]()['name'](),this[_0x2f8605(0x1322)])&&(this[_0x2f8605(0x1322)]=this[_0x2f8605(0x2d1)]()[_0x2f8605(0xd40)](),this['refresh']()),this[_0x2f8605(0x342)+'ity'](),this[_0x2f8605(0x4ee)+'tion']();},Window_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0x342)+_0x4258d1(0x100b)]=function(){const _0x534351=_0x4258d1,_0x141a08={'ZTLgw':function(_0x56f0f9,_0x402ab5){return _0x56f0f9>_0x402ab5;},'elntz':function(_0x1d0875,_0x1fdc01){return _0x1d0875>_0x1fdc01;},'RxUsC':function(_0x45aed0,_0x46b937){return _0x45aed0<_0x46b937;}};if(!this[_0x534351(0x2d1)]()){if(_0x141a08[_0x534351(0x1126)](this[_0x534351(0x6da)+_0x534351(0x10ba)],-0x243d+-0x1*-0x69b+0x1*0x1da2))this[_0x534351(0x6da)+_0x534351(0x10ba)]-=0x30b+-0x18d6+0x45f*0x5;}else{if(this[_0x534351(0x2d1)]()['isDead']()){if(_0x141a08[_0x534351(0x701)](this[_0x534351(0x6da)+'acity'],-0x6c5+0x1*0xa75+0x3b*-0x10))this[_0x534351(0x6da)+'acity']-=-0x256b+-0x1169+-0x493*-0xc;}else{if(SceneManager['_scene'][_0x534351(0x1684)+'ow']&&SceneManager[_0x534351(0x14b3)][_0x534351(0x1684)+'ow'][_0x534351(0xc19)]&&SceneManager[_0x534351(0x14b3)][_0x534351(0x1684)+'ow'][_0x534351(0x14cb)][_0x534351(0x163f)](this[_0x534351(0x2d1)]())){if(_0x141a08[_0x534351(0xf61)](this['contentsOp'+_0x534351(0x10ba)],0x5c*-0x4a+-0x2*-0x4db+0x11e1))this[_0x534351(0x6da)+_0x534351(0x10ba)]+=0x1c81+0x2a9*0x3+0x206*-0x12;}else _0x141a08[_0x534351(0x701)](this[_0x534351(0x6da)+'acity'],0x1c96+-0x210d+0x477)&&(this[_0x534351(0x6da)+_0x534351(0x10ba)]-=-0x1b30+0xbb3+-0x3*-0x52f);}}},Window_EnemyName['prototype'][_0x4258d1(0x4ee)+'tion']=function(){const _0x5be57a=_0x4258d1,_0x21dcba={'cadBk':function(_0x564999,_0x9cb7d9){return _0x564999-_0x9cb7d9;},'rHLQY':function(_0x202b6e,_0x40daf8){return _0x202b6e/_0x40daf8;},'krQrH':function(_0x25cc68,_0x923b57){return _0x25cc68-_0x923b57;},'hPCtG':function(_0x1d544f,_0x39dfae){return _0x1d544f*_0x39dfae;}};if(!this[_0x5be57a(0x2d1)]())return;SceneManager[_0x5be57a(0x9ed)+_0x5be57a(0x145d)]()?this['x']=_0x21dcba[_0x5be57a(0x77e)](Graphics[_0x5be57a(0x1309)],this[_0x5be57a(0x2d1)]()[_0x5be57a(0xc06)]()[_0x5be57a(0x921)]):this['x']=this['enemy']()[_0x5be57a(0xc06)]()[_0x5be57a(0x921)];this['x']-=Math[_0x5be57a(0xdea)](_0x21dcba[_0x5be57a(0x346)](this[_0x5be57a(0xc2a)],0xed3+-0x14*-0x11d+-0xb*0x35f)),this['y']=_0x21dcba['krQrH'](this[_0x5be57a(0x2d1)]()[_0x5be57a(0xc06)]()[_0x5be57a(0x1085)],Math[_0x5be57a(0xdea)](_0x21dcba[_0x5be57a(0x1157)](this['lineHeight'](),0x10*0x128+-0x269+0x8e*-0x1d+0.5)));const _0x40e436=VisuMZ[_0x5be57a(0x337)][_0x5be57a(0x424)]['Enemy'];this['x']+=_0x40e436[_0x5be57a(0x148c)+'X']||0x1*-0x977+-0x3ec+0xd63,this['y']+=_0x40e436['NameOffset'+'Y']||0x1cfc+-0x2527*0x1+0x82b;},Window_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0x11fa)+'ettings']=function(){const _0x1b63c2=_0x4258d1;Window_Base[_0x1b63c2(0xf38)][_0x1b63c2(0x11fa)+_0x1b63c2(0x5f7)][_0x1b63c2(0xb14)](this),this[_0x1b63c2(0x14d2)]['fontSize']=VisuMZ[_0x1b63c2(0x337)]['Settings'][_0x1b63c2(0xcce)][_0x1b63c2(0x10e6)+'ze'];},Window_EnemyName[_0x4258d1(0xf38)][_0x4258d1(0x164d)]=function(){const _0x5d2a38=_0x4258d1;Window_StatusBase['prototype']['refresh'][_0x5d2a38(0xb14)](this),this[_0x5d2a38(0x14d2)][_0x5d2a38(0x11c1)]();if(!this[_0x5d2a38(0x2d1)]())return;this['drawEnemyN'+_0x5d2a38(0x61d)]();},Window_EnemyName['prototype'][_0x4258d1(0x8f6)+_0x4258d1(0x61d)]=function(){const _0xdb9c0a=_0x4258d1,_0x26edd5={'hUEuQ':function(_0x329352,_0x3bf3e3){return _0x329352/_0x3bf3e3;},'WVjsB':function(_0x332fa8,_0x21a646){return _0x332fa8-_0x21a646;},'TOmPN':function(_0x28e0d0,_0x4aca7b){return _0x28e0d0+_0x4aca7b;}};this[_0xdb9c0a(0x1322)]=this[_0xdb9c0a(0x2d1)]()[_0xdb9c0a(0xd40)]();const _0x444f3d=this[_0xdb9c0a(0xe7c)](this[_0xdb9c0a(0x1322)])[_0xdb9c0a(0xc2a)],_0x5ad905=Math[_0xdb9c0a(0xdea)](_0x26edd5[_0xdb9c0a(0xf47)](_0x26edd5['WVjsB'](this[_0xdb9c0a(0x51d)],_0x444f3d),-0x1269+0xfb9+0x3*0xe6));this[_0xdb9c0a(0xd7a)](this[_0xdb9c0a(0x1322)],_0x5ad905,0x1*-0x1cae+-0x1*-0x1979+-0x335*-0x1,_0x26edd5[_0xdb9c0a(0x9d1)](_0x444f3d,0x1*-0xf17+0x155+0xdca));},Window_BattleLog[_0x4258d1(0xf38)]['maxLines']=function(){const _0x8531ef=_0x4258d1;return VisuMZ[_0x8531ef(0x337)][_0x8531ef(0x424)][_0x8531ef(0xc0e)][_0x8531ef(0x154b)];},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x1367)+'ed']=function(){const _0x10563b=_0x4258d1;return VisuMZ[_0x10563b(0x337)][_0x10563b(0x424)][_0x10563b(0xc0e)][_0x10563b(0x129c)+'t'];},Window_BattleLog[_0x4258d1(0xf38)]['backColor']=function(){const _0x18a28e=_0x4258d1;return VisuMZ[_0x18a28e(0x337)][_0x18a28e(0x424)][_0x18a28e(0xc0e)][_0x18a28e(0x580)];},Window_BattleLog['prototype']['isFastForw'+_0x4258d1(0x1543)]=function(){return![];},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xaf6)+'ct']=function(_0x50c0bd,_0x1ad61e){const _0x376238=_0x4258d1,_0x152a57={'nuTxB':_0x376238(0x1583)+_0x376238(0x21a)};this['unshift'](_0x152a57[_0x376238(0x149e)]),BattleManager['invokeActi'+'on'](_0x50c0bd,_0x1ad61e),this[_0x376238(0x1478)+_0x376238(0x98a)]();},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xf18)+_0x4258d1(0xf56)]=function(_0x49a3ee,_0x2439b6,_0x523bf4){const _0x4ee8d4=_0x4258d1,_0x5a7732={'hykTg':_0x4ee8d4(0x1583)+_0x4ee8d4(0x21a)};this[_0x4ee8d4(0x1019)](_0x5a7732['hykTg']),BattleManager[_0x4ee8d4(0xf18)+_0x4ee8d4(0x1485)](_0x49a3ee,_0x2439b6,_0x523bf4),this['callNextMe'+_0x4ee8d4(0x98a)]();},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x1583)+_0x4258d1(0x21a)]=function(){const _0x113463=_0x4258d1;this[_0x113463(0x1478)+_0x113463(0x98a)]();},Window_BattleLog[_0x4258d1(0xf38)]['push']=function(_0x305b4e){const _0x3c52d9=_0x4258d1,_0x77150={'EBfHN':_0x3c52d9(0x1583)+'cePoint','DWyVO':function(_0x5967eb,_0x5ab665){return _0x5967eb>=_0x5ab665;}},_0x1ef7d5=Array[_0x3c52d9(0xf38)][_0x3c52d9(0xb58)][_0x3c52d9(0xb14)](arguments,0xa*0x249+0x9d*0x15+-0x23ba),_0x3e169e={'name':_0x305b4e,'params':_0x1ef7d5},_0x4e6be9=this[_0x3c52d9(0x11ec)]['map'](_0x8e3bfd=>_0x8e3bfd[_0x3c52d9(0xd40)])[_0x3c52d9(0xfd7)](_0x77150[_0x3c52d9(0x1096)]);_0x77150[_0x3c52d9(0x458)](_0x4e6be9,-0x1afa+-0x25dd*-0x1+-0xae3)?this[_0x3c52d9(0x11ec)][_0x3c52d9(0x643)](_0x4e6be9,-0x1221+-0xff+0x1320*0x1,_0x3e169e):this[_0x3c52d9(0x11ec)][_0x3c52d9(0x88f)](_0x3e169e);},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x1019)]=function(_0x371201){const _0x54af98=_0x4258d1,_0x3da804=Array[_0x54af98(0xf38)][_0x54af98(0xb58)][_0x54af98(0xb14)](arguments,-0x9*-0x333+0xd7*0x22+0x8*-0x72b);this[_0x54af98(0x11ec)][_0x54af98(0x1019)]({'name':_0x371201,'params':_0x3da804});},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x1063)+_0x4258d1(0xb0a)]=function(){const _0x3b5272=_0x4258d1;if(!$gameTemp[_0x3b5272(0x555)]())return;console['log'](this['_methods']['map'](_0x20ace1=>_0x20ace1[_0x3b5272(0xd40)])['join']('\x0a'));},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+_0x4258d1(0x878)+_0x4258d1(0x16bc)]=Window_BattleLog['prototype'][_0x4258d1(0x164d)],Window_BattleLog['prototype'][_0x4258d1(0x164d)]=function(){const _0x332af5=_0x4258d1;this[_0x332af5(0xb5c)+_0x332af5(0x419)]=!![];},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+_0x4258d1(0xcd3)+_0x4258d1(0x3cb)]=Window_BattleLog['prototype'][_0x4258d1(0x164c)],Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x164c)]=function(){const _0x4043c6=_0x4258d1;VisuMZ[_0x4043c6(0x337)][_0x4043c6(0x14a4)+_0x4043c6(0xcd3)+_0x4043c6(0x3cb)][_0x4043c6(0xb14)](this);if(this[_0x4043c6(0xb5c)+_0x4043c6(0x419)])this['processRef'+_0x4043c6(0x16bc)]();},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x8a6)+_0x4258d1(0x16bc)]=function(){const _0x312bad=_0x4258d1;this[_0x312bad(0xb5c)+'fresh']=![],VisuMZ['BattleCore'][_0x312bad(0x14a4)+_0x312bad(0x878)+'resh'][_0x312bad(0xb14)](this);},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xad8)+'xt']=function(_0x43385e){const _0x152ca4=_0x4258d1,_0x2c8c0a={'MPWoS':_0x152ca4(0x149b),'BshVB':_0x152ca4(0x450),'OlRgA':_0x152ca4(0xe5e),'tLXLO':function(_0xf43817,_0x1431a8){return _0xf43817===_0x1431a8;},'fJCyj':function(_0x3ed3f4,_0x20ac50){return _0x3ed3f4/_0x20ac50;},'UdwBU':function(_0x2b70d3,_0xcef53d){return _0x2b70d3-_0xcef53d;},'jVJzU':function(_0x31766,_0x7c8738){return _0x31766-_0x7c8738;},'LvApt':function(_0x2c7962,_0x5af137){return _0x2c7962+_0x5af137;}};let _0x33e3b3=VisuMZ['BattleCore'][_0x152ca4(0x424)]['BattleLog'][_0x152ca4(0x49c)][_0x152ca4(0x1bc)+'e']()[_0x152ca4(0xbb6)](),_0x12ccd6=this[_0x152ca4(0x158c)][_0x43385e];if(_0x12ccd6[_0x152ca4(0x79c)](/<LEFT>/i))_0x33e3b3=_0x2c8c0a['MPWoS'];else{if(_0x12ccd6['match'](/<CENTER>/i))_0x33e3b3=_0x2c8c0a[_0x152ca4(0x4a6)];else _0x12ccd6[_0x152ca4(0x79c)](/<RIGHT>/i)&&(_0x33e3b3=_0x2c8c0a[_0x152ca4(0x13fd)]);}_0x12ccd6=_0x12ccd6[_0x152ca4(0xf58)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x12ccd6=_0x12ccd6[_0x152ca4(0xf58)](/\\I\[0\]/gi,'');const _0x440a13=this['lineRect'](_0x43385e);this[_0x152ca4(0x14d2)][_0x152ca4(0x91d)](_0x440a13['x'],_0x440a13['y'],_0x440a13['width'],_0x440a13['height']);const _0x51f758=this[_0x152ca4(0xe7c)](_0x12ccd6)[_0x152ca4(0xc2a)];let _0x1bb36f=_0x440a13['x'];if(_0x2c8c0a[_0x152ca4(0x11d8)](_0x33e3b3,_0x2c8c0a[_0x152ca4(0x4a6)]))_0x1bb36f+=_0x2c8c0a[_0x152ca4(0xb28)](_0x2c8c0a[_0x152ca4(0xc6b)](_0x440a13[_0x152ca4(0xc2a)],_0x51f758),-0x1a7*-0x1+-0x65*0x32+0x1215);else _0x2c8c0a[_0x152ca4(0x11d8)](_0x33e3b3,_0x2c8c0a[_0x152ca4(0x13fd)])&&(_0x1bb36f+=_0x2c8c0a[_0x152ca4(0xc7f)](_0x440a13[_0x152ca4(0xc2a)],_0x51f758));this[_0x152ca4(0xd7a)](_0x12ccd6,_0x1bb36f,_0x440a13['y'],_0x2c8c0a[_0x152ca4(0x2ff)](_0x51f758,0x1af*-0x12+0x1f28+-0xd2));},Window_BattleLog['prototype'][_0x4258d1(0xe3c)]=function(_0x4df6bc){const _0x10e8a0=_0x4258d1;this['_lines'][_0x10e8a0(0x88f)](_0x4df6bc),this[_0x10e8a0(0x164d)](),this[_0x10e8a0(0x1478)+_0x10e8a0(0x98a)]();},Window_BattleLog[_0x4258d1(0xf38)]['updateWait'+_0x4258d1(0x164e)]=function(){const _0x1f4d1d=_0x4258d1,_0x2f830f={'PDfsx':_0x1f4d1d(0x9e0),'fDINM':_0x1f4d1d(0x12cd),'ucKoo':'animation','HtGsP':_0x1f4d1d(0x101b),'DzKTf':'jump','VctXB':'opacity'};let _0x593854=![];switch(this[_0x1f4d1d(0xec8)]){case _0x2f830f['PDfsx']:_0x593854=this[_0x1f4d1d(0x1b3)][_0x1f4d1d(0x915)+'g']();break;case _0x2f830f[_0x1f4d1d(0x4d4)]:_0x593854=this[_0x1f4d1d(0x1b3)][_0x1f4d1d(0x122d)+_0x1f4d1d(0x10ea)]();break;case _0x2f830f[_0x1f4d1d(0xa4b)]:_0x593854=this[_0x1f4d1d(0x1b3)]['isAnimatio'+_0x1f4d1d(0x30d)]();break;case _0x2f830f[_0x1f4d1d(0xbcb)]:_0x593854=this['_spriteset'][_0x1f4d1d(0x972)+_0x1f4d1d(0x23e)]();break;case _0x2f830f['DzKTf']:_0x593854=this[_0x1f4d1d(0x1b3)][_0x1f4d1d(0x2a8)+_0x1f4d1d(0x6b8)]();break;case _0x2f830f[_0x1f4d1d(0x124a)]:_0x593854=this['_spriteset'][_0x1f4d1d(0x7fa)+_0x1f4d1d(0x1617)+_0x1f4d1d(0x100b)]();break;}return!_0x593854&&(this[_0x1f4d1d(0xec8)]=''),_0x593854;},Window_BattleLog[_0x4258d1(0xf38)]['waitForAni'+_0x4258d1(0x741)]=function(){const _0x24fa1f=_0x4258d1,_0x41111e={'KkojK':'animation'};this[_0x24fa1f(0xf48)+'e'](_0x41111e[_0x24fa1f(0x750)]);},Window_BattleLog['prototype'][_0x4258d1(0x14bc)+'at']=function(){const _0x3d0094=_0x4258d1,_0x16998f={'vfwRj':_0x3d0094(0x101b)};this[_0x3d0094(0xf48)+'e'](_0x16998f['vfwRj']);},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xa50)+'p']=function(){const _0x33f2d6=_0x4258d1,_0x46f2ed={'iEKOi':_0x33f2d6(0x3b8)};this[_0x33f2d6(0xf48)+'e'](_0x46f2ed[_0x33f2d6(0xaf1)]);},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xa42)+_0x4258d1(0xfa7)]=function(){const _0x223d1b=_0x4258d1,_0x1b83b4={'zoxNr':'opacity'};this[_0x223d1b(0xf48)+'e'](_0x1b83b4[_0x223d1b(0xdf8)]);},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x7e2)]=function(){const _0x374641=_0x4258d1,_0x32c568={'DejjZ':_0x374641(0xe3c),'vwPGe':'waitCount','YvDqS':_0x374641(0x11c1)},_0xe84bf3=VisuMZ[_0x374641(0x337)][_0x374641(0x424)][_0x374641(0xc0e)];if(!_0xe84bf3['StartTurnS'+_0x374641(0x13d7)])return;this[_0x374641(0x88f)](_0x32c568['DejjZ'],_0xe84bf3[_0x374641(0x1013)+'sg'][_0x374641(0xf22)]($gameTroop[_0x374641(0xd6b)]())),this[_0x374641(0x88f)](_0x32c568[_0x374641(0x157a)],_0xe84bf3['StartTurnW'+'ait']),this[_0x374641(0x88f)](_0x32c568[_0x374641(0x22f)]);},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xa8f)+'n']=function(_0x333ce1,_0x2e00e5,_0x1d90f8){const _0x4b0ee7=_0x4258d1;this[_0x4b0ee7(0x27c)+'tionSequen'+'ce'](_0x2e00e5)?BattleManager['prepareCus'+_0x4b0ee7(0xe82)+_0x4b0ee7(0xc9f)]():this[_0x4b0ee7(0xdca)+'ActionSequ'+_0x4b0ee7(0x37c)](_0x333ce1,_0x2e00e5,_0x1d90f8);},Window_BattleLog[_0x4258d1(0xf38)]['isCustomAc'+'tionSequen'+'ce']=function(_0x52f119){const _0x32b095=_0x4258d1,_0x43ed98={'prnqg':_0x32b095(0x15bf)+'0'},_0x3cdbea=_0x43ed98[_0x32b095(0x1444)]['split']('|');let _0x2e0633=0x2eb*-0xd+-0x41*0x47+0xf7*0x3a;while(!![]){switch(_0x3cdbea[_0x2e0633++]){case'0':return![];case'1':if(DataManager[_0x32b095(0x115b)+_0x32b095(0xafe)+_0x32b095(0x4b1)+'otetagEffe'+'ct'](_0x52f119[_0x32b095(0x780)]()))return!![];continue;case'2':if(!_0x52f119)return![];continue;case'3':if(!SceneManager[_0x32b095(0x614)+_0x32b095(0x6e5)]())return![];continue;case'4':if(!_0x52f119[_0x32b095(0x780)]())return![];continue;case'5':if(_0x52f119[_0x32b095(0x780)]()['note'][_0x32b095(0x79c)](/<CUSTOM ACTION SEQUENCE>/i))return!![];continue;}break;}},Window_BattleLog[_0x4258d1(0xf38)]['usePremade'+'ActionSequ'+_0x4258d1(0x37c)]=function(_0x32e560,_0x1bfcc7,_0x142ccf){const _0x36a3dd=_0x4258d1;this[_0x36a3dd(0x1188)+_0x36a3dd(0x133c)](_0x32e560,_0x1bfcc7,_0x142ccf),this['createEffe'+'ctActionSe'+'t'](_0x32e560,_0x1bfcc7,_0x142ccf),this[_0x36a3dd(0x11a7)+_0x36a3dd(0xb47)](_0x32e560,_0x1bfcc7,_0x142ccf);},Window_BattleLog[_0x4258d1(0xf38)]['displayAct'+_0x4258d1(0x1485)]=function(_0x20df7e,_0x5c102b){const _0x24c585=_0x4258d1,_0x4b1c02={'ZiWjC':_0x24c585(0xe3c),'gtxGR':_0x24c585(0x15c4)},_0x390127=VisuMZ['BattleCore'][_0x24c585(0x424)]['BattleLog'];_0x390127[_0x24c585(0xb4e)+_0x24c585(0x8ee)]&&this[_0x24c585(0x88f)](_0x4b1c02[_0x24c585(0x119e)],_0x4b1c02[_0x24c585(0x4f6)][_0x24c585(0xf22)](DataManager[_0x24c585(0xc60)+_0x24c585(0x875)](_0x5c102b)));if(DataManager[_0x24c585(0x83f)](_0x5c102b)){if(_0x390127[_0x24c585(0x103e)+'lMsg1'])this[_0x24c585(0x1675)+_0x24c585(0x65e)](_0x5c102b['message1'],_0x20df7e,_0x5c102b);if(_0x390127[_0x24c585(0x103e)+_0x24c585(0xc7e)])this[_0x24c585(0x1675)+_0x24c585(0x65e)](_0x5c102b[_0x24c585(0xd4d)],_0x20df7e,_0x5c102b);}else{if(_0x390127[_0x24c585(0x1472)+_0x24c585(0x5fc)])this['displayIte'+_0x24c585(0x65e)](TextManager[_0x24c585(0x1545)],_0x20df7e,_0x5c102b);}},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x1188)+_0x4258d1(0x133c)]=function(_0x157b23,_0x28ba75,_0x5d70ed){const _0x152af5=_0x4258d1,_0x34a0b1={'tuvMV':'applyImmor'+_0x152af5(0x4e4),'FeRYF':_0x152af5(0xe11)+_0x152af5(0xb4d),'BdDaG':'waitForMov'+_0x152af5(0xe17),'ZhNwF':_0x152af5(0x73c)+'tAnimation','xomjG':_0x152af5(0x1480)+_0x152af5(0x741)},_0x589617=_0x28ba75[_0x152af5(0x780)]();this['displayAct'+'ion'](_0x157b23,_0x589617),this[_0x152af5(0x88f)](_0x34a0b1[_0x152af5(0x2b4)],_0x157b23,_0x5d70ed,!![]),this[_0x152af5(0x88f)](_0x34a0b1[_0x152af5(0xd7f)],_0x157b23,_0x28ba75),this['push'](_0x34a0b1[_0x152af5(0x131f)]),this['push'](_0x34a0b1[_0x152af5(0x91e)],_0x157b23,_0x28ba75),this['push'](_0x34a0b1[_0x152af5(0x35f)]);},Window_BattleLog[_0x4258d1(0xf38)]['createEffe'+_0x4258d1(0xda9)+'t']=function(_0x581c54,_0x308c03,_0x439348){const _0x5eba08=_0x4258d1;if(this[_0x5eba08(0x1595)+_0x5eba08(0x15b5)+'ction'](_0x308c03))this[_0x5eba08(0x3dd)+_0x5eba08(0x1460)+_0x5eba08(0xfc8)](_0x581c54,_0x308c03,_0x439348);else{if(this[_0x5eba08(0x7a3)+_0x5eba08(0x658)+_0x5eba08(0x940)](_0x308c03))this[_0x5eba08(0xd93)+_0x5eba08(0x4d8)+_0x5eba08(0xb7d)](_0x581c54,_0x308c03,_0x439348);else _0x308c03[_0x5eba08(0x1255)+'m']()?this[_0x5eba08(0xef0)+_0x5eba08(0xb47)](_0x581c54,_0x308c03,_0x439348):this[_0x5eba08(0xea1)+'nSet'](_0x581c54,_0x308c03,_0x439348);}},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x127f)+_0x4258d1(0xd2f)+_0x4258d1(0x12da)]=function(_0x385522,_0x1207e6,_0x3bc0d4,_0x3d2072){const _0x1d0001=_0x4258d1,_0x1b6094={'pfjZF':_0x1d0001(0x815)+'p','yDcfg':'performMov'+_0x1d0001(0x9a3),'BXoqq':'Linear','PMtvU':_0x1d0001(0x759)+_0x1d0001(0x1485),'crLIf':'evade','taPQK':'waitForMov'+_0x1d0001(0xe17),'xFZuk':_0x1d0001(0xddb)};if(_0x1207e6){const _0x1ce2db=_0x385522['battler']();this[_0x1d0001(0x88f)](_0x1b6094[_0x1d0001(0x1b8)],[_0x385522],_0x3bc0d4,_0x3d2072),this[_0x1d0001(0x88f)](_0x1b6094[_0x1d0001(0x1475)],_0x385522,_0x1ce2db['_homeX'],_0x1ce2db[_0x1d0001(0xd2e)],_0x3d2072,![],_0x1b6094[_0x1d0001(0x392)]),this['push'](_0x1b6094[_0x1d0001(0x15af)],[_0x385522],_0x1b6094[_0x1d0001(0x843)]),this['push'](_0x1b6094['taPQK']),this['push'](_0x1b6094['PMtvU'],[_0x385522],_0x1b6094['xFZuk']);}},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x1595)+_0x4258d1(0x15b5)+'ction']=function(_0x298653){const _0x479ebc=_0x4258d1;if(!_0x298653[_0x479ebc(0xd04)]())return![];if(!_0x298653[_0x479ebc(0xe39)]())return![];if(!_0x298653[_0x479ebc(0xa79)+'ent']())return![];return VisuMZ['BattleCore'][_0x479ebc(0x424)][_0x479ebc(0x1000)+_0x479ebc(0x37c)][_0x479ebc(0x80d)+_0x479ebc(0x6a2)];},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x3dd)+'ingleTarge'+_0x4258d1(0xfc8)]=function(_0x30f6bb,_0x1cdfe3,_0x4792a2){const _0x2210c5=_0x4258d1,_0x37cb1a={'DkUmd':function(_0x2b0d6e,_0x45850b){return _0x2b0d6e<_0x45850b;},'koDpi':function(_0x39e52b,_0x1ea530){return _0x39e52b>_0x1ea530;},'jRkLL':function(_0x5c6e13,_0x1d7707){return _0x5c6e13===_0x1d7707;},'HRkGH':function(_0xefd4d7,_0x17a814){return _0xefd4d7&&_0x17a814;},'lxGnu':_0x2210c5(0x815)+'p','AopsD':_0x2210c5(0x156c)+_0x2210c5(0x1d5),'DZfkV':'front\x20base','Bhnty':_0x2210c5(0x12b7),'xkgzM':_0x2210c5(0x759)+_0x2210c5(0x1485),'NxfJL':_0x2210c5(0xddb),'VnEaQ':'waitForMov'+'ement','NXrFw':function(_0x520bd8,_0x5b095c){return _0x520bd8<_0x5b095c;},'NCIjw':_0x2210c5(0xe78)+'eaponSet','rpCVD':function(_0x3a88b9,_0x44d33c){return _0x3a88b9<_0x44d33c;},'LqgJj':_0x2210c5(0x378)+_0x2210c5(0x5ad),'TlTJG':_0x2210c5(0xb45)+'tal'},_0x6274ce=_0x37cb1a[_0x2210c5(0xecf)](_0x30f6bb[_0x2210c5(0xa4c)+_0x2210c5(0xd7c)]()[_0x2210c5(0x1064)],0xd4f+-0x10*-0x15+0x57*-0x2b),_0x1cbf50=-0x2*0x400+0x1e17*0x1+-0x1603,_0x3e2761=-0x9*-0x3a1+0x924+-0x3*0xddf;let _0x2f848a=!![];_0x37cb1a['koDpi'](_0x4792a2[_0x2210c5(0x1645)],-0x4f*0x1d+0x2*0x54b+-0x1a3)&&_0x37cb1a[_0x2210c5(0x1043)](_0x30f6bb[_0x2210c5(0x1580)](),_0x4792a2[0x728+0x24f4+0x1*-0x2c1c][_0x2210c5(0x1580)]())&&(_0x2f848a=![]);_0x37cb1a['HRkGH'](_0x6274ce,_0x2f848a)&&(this[_0x2210c5(0x88f)](_0x37cb1a[_0x2210c5(0xa1e)],[_0x30f6bb],_0x3e2761,_0x1cbf50),this[_0x2210c5(0x88f)](_0x37cb1a[_0x2210c5(0x1499)],_0x30f6bb,_0x4792a2,_0x37cb1a['DZfkV'],_0x1cbf50,!![],_0x37cb1a[_0x2210c5(0x96e)],!![]),this[_0x2210c5(0x88f)](_0x37cb1a['xkgzM'],[_0x30f6bb],_0x37cb1a[_0x2210c5(0x4c4)]),this[_0x2210c5(0x88f)](_0x37cb1a['VnEaQ']));let _0x284f18=_0x1cdfe3[_0x2210c5(0x14fd)]()?this[_0x2210c5(0x150a)+_0x2210c5(0x92b)](_0x30f6bb):0xa4b+0x15a*-0xb+-0x125*-0x4;for(let _0x1fb28f=-0x4*0x2b3+0x1*-0xf34+0x1a00;_0x37cb1a[_0x2210c5(0x9eb)](_0x1fb28f,_0x284f18);_0x1fb28f++){_0x1cdfe3[_0x2210c5(0x14fd)]()&&_0x30f6bb[_0x2210c5(0x1580)]()&&this['push'](_0x37cb1a[_0x2210c5(0xcb8)],_0x30f6bb,_0x1fb28f),_0x37cb1a['rpCVD'](_0x1cdfe3[_0x2210c5(0x780)]()['animationI'+'d'],0x1bec+0x2625+-0x4211)?this[_0x2210c5(0xef0)+'onSet'](_0x30f6bb,_0x1cdfe3,_0x4792a2):this[_0x2210c5(0xea1)+_0x2210c5(0x133c)](_0x30f6bb,_0x1cdfe3,_0x4792a2);}_0x1cdfe3['isAttack']()&&_0x30f6bb['isActor']()&&this[_0x2210c5(0x88f)](_0x37cb1a[_0x2210c5(0xefe)],_0x30f6bb),this[_0x2210c5(0x88f)](_0x37cb1a[_0x2210c5(0x19a)],_0x30f6bb,_0x4792a2,![]),this[_0x2210c5(0x127f)+_0x2210c5(0xd2f)+_0x2210c5(0x12da)](_0x30f6bb,_0x6274ce,_0x3e2761,_0x1cbf50);},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x7a3)+_0x4258d1(0x658)+'tion']=function(_0x2df26a){const _0x54a6f5=_0x4258d1;if(!_0x2df26a['isPhysical']())return![];if(!_0x2df26a['isForAll']())return![];if(!_0x2df26a[_0x54a6f5(0xa79)+'ent']())return![];return VisuMZ[_0x54a6f5(0x337)][_0x54a6f5(0x424)]['ActionSequ'+'ence'][_0x54a6f5(0x13b0)+'oE'];},Window_BattleLog['prototype'][_0x4258d1(0xd93)+_0x4258d1(0x4d8)+_0x4258d1(0xb7d)]=function(_0xfd3dcc,_0x19a006,_0x8921db){const _0x35dd97=_0x4258d1,_0x3444df={'TetZx':function(_0x5bc154,_0x320c45){return _0x5bc154<_0x320c45;},'DeUXQ':_0x35dd97(0x815)+'p','gJEjn':function(_0x3e5adc,_0x168255){return _0x3e5adc>_0x168255;},'UWKPN':_0x35dd97(0x42e)+'er','DLdhE':_0x35dd97(0xfab),'yRhTK':_0x35dd97(0x156c)+'eToTargets','vAHOQ':'Linear','bGFPL':_0x35dd97(0x759)+_0x35dd97(0x1485),'uEqYZ':_0x35dd97(0xddb),'ajqif':_0x35dd97(0x1328)+_0x35dd97(0xe17),'KRHai':_0x35dd97(0xe78)+_0x35dd97(0xc58),'UJRGv':_0x35dd97(0x378)+'eWeaponSet','OVXMX':_0x35dd97(0xb45)+_0x35dd97(0x4e4)},_0x191a55=_0x3444df['TetZx'](_0xfd3dcc[_0x35dd97(0xa4c)+'otion']()[_0x35dd97(0x1064)],-0x1a*0x15e+-0x21b4+0x4542),_0x2abc0e=-0xf6a+0x3d*0xa1+-0x16df,_0x5eac49=-0x6b7+0x139f+-0x2*0x65c;if(_0x191a55){this[_0x35dd97(0x88f)](_0x3444df[_0x35dd97(0xa26)],[_0xfd3dcc],_0x5eac49,_0x2abc0e);const _0x404627=_0x3444df[_0x35dd97(0x8ad)](_0x8921db['length'],0x376*-0x1+-0x1*-0x6b5+-0x33e)?_0x3444df[_0x35dd97(0x834)]:_0x3444df[_0x35dd97(0x812)];this['push'](_0x3444df['yRhTK'],_0xfd3dcc,_0x8921db,_0x404627,_0x2abc0e,!![],_0x3444df[_0x35dd97(0xc81)],!![]),this[_0x35dd97(0x88f)](_0x3444df[_0x35dd97(0xe75)],[_0xfd3dcc],_0x3444df[_0x35dd97(0x110f)]),this['push'](_0x3444df[_0x35dd97(0x388)]);}let _0xd75f7=_0x19a006['isAttack']()?this[_0x35dd97(0x150a)+'ldTimes'](_0xfd3dcc):-0x23c3+0x916*0x4+-0x94*0x1;for(let _0x5e5288=0x29*0x5+-0x1*0x179b+0x16ce;_0x3444df[_0x35dd97(0xd53)](_0x5e5288,_0xd75f7);_0x5e5288++){_0x19a006[_0x35dd97(0x14fd)]()&&_0xfd3dcc[_0x35dd97(0x1580)]()&&this[_0x35dd97(0x88f)](_0x3444df[_0x35dd97(0x87b)],_0xfd3dcc,_0x5e5288),this[_0x35dd97(0xea1)+_0x35dd97(0x133c)](_0xfd3dcc,_0x19a006,_0x8921db);}_0x19a006[_0x35dd97(0x14fd)]()&&_0xfd3dcc[_0x35dd97(0x1580)]()&&this[_0x35dd97(0x88f)](_0x3444df[_0x35dd97(0x70d)],_0xfd3dcc),this[_0x35dd97(0x88f)](_0x3444df[_0x35dd97(0x34c)],_0xfd3dcc,_0x8921db,![]),this['addMeleeRe'+_0x35dd97(0xd2f)+'Set'](_0xfd3dcc,_0x191a55,_0x5eac49,_0x2abc0e);},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xef0)+_0x4258d1(0xb47)]=function(_0x269afe,_0x484404,_0x5d5fbc){const _0x497973=_0x4258d1,_0xd0cb1f={'HlOwp':_0x497973(0xe11)+_0x497973(0x1485),'BITgi':_0x497973(0x1634),'zoekS':'showAnimat'+'ion','cvAgB':_0x497973(0xaf6)+'ct'},_0x40fccc=_0x484404[_0x497973(0x780)]();for(const _0x49f2b6 of _0x5d5fbc){if(!_0x49f2b6)continue;this[_0x497973(0x88f)](_0xd0cb1f[_0x497973(0x877)],_0x269afe,_0x484404),this[_0x497973(0x88f)](_0xd0cb1f[_0x497973(0x7ec)],Sprite_Battler['_motionSpe'+'ed']),this[_0x497973(0x88f)](_0xd0cb1f[_0x497973(0x1c8)],_0x269afe,[_0x49f2b6],_0x40fccc[_0x497973(0x12b1)+'d']),this['push'](_0xd0cb1f[_0x497973(0x7ec)],-0x108+0x203b+0x1f1b*-0x1),this[_0x497973(0x88f)](_0xd0cb1f[_0x497973(0x13e4)],_0x269afe,_0x49f2b6);}},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xea1)+_0x4258d1(0x133c)]=function(_0x55c61c,_0x5760f2,_0x28f288){const _0x4f6efb=_0x4258d1,_0x4d6d92={'rmKgY':function(_0x58eae8,_0x43d60c){return _0x58eae8+_0x43d60c;},'xdrOf':_0x4f6efb(0xe11)+'ion','zlYvo':_0x4f6efb(0x1634),'rByLG':_0x4f6efb(0x46c)+_0x4f6efb(0x1485),'PiOoL':_0x4f6efb(0x1480)+_0x4f6efb(0x741),'Cvpqs':_0x4f6efb(0xaf6)+'ct'},_0x1a11c0=_0x5760f2[_0x4f6efb(0x780)]();let _0x25a955=_0x5760f2[_0x4f6efb(0x14fd)]()?_0x4d6d92[_0x4f6efb(0x1122)](-0x2237+-0x2*0xf5d+0x40f2,_0x55c61c[_0x4f6efb(0xd2c)+_0x4f6efb(0x1678)]()):-0x39*-0x2b+0x1ab7+-0x2449*0x1;while(_0x25a955--){this[_0x4f6efb(0x88f)](_0x4d6d92['xdrOf'],_0x55c61c,_0x5760f2),this[_0x4f6efb(0x88f)](_0x4d6d92[_0x4f6efb(0x14e3)],Sprite_Battler['_motionSpe'+'ed']),this[_0x4f6efb(0x88f)](_0x4d6d92[_0x4f6efb(0x152e)],_0x55c61c,_0x28f288[_0x4f6efb(0x14bf)](),_0x1a11c0[_0x4f6efb(0x12b1)+'d']),this[_0x4f6efb(0x88f)](_0x4d6d92['PiOoL']);}for(const _0x40cad8 of _0x28f288){if(!_0x40cad8)continue;this[_0x4f6efb(0x88f)](_0x4d6d92[_0x4f6efb(0x955)],_0x55c61c,_0x40cad8);}},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x11a7)+_0x4258d1(0xb47)]=function(_0x44c929,_0x516b2c,_0x1a3c49){const _0x24af19=_0x4258d1,_0x4db0d8={'QFQvI':'applyImmor'+'tal','ptoBQ':_0x24af19(0x147d)+_0x24af19(0xd42),'ObWuS':_0x24af19(0x1387)+'ect','vnifB':_0x24af19(0x11c1),'uwllS':_0x24af19(0xe11)+_0x24af19(0xb12),'jFsRh':_0x24af19(0x1328)+_0x24af19(0xe17)},_0x350109=_0x516b2c[_0x24af19(0x780)]();this[_0x24af19(0x88f)](_0x4db0d8[_0x24af19(0x9a0)],_0x44c929,_0x1a3c49,![]),this[_0x24af19(0x88f)](_0x4db0d8[_0x24af19(0x106b)]),this[_0x24af19(0x88f)](_0x4db0d8[_0x24af19(0x1488)]),this[_0x24af19(0x88f)](_0x4db0d8[_0x24af19(0x120d)]),this[_0x24af19(0x88f)](_0x4db0d8['uwllS'],_0x44c929),this['push'](_0x4db0d8[_0x24af19(0xfe4)]);},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xb97)]=function(_0x52d372){},VisuMZ[_0x4258d1(0x337)]['Window_Bat'+_0x4258d1(0xa32)+'playCurren'+'tState']=Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x1103)+_0x4258d1(0x150d)],Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x1103)+_0x4258d1(0x150d)]=function(_0x329c48){const _0x5afe74=_0x4258d1;if(!VisuMZ[_0x5afe74(0x337)][_0x5afe74(0x424)][_0x5afe74(0xc0e)]['ShowCurren'+'tState'])return;VisuMZ[_0x5afe74(0x337)][_0x5afe74(0x14a4)+_0x5afe74(0xa32)+_0x5afe74(0x1479)+'tState'][_0x5afe74(0xb14)](this,_0x329c48);},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x15c8)+_0x4258d1(0x541)]=function(_0x355ff7){const _0x5a1fa4=_0x4258d1,_0x391eea={'RjaSu':_0x5a1fa4(0x933)+'nter','UmKKg':_0x5a1fa4(0x46c)+_0x5a1fa4(0x1485),'CRjoq':_0x5a1fa4(0xe3c)};this['push'](_0x391eea[_0x5a1fa4(0x97a)],_0x355ff7);VisuMZ[_0x5a1fa4(0x337)][_0x5a1fa4(0x424)][_0x5a1fa4(0x1000)+_0x5a1fa4(0x37c)][_0x5a1fa4(0x3c7)+_0x5a1fa4(0x5ba)]&&this[_0x5a1fa4(0x88f)](_0x391eea[_0x5a1fa4(0x645)],_0x355ff7,[BattleManager[_0x5a1fa4(0xa47)]],-(-0xc30+0xc6+-0x25*-0x4f));if(!VisuMZ[_0x5a1fa4(0x337)][_0x5a1fa4(0x424)][_0x5a1fa4(0xc0e)]['ShowCounte'+'r'])return;this[_0x5a1fa4(0x88f)](_0x391eea[_0x5a1fa4(0x217)],TextManager[_0x5a1fa4(0x1bb)+_0x5a1fa4(0x1413)][_0x5a1fa4(0xf22)](_0x355ff7['name']()));},Window_BattleLog['prototype'][_0x4258d1(0x42b)+'lection']=function(_0xd17d3f){const _0x4a40a0=_0x4258d1,_0x1b294b={'qlIlz':_0x4a40a0(0x1179)+_0x4a40a0(0x1185),'zHUJS':'addText'};this[_0x4a40a0(0x88f)](_0x1b294b[_0x4a40a0(0x12e3)],_0xd17d3f);if(!VisuMZ['BattleCore'][_0x4a40a0(0x424)][_0x4a40a0(0xc0e)]['ShowReflec'+'t'])return;this[_0x4a40a0(0x88f)](_0x1b294b[_0x4a40a0(0x37a)],TextManager[_0x4a40a0(0x1b0)+_0x4a40a0(0x333)][_0x4a40a0(0xf22)](_0xd17d3f['name']()));},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x42b)+_0x4258d1(0x5e9)+_0x4258d1(0x6a0)]=function(_0x590f8c,_0x3e15db){const _0x2fb3f5=_0x4258d1,_0x344478={'xSUty':_0x2fb3f5(0x46c)+'ion'};if(VisuMZ[_0x2fb3f5(0x337)]['Settings'][_0x2fb3f5(0x1000)+_0x2fb3f5(0x37c)][_0x2fb3f5(0x1402)+_0x2fb3f5(0x5ba)]){const _0x4c55be=_0x3e15db[_0x2fb3f5(0x780)]();this['push'](_0x344478[_0x2fb3f5(0x10bf)],_0x590f8c,[_0x590f8c],_0x4c55be[_0x2fb3f5(0x12b1)+'d']);}},Window_BattleLog[_0x4258d1(0xf38)]['displaySub'+_0x4258d1(0xb32)]=function(_0x3b5eee,_0xbf6972){const _0x4d312a=_0x4258d1,_0x5151fc={'PQJDz':_0x4d312a(0x982)+'stitute','OwOuT':_0x4d312a(0xe3c)};this['push'](_0x5151fc[_0x4d312a(0x380)],_0x3b5eee,_0xbf6972);if(!VisuMZ[_0x4d312a(0x337)][_0x4d312a(0x424)][_0x4d312a(0xc0e)][_0x4d312a(0xb43)+_0x4d312a(0x1618)])return;const _0x4edcdb=_0x3b5eee[_0x4d312a(0xd40)](),_0x1ff554=TextManager['substitute'][_0x4d312a(0xf22)](_0x4edcdb,_0xbf6972[_0x4d312a(0xd40)]());this[_0x4d312a(0x88f)](_0x5151fc[_0x4d312a(0xf6c)],_0x1ff554);},VisuMZ['BattleCore'][_0x4258d1(0x14a4)+'tleLog_dis'+_0x4258d1(0xe56)+_0x4258d1(0x151b)]=Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xd27)+'ionResults'],Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xd27)+_0x4258d1(0x48f)]=function(_0x579e51,_0x41e175){const _0x4b840c=_0x4258d1;VisuMZ[_0x4b840c(0x337)][_0x4b840c(0x14a4)+_0x4b840c(0xa32)+_0x4b840c(0xe56)+'Results']['call'](this,_0x579e51,_0x41e175);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+_0x4258d1(0xa32)+_0x4258d1(0xfd4)+'e']=Window_BattleLog[_0x4258d1(0xf38)]['displayFai'+_0x4258d1(0xf27)],Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x5ee)+'lure']=function(_0x119ea8){const _0x564cbe=_0x4258d1;if(!VisuMZ[_0x564cbe(0x337)]['Settings']['BattleLog'][_0x564cbe(0x1149)+'e'])return;VisuMZ['BattleCore'][_0x564cbe(0x14a4)+'tleLog_dis'+_0x564cbe(0xfd4)+'e'][_0x564cbe(0xb14)](this,_0x119ea8);},VisuMZ['BattleCore'][_0x4258d1(0x14a4)+'tleLog_dis'+_0x4258d1(0x6e7)+'al']=Window_BattleLog['prototype']['displayCri'+'tical'],Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x12bf)+_0x4258d1(0x591)]=function(_0x36eeb7){const _0x3994dc=_0x4258d1;if(!VisuMZ[_0x3994dc(0x337)]['Settings'][_0x3994dc(0xc0e)][_0x3994dc(0x10db)+'al'])return;VisuMZ[_0x3994dc(0x337)][_0x3994dc(0x14a4)+_0x3994dc(0xa32)+_0x3994dc(0x6e7)+'al'][_0x3994dc(0xb14)](this,_0x36eeb7);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+'tleLog_dis'+'playMiss']=Window_BattleLog[_0x4258d1(0xf38)]['displayMis'+'s'],Window_BattleLog[_0x4258d1(0xf38)]['displayMis'+'s']=function(_0x201ba3){const _0x2594d3=_0x4258d1,_0xa88271={'EYeRW':_0x2594d3(0x802)+'s'};!VisuMZ[_0x2594d3(0x337)][_0x2594d3(0x424)][_0x2594d3(0xc0e)][_0x2594d3(0xedf)+_0x2594d3(0x7a5)]?this[_0x2594d3(0x88f)](_0xa88271[_0x2594d3(0x4f8)],_0x201ba3):VisuMZ['BattleCore']['Window_Bat'+_0x2594d3(0xa32)+_0x2594d3(0x5d7)][_0x2594d3(0xb14)](this,_0x201ba3);},VisuMZ['BattleCore'][_0x4258d1(0x14a4)+'tleLog_dis'+_0x4258d1(0x1690)+'n']=Window_BattleLog[_0x4258d1(0xf38)]['displayEva'+_0x4258d1(0x10ad)],Window_BattleLog['prototype'][_0x4258d1(0x4e2)+_0x4258d1(0x10ad)]=function(_0x5d2794){const _0x254d3c=_0x4258d1,_0x3b29e0={'ajGEu':_0x254d3c(0xcc3)+'sion','AWdva':'performMag'+_0x254d3c(0x4b9)};!VisuMZ['BattleCore'][_0x254d3c(0x424)][_0x254d3c(0xc0e)][_0x254d3c(0xedf)+_0x254d3c(0x7a5)]?_0x5d2794[_0x254d3c(0xcfc)]()[_0x254d3c(0x1283)]?this[_0x254d3c(0x88f)](_0x3b29e0[_0x254d3c(0x85b)],_0x5d2794):this[_0x254d3c(0x88f)](_0x3b29e0[_0x254d3c(0x3a4)],_0x5d2794):VisuMZ[_0x254d3c(0x337)][_0x254d3c(0x14a4)+'tleLog_dis'+_0x254d3c(0x1690)+'n']['call'](this,_0x5d2794);},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xaad)+'amage']=function(_0x24e9de){const _0x21c219=_0x4258d1,_0x5217ef={'DExbe':function(_0x4227b7,_0x5cc557){return _0x4227b7>_0x5cc557;},'qSoKc':_0x21c219(0x1399)+_0x21c219(0xdda),'HMwDe':function(_0x4ec4ec,_0xce5437){return _0x4ec4ec<_0xce5437;},'rfcRR':_0x21c219(0x14dc)+_0x21c219(0x14c8),'Tygvv':_0x21c219(0xe3c)};_0x24e9de[_0x21c219(0xcfc)]()[_0x21c219(0xfbf)]&&(_0x24e9de[_0x21c219(0x2d6)+'age']=-0xc2*-0x1+-0xd*0x264+0x1e52,_0x5217ef['DExbe'](_0x24e9de[_0x21c219(0xcfc)]()[_0x21c219(0x6d9)],0x13*0x9d+-0x1*0x60d+-0x2cd*0x2)&&!_0x24e9de[_0x21c219(0xcfc)]()[_0x21c219(0xe95)]&&(_0x24e9de['_lastHpDam'+'age']=_0x24e9de[_0x21c219(0xcfc)]()['hpDamage'],this[_0x21c219(0x88f)](_0x5217ef[_0x21c219(0x557)],_0x24e9de)),_0x5217ef['HMwDe'](_0x24e9de[_0x21c219(0xcfc)]()[_0x21c219(0x6d9)],-0x9d*-0x13+-0xd6*0x14+0x1*0x511)&&this['push'](_0x5217ef['rfcRR'],_0x24e9de),VisuMZ[_0x21c219(0x337)][_0x21c219(0x424)][_0x21c219(0xc0e)][_0x21c219(0x219)]&&this[_0x21c219(0x88f)](_0x5217ef[_0x21c219(0x10b6)],this['makeHpDama'+'geText'](_0x24e9de)));},VisuMZ['BattleCore'][_0x4258d1(0x14a4)+_0x4258d1(0xa32)+_0x4258d1(0x1518)+'ge']=Window_BattleLog[_0x4258d1(0xf38)]['displayMpD'+'amage'],Window_BattleLog[_0x4258d1(0xf38)]['displayMpD'+_0x4258d1(0xd5f)]=function(_0x342df6){const _0xace55b=_0x4258d1;if(!VisuMZ[_0xace55b(0x337)]['Settings'][_0xace55b(0xc0e)][_0xace55b(0x425)])return;VisuMZ[_0xace55b(0x337)]['Window_Bat'+'tleLog_dis'+_0xace55b(0x1518)+'ge']['call'](this,_0x342df6);},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+'tleLog_dis'+'playTpDama'+'ge']=Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x15a5)+'amage'],Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x15a5)+_0x4258d1(0xd5f)]=function(_0x72f517){const _0x5cbc43=_0x4258d1;if(!VisuMZ[_0x5cbc43(0x337)][_0x5cbc43(0x424)][_0x5cbc43(0xc0e)][_0x5cbc43(0x14f3)])return;VisuMZ[_0x5cbc43(0x337)]['Window_Bat'+_0x5cbc43(0xa32)+'playTpDama'+'ge'][_0x5cbc43(0xb14)](this,_0x72f517);},Window_BattleLog['prototype'][_0x4258d1(0xfbc)+'ectedStatu'+'s']=function(_0x26f599){const _0xeaa5b5=_0x4258d1,_0x333ea3={'WkIcc':'pushBaseLi'+'ne','iXQfg':_0xeaa5b5(0x147d)+_0xeaa5b5(0xd42)};_0x26f599[_0xeaa5b5(0xcfc)]()[_0xeaa5b5(0x3a9)+_0xeaa5b5(0x1183)]()&&(this['push'](_0x333ea3[_0xeaa5b5(0xdfc)]),this[_0xeaa5b5(0xa3e)+_0xeaa5b5(0xb2a)](_0x26f599),this[_0xeaa5b5(0xa3e)+'ngedBuffs'](_0x26f599),this[_0xeaa5b5(0x88f)](_0x333ea3[_0xeaa5b5(0x13a1)]));},Window_BattleLog['prototype'][_0x4258d1(0x1df)+_0x4258d1(0x127b)]=function(_0x3fc05f){const _0x5012b8=_0x4258d1,_0x4f56c8={'ENUjZ':'4|0|3|1|2','lgJDc':_0x5012b8(0xaa8)+'e','YNwha':_0x5012b8(0xe3c),'tLIag':_0x5012b8(0x58e),'FegoM':_0x5012b8(0x165e)+'ne','ZxFUi':_0x5012b8(0x1046)+'States','VojOd':function(_0x41da05,_0x63a31e){return _0x41da05===_0x63a31e;},'kIblo':_0x5012b8(0xa20)+_0x5012b8(0x131b)},_0x346ad9=_0x3fc05f[_0x5012b8(0xcfc)](),_0x27f4a7=_0x346ad9[_0x5012b8(0x131a)+_0x5012b8(0x905)]();for(const _0xf807e1 of _0x27f4a7){const _0x578d08=_0x3fc05f['isActor']()?_0xf807e1[_0x5012b8(0x91a)]:_0xf807e1[_0x5012b8(0xd4d)];if(_0x578d08&&VisuMZ[_0x5012b8(0x337)][_0x5012b8(0x424)]['BattleLog'][_0x5012b8(0x606)+'tate']){const _0xd56121=_0x4f56c8[_0x5012b8(0x811)][_0x5012b8(0xba9)]('|');let _0x35f6af=-0x1*0x22e5+-0xa6f+-0x2*-0x16aa;while(!![]){switch(_0xd56121[_0x35f6af++]){case'0':this[_0x5012b8(0x88f)](_0x4f56c8[_0x5012b8(0x1268)]);continue;case'1':this['push'](_0x4f56c8[_0x5012b8(0x15d6)],_0x578d08[_0x5012b8(0xf22)](_0x3fc05f[_0x5012b8(0xd40)]()));continue;case'2':this[_0x5012b8(0x88f)](_0x4f56c8[_0x5012b8(0x3c4)]);continue;case'3':this[_0x5012b8(0x88f)](_0x4f56c8[_0x5012b8(0x22b)]);continue;case'4':this[_0x5012b8(0x88f)](_0x4f56c8[_0x5012b8(0xd82)]);continue;}break;}}_0x4f56c8[_0x5012b8(0x3ca)](_0xf807e1['id'],_0x3fc05f[_0x5012b8(0x10da)+'Id']())&&this['push'](_0x4f56c8[_0x5012b8(0x1a6)],_0x3fc05f);}},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x1046)+'States']=function(){},Window_BattleLog['prototype'][_0x4258d1(0x8fd)+_0x4258d1(0x1676)]=function(_0x17acf0){const _0x2d8015=_0x4258d1,_0x1a647b={'MELEO':'4|0|3|2|1','dUUQn':_0x2d8015(0xaa8)+'e','cWRzn':'wait','XZjrP':'addText','BpNPc':_0x2d8015(0x165e)+'ne','zLKEs':_0x2d8015(0x43e)+_0x2d8015(0x127b)};if(!VisuMZ[_0x2d8015(0x337)][_0x2d8015(0x424)][_0x2d8015(0xc0e)][_0x2d8015(0x974)+_0x2d8015(0xa90)])return;const _0x5caae8=_0x17acf0[_0x2d8015(0xcfc)](),_0x587e3d=_0x5caae8[_0x2d8015(0x753)+_0x2d8015(0x12fe)]();for(const _0x3e4621 of _0x587e3d){if(_0x3e4621['message4']){const _0x45967f=_0x1a647b[_0x2d8015(0xed8)]['split']('|');let _0xa38cb8=-0x1177+-0x1d6f+0x2*0x1773;while(!![]){switch(_0x45967f[_0xa38cb8++]){case'0':this['push'](_0x1a647b['dUUQn']);continue;case'1':this[_0x2d8015(0x88f)](_0x1a647b[_0x2d8015(0x168a)]);continue;case'2':this['push'](_0x1a647b[_0x2d8015(0x99a)],_0x3e4621[_0x2d8015(0x1654)][_0x2d8015(0xf22)](_0x17acf0[_0x2d8015(0xd40)]()));continue;case'3':this['push'](_0x1a647b[_0x2d8015(0x53b)]);continue;case'4':this['push'](_0x1a647b['zLKEs']);continue;}break;}}}},Window_BattleLog['prototype'][_0x4258d1(0x43e)+'edStates']=function(){},Window_BattleLog['prototype'][_0x4258d1(0xa3e)+_0x4258d1(0x2d7)]=function(_0x246c3c){const _0x598e51=_0x4258d1,_0xd4f05e=VisuMZ[_0x598e51(0x337)][_0x598e51(0x424)][_0x598e51(0xc0e)],_0x4be9f2=_0x246c3c[_0x598e51(0xcfc)]();if(_0xd4f05e['ShowAddedB'+_0x598e51(0xabb)])this['displayBuf'+'fs'](_0x246c3c,_0x4be9f2[_0x598e51(0x11e1)],TextManager[_0x598e51(0x15b8)]);if(_0xd4f05e['ShowAddedD'+_0x598e51(0xc2d)])this[_0x598e51(0x243)+'fs'](_0x246c3c,_0x4be9f2[_0x598e51(0xb86)+'fs'],TextManager[_0x598e51(0x1498)]);if(_0xd4f05e[_0x598e51(0x974)+_0x598e51(0x1285)])this[_0x598e51(0x243)+'fs'](_0x246c3c,_0x4be9f2[_0x598e51(0xbf6)+'fs'],TextManager['buffRemove']);},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x243)+'fs']=function(_0x4f2adb,_0x402f8f,_0x5e9848){const _0x49ed54=_0x4258d1,_0x3b38dd={'JMMXq':_0x49ed54(0xaa8)+'e','MGLiP':'pushBaseLi'+'ne','DhssO':_0x49ed54(0xe3c),'natlN':_0x49ed54(0x58e)};for(const _0x45af05 of _0x402f8f){const _0x5e6e0c=_0x5e9848[_0x49ed54(0xf22)](_0x4f2adb['name'](),TextManager[_0x49ed54(0x14ab)](_0x45af05));this[_0x49ed54(0x88f)](_0x3b38dd[_0x49ed54(0x800)]),this['push'](_0x3b38dd[_0x49ed54(0x8e6)]),this['push'](_0x3b38dd['DhssO'],_0x5e6e0c),this[_0x49ed54(0x88f)](_0x3b38dd['natlN']);}},VisuMZ['BattleCore']['Window_Bat'+_0x4258d1(0xe6f)+'ar']=Window_BattleLog[_0x4258d1(0xf38)]['clear'],Window_BattleLog[_0x4258d1(0xf38)]['clear']=function(){const _0x579c6b=_0x4258d1;VisuMZ[_0x579c6b(0x337)][_0x579c6b(0x14a4)+_0x579c6b(0xe6f)+'ar']['call'](this),this[_0x579c6b(0x1478)+_0x579c6b(0x98a)]();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+_0x4258d1(0x711)+_0x4258d1(0x956)]=Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x165e)+'ne'],Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x165e)+'ne']=function(){const _0x1b899e=_0x4258d1;VisuMZ[_0x1b899e(0x337)][_0x1b899e(0x14a4)+_0x1b899e(0x711)+_0x1b899e(0x956)][_0x1b899e(0xb14)](this),this[_0x1b899e(0x1478)+_0x1b899e(0x98a)]();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+_0x4258d1(0x13e8)+_0x4258d1(0x90a)]=Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xaa8)+'e'],Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xaa8)+'e']=function(){const _0x35e95a=_0x4258d1;VisuMZ[_0x35e95a(0x337)]['Window_Bat'+_0x35e95a(0x13e8)+_0x35e95a(0x90a)][_0x35e95a(0xb14)](this),this['processRef'+_0x35e95a(0x16bc)](),this[_0x35e95a(0x1478)+_0x35e95a(0x98a)]();},VisuMZ['BattleCore'][_0x4258d1(0x14a4)+_0x4258d1(0x13e8)+'upDamage']=Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x67c)+'e'],Window_BattleLog[_0x4258d1(0xf38)]['popupDamag'+'e']=function(_0x37ebb0){const _0x1590a2=_0x4258d1;VisuMZ[_0x1590a2(0x337)][_0x1590a2(0x14a4)+_0x1590a2(0x13e8)+_0x1590a2(0x73b)][_0x1590a2(0xb14)](this,_0x37ebb0),this[_0x1590a2(0x1478)+_0x1590a2(0x98a)]();},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x147d)+'Line']=function(){const _0xca97df=_0x4258d1,_0x4d849c={'PhDyD':function(_0x2aa983,_0x4f97c1){return _0x2aa983>_0x4f97c1;},'scpyy':function(_0x3c7478,_0x37f9f9){return _0x3c7478-_0x37f9f9;},'fVYfQ':function(_0x64618a,_0xde08b8){return _0x64618a>_0xde08b8;}};let _0x349d93=0x129a*-0x1+0x251*0x1+-0x17b*-0xb;_0x4d849c[_0xca97df(0x828)](this[_0xca97df(0x4d7)+_0xca97df(0x6a3)][_0xca97df(0x1645)],0x74+-0x192a+0x18b6)&&(_0x349d93=this[_0xca97df(0x4d7)+'tack'][_0x4d849c[_0xca97df(0xb17)](this[_0xca97df(0x4d7)+_0xca97df(0x6a3)]['length'],-0xd98*0x1+-0x6e8+0xb5*0x1d)]),_0x4d849c['fVYfQ'](this[_0xca97df(0x158c)]['length'],_0x349d93)?this[_0xca97df(0x58e)]():this[_0xca97df(0x1478)+_0xca97df(0x98a)]();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+_0x4258d1(0x123b)+_0x4258d1(0x842)+'Start']=Window_BattleLog['prototype'][_0x4258d1(0xe11)+'ionStart'],Window_BattleLog[_0x4258d1(0xf38)]['performAct'+_0x4258d1(0xb4d)]=function(_0x50f1ff,_0x4c8419){const _0x17bb3c=_0x4258d1;VisuMZ[_0x17bb3c(0x337)][_0x17bb3c(0x14a4)+'tleLog_per'+_0x17bb3c(0x842)+_0x17bb3c(0xbcd)][_0x17bb3c(0xb14)](this,_0x50f1ff,_0x4c8419),this['callNextMe'+'thod']();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+'tleLog_per'+_0x4258d1(0x842)]=Window_BattleLog['prototype']['performAct'+'ion'],Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xe11)+_0x4258d1(0x1485)]=function(_0x3e97fa,_0x3a9b1f){const _0xd5628e=_0x4258d1;VisuMZ[_0xd5628e(0x337)][_0xd5628e(0x14a4)+'tleLog_per'+_0xd5628e(0x842)][_0xd5628e(0xb14)](this,_0x3e97fa,_0x3a9b1f),this[_0xd5628e(0x1478)+_0xd5628e(0x98a)]();},VisuMZ['BattleCore']['Window_Bat'+_0x4258d1(0x123b)+_0x4258d1(0x842)+_0x4258d1(0xed6)]=Window_BattleLog['prototype'][_0x4258d1(0xe11)+_0x4258d1(0xb12)],Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xe11)+_0x4258d1(0xb12)]=function(_0x316e95){const _0x4b666e=_0x4258d1;VisuMZ[_0x4b666e(0x337)][_0x4b666e(0x14a4)+'tleLog_per'+_0x4b666e(0x842)+'End'][_0x4b666e(0xb14)](this,_0x316e95);for(const _0x15f0ea of BattleManager[_0x4b666e(0xd9f)+_0x4b666e(0xf63)]()){if(!_0x15f0ea)continue;if(_0x15f0ea[_0x4b666e(0xfce)]())continue;_0x15f0ea['performAct'+_0x4b666e(0x256)+'ers']();}this['callNextMe'+_0x4b666e(0x98a)]();},VisuMZ['BattleCore'][_0x4258d1(0x14a4)+_0x4258d1(0x123b)+_0x4258d1(0x14f2)]=Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x1399)+_0x4258d1(0xdda)],Window_BattleLog['prototype'][_0x4258d1(0x1399)+_0x4258d1(0xdda)]=function(_0x3833dc){const _0x5ae391=_0x4258d1;VisuMZ[_0x5ae391(0x337)][_0x5ae391(0x14a4)+'tleLog_per'+'formDamage'][_0x5ae391(0xb14)](this,_0x3833dc),this['callNextMe'+_0x5ae391(0x98a)]();},VisuMZ[_0x4258d1(0x337)]['Window_Bat'+_0x4258d1(0x123b)+_0x4258d1(0x1025)]=Window_BattleLog[_0x4258d1(0xf38)]['performMis'+'s'],Window_BattleLog['prototype'][_0x4258d1(0x802)+'s']=function(_0x47a5d0){const _0x183502=_0x4258d1;VisuMZ[_0x183502(0x337)][_0x183502(0x14a4)+_0x183502(0x123b)+_0x183502(0x1025)]['call'](this,_0x47a5d0),this[_0x183502(0x1478)+_0x183502(0x98a)]();},VisuMZ[_0x4258d1(0x337)]['Window_Bat'+_0x4258d1(0x123b)+_0x4258d1(0x1297)+'ry']=Window_BattleLog['prototype'][_0x4258d1(0x14dc)+_0x4258d1(0x14c8)],Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x14dc)+'overy']=function(_0x433d75){const _0x49715d=_0x4258d1;VisuMZ[_0x49715d(0x337)][_0x49715d(0x14a4)+_0x49715d(0x123b)+'formRecove'+'ry']['call'](this,_0x433d75),this[_0x49715d(0x1478)+'thod']();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+'tleLog_per'+_0x4258d1(0x43f)+'n']=Window_BattleLog['prototype'][_0x4258d1(0xcc3)+_0x4258d1(0x10ad)],Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xcc3)+_0x4258d1(0x10ad)]=function(_0x3235c8){const _0x580d01=_0x4258d1;VisuMZ[_0x580d01(0x337)][_0x580d01(0x14a4)+'tleLog_per'+'formEvasio'+'n'][_0x580d01(0xb14)](this,_0x3235c8),this[_0x580d01(0x1478)+_0x580d01(0x98a)]();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+_0x4258d1(0x123b)+'formMagicE'+_0x4258d1(0x18a)]=Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x585)+_0x4258d1(0x4b9)],Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x585)+_0x4258d1(0x4b9)]=function(_0x3e349e){const _0x4b9ba8=_0x4258d1;VisuMZ['BattleCore'][_0x4b9ba8(0x14a4)+_0x4b9ba8(0x123b)+_0x4b9ba8(0x840)+_0x4b9ba8(0x18a)]['call'](this,_0x3e349e),this[_0x4b9ba8(0x1478)+_0x4b9ba8(0x98a)]();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+'tleLog_per'+_0x4258d1(0xed0)+'r']=Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x933)+_0x4258d1(0x541)],Window_BattleLog[_0x4258d1(0xf38)]['performCou'+'nter']=function(_0xbcbb77){const _0x2575e5=_0x4258d1;VisuMZ[_0x2575e5(0x337)][_0x2575e5(0x14a4)+_0x2575e5(0x123b)+_0x2575e5(0xed0)+'r']['call'](this,_0xbcbb77),this[_0x2575e5(0x1478)+_0x2575e5(0x98a)]();},VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x14a4)+'tleLog_per'+_0x4258d1(0xdc2)+'tion']=Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x1179)+'lection'],Window_BattleLog['prototype'][_0x4258d1(0x1179)+_0x4258d1(0x1185)]=function(_0x45ab6e){const _0x11dad2=_0x4258d1;VisuMZ['BattleCore'][_0x11dad2(0x14a4)+_0x11dad2(0x123b)+_0x11dad2(0xdc2)+_0x11dad2(0x940)]['call'](this,_0x45ab6e),this[_0x11dad2(0x1478)+_0x11dad2(0x98a)]();},VisuMZ[_0x4258d1(0x337)]['Window_Bat'+_0x4258d1(0x123b)+_0x4258d1(0x35a)+_0x4258d1(0x1618)]=Window_BattleLog['prototype'][_0x4258d1(0x982)+'stitute'],Window_BattleLog['prototype'][_0x4258d1(0x982)+'stitute']=function(_0x565c8e,_0x50947a){const _0x1ef40b=_0x4258d1;VisuMZ[_0x1ef40b(0x337)][_0x1ef40b(0x14a4)+_0x1ef40b(0x123b)+_0x1ef40b(0x35a)+_0x1ef40b(0x1618)][_0x1ef40b(0xb14)](this,_0x565c8e,_0x50947a),this[_0x1ef40b(0x1478)+'thod']();},VisuMZ[_0x4258d1(0x337)]['Window_Bat'+_0x4258d1(0x123b)+_0x4258d1(0x1225)+'se']=Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0xa20)+_0x4258d1(0x131b)],Window_BattleLog['prototype']['performCol'+_0x4258d1(0x131b)]=function(_0x2833af){const _0x1694b9=_0x4258d1;VisuMZ[_0x1694b9(0x337)]['Window_Bat'+_0x1694b9(0x123b)+_0x1694b9(0x1225)+'se'][_0x1694b9(0xb14)](this,_0x2833af),this['callNextMe'+_0x1694b9(0x98a)]();},Window_BattleLog['prototype'][_0x4258d1(0x73c)+'tAnimation']=function(_0x24e07d,_0x3f7660){const _0x5cd31c=_0x4258d1;_0x24e07d[_0x5cd31c(0x73c)+'tAnimation'](_0x3f7660),this[_0x5cd31c(0x1478)+_0x5cd31c(0x98a)]();},Window_BattleLog[_0x4258d1(0xf38)]['showEnemyA'+_0x4258d1(0xf96)+'tion']=function(_0x3d8688,_0x132620){const _0x276b00=_0x4258d1,_0x3bd70d={'CYQoc':function(_0x2d1ad8,_0x42d812){return _0x2d1ad8<=_0x42d812;}},_0x206973=_0x3d8688['attackAnim'+_0x276b00(0x617)]();_0x3bd70d[_0x276b00(0xea0)](_0x206973,-0x2ce+-0x2*0xd8b+0x1de4*0x1)?SoundManager[_0x276b00(0x122c)+_0x276b00(0x870)]():this[_0x276b00(0x1682)+_0x276b00(0x8ce)](_0x132620,_0x206973);},Window_BattleLog['prototype'][_0x4258d1(0xb45)+'tal']=function(_0x373387,_0x32436a,_0x29dca7){const _0x59ea9e=_0x4258d1,_0x702042=[_0x373387]['concat'](_0x32436a);for(const _0x1b5c7f of _0x702042){if(!_0x1b5c7f)continue;_0x1b5c7f[_0x59ea9e(0xe87)+'l'](_0x29dca7);}this['callNextMe'+_0x59ea9e(0x98a)]();},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x1634)]=function(_0x57c628){this['_waitCount']=_0x57c628;},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x759)+'ion']=function(_0x6240ea,_0x465d4a){const _0x4c4c56=_0x4258d1;for(const _0x3a548b of _0x6240ea){if(!_0x3a548b)continue;_0x3a548b[_0x4c4c56(0x759)+_0x4c4c56(0x1485)](_0x465d4a);}this[_0x4c4c56(0x1478)+_0x4c4c56(0x98a)]();},Window_BattleLog[_0x4258d1(0xf38)]['performMov'+_0x4258d1(0x9a3)]=function(_0x5d9a61,_0xf98dba,_0x57cdb3,_0x241f43,_0x474621,_0x376df3){const _0x22519e=_0x4258d1;_0x5d9a61[_0x22519e(0x1155)+'rToPoint'](_0xf98dba,_0x57cdb3,_0x241f43,_0x474621,_0x376df3,-(-0x20b3+-0x5de+-0x1*-0x2692)),this[_0x22519e(0x1478)+_0x22519e(0x98a)]();},Window_BattleLog[_0x4258d1(0xf38)][_0x4258d1(0x156c)+_0x4258d1(0x1d5)]=function(_0x29e3cb,_0x267a05,_0x5ad385,_0x3105c4,_0x453a57,_0x290f23,_0x59562a){const _0x2411c2=_0x4258d1,_0x110e28={'aqCLI':function(_0x34c475,_0x3da634){return _0x34c475>=_0x3da634;},'ALtMi':function(_0x244b04,_0x2fb905){return _0x244b04/_0x2fb905;},'KgpST':function(_0x2f0ede,_0x14252a){return _0x2f0ede+_0x14252a;},'BVQAe':function(_0x2ed32d,_0x225bf5){return _0x2ed32d>=_0x225bf5;},'efdJz':function(_0x205168,_0x303606){return _0x205168/_0x303606;}},_0x21224c=Math['min'](..._0x267a05[_0x2411c2(0x15f9)](_0x39b38d=>_0x39b38d[_0x2411c2(0xc06)]()[_0x2411c2(0x921)]-_0x39b38d[_0x2411c2(0xc06)]()['mainSprite'+_0x2411c2(0x22c)]()/(0x9c7+-0x30b*0x3+0x52*-0x2))),_0xaac856=Math[_0x2411c2(0x503)](..._0x267a05[_0x2411c2(0x15f9)](_0x1204c7=>_0x1204c7[_0x2411c2(0xc06)]()[_0x2411c2(0x921)]+_0x1204c7[_0x2411c2(0xc06)]()[_0x2411c2(0x10f3)+_0x2411c2(0x22c)]()/(-0x5*-0x1b7+-0x5e+-0x833))),_0x537d41=Math['min'](..._0x267a05[_0x2411c2(0x15f9)](_0x59d485=>_0x59d485[_0x2411c2(0xc06)]()[_0x2411c2(0x1085)]-_0x59d485[_0x2411c2(0xc06)]()[_0x2411c2(0x10f3)+_0x2411c2(0x156a)]())),_0x58c506=Math['max'](..._0x267a05[_0x2411c2(0x15f9)](_0x170b51=>_0x170b51[_0x2411c2(0xc06)]()[_0x2411c2(0x1085)])),_0x293ddf=_0x267a05[_0x2411c2(0x7de)](_0x341ee1=>_0x341ee1[_0x2411c2(0x1580)]())[_0x2411c2(0x1645)],_0x43ce62=_0x267a05[_0x2411c2(0x7de)](_0x296682=>_0x296682[_0x2411c2(0xaf5)]())[_0x2411c2(0x1645)];let _0x4a662a=0x37*0x98+-0x16a4+-0xa04,_0x540dd3=-0xd22+0x147a+-0x758;if(_0x5ad385[_0x2411c2(0x79c)](/front/i))_0x4a662a=_0x110e28[_0x2411c2(0x208)](_0x293ddf,_0x43ce62)?_0x21224c:_0xaac856;else{if(_0x5ad385['match'](/middle/i))_0x4a662a=_0x110e28[_0x2411c2(0x1385)](_0x110e28[_0x2411c2(0x537)](_0x21224c,_0xaac856),-0x996*-0x3+0x1b4c*-0x1+0xc*-0x1f),_0x59562a=-(0x50b*0x1+-0xbcf*0x3+0x1e63);else _0x5ad385[_0x2411c2(0x79c)](/back/i)&&(_0x4a662a=_0x110e28[_0x2411c2(0x113c)](_0x293ddf,_0x43ce62)?_0xaac856:_0x21224c);}if(_0x5ad385['match'](/head/i))_0x540dd3=_0x537d41;else{if(_0x5ad385[_0x2411c2(0x79c)](/center/i)){_0x540dd3=_0x110e28[_0x2411c2(0x5ed)](_0x110e28['KgpST'](_0x537d41,_0x58c506),0xdfc+0x1092*-0x1+0x298);if(_0x29e3cb[_0x2411c2(0xc06)]())_0x540dd3+=_0x110e28['efdJz'](_0x29e3cb['battler']()[_0x2411c2(0x1594)],0x33*-0xb+-0x21e2+0x2415);}else _0x5ad385[_0x2411c2(0x79c)](/base/i)&&(_0x540dd3=_0x58c506);}_0x29e3cb[_0x2411c2(0x1155)+'rToPoint'](_0x4a662a,_0x540dd3,_0x3105c4,_0x453a57,_0x290f23,_0x59562a),this[_0x2411c2(0x1478)+'thod']();},Window_BattleLog['prototype'][_0x4258d1(0x815)+'p']=function(_0x1df27f,_0x299921,_0x2af328){const _0x379b60=_0x4258d1;for(const _0x3340c2 of _0x1df27f){if(!_0x3340c2)continue;_0x3340c2[_0x379b60(0xd21)+'r'](_0x299921,_0x2af328);}this[_0x379b60(0x1478)+_0x379b60(0x98a)]();};function Window_BattleMultiTarget(){const _0x1b33cf=_0x4258d1;this[_0x1b33cf(0xca3)](...arguments);}Window_BattleMultiTarget[_0x4258d1(0xf38)]=Object[_0x4258d1(0x100d)](Window_Command[_0x4258d1(0xf38)]),Window_BattleMultiTarget[_0x4258d1(0xf38)]['constructo'+'r']=Window_BattleMultiTarget,VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)][_0x4258d1(0x987)+'t']=VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)][_0x4258d1(0x987)+'t']||{},Window_BattleMultiTarget[_0x4258d1(0x1395)]=VisuMZ[_0x4258d1(0x337)]['Settings'][_0x4258d1(0x987)+'t']['WindowWidt'+'h']??0x1*-0x986+-0xf1*-0x13+0x1*-0x745,Window_BattleMultiTarget[_0x4258d1(0x46e)]=VisuMZ['BattleCore']['Settings'][_0x4258d1(0x987)+'t'][_0x4258d1(0xbbf)]??0x1585+-0xdc+-0x14a7,Window_BattleMultiTarget[_0x4258d1(0xde8)+'N']=VisuMZ[_0x4258d1(0x337)]['Settings'][_0x4258d1(0x987)+'t'][_0x4258d1(0x1104)]??!![],Window_BattleMultiTarget['ALL_ACTORS']=VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)][_0x4258d1(0x987)+'t'][_0x4258d1(0xbc3)+_0x4258d1(0x2ea)]??_0x4258d1(0x1138),Window_BattleMultiTarget['ALL_ENEMIE'+'S']=VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)][_0x4258d1(0x987)+'t']['AllEnemies'+_0x4258d1(0x1271)]??'All\x20Enemie'+'s',Window_BattleMultiTarget[_0x4258d1(0xcaa)+_0x4258d1(0xcfa)]=VisuMZ['BattleCore'][_0x4258d1(0x424)][_0x4258d1(0x987)+'t'][_0x4258d1(0x24d)+'tX']??-0x3*-0x3d6+0x1f5d+-0x2adf,Window_BattleMultiTarget[_0x4258d1(0xcaa)+'ET_Y']=VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)]['MultiTarge'+'t'][_0x4258d1(0x24d)+'tY']??-0x25f3+0x1*0x1b0f+0xae4,Window_BattleMultiTarget[_0x4258d1(0x988)+_0x4258d1(0xcfa)]=VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)][_0x4258d1(0x987)+'t'][_0x4258d1(0x16a8)+'tX']??-0x26b1+0x1694*-0x1+0x3d45,Window_BattleMultiTarget[_0x4258d1(0x988)+_0x4258d1(0xc1b)]=VisuMZ['BattleCore']['Settings'][_0x4258d1(0x987)+'t'][_0x4258d1(0x16a8)+'tY']??0x1*-0xf75+0x1016+-0xa1,Window_BattleMultiTarget[_0x4258d1(0xf38)][_0x4258d1(0xca3)]=function(_0x3247be,_0x14448d){const _0x2edf1d=_0x4258d1,_0x521d72={'GGQkO':'4|5|0|2|1|'+'3'},_0x278c4c=_0x521d72[_0x2edf1d(0x10fd)][_0x2edf1d(0xba9)]('|');let _0x51b83e=0x8df+-0x2549*0x1+0x1c6a;while(!![]){switch(_0x278c4c[_0x51b83e++]){case'0':this[_0x2edf1d(0x8b4)+_0x2edf1d(0x107f)](Window_BattleMultiTarget['BG_TYPE']);continue;case'1':this['hide']();continue;case'2':this['deactivate']();continue;case'3':this[_0x2edf1d(0x100a)]();continue;case'4':this[_0x2edf1d(0x918)]=_0x14448d;continue;case'5':Window_Command[_0x2edf1d(0xf38)][_0x2edf1d(0xca3)]['call'](this,_0x3247be);continue;}break;}},Window_BattleMultiTarget[_0x4258d1(0xf38)]['forActor']=function(){return this['_forActor'];},Window_BattleMultiTarget[_0x4258d1(0xf38)][_0x4258d1(0xf43)+_0x4258d1(0xf5a)]=function(){const _0x39a3c0=_0x4258d1,_0x12703e={'SvKfJ':_0x39a3c0(0x1643),'CniDe':'pageup','UUchC':_0x39a3c0(0xb38)};let _0x41958d=this[_0x39a3c0(0x1513)]()?Window_BattleMultiTarget[_0x39a3c0(0xc17)]:Window_BattleMultiTarget['ALL_ENEMIE'+'S'];if(Imported['VisuMZ_0_C'+_0x39a3c0(0x138e)]&&Window_BattleMultiTarget[_0x39a3c0(0xde8)+'N']){this[_0x39a3c0(0x4dc)]=this[_0x39a3c0(0x1513)]()?_0x12703e[_0x39a3c0(0x14af)]:_0x12703e[_0x39a3c0(0xbb3)],this[_0x39a3c0(0xf37)+'t']=TextManager['getInputBu'+'ttonString'](this['_buttonKey']);const _0x28cf00=VisuMZ['CoreEngine'][_0x39a3c0(0x424)][_0x39a3c0(0x1a4)+'st'][_0x39a3c0(0xe1e)];_0x41958d=_0x28cf00[_0x39a3c0(0xf22)](this[_0x39a3c0(0xf37)+'t'],_0x41958d);}this['addCommand'](_0x41958d,_0x12703e[_0x39a3c0(0x1fa)]);},Window_BattleMultiTarget[_0x4258d1(0xf38)]['drawItem']=function(_0x32e3fc){const _0x4e2089=_0x4258d1,_0x27451d={'jvoSK':function(_0x5942b5,_0x7b6d2e){return _0x5942b5+_0x7b6d2e;},'rQPur':function(_0x161ae9,_0x568952){return _0x161ae9/_0x568952;},'UxuXi':function(_0x4e60e0,_0x2142e7){return _0x4e60e0-_0x2142e7;}},_0x284b6b=this[_0x4e2089(0x139e)+'ct'](_0x32e3fc);this[_0x4e2089(0x8c1)+_0x4e2089(0xf3d)](),this[_0x4e2089(0x5df)+_0x4e2089(0x205)](this['isCommandE'+_0x4e2089(0x161c)](_0x32e3fc));const _0x4caa46=this[_0x4e2089(0x11c6)+'e'](_0x32e3fc),_0x3997b4=this[_0x4e2089(0xe7c)](_0x4caa46)['width'],_0x5ac974=_0x27451d['jvoSK'](_0x284b6b['x'],Math['floor'](_0x27451d[_0x4e2089(0x964)](_0x27451d[_0x4e2089(0x776)](_0x284b6b[_0x4e2089(0xc2a)],_0x3997b4),-0x1*-0xe8f+0x7*0x3ff+-0x2a86)));this['drawTextEx'](_0x4caa46,_0x5ac974,_0x284b6b['y'],_0x284b6b['width']);},Window_BattleMultiTarget[_0x4258d1(0xf38)]['update']=function(){const _0x261ca2=_0x4258d1;Window_Command[_0x261ca2(0xf38)]['update'][_0x261ca2(0xb14)](this),this['updateVisi'+_0x261ca2(0x11ea)](),this[_0x261ca2(0x16b4)+'oardKeys']();},Window_BattleMultiTarget[_0x4258d1(0xf38)]['updateVisi'+_0x4258d1(0x11ea)]=function(){const _0x42f6f1=_0x4258d1;this[_0x42f6f1(0x13af)]=this[_0x42f6f1(0x6de)+_0x42f6f1(0xe3b)]();},Window_BattleMultiTarget[_0x4258d1(0xf38)][_0x4258d1(0x6de)+_0x4258d1(0xe3b)]=function(){const _0x3baa94=_0x4258d1,_0x1ae23f=BattleManager[_0x3baa94(0x1420)+_0x3baa94(0x333)](),_0x19baed=_0x1ae23f&&_0x1ae23f[_0x3baa94(0x395)+_0x3baa94(0x113b)+_0x3baa94(0x5c8)]();if(!_0x19baed)return![];const _0xe8cc2d=SceneManager['_scene'];if(this[_0x3baa94(0x1513)]()){if(_0xe8cc2d[_0x3baa94(0x977)+'ow'][_0x3baa94(0xc19)]&&_0xe8cc2d[_0x3baa94(0x977)+'ow']['_handlers'][_0x3baa94(0x1643)])return!![];if(_0xe8cc2d['_enemyWind'+'ow'][_0x3baa94(0xc19)]&&_0xe8cc2d['_enemyWind'+'ow'][_0x3baa94(0x1447)][_0x3baa94(0x1643)])return!![];}else{if(_0xe8cc2d[_0x3baa94(0x1684)+'ow'][_0x3baa94(0xc19)]&&_0xe8cc2d[_0x3baa94(0x1684)+'ow'][_0x3baa94(0x1447)][_0x3baa94(0x9c4)])return!![];}return![];},Window_BattleMultiTarget[_0x4258d1(0xf38)][_0x4258d1(0x16b4)+'oardKeys']=function(){const _0x3c0dd3=_0x4258d1,_0x455ffa={'ttely':function(_0x2110de,_0x35c154){return _0x2110de!==_0x35c154;}};if(!Imported[_0x3c0dd3(0x7d7)+_0x3c0dd3(0x138e)])return;_0x455ffa[_0x3c0dd3(0x67d)](this['_buttonTex'+'t'],TextManager['getInputBu'+_0x3c0dd3(0xe8f)](this[_0x3c0dd3(0x4dc)]))&&this['refresh']();},Window_BattleMultiTarget[_0x4258d1(0xf38)][_0x4258d1(0x1611)+'ch']=function(){const _0xc7230e=_0x4258d1,_0x2e5e36={'wEcFi':function(_0x18ecef,_0x504627){return _0x18ecef>=_0x504627;},'BSoAP':_0xc7230e(0x1643),'RopeC':_0xc7230e(0x9c4)};if(this[_0xc7230e(0x13af)]&&TouchInput[_0xc7230e(0x159e)]()){const _0x7ab0cd=this['hitIndex']();if(_0x2e5e36[_0xc7230e(0x1097)](_0x7ab0cd,-0x15b*-0x1+0x1*-0x10d7+0xf7c)){const _0x295462=this[_0xc7230e(0x1513)]()?_0x2e5e36['BSoAP']:_0x2e5e36[_0xc7230e(0x119f)];Input[_0xc7230e(0x1178)+'ck'](_0x295462);}}};function Window_DamageCounter(){const _0x50f56e=_0x4258d1;this[_0x50f56e(0xca3)](...arguments);}Window_DamageCounter[_0x4258d1(0xf38)]=Object[_0x4258d1(0x100d)](Window_Base[_0x4258d1(0xf38)]),Window_DamageCounter[_0x4258d1(0xf38)]['constructo'+'r']=Window_DamageCounter,Window_DamageCounter[_0x4258d1(0x11c3)]={'enabled':VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)]['ComboWindo'+'w']['Enable']??!![],'customFontFace':VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)][_0x4258d1(0xd23)+'w']['CustomFont'+_0x4258d1(0x2f6)]??'','textAlign':VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)]['ComboWindo'+'w'][_0x4258d1(0x49c)]??_0x4258d1(0x149b),'hitsDmgFmt':VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)][_0x4258d1(0xd23)+'w']['hitsDmgFmt']??_0x4258d1(0x437)+_0x4258d1(0xe09)+'ombo\x5c{','hitsHealFmt':VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)][_0x4258d1(0xd23)+'w'][_0x4258d1(0x50d)+'t']??'\x5cC[6]%1\x5c}\x20'+'\x5cC[4]Heal\x20'+_0x4258d1(0x2d5),'totalDmgFmt':VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)]['ComboWindo'+'w'][_0x4258d1(0xb96)+'t']??'\x5c}\x5cC[21]To'+_0x4258d1(0x675)+':\x20\x5c{\x5cC[0]%'+'1','totalHealFmt':VisuMZ['BattleCore'][_0x4258d1(0x424)][_0x4258d1(0xd23)+'w']['totalHealF'+'mt']??_0x4258d1(0xaaf)+_0x4258d1(0x1c1)+'g:\x20\x5c{\x5cC[24'+_0x4258d1(0xec1),'fadeShiftX':VisuMZ['BattleCore'][_0x4258d1(0x424)][_0x4258d1(0xd23)+'w']['fadeShiftX']??-(-0x48d*-0x5+0x2*-0x247+0x1*-0x1231),'fadeShiftY':VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)][_0x4258d1(0xd23)+'w']['fadeShiftY']??-0x5e7*-0x3+-0x2216+0x1*0x1061,'positionOffsetX':VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)][_0x4258d1(0xd23)+'w'][_0x4258d1(0x82f)]??0x14f6+-0x2559*-0x1+0x17*-0x289,'positionOffsetY':VisuMZ['BattleCore'][_0x4258d1(0x424)][_0x4258d1(0xd23)+'w'][_0x4258d1(0x3ad)]??-0x87d+0xa*0x39e+-0x13*0x175,'updateDuration':VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)][_0x4258d1(0xd23)+'w'][_0x4258d1(0x9b6)+_0x4258d1(0x940)]??0x1*0x26d3+-0x1*-0x11f5+-0x38b4,'minimumStayDuration':VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)]['ComboWindo'+'w'][_0x4258d1(0x989)+_0x4258d1(0xdc5)]??-0x5e4+0x1044+-0xa38,'minimumHits':VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)]['ComboWindo'+'w'][_0x4258d1(0x16a9)+'s']??-0x1156+0x2326+-0x11cf,'opacitySpeed':VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x424)]['ComboWindo'+'w']['opacitySpe'+'ed']??0x216d*-0x1+0x3*-0x6a2+0x3563},Window_DamageCounter['prototype'][_0x4258d1(0xca3)]=function(_0x229b0c){const _0x5f031c=_0x4258d1,_0x327d7f={'dxLUR':_0x5f031c(0xd7d)+'5'},_0x5070d9=_0x327d7f['dxLUR'][_0x5f031c(0xba9)]('|');let _0x530572=-0x2*0x1015+-0x15c5*-0x1+-0x3*-0x377;while(!![]){switch(_0x5070d9[_0x530572++]){case'0':this[_0x5f031c(0x10b3)+_0x5f031c(0x737)]=-0xbf6+-0xc4+0xcba;continue;case'1':this[_0x5f031c(0xa18)]=_0x229b0c['x'];continue;case'2':Window_Base[_0x5f031c(0xf38)]['initialize'][_0x5f031c(0xb14)](this,_0x229b0c);continue;case'3':this['resetCount'+'er']();continue;case'4':this[_0x5f031c(0x193)]=_0x229b0c['y'];continue;case'5':this[_0x5f031c(0x8b4)+_0x5f031c(0x107f)](-0x9b1+-0x1a93+0x1223*0x2);continue;}break;}},Window_DamageCounter[_0x4258d1(0xf38)]['resetCount'+'er']=function(){const _0x37f328=_0x4258d1,_0x57798c={'XFFTw':_0x37f328(0x1366)},_0x17e653=_0x57798c['XFFTw']['split']('|');let _0x36013c=0x1493+-0x10f+-0x1384;while(!![]){switch(_0x17e653[_0x36013c++]){case'0':this[_0x37f328(0x1371)+'s']=-0x60e+-0x747+-0x1*-0xd55;continue;case'1':this[_0x37f328(0x249)]=-0x1f6e*-0x1+-0x1*-0x6fd+-0x119*0x23;continue;case'2':this[_0x37f328(0x7d5)+'ge']=-0x2*-0x2e1+-0x1166+0xba4;continue;case'3':this[_0x37f328(0x26c)+_0x37f328(0xdda)]=-0x1ecc+-0x1*0x147+-0x1e3*-0x11;continue;case'4':this['_updateDur'+'ation']=-0xf1*-0x1d+0xb*-0x199+0x9ba*-0x1;continue;}break;}},Window_DamageCounter[_0x4258d1(0xf38)]['resetFontS'+_0x4258d1(0x5f7)]=function(){const _0x4491d1=_0x4258d1;Window_Base[_0x4491d1(0xf38)]['resetFontS'+'ettings'][_0x4491d1(0xb14)](this);const _0x1379fd=Window_DamageCounter[_0x4491d1(0x11c3)];_0x1379fd[_0x4491d1(0xe8a)+_0x4491d1(0x2f6)]?this[_0x4491d1(0x14d2)][_0x4491d1(0xae3)]=_0x1379fd['customFont'+_0x4491d1(0x2f6)]:this[_0x4491d1(0x14d2)][_0x4491d1(0xae3)]=$gameSystem[_0x4491d1(0x15df)+_0x4491d1(0x2f6)]();};var $comboWindowReset=function(){const _0x26da4d=_0x4258d1;if(!SceneManager['isSceneBat'+'tle']())return;const _0x3ee64b=SceneManager[_0x26da4d(0x14b3)][_0x26da4d(0xa8c)+'nterWindow'];if(_0x3ee64b)_0x3ee64b[_0x26da4d(0x1257)+'er']();};Window_DamageCounter[_0x4258d1(0xf38)][_0x4258d1(0xbcc)+'ts']=function(_0x2b0e0){const _0x167ec8=_0x4258d1,_0x1460ac={'yeQLk':function(_0x444bad,_0x5410c6){return _0x444bad>=_0x5410c6;}};this[_0x167ec8(0x1371)+'s']+=Math[_0x167ec8(0xdea)](_0x2b0e0);const _0x5e4bb7=Window_DamageCounter['SETTINGS'];this['_updateDur'+_0x167ec8(0xf2b)]=_0x5e4bb7[_0x167ec8(0x9b6)+_0x167ec8(0x940)],_0x1460ac[_0x167ec8(0xccb)](this['_targetHit'+'s'],_0x5e4bb7[_0x167ec8(0x16a9)+'s'])&&(this[_0x167ec8(0x10b3)+_0x167ec8(0x737)]=_0x5e4bb7['minimumSta'+_0x167ec8(0xdc5)]);};var $comboWindowIncreaseHits=function(_0x2e174f){const _0x38f828=_0x4258d1;if(!SceneManager['isSceneBat'+_0x38f828(0x6e5)]())return;const _0x5dd76d=SceneManager['_scene'][_0x38f828(0xa8c)+_0x38f828(0x15d0)];if(_0x5dd76d)_0x5dd76d['increaseHi'+'ts'](_0x2e174f);};Window_DamageCounter['prototype'][_0x4258d1(0x357)+_0x4258d1(0x4e4)]=function(_0x307c4b){const _0x27823b=_0x4258d1,_0x5bfc8b={'BkBcH':function(_0xa01529,_0x2d69c9){return _0xa01529>=_0x2d69c9;}};this[_0x27823b(0x26c)+_0x27823b(0xdda)]+=Math[_0x27823b(0xdea)](_0x307c4b);const _0x37c26b=Window_DamageCounter[_0x27823b(0x11c3)];this['_updateDur'+_0x27823b(0xf2b)]=_0x37c26b[_0x27823b(0x9b6)+_0x27823b(0x940)],_0x5bfc8b[_0x27823b(0xa33)](this['_targetHit'+'s'],_0x37c26b['minimumHit'+'s'])&&(this['_visibleDu'+_0x27823b(0x737)]=_0x37c26b[_0x27823b(0x989)+_0x27823b(0xdc5)]);};var $comboWindowIncreaseDamage=function(_0x4c3d5d){const _0x1986af=_0x4258d1;if(!SceneManager[_0x1986af(0x614)+_0x1986af(0x6e5)]())return;const _0x296bfa=SceneManager['_scene'][_0x1986af(0xa8c)+_0x1986af(0x15d0)];if(_0x296bfa)_0x296bfa[_0x1986af(0x357)+_0x1986af(0x4e4)](_0x4c3d5d);},$comboWindowIncreaseHealing=function(_0xbdf9c0){const _0x2e8c79=_0x4258d1;if(!SceneManager[_0x2e8c79(0x614)+_0x2e8c79(0x6e5)]())return;const _0x218fb5=SceneManager[_0x2e8c79(0x14b3)][_0x2e8c79(0xa8c)+_0x2e8c79(0x15d0)];if(_0x218fb5)_0x218fb5[_0x2e8c79(0x357)+_0x2e8c79(0x4e4)](-_0xbdf9c0);};VisuMZ[_0x4258d1(0x337)][_0x4258d1(0x1547)+_0x4258d1(0xc91)+'llWindows_'+_0x4258d1(0xd23)+'w']=Scene_Battle[_0x4258d1(0xf38)]['createAllW'+'indows'],Scene_Battle['prototype'][_0x4258d1(0x18b)+_0x4258d1(0x3e0)]=function(){const _0x57be2b=_0x4258d1;this[_0x57be2b(0x96c)+_0x57be2b(0x835)+_0x57be2b(0xd18)](),VisuMZ['BattleCore'][_0x57be2b(0x1547)+_0x57be2b(0xc91)+_0x57be2b(0x6f8)+_0x57be2b(0xd23)+'w'][_0x57be2b(0xb14)](this);},Scene_Battle['prototype']['createDama'+_0x4258d1(0x835)+'indow']=function(){const _0x911ce5=_0x4258d1;if(!Window_DamageCounter['SETTINGS'][_0x911ce5(0x111d)])return;const _0xc3d13b=this[_0x911ce5(0x10f0)+'terWindowR'+_0x911ce5(0x72f)](),_0xba0055=new Window_DamageCounter(_0xc3d13b);this[_0x911ce5(0x534)](_0xba0055),this[_0x911ce5(0xa8c)+_0x911ce5(0x15d0)]=_0xba0055;},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x10f0)+_0x4258d1(0x93b)+_0x4258d1(0x72f)]=function(){const _0x3309ed=_0x4258d1,_0x59344d={'edAKD':function(_0x345745,_0x1ca06c){return _0x345745/_0x1ca06c;},'vmAnh':function(_0x4ee989,_0x5d9e48){return _0x4ee989+_0x5d9e48;},'ZzMvf':function(_0x250c2,_0xd450f){return _0x250c2+_0xd450f;},'IHcJt':function(_0x3f4f73,_0x1d942c){return _0x3f4f73/_0x1d942c;},'wcaec':function(_0x1b82f6,_0x2f5580){return _0x1b82f6*_0x2f5580;}};if(VisuMZ[_0x3309ed(0x337)][_0x3309ed(0x424)][_0x3309ed(0xd23)+'w'][_0x3309ed(0xd23)+'w_RectJS'])return VisuMZ[_0x3309ed(0x337)][_0x3309ed(0x424)][_0x3309ed(0xd23)+'w'][_0x3309ed(0xd23)+'w_RectJS'][_0x3309ed(0xb14)](this);const _0xd1fae3=Math[_0x3309ed(0x438)](_0x59344d[_0x3309ed(0x778)](Graphics['width'],-0x2e7*0x1+-0x1dcc+0x20b7)),_0x1f5e37=this['calcWindow'+_0x3309ed(0x156a)](0x309*0x1+-0x117e*0x2+0x9*0x38d,!![]),_0x33afb1=_0x59344d[_0x3309ed(0x40e)](0x1c*0x13f+0xdc1+-0x30a5,this[_0x3309ed(0x120c)+'wOffsetX']()),_0x2b2d75=_0x59344d[_0x3309ed(0xd5b)](Math[_0x3309ed(0xdea)](_0x59344d[_0x3309ed(0x6c7)](_0x59344d[_0x3309ed(0xad4)](Graphics['boxHeight'],0x341*-0x9+0x15*0xb5+0xe71),0x1*-0xa33+-0x25e3+0x3019)),this['comboWindo'+_0x3309ed(0x978)]());return new Rectangle(_0x33afb1,_0x2b2d75,_0xd1fae3,_0x1f5e37);},Scene_Battle[_0x4258d1(0xf38)]['comboWindo'+'wOffsetX']=function(){const _0x2b171c=_0x4258d1;return Window_DamageCounter[_0x2b171c(0x11c3)]['positionOf'+_0x2b171c(0x5e5)];},Scene_Battle[_0x4258d1(0xf38)][_0x4258d1(0x120c)+_0x4258d1(0x978)]=function(){const _0x37a5a0=_0x4258d1;return Window_DamageCounter['SETTINGS'][_0x37a5a0(0x752)+'fsetY'];},Window_DamageCounter[_0x4258d1(0xf38)]['update']=function(){const _0x3c3e92=_0x4258d1;Window_Base['prototype']['update'][_0x3c3e92(0xb14)](this),this[_0x3c3e92(0x1218)+_0x3c3e92(0x1312)](),this[_0x3c3e92(0x342)+_0x3c3e92(0x100b)]();},Window_DamageCounter[_0x4258d1(0xf38)][_0x4258d1(0x1218)+_0x4258d1(0x1312)]=function(){const _0x2cfde1=_0x4258d1,_0x425cc3={'rtmfS':function(_0x216864,_0x1f238b){return _0x216864<=_0x1f238b;},'YQDHN':function(_0x3deb29,_0x3c1975){return _0x3deb29/_0x3c1975;},'jdsyy':function(_0x3aafd1,_0x4ef3c7){return _0x3aafd1+_0x4ef3c7;},'clnJh':function(_0x257a1d,_0x3e890f){return _0x257a1d*_0x3e890f;},'HesNV':function(_0x12e5d2,_0x28fb1d){return _0x12e5d2-_0x28fb1d;}};if(_0x425cc3[_0x2cfde1(0x370)](this[_0x2cfde1(0x1109)+'ation'],0x1b6+0xdb*-0x22+0x1b60))return;const _0xae5d7=this[_0x2cfde1(0x1109)+_0x2cfde1(0xf2b)];this[_0x2cfde1(0x249)]=this[_0x2cfde1(0x1371)+'s'],this[_0x2cfde1(0x7d5)+'ge']=_0x425cc3[_0x2cfde1(0x101e)](_0x425cc3[_0x2cfde1(0x11db)](_0x425cc3[_0x2cfde1(0x11a0)](this[_0x2cfde1(0x7d5)+'ge'],_0x425cc3[_0x2cfde1(0x128f)](_0xae5d7,-0x1*-0x368+-0x23f0+0x2089)),this[_0x2cfde1(0x26c)+'age']),_0xae5d7),this[_0x2cfde1(0x1109)+_0x2cfde1(0xf2b)]--,_0x425cc3[_0x2cfde1(0x370)](this[_0x2cfde1(0x1109)+_0x2cfde1(0xf2b)],-0x1*0xf59+0x2609+-0x16b0)&&(this[_0x2cfde1(0x249)]=this[_0x2cfde1(0x1371)+'s'],this[_0x2cfde1(0x7d5)+'ge']=this['_targetDam'+_0x2cfde1(0xdda)]),this['refresh']();},Window_DamageCounter['prototype'][_0x4258d1(0x342)+_0x4258d1(0x100b)]=function(){const _0xa136ab=_0x4258d1,_0x45c814={'yTOWv':function(_0x13809a,_0xce515c){return _0x13809a<_0xce515c;},'wjYgF':function(_0x3ac6a8,_0x5cdfb6){return _0x3ac6a8>_0x5cdfb6;}},_0x420bdc=Window_DamageCounter[_0xa136ab(0x11c3)],_0x5e890b=this[_0xa136ab(0x6de)+_0xa136ab(0xe3b)](),_0x20110d=_0x420bdc['opacitySpe'+'ed']||0x6e1+0x3*-0x9a3+-0x1609*-0x1;if(_0x5e890b&&_0x45c814['yTOWv'](this['contentsOp'+_0xa136ab(0x10ba)],-0x872*0x2+-0x1*0x156d+0x2750))this[_0xa136ab(0x6da)+_0xa136ab(0x10ba)]+=_0x20110d;else!_0x5e890b&&_0x45c814[_0xa136ab(0x79a)](this[_0xa136ab(0x6da)+'acity'],-0x14cc+0x147e+0x4e)&&(this[_0xa136ab(0x6da)+_0xa136ab(0x10ba)]-=_0x20110d,this['x']+=_0x420bdc['fadeShiftX']||0x15c2+-0x1b*-0x41+-0x19*0x125,this['y']+=_0x420bdc['fadeShiftY']||-0x7be*-0x4+-0x15*-0x1+0x1*-0x1f0d);},Window_DamageCounter['prototype'][_0x4258d1(0x6de)+_0x4258d1(0xe3b)]=function(){const _0x4a35e8=_0x4258d1,_0x5cc93b={'rnoyw':function(_0xe3cc46,_0x3632bf){return _0xe3cc46>=_0x3632bf;},'ZZVRd':function(_0x30fb4c,_0x3561fa){return _0x30fb4c>_0x3561fa;}},_0x450416=Window_DamageCounter[_0x4a35e8(0x11c3)];if(_0x5cc93b[_0x4a35e8(0xb8e)](this[_0x4a35e8(0x1371)+'s'],_0x450416[_0x4a35e8(0x16a9)+'s']))return!![];if(_0x5cc93b[_0x4a35e8(0x841)](this['_visibleDu'+_0x4a35e8(0x737)]--,-0x13de+-0xfdf+0x23bd))return!![];return![];},VisuMZ['BattleCore'][_0x4258d1(0xbb8)+'n_executeH'+_0x4258d1(0xbcf)+_0x4258d1(0xceb)]=Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x13f0)+_0x4258d1(0xd5f)],Game_Action[_0x4258d1(0xf38)][_0x4258d1(0x13f0)+'amage']=function(_0x47a473,_0x253efa){const _0x51249c=_0x4258d1,_0x472bf0={'hBXTm':function(_0xb3bf80,_0x1e136b){return _0xb3bf80(_0x1e136b);},'rLczP':function(_0x27efc7,_0x4f6781){return _0x27efc7(_0x4f6781);}};_0x472bf0[_0x51249c(0x3aa)]($comboWindowIncreaseHits,-0xc70+-0x4fe+0x116f),_0x472bf0[_0x51249c(0x12dd)]($comboWindowIncreaseDamage,_0x253efa),VisuMZ[_0x51249c(0x337)][_0x51249c(0xbb8)+_0x51249c(0x1347)+_0x51249c(0xbcf)+_0x51249c(0xceb)][_0x51249c(0xb14)](this,_0x47a473,_0x253efa);},VisuMZ[_0x4258d1(0x337)]['BattleMana'+'ger_endAct'+_0x4258d1(0x1163)+_0x4258d1(0xd18)]=BattleManager[_0x4258d1(0xb97)],BattleManager[_0x4258d1(0xb97)]=function(){const _0x19b38e=_0x4258d1,_0x530e14={'dxjaV':function(_0x337c34){return _0x337c34();}};_0x530e14[_0x19b38e(0x779)]($comboWindowReset),VisuMZ['BattleCore'][_0x19b38e(0xbf2)+_0x19b38e(0x1412)+_0x19b38e(0x1163)+'indow'][_0x19b38e(0xb14)](this);},Window_DamageCounter[_0x4258d1(0xf38)][_0x4258d1(0x164d)]=function(){const _0x197960=_0x4258d1;this[_0x197960(0x14d2)]['clear'](),this['drawComboT'+_0x197960(0x2ea)](),this['x']=this[_0x197960(0xa18)],this['y']=this[_0x197960(0x193)];},Window_DamageCounter[_0x4258d1(0xf38)][_0x4258d1(0x1003)+_0x4258d1(0x523)]=function(){const _0x25d396=_0x4258d1,_0x1e1464={'UWmkT':_0x25d396(0x149b)},_0x340c73=Window_DamageCounter[_0x25d396(0x11c3)];return _0x340c73[_0x25d396(0x11a5)]||_0x1e1464[_0x25d396(0x220)];},Window_DamageCounter[_0x4258d1(0xf38)][_0x4258d1(0x1180)]=function(){const _0x38b274=_0x4258d1,_0x6a501={'uqFEl':function(_0x5595a8,_0x43aa69){return _0x5595a8>=_0x43aa69;}},_0x4b5640=Window_DamageCounter[_0x38b274(0x11c3)];let _0x172027=_0x6a501['uqFEl'](this[_0x38b274(0x7d5)+'ge'],-0x25c0+0x1*0x1da9+0x817)?_0x4b5640[_0x38b274(0x8a8)]:_0x4b5640[_0x38b274(0x50d)+'t'];return _0x172027[_0x38b274(0xf22)](Math[_0x38b274(0x1560)](Math[_0x38b274(0x438)](this[_0x38b274(0x249)])));},Window_DamageCounter[_0x4258d1(0xf38)][_0x4258d1(0x9a2)]=function(){const _0x5e691d=_0x4258d1,_0x53775e={'ZBlEQ':function(_0x47f101,_0x11935a){return _0x47f101>=_0x11935a;}},_0x2c3a2a=Window_DamageCounter['SETTINGS'];let _0x5ab5c2=_0x53775e[_0x5e691d(0x1452)](this[_0x5e691d(0x7d5)+'ge'],0x11*0x17f+-0x2351+0x16*0x73)?_0x2c3a2a[_0x5e691d(0xb96)+'t']:_0x2c3a2a[_0x5e691d(0x9de)+'mt'];return _0x5ab5c2[_0x5e691d(0xf22)](Math['abs'](Math[_0x5e691d(0xdea)](this[_0x5e691d(0x7d5)+'ge'])));},Window_DamageCounter[_0x4258d1(0xf38)][_0x4258d1(0xee0)+_0x4258d1(0x2ea)]=function(){const _0xdb2e64=_0x4258d1,_0x849d82={'NYHNP':function(_0x45b088,_0x44e206){return _0x45b088===_0x44e206;},'yHhRb':_0xdb2e64(0xe5e),'WfhUw':function(_0x3075e8,_0x48763b){return _0x3075e8-_0x48763b;},'UxxqI':function(_0x595179,_0x204cdb){return _0x595179-_0x204cdb;},'RffeY':_0xdb2e64(0x450),'cfIVH':function(_0x5676e4,_0xb2f406){return _0x5676e4/_0xb2f406;},'pGUsZ':function(_0x2691a8,_0x593b9f){return _0x2691a8*_0x593b9f;},'SSPfZ':function(_0x13e1d5,_0x380086){return _0x13e1d5===_0x380086;},'epsqa':function(_0x460eb2,_0x3e4ebc){return _0x460eb2-_0x3e4ebc;}};if(VisuMZ[_0xdb2e64(0x337)][_0xdb2e64(0x424)][_0xdb2e64(0xd23)+'w'][_0xdb2e64(0xd23)+_0xdb2e64(0x924)])return VisuMZ[_0xdb2e64(0x337)]['Settings'][_0xdb2e64(0xd23)+'w'][_0xdb2e64(0xd23)+_0xdb2e64(0x924)][_0xdb2e64(0xb14)](this);let _0x231fd0=0x5e*0x4b+0x223f+-0x3dc9,_0x2d5d8c=0x59*0x4f+-0x348+-0x182f;const _0x187422=this[_0xdb2e64(0x1180)](),_0x3ba273=this['textSizeEx'](_0x187422);if(_0x849d82[_0xdb2e64(0x11b2)](this[_0xdb2e64(0x1003)+_0xdb2e64(0x523)](),_0x849d82[_0xdb2e64(0x6fb)]))_0x231fd0=_0x849d82[_0xdb2e64(0xd69)](_0x849d82[_0xdb2e64(0x3b6)](this[_0xdb2e64(0x51d)],this['itemPaddin'+'g']()),_0x3ba273[_0xdb2e64(0xc2a)]);else _0x849d82['NYHNP'](this['textAlignm'+'ent'](),_0x849d82['RffeY'])?_0x231fd0=Math['floor'](_0x849d82[_0xdb2e64(0x26f)](_0x849d82[_0xdb2e64(0x3b6)](this[_0xdb2e64(0x51d)],_0x3ba273['width']),0x5*-0x3cd+-0x456*-0x6+-0x701)):_0x231fd0=this[_0xdb2e64(0x403)+'g']();this[_0xdb2e64(0xd7a)](_0x187422,_0x231fd0,_0x2d5d8c),_0x2d5d8c+=Math[_0xdb2e64(0x438)](_0x849d82[_0xdb2e64(0x26f)](_0x849d82[_0xdb2e64(0x755)](this[_0xdb2e64(0xbc7)](),-0x2352+-0x275+-0x11*-0x239),0x24c3+-0x3f*-0x43+-0x353d));const _0x1530ff=this[_0xdb2e64(0x9a2)](),_0x31dc8f=this['textSizeEx'](_0x1530ff);if(_0x849d82[_0xdb2e64(0x11b2)](this[_0xdb2e64(0x1003)+_0xdb2e64(0x523)](),_0x849d82[_0xdb2e64(0x6fb)]))_0x231fd0=_0x849d82[_0xdb2e64(0xd69)](_0x849d82[_0xdb2e64(0x3b6)](this[_0xdb2e64(0x51d)],this[_0xdb2e64(0x403)+'g']()),_0x31dc8f['width']);else _0x849d82['SSPfZ'](this[_0xdb2e64(0x1003)+'ent'](),_0x849d82['RffeY'])?_0x231fd0=Math[_0xdb2e64(0x76f)](_0x849d82[_0xdb2e64(0x26f)](_0x849d82[_0xdb2e64(0x11be)](this[_0xdb2e64(0x51d)],_0x31dc8f['width']),0xbe9+-0x331*0x5+0x15a*0x3)):_0x231fd0=this[_0xdb2e64(0x403)+'g']();this[_0xdb2e64(0xd7a)](_0x1530ff,_0x231fd0,_0x2d5d8c);};